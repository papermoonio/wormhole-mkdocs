{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"ai-resources/ai-resources/","title":"AI Resources","text":"<p>Wormhole provides <code>.txt</code> files containing the documentation content and navigation structure, optimized for use with large language models (LLMs) and AI tools. These resources help build AI assistants, power code search, or enable custom tooling trained on Wormhole\u2019s docs.</p> <p>Each category file includes foundational content from the Basics and Reference categories to ensure LLMs have the necessary context.</p>"},{"location":"ai-resources/ai-resources/#download-llm-files","title":"Download LLM Files","text":"Category Description File Actions Index Navigation index of all Wormhole documentation pages. <code>llms.txt</code> Full Documentation Full content of all documentation pages. <code>llms-full.txt</code> Basics Wormhole's architecture, security, and core components to help understand how the protocol works. <code>llms-basics.txt</code> Reference Reference details such as chain IDs, contract addresses, and finality levels. <code>llms-reference.txt</code> Transfer Comprehensive documentation for Wormhole transfer products. <code>llms-transfer.txt</code> NTT All NTT docs, including architecture, deployment guides, CLI usage, and configuration for EVM and Solana. <code>llms-ntt.txt</code> Connect Setup, features, and configuration details for integrating the Connect widget into your dApp. <code>llms-connect.txt</code> WTT Architecture overview, transfer flows, and smart contract methods for cross-chain token transfers using WTT. <code>llms-wtt.txt</code> Settlement Architecture, integration guides, and setup instructions for building on the Wormhole Settlement protocol. <code>llms-settlement.txt</code> Relayers Guides and reference for using Wormhole\u2019s Relayer module, building cross-chain messaging contracts, and running custom relayers. <code>llms-relayers.txt</code> MultiGov Architecture, deployment steps, and upgrade instructions for multichain governance on EVM and Solana. <code>llms-multigov.txt</code> Queries Guides for using the Wormhole Query SDK and Proxy to construct, test, and verify on-chain data queries across chains. <code>llms-queries.txt</code> TypeScript SDK Docs for working with VAAs, payloads, and cross-chain message structures using the TypeScript SDK. <code>llms-typescript-sdk.txt</code> <p>Note</p> <p>The <code>llms-full.txt</code> file may exceed the input limits of some language models due to its size. If you encounter limitations, consider using the files by category.</p>"},{"location":"products/overview/","title":"Products","text":"<p>Wormhole provides a comprehensive suite of cross-chain solutions, enabling seamless asset transfers, data retrieval, and governance across blockchain ecosystems.</p> <p>Wormhole provides multiple options for asset transfers: Connect for a plug-and-play bridging UI, Native Token Transfers (NTT) for moving native assets without wrapped representations, and Wrapped Token Transfers (WTT) for a secure lock-and-mint mechanism.</p> <p>Beyond transfers, Wormhole extends interoperability with tools for cross-chain data access, decentralized governance, and an intent-based protocol through Wormhole Settlement.</p>"},{"location":"products/overview/#transfer-products","title":"Transfer Products","text":"<p>Wormhole offers different solutions for cross-chain asset transfer, each designed for various use cases and integration requirements.</p> <ul> <li>Native Token Transfers (NTT): A mechanism to transfer native tokens cross-chain seamlessly without conversion to a wrapped asset. Best for projects that require maintaining token fungibility and native chain functionality across multiple networks.</li> <li>Wrapped Token Transfers (WTT): A bridging solution that uses a lock and mint mechanism. Best for projects that need cross-chain liquidity using wrapped assets and the ability to send messages.</li> <li>Settlement: Intent-based protocols enabling fast multichain transfers, optimized liquidity flows, and interoperability without relying on traditional bridging methods.</li> </ul> Criteria NTT WTT Settlement Supported Transfer Types Token Transfers Token Transfers with Payloads Supported Assets Wrapped Assets Native Assets Features Out-of-the-Box UI Event-Based Actions Intent-Based Execution Fast Settlement Requirements Contract Deployment <p>For a deeper dive into how token transfers work and the differences between NTT and WTT, see the Token Transfers Overview.</p> <p>Beyond asset transfers, Wormhole provides additional tools for cross-chain data and governance.</p>"},{"location":"products/overview/#bridging-ui","title":"Bridging UI","text":"<p>Connect is a pre-built bridging UI for cross-chain token transfers, requiring minimal setup. Best for projects seeking an easy-to-integrate UI for bridging without modifying contracts.</p>"},{"location":"products/overview/#real-time-data","title":"Real-time Data","text":"<p>Queries is a data retrieval service to fetch on-chain data from multiple networks. Best for applications that need multichain analytics, reporting, and data aggregation.</p>"},{"location":"products/overview/#multichain-governance","title":"Multichain Governance","text":"<p>MultiGov is a unified governance framework that manages multichain protocol governance through a single mechanism. Best for projects managing multichain governance and protocol updates.</p>"},{"location":"products/cctp-bridge/get-started/","title":"Get Started with CCTP","text":"<p>Wormhole CCTP enables native USDC transfers between supported chains by burning tokens on the source chain and minting them on the destination. This provides native, canonical USDC movement without the need for wrapped tokens.</p> <p>In this guide, you will use the Wormhole TypeScript SDK to perform an automatic cross-chain USDC transfer using Circle's CCTP protocol.</p> <p>You will initiate the transfer on the source chain, and Wormhole's relayer will automatically handle Circle's attestation and redemption steps to complete the transfer on the destination chain.</p>"},{"location":"products/cctp-bridge/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>Node.js and npm.</li> <li>Wallets funded with native tokens and USDC on two supported CCTP chains.</li> </ul> <p>This example uses an Avalanche Fuji wallet with USDC and AVAX, as well as a Sepolia wallet with testnet ETH, to pay the transaction fees. You can adapt the steps to work with any supported EVM chains that support CCTP.</p>"},{"location":"products/cctp-bridge/get-started/#configure-your-token-transfer-environment","title":"Configure Your Token Transfer Environment","text":"<ol> <li> <p>Create a new directory and initialize a Node.js project:</p> <pre><code>mkdir cctp-bridge\ncd cctp-bridge\nnpm init -y\n</code></pre> </li> <li> <p>Install the required dependencies:</p> <pre><code>npm install @wormhole-foundation/sdk\nnpm install -D tsx typescript\n</code></pre> </li> <li> <p>Create a <code>transfer.ts</code> file to handle the multichain transfer logic and a <code>helper.ts</code> file to manage wallet signers:</p> <pre><code>touch transfer.ts helper.ts\n</code></pre> </li> <li> <p>Set up secure access to your wallets. This guide assumes you are loading your <code>EVM_PRIVATE_KEY</code> from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> </ol>"},{"location":"products/cctp-bridge/get-started/#perform-a-cctp-transfer","title":"Perform a CCTP Transfer","text":"<p>This section walks you through a complete automatic USDC transfer using Wormhole's CCTP integration. You will initiate the transfer on Avalanche Fuji, and Wormhole's relayer will automatically handle the Circle attestation and finalize the redemption on Sepolia.</p> <p>Start by defining utility functions for signer and token setup:</p> <ol> <li> <p>In <code>helper.ts</code>, define functions to load private keys and instantiate EVM signers:</p> helper.ts<pre><code>import {\n  ChainAddress,\n  ChainContext,\n  Network,\n  Signer,\n  Wormhole,\n  Chain,\n} from '@wormhole-foundation/sdk';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport evm from '@wormhole-foundation/sdk/evm';\n\n/**\n * Returns a signer for the given chain using locally scoped credentials.\n * The required values (EVM_PRIVATE_KEY, SOL_PRIVATE_KEY, SUI_MNEMONIC) must\n * be loaded securely beforehand, for example via a keystore, secrets\n * manager, or environment variables (not recommended).\n */\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer;\n  const platform = chain.platform.utils()._platform;\n\n  switch (platform) {\n    case 'Evm':\n      signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), EVM_PRIVATE_KEY!);\n      break;\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), SOL_PRIVATE_KEY!);\n      break;\n    case 'Sui':\n      signer = await (\n        await sui()\n      ).getSigner(await chain.getRpc(), SUI_MNEMONIC!);\n      break;\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  return {\n    chain,\n    signer: signer as Signer&lt;N, C&gt;,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n</code></pre> </li> <li> <p>In <code>transfer.ts</code>, add the script to perform the automatic transfer using CCTP:</p> transfer.ts<pre><code>import { wormhole, amount } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport { getSigner } from './helper';\n\n(async function () {\n  // Initialize the Wormhole object for the Testnet environment and add supported chains (evm, solana and sui)\n  const wh = await wormhole('Testnet', [evm, solana, sui]);\n\n  // Grab chain Contexts -- these hold a reference to a cached rpc client\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Sepolia');\n\n  // Get signer from local key\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Define the amount of USDC to transfer (in the smallest unit, so 1.000001 USDC = 1,000,001 units assuming 6 decimals)\n  const amt = 1_000_001n;\n\n  // Whether to use automatic delivery\n  const automatic = true;\n\n  // The amount of native gas to send with the transfer\n  const nativeGas = amount.units(amount.parse('0.1', 6));\n\n  // Create the circleTransfer transaction (USDC-only)\n  const xfer = await wh.circleTransfer(\n    amt,\n    source.address,\n    destination.address,\n    automatic,\n    undefined,\n    nativeGas\n  );\n\n  // Initiate the transfer on the source chain (Avalanche)\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  process.exit(0);\n})();\n</code></pre> </li> <li> <p>Run the script to execute the transfer:</p> <pre><code>npx tsx transfer.ts\n</code></pre> <p>You will see terminal output similar to the following:</p> <p> npx tsx transfer.ts Starting Transfer Started Transfer:         [ '0xa3a545e65865c95f814132ac689c2ff5a20bfa3ca3d68bab48230708de342841'] </p> </li> </ol> <p>To verify the transaction and view its details, paste the transaction hash into Wormholescan.</p>"},{"location":"products/cctp-bridge/get-started/#next-steps","title":"Next Steps","text":"<p>Now that you've completed a CCTP USDC transfer using the Wormhole SDK, you're ready to explore more advanced features and expand your integration:</p> <ul> <li>Circle CCTP Documentation: Learn how USDC cross-chain transfers work and explore advanced CCTP features.</li> </ul>"},{"location":"products/cctp-bridge/overview/","title":"CCTP with Wormhole Overview","text":"<p>The integration of Circle's Cross-Chain Transfer Protocol (CCTP) with the Wormhole messaging protocol creates a robust system for securely and efficiently transferring native USDC across different blockchain networks while enabling more complex multichain interactions. This combination streamlines the movement of stablecoins, reduces risk, and unlocks new possibilities for decentralized applications.</p>"},{"location":"products/cctp-bridge/overview/#key-features","title":"Key Features","text":"<ul> <li>Secure native USDC transfers: At its core, CCTP provides a \"burn-and-mint\" mechanism for transferring native USDC. This eliminates the need for wrapped assets and the associated risks of intermediary bridges.</li> <li>Atomic execution: By combining CCTP and Wormhole, the transfer of USDC and the execution of accompanying instructions on the destination chain can occur as a single atomic transaction.</li> <li>Automated relaying: Eliminates the need for users to redeem USDC transfers themselves.</li> <li>Enhanced composability: Developers can build more sophisticated cross-chain applications by sending additional data alongside the transfer.</li> <li>Gas drop off: Enables users to convert a portion of USDC into the destination chain's gas token upon a successful transfer.</li> <li>Gas payment: Covering destination gas in automated vs. manual transfers.<ul> <li>Automated: Users often don't need destination gas tokens upfront, relayers cover these gas costs, reimbursed via gas drop-off or initial fees.</li> <li>Manual: Users pay destination gas directly, the protocol may offer post-claim USDC-to-gas conversion.</li> </ul> </li> </ul>"},{"location":"products/cctp-bridge/overview/#how-it-works","title":"How It Works","text":"<p>This section outlines the end-to-end flow for transferring native USDC across chains using CCTP while optionally triggering an action on the destination chain. Circle and Wormhole coordinate each step to ensure a secure, verifiable transfer and execution process.</p> <ol> <li> <p>Alice initiates a transfer on Ethereum: She submits a request to the Circle Bridge to send 100 USDC to Avalanche. If desired, she could include optional payload data.</p> </li> <li> <p>Tokens are taken into custody and burned: The Circle Bridge takes custody of Alice's USDC and initiates a burn using Circle's CCTP, triggering an off-chain attestation process.</p> </li> <li> <p>A Wormhole message is published: The transfer metadata is emitted as a Wormhole message. Guardians validate and sign it to produce a Verifiable Action Approval (VAA).</p> </li> <li> <p>A relayer automatically processes the messages: Once the VAA and Circle attestation are available, a relayer submits them to the Circle Bridge on Avalanche.</p> </li> <li> <p>Tokens are minted: The Circle Bridge verifies both proofs and mints 100 USDC to Alice using Circle's CCTP. If a payload is included, it can be executed atomically.</p> </li> </ol> <pre><code>sequenceDiagram\n    participant User as Alice\n    participant SourceChain as Circle Bridge&lt;br&gt;on Ethereum\n    participant Circle\n    participant Guardians as Wormhole Guardians\n    participant Relayer\n    participant DestinationChain as Circle Bridge&lt;br&gt;on Avalanche\n\n    User-&gt;&gt;SourceChain: Submit transfer &lt;br&gt;(100 USDC to Avalanche)\n    SourceChain-&gt;&gt;Circle: Initiate a burn\n    Circle-&gt;&gt;Circle: Burn USDC and provide attestation\n    SourceChain-&gt;&gt;Guardians: Emit Wormhole message (transfer metadata)\n    Guardians-&gt;&gt;Guardians: Sign message and produce VAA\n    Relayer-&gt;&gt;Guardians: Fetch signed VAA\n    Relayer-&gt;&gt;Circle: Fetch Circle burn attestation\n    Relayer-&gt;&gt;DestinationChain: Submit VAA and&lt;br&gt; attestation\n    DestinationChain-&gt;&gt;Circle: Verify Circle attestation\n    Circle-&gt;&gt;User: Mint USDC to Alice</code></pre> <p>Note</p> <p>For a cross-chain transfer to be successful, both the source and destination chains must be among those supported by Circle's CCTP.</p>"},{"location":"products/cctp-bridge/overview/#cctp-vs-wrapped-token-transfers-wtt","title":"CCTP vs Wrapped Token Transfers (WTT)","text":"Feature CCTP (native USDC) WTT (wrapped tokens) Supported assets Circle-issued USDC Standards-compliant tokens (e.g., ERC-20, SPL) Mechanism Burn on source, mint on destination Lock on source, mint wrapped on destination Result on destination Native USDC Wormhole-wrapped token Payload Optional transfer with payload; executed on the destination when USDC is minted Optional transfer with payload; executed by the recipient contract during redemption Use it for Native USDC between CCTP-enabled chains Non-USDC assets, or USDC when CCTP isn't supported on the destination <p>Check the CCTP Supported Networks to see which routes are available.</p>"},{"location":"products/cctp-bridge/overview/#when-to-use-cctp","title":"When to Use CCTP","text":"<p>CCTP is the right choice in the following situations:</p> <ul> <li>Sending USDC between CCTP-enabled chains: This route appears only if both chains support Circle CCTP and the asset is native USDC.</li> <li>Sending USDC with an attached payload: The destination contract can execute logic as the tokens are minted on the target chain.</li> </ul> <p>For other transfers, consider these options:</p> <ul> <li>Data-only transfers without moving USDC: Use Messaging.</li> <li>Destinations without CCTP support: The transfer routes via WTT, with the option to include a payload executed on redemption.</li> </ul>"},{"location":"products/cctp-bridge/overview/#use-cases","title":"Use Cases","text":"<p>Integrating Wormhole's messaging with CCTP enables the secure transfer of native USDC across blockchains, unlocking key cross-chain use cases, which include:</p> <ul> <li>USDC Payments Across Chains<ul> <li>CCTP: Transfer native USDC using Circle's burn-and-mint protocol.</li> <li>Wormhole TypeScript SDK: Automate attestation delivery and gas handling.</li> <li>Connect: Embed multichain USDC transfers directly in your app.</li> </ul> </li> </ul>"},{"location":"products/cctp-bridge/overview/#next-steps","title":"Next Steps","text":"<p>Now that you're familiar with CCTP, here is a list of resources for more hands-on practice:</p> <ul> <li>Get Started with CCTP Bridge: Perform a multichain USDC transfer from Avalanche to Sepolia using Wormhole's TypeScript SDK and Circle's CCTP.</li> <li>Complete USDC Transfer Flow: Execute a USDC cross-chain transfer using Wormhole SDK and Circle's CCTP, covering manual, automatic, and partial transfer recovery.</li> <li>Checkout Circle's CCTP Docs: Learn more about Circle's cross-chain transfer protocol in their documentation.</li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/","title":"Interact with CCTP Contracts","text":"<p>Circle's Cross-Chain Transfer Protocol (CCTP) is a permissionless utility that facilitates secure and efficient USDC transfers across blockchain networks through native burning and minting mechanisms.</p> <p>As decentralized finance (DeFi) protocols evolve, the need for flexible, secure cross-chain messaging has expanded, requiring solutions beyond simple asset transfers. Wormhole enhances CCTP's capabilities by allowing developers to compose more complex cross-chain interactions. With Wormhole's generic messaging, applications can execute smart contract logic alongside native USDC transfers, enabling richer, more versatile cross-chain experiences.</p> <p>This guide will walk you through getting started with Wormhole's CCTP contracts and show you how to integrate CCTP into your smart contracts, enabling the composition of advanced cross-chain functions with native USDC transfers.</p>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#prerequisites","title":"Prerequisites","text":"<p>To interact with the Wormhole CCTP, you'll need the following:</p> <ul> <li>The address of the CCTP contract on the chains you're deploying your contract on.</li> <li>The Wormhole chain ID of the chains you're deploying your contract on.</li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#wormholes-cctp-integration-contract","title":"Wormhole's CCTP Integration Contract","text":"<p>Wormhole's Circle Integration contract, <code>CircleIntegration.sol</code>, is the contract you'll interact with directly. It burns and mints Circle-supported tokens by using Circle's CCTP contracts.</p> <p>The Circle Integration contract emits Wormhole messages with arbitrary payloads to allow additional composability when performing cross-chain transfers of Circle-supported assets.</p> <p>This contract can be found in Wormhole's <code>wormhole-circle-integration</code> repository on GitHub.</p> <p>Note</p> <p>Wormhole supports all CCTP-supported chains, but Circle currently supports only a handful of chains. Please refer to the CCTP section of the Contract Addresses reference page to view the complete list of supported chains.</p> Circle Integration contract <pre><code>// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.19;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IWormhole} from \"wormhole/interfaces/IWormhole.sol\";\nimport {BytesLib} from \"wormhole/libraries/external/BytesLib.sol\";\n\nimport {ICircleBridge} from \"../interfaces/circle/ICircleBridge.sol\";\n\nimport {CircleIntegrationGovernance} from \"./CircleIntegrationGovernance.sol\";\nimport {CircleIntegrationMessages} from \"./CircleIntegrationMessages.sol\";\n\n/**\n * @notice This contract burns and mints Circle-supported tokens by using Circle's Cross-Chain Transfer Protocol. It also emits\n * Wormhole messages with arbitrary payloads to allow for additional composability when performing cross-chain\n * transfers of Circle-suppored assets.\n */\ncontract CircleIntegration is\n    CircleIntegrationMessages,\n    CircleIntegrationGovernance,\n    ReentrancyGuard\n{\n    using BytesLib for bytes;\n\n    /**\n     * @notice Emitted when Circle-supported assets have been minted to the mintRecipient\n     * @param emitterChainId Wormhole chain ID of emitter contract on source chain\n     * @param emitterAddress Address (bytes32 zero-left-padded) of emitter on source chain\n     * @param sequence Sequence of Wormhole message used to mint tokens\n     */\n    event Redeemed(\n        uint16 indexed emitterChainId,\n        bytes32 indexed emitterAddress,\n        uint64 indexed sequence\n    );\n\n    /**\n     * @notice `transferTokensWithPayload` calls the Circle Bridge contract to burn Circle-supported tokens. It emits\n     * a Wormhole message containing a user-specified payload with instructions for what to do with\n     * the Circle-supported assets once they have been minted on the target chain.\n     * @dev reverts if:\n     * - user passes insufficient value to pay Wormhole message fee\n     * - `token` is not supported by Circle Bridge\n     * - `amount` is zero\n     * - `targetChain` is not supported\n     * - `mintRecipient` is bytes32(0)\n     * @param transferParams Struct containing the following attributes:\n     * - `token` Address of the token to be burned\n     * - `amount` Amount of `token` to be burned\n     * - `targetChain` Wormhole chain ID of the target blockchain\n     * - `mintRecipient` The recipient wallet or contract address on the target chain\n     * @param batchId ID for Wormhole message batching\n     * @param payload Arbitrary payload to be delivered to the target chain via Wormhole\n     * @return messageSequence Wormhole sequence number for this contract\n     */\n    function transferTokensWithPayload(\n        TransferParameters memory transferParams,\n        uint32 batchId,\n        bytes memory payload\n    ) public payable nonReentrant returns (uint64 messageSequence) {\n        // cache wormhole instance and fees to save on gas\n        IWormhole wormhole = wormhole();\n        uint256 wormholeFee = wormhole.messageFee();\n\n        // confirm that the caller has sent enough ether to pay for the wormhole message fee\n        require(msg.value == wormholeFee, \"insufficient value\");\n\n        // Call the circle bridge and `depositForBurnWithCaller`. The `mintRecipient`\n        // should be the target contract (or wallet) composing on this contract.\n        (uint64 nonce, uint256 amountReceived) = _transferTokens{value: wormholeFee}(\n            transferParams.token,\n            transferParams.amount,\n            transferParams.targetChain,\n            transferParams.mintRecipient\n        );\n\n        // encode DepositWithPayload message\n        bytes memory encodedMessage = encodeDepositWithPayload(\n            DepositWithPayload({\n                token: addressToBytes32(transferParams.token),\n                amount: amountReceived,\n                sourceDomain: localDomain(),\n                targetDomain: getDomainFromChainId(transferParams.targetChain),\n                nonce: nonce,\n                fromAddress: addressToBytes32(msg.sender),\n                mintRecipient: transferParams.mintRecipient,\n                payload: payload\n            })\n        );\n\n        // send the DepositWithPayload wormhole message\n        messageSequence = wormhole.publishMessage{value: wormholeFee}(\n            batchId,\n            encodedMessage,\n            wormholeFinality()\n        );\n    }\n\n    function _transferTokens(\n        address token,\n        uint256 amount,\n        uint16 targetChain,\n        bytes32 mintRecipient\n    ) internal returns (uint64 nonce, uint256 amountReceived) {\n        // sanity check user input\n        require(amount &gt; 0, \"amount must be &gt; 0\");\n        require(mintRecipient != bytes32(0), \"invalid mint recipient\");\n        require(isAcceptedToken(token), \"token not accepted\");\n        require(\n            getRegisteredEmitter(targetChain) != bytes32(0),\n            \"target contract not registered\"\n        );\n\n        // take custody of tokens\n        amountReceived = custodyTokens(token, amount);\n\n        // cache Circle Bridge instance\n        ICircleBridge circleBridge = circleBridge();\n\n        // approve the Circle Bridge to spend tokens\n        SafeERC20.safeApprove(\n            IERC20(token),\n            address(circleBridge),\n            amountReceived\n        );\n\n        // burn tokens on the bridge\n        nonce = circleBridge.depositForBurnWithCaller(\n            amountReceived,\n            getDomainFromChainId(targetChain),\n            mintRecipient,\n            token,\n            getRegisteredEmitter(targetChain)\n        );\n    }\n\n    function custodyTokens(\n        address token,\n        uint256 amount\n    ) internal returns (uint256) {\n        // query own token balance before transfer\n        (, bytes memory queriedBalanceBefore) = token.staticcall(\n            abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\n        );\n        uint256 balanceBefore = abi.decode(queriedBalanceBefore, (uint256));\n\n        // deposit tokens\n        SafeERC20.safeTransferFrom(\n            IERC20(token),\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        // query own token balance after transfer\n        (, bytes memory queriedBalanceAfter) = token.staticcall(\n            abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\n        );\n        uint256 balanceAfter = abi.decode(queriedBalanceAfter, (uint256));\n\n        return balanceAfter - balanceBefore;\n    }\n\n    /**\n     * @notice `redeemTokensWithPayload` verifies the Wormhole message from the source chain and\n     * verifies that the passed Circle Bridge message is valid. It calls the Circle Bridge\n     * contract by passing the Circle message and attestation to mint tokens to the specified\n     * mint recipient. It also verifies that the caller is the specified mint recipient to ensure\n     * atomic execution of the additional instructions in the Wormhole message.\n     * @dev reverts if:\n     * - Wormhole message is not properly attested\n     * - Wormhole message was not emitted from a registered contrat\n     * - Wormhole message was already consumed by this contract\n     * - msg.sender is not the encoded mintRecipient\n     * - Circle Bridge message and Wormhole message are not associated\n     * - `receiveMessage` call to Circle Transmitter fails\n     * @param params Struct containing the following attributes:\n     * - `encodedWormholeMessage` Wormhole message emitted by a registered contract including\n     * information regarding the token burn on the source chain and an arbitrary message.\n     * - `circleBridgeMessage` Message emitted by Circle Bridge contract with information regarding\n     * the token burn on the source chain.\n     * - `circleAttestation` Serialized EC Signature attesting the cross-chain transfer\n     * @return depositInfo Struct containing the following attributes:\n     * - `token` Address (bytes32 left-zero-padded) of token to be minted\n     * - `amount` Amount of tokens to be minted\n     * - `sourceDomain` Circle domain for the source chain\n     * - `targetDomain` Circle domain for the target chain\n     * - `nonce` Circle sequence number for the transfer\n     * - `fromAddress` Source CircleIntegration contract caller's address\n     * - `mintRecipient` Recipient of minted tokens (must be caller of this contract)\n     * - `payload` Arbitrary Wormhole message payload\n     */\n    function redeemTokensWithPayload(\n        RedeemParameters calldata params\n    ) public returns (DepositWithPayload memory depositInfo) {\n        // verify the wormhole message\n        IWormhole.VM memory verifiedMessage = verifyWormholeRedeemMessage(\n            params.encodedWormholeMessage\n        );\n\n        // Decode the message payload into the DepositWithPayload struct. Call the Circle TokenMinter\n        // contract to determine the address of the encoded token on this chain.\n        depositInfo = decodeDepositWithPayload(verifiedMessage.payload);\n        depositInfo.token = fetchLocalTokenAddress(\n            depositInfo.sourceDomain,\n            depositInfo.token\n        );\n\n        // confirm that circle gave us a valid token address\n        require(depositInfo.token != bytes32(0), \"invalid local token address\");\n\n        // confirm that the caller is the `mintRecipient` to ensure atomic execution\n        require(\n            addressToBytes32(msg.sender) == depositInfo.mintRecipient,\n            \"caller must be mintRecipient\"\n        );\n\n        // confirm that the caller passed the correct message pair\n        require(\n            verifyCircleMessage(\n                params.circleBridgeMessage,\n                depositInfo.sourceDomain,\n                depositInfo.targetDomain,\n                depositInfo.nonce\n            ),\n            \"invalid message pair\"\n        );\n\n        // call the circle bridge to mint tokens to the recipient\n        bool success = circleTransmitter().receiveMessage(\n            params.circleBridgeMessage,\n            params.circleAttestation\n        );\n        require(success, \"CIRCLE_INTEGRATION: failed to mint tokens\");\n\n        // emit Redeemed event\n        emit Redeemed(\n            verifiedMessage.emitterChainId,\n            verifiedMessage.emitterAddress,\n            verifiedMessage.sequence\n        );\n    }\n\n    function verifyWormholeRedeemMessage(\n        bytes memory encodedMessage\n    ) internal returns (IWormhole.VM memory) {\n        require(evmChain() == block.chainid, \"invalid evm chain\");\n\n        // parse and verify the Wormhole core message\n        (\n            IWormhole.VM memory verifiedMessage,\n            bool valid,\n            string memory reason\n        ) = wormhole().parseAndVerifyVM(encodedMessage);\n\n        // confirm that the core layer verified the message\n        require(valid, reason);\n\n        // verify that this message was emitted by a trusted contract\n        require(verifyEmitter(verifiedMessage), \"unknown emitter\");\n\n        // revert if this message has been consumed already\n        require(\n            !isMessageConsumed(verifiedMessage.hash),\n            \"message already consumed\"\n        );\n        consumeMessage(verifiedMessage.hash);\n\n        return verifiedMessage;\n    }\n\n    function verifyEmitter(\n        IWormhole.VM memory vm\n    ) internal view returns (bool) {\n        // verify that the sender of the wormhole message is a trusted\n        return (getRegisteredEmitter(vm.emitterChainId) == vm.emitterAddress &amp;&amp;\n            vm.emitterAddress != bytes32(0));\n    }\n\n    function verifyCircleMessage(\n        bytes memory circleMessage,\n        uint32 sourceDomain,\n        uint32 targetDomain,\n        uint64 nonce\n    ) internal pure returns (bool) {\n        // parse the circle bridge message inline\n        uint32 circleSourceDomain = circleMessage.toUint32(4);\n        uint32 circleTargetDomain = circleMessage.toUint32(8);\n        uint64 circleNonce = circleMessage.toUint64(12);\n\n        // confirm that both the Wormhole message and Circle message share the same transfer info\n        return (sourceDomain == circleSourceDomain &amp;&amp;\n            targetDomain == circleTargetDomain &amp;&amp;\n            nonce == circleNonce);\n    }\n\n    /**\n     * @notice Fetches the local token address given an address and domain from\n     * a different chain.\n     * @param sourceDomain Circle domain for the sending chain.\n     * @param sourceToken Address of the token for the sending chain.\n     * @return Address bytes32 formatted address of the `sourceToken` on this chain.\n     */\n    function fetchLocalTokenAddress(\n        uint32 sourceDomain,\n        bytes32 sourceToken\n    ) public view returns (bytes32) {\n        return\n            addressToBytes32(\n                circleTokenMinter().remoteTokensToLocalTokens(\n                    keccak256(abi.encodePacked(sourceDomain, sourceToken))\n                )\n            );\n    }\n\n    /**\n     * @notice Converts type address to bytes32 (left-zero-padded)\n     * @param address_ Address to convert to bytes32\n     * @return Address bytes32\n     */\n    function addressToBytes32(address address_) public pure returns (bytes32) {\n        return bytes32(uint256(uint160(address_)));\n    }\n}\n</code></pre> <p>The functions provided by the Circle Integration contract are as follows:</p> <ul> <li> <p><code>transferTokensWithPayload</code>: Calls the Circle Bridge contract to burn Circle-supported tokens. It emits a Wormhole message containing a user-specified payload with instructions for what to do with the Circle-supported assets once they have been minted on the target chain.</p> Parameters <p><code>transferParams</code> TransferParameters</p> <p>A tuple containing the parameters for the transfer.</p> <code>TransferParameters</code> struct <p><code>token</code> address</p> <p>Address of the token to be burned.</p> <p><code>amount</code> uint256</p> <p>Amount of the token to be burned.</p> <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the target blockchain.</p> <p><code>mintRecipient</code> bytes32</p> <p>The recipient wallet or contract address on the target chain.</p> <p><code>batchId</code> uint32</p> <p>The ID for Wormhole message batching.</p> <p><code>payload</code> bytes</p> <p>Arbitrary payload to be delivered to the target chain via Wormhole.</p> Returns <p><code>messageSequence</code> uint64</p> <p>Wormhole sequence number for this contract.</p> </li> <li> <p><code>redeemTokensWithPayload</code>: Verifies the Wormhole message from the source chain and verifies that the passed Circle Bridge message is valid. It calls the Circle Bridge contract by passing the Circle message and attestation to the <code>receiveMessage</code> function, which is responsible for minting tokens to the specified mint recipient. It also verifies that the caller is the specified mint recipient to ensure atomic execution of the additional instructions in the Wormhole message.</p> Parameters <p><code>params</code> RedeemParameters</p> <p>A tuple containing the parameters for the redemption.</p> <code>RedeemParameters</code> struct <p><code>encodedWormholeMessage</code> bytes</p> <p>Wormhole message emitted by a registered contract including information regarding the token burn on the source chain and an arbitrary message.</p> <p><code>circleBridgeMessage</code> bytes</p> <p>Message emitted by Circle Bridge contract with information regarding the token burn on the source chain.</p> <p><code>circleAttestation</code> bytes</p> <p>Serialized EC signature attesting the cross-chain transfer.</p> Returns <p><code>depositInfo</code> DepositWithPayload</p> <p>Information about the deposit.</p> <code>DepositWithPayload</code> struct <p><code>token</code> bytes32</p> <p>Address (<code>bytes32</code> left-zero-padded) of token to be minted.</p> <p><code>amount</code> uint256</p> <p>Amount of tokens to be minted.</p> <p><code>sourceDomain</code> uint32</p> <p>Circle domain for the source chain.</p> <p><code>targetDomain</code> uint32</p> <p>Circle domain for the target chain.</p> <p><code>nonce</code> uint64</p> <p>Circle sequence number for the transfer.</p> <p><code>fromAddress</code> bytes32</p> <p>Source Circle Integration contract caller's address.</p> <p><code>mintRecipient</code> bytes32</p> <p>Recipient of minted tokens (must be caller of this contract).</p> <p><code>payload</code> bytes</p> <p>Arbitrary Wormhole message payload.</p> Emits <p><code>Redeemed</code>: Event emitted when Circle-supported assets have been minted to the <code>mintRecipient</code>.</p> Event arguments <p><code>emitterChainId</code> uint16</p> <p>Wormhole chain ID of emitter contract on source chain.</p> <p><code>emitterAddress</code> bytes32</p> <p>Address (<code>bytes32</code> zero-left-padded) of emitter on source chain.</p> <p><code>sequence</code> uint64</p> <p>Sequence of Wormhole message used to mint tokens.</p> </li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#circles-cctp-contracts","title":"Circle's CCTP Contracts","text":"<p>Three key contracts power Circle's CCTP:</p> <ul> <li><code>TokenMessenger</code>: The entry point for cross-chain USDC transfers, routing messages to initiate USDC burns on the source chain, and mint USDC on the destination chain.</li> <li><code>MessageTransmitter</code>: Handles generic message passing, sending messages from the source chain and receiving them on the destination chain.</li> <li><code>TokenMinter</code>: Responsible for the actual minting and burning of USDC, utilizing chain-specific settings for both the burners and minters across different networks.</li> </ul> <p>The following sections will examine these contracts in-depth, focusing on the methods invoked indirectly through function calls in the Wormhole Circle Integration contract.</p> <p>Note</p> <p>When using Wormhole's CCTP integration, you will not directly interact with these contracts. You will indirectly interact with them through the Wormhole Circle Integration contract.</p> <p>These contracts can be found in Circle's <code>evm-cctp-contracts</code> repository on GitHub.</p>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#token-messenger-contract","title":"Token Messenger Contract","text":"<p>The Token Messenger contract enables cross-chain USDC transfers by coordinating message exchanges between blockchains. It works alongside the Message Transmitter contract to relay messages for burning USDC on a source chain and minting it on a destination chain. The contract emits events to track both the burning of tokens and their subsequent minting on the destination chain.</p> <p>To ensure secure communication, the Token Messenger restricts message handling to registered remote Token Messenger contracts only. It verifies the proper conditions for token burning and manages local and remote minters using chain-specific settings.</p> <p>Additionally, the contract provides methods for updating or replacing previously sent burn messages, adding or removing remote Token Messenger contracts, and managing the minting process for cross-chain transfers.</p> Token Messenger contract <pre><code>/*\n * Copyright (c) 2022, Circle Internet Financial Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npragma solidity 0.7.6;\n\nimport \"./interfaces/IMessageHandler.sol\";\nimport \"./interfaces/ITokenMinter.sol\";\nimport \"./interfaces/IMintBurnToken.sol\";\nimport \"./interfaces/IMessageTransmitter.sol\";\nimport \"./messages/BurnMessage.sol\";\nimport \"./messages/Message.sol\";\nimport \"./roles/Rescuable.sol\";\n\n/**\n * @title TokenMessenger\n * @notice Sends messages and receives messages to/from MessageTransmitters\n * and to/from TokenMinters\n */\ncontract TokenMessenger is IMessageHandler, Rescuable {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a DepositForBurn message is sent\n     * @param nonce unique nonce reserved by message\n     * @param burnToken address of token burnt on source domain\n     * @param amount deposit amount\n     * @param depositor address where deposit is transferred from\n     * @param mintRecipient address receiving minted tokens on destination domain as bytes32\n     * @param destinationDomain destination domain\n     * @param destinationTokenMessenger address of TokenMessenger on destination domain as bytes32\n     * @param destinationCaller authorized caller as bytes32 of receiveMessage() on destination domain, if not equal to bytes32(0).\n     * If equal to bytes32(0), any address can call receiveMessage().\n     */\n    event DepositForBurn(\n        uint64 indexed nonce,\n        address indexed burnToken,\n        uint256 amount,\n        address indexed depositor,\n        bytes32 mintRecipient,\n        uint32 destinationDomain,\n        bytes32 destinationTokenMessenger,\n        bytes32 destinationCaller\n    );\n\n    /**\n     * @notice Emitted when tokens are minted\n     * @param mintRecipient recipient address of minted tokens\n     * @param amount amount of minted tokens\n     * @param mintToken contract address of minted token\n     */\n    event MintAndWithdraw(\n        address indexed mintRecipient,\n        uint256 amount,\n        address indexed mintToken\n    );\n\n    /**\n     * @notice Emitted when a remote TokenMessenger is added\n     * @param domain remote domain\n     * @param tokenMessenger TokenMessenger on remote domain\n     */\n    event RemoteTokenMessengerAdded(uint32 domain, bytes32 tokenMessenger);\n\n    /**\n     * @notice Emitted when a remote TokenMessenger is removed\n     * @param domain remote domain\n     * @param tokenMessenger TokenMessenger on remote domain\n     */\n    event RemoteTokenMessengerRemoved(uint32 domain, bytes32 tokenMessenger);\n\n    /**\n     * @notice Emitted when the local minter is added\n     * @param localMinter address of local minter\n     * @notice Emitted when the local minter is added\n     */\n    event LocalMinterAdded(address localMinter);\n\n    /**\n     * @notice Emitted when the local minter is removed\n     * @param localMinter address of local minter\n     * @notice Emitted when the local minter is removed\n     */\n    event LocalMinterRemoved(address localMinter);\n\n    // ============ Libraries ============\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n    using BurnMessage for bytes29;\n    using Message for bytes29;\n\n    // ============ State Variables ============\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    IMessageTransmitter public immutable localMessageTransmitter;\n\n    // Version of message body format\n    uint32 public immutable messageBodyVersion;\n\n    // Minter responsible for minting and burning tokens on the local domain\n    ITokenMinter public localMinter;\n\n    // Valid TokenMessengers on remote domains\n    mapping(uint32 =&gt; bytes32) public remoteTokenMessengers;\n\n    // ============ Modifiers ============\n    /**\n     * @notice Only accept messages from a registered TokenMessenger contract on given remote domain\n     * @param domain The remote domain\n     * @param tokenMessenger The address of the TokenMessenger contract for the given remote domain\n     */\n    modifier onlyRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger) {\n        require(\n            _isRemoteTokenMessenger(domain, tokenMessenger),\n            \"Remote TokenMessenger unsupported\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Only accept messages from the registered message transmitter on local domain\n     */\n    modifier onlyLocalMessageTransmitter() {\n        // Caller must be the registered message transmitter for this domain\n        require(_isLocalMessageTransmitter(), \"Invalid message transmitter\");\n        _;\n    }\n\n    // ============ Constructor ============\n    /**\n     * @param _messageTransmitter Message transmitter address\n     * @param _messageBodyVersion Message body version\n     */\n    constructor(address _messageTransmitter, uint32 _messageBodyVersion) {\n        require(\n            _messageTransmitter != address(0),\n            \"MessageTransmitter not set\"\n        );\n        localMessageTransmitter = IMessageTransmitter(_messageTransmitter);\n        messageBodyVersion = _messageBodyVersion;\n    }\n\n    // ============ External Functions  ============\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @return _nonce unique nonce reserved by message\n     */\n    function depositForBurn(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken\n    ) external returns (uint64 _nonce) {\n        return\n            _depositForBurn(\n                amount,\n                destinationDomain,\n                mintRecipient,\n                burnToken,\n                // (bytes32(0) here indicates that any address can call receiveMessage()\n                // on the destination domain, triggering mint to specified `mintRecipient`)\n                bytes32(0)\n            );\n    }\n\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce) {\n        // Destination caller must be nonzero. To allow any destination caller, use depositForBurn().\n        require(destinationCaller != bytes32(0), \"Invalid destination caller\");\n\n        return\n            _depositForBurn(\n                amount,\n                destinationDomain,\n                mintRecipient,\n                burnToken,\n                destinationCaller\n            );\n    }\n\n    /**\n     * @notice Replace a BurnMessage to change the mint recipient and/or\n     * destination caller. Allows the sender of a previous BurnMessage\n     * (created by depositForBurn or depositForBurnWithCaller)\n     * to send a new BurnMessage to replace the original.\n     * The new BurnMessage will reuse the amount and burn token of the original,\n     * without requiring a new deposit.\n     * @dev The new message will reuse the original message's nonce. For a\n     * given nonce, all replacement message(s) and the original message are\n     * valid to broadcast on the destination domain, until the first message\n     * at the nonce confirms, at which point all others are invalidated.\n     * Note: The msg.sender of the replaced message must be the same as the\n     * msg.sender of the original message.\n     * @param originalMessage original message bytes (to replace)\n     * @param originalAttestation original attestation bytes\n     * @param newDestinationCaller the new destination caller, which may be the\n     * same as the original destination caller, a new destination caller, or an empty\n     * destination caller (bytes32(0), indicating that any destination caller is valid.)\n     * @param newMintRecipient the new mint recipient, which may be the same as the\n     * original mint recipient, or different.\n     */\n    function replaceDepositForBurn(\n        bytes calldata originalMessage,\n        bytes calldata originalAttestation,\n        bytes32 newDestinationCaller,\n        bytes32 newMintRecipient\n    ) external {\n        bytes29 _originalMsg = originalMessage.ref(0);\n        _originalMsg._validateMessageFormat();\n        bytes29 _originalMsgBody = _originalMsg._messageBody();\n        _originalMsgBody._validateBurnMessageFormat();\n\n        bytes32 _originalMsgSender = _originalMsgBody._getMessageSender();\n        // _originalMsgSender must match msg.sender of original message\n        require(\n            msg.sender == Message.bytes32ToAddress(_originalMsgSender),\n            \"Invalid sender for message\"\n        );\n        require(\n            newMintRecipient != bytes32(0),\n            \"Mint recipient must be nonzero\"\n        );\n\n        bytes32 _burnToken = _originalMsgBody._getBurnToken();\n        uint256 _amount = _originalMsgBody._getAmount();\n\n        bytes memory _newMessageBody = BurnMessage._formatMessage(\n            messageBodyVersion,\n            _burnToken,\n            newMintRecipient,\n            _amount,\n            _originalMsgSender\n        );\n\n        localMessageTransmitter.replaceMessage(\n            originalMessage,\n            originalAttestation,\n            _newMessageBody,\n            newDestinationCaller\n        );\n\n        emit DepositForBurn(\n            _originalMsg._nonce(),\n            Message.bytes32ToAddress(_burnToken),\n            _amount,\n            msg.sender,\n            newMintRecipient,\n            _originalMsg._destinationDomain(),\n            _originalMsg._recipient(),\n            newDestinationCaller\n        );\n    }\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    )\n        external\n        override\n        onlyLocalMessageTransmitter\n        onlyRemoteTokenMessenger(remoteDomain, sender)\n        returns (bool)\n    {\n        bytes29 _msg = messageBody.ref(0);\n        _msg._validateBurnMessageFormat();\n        require(\n            _msg._getVersion() == messageBodyVersion,\n            \"Invalid message body version\"\n        );\n\n        bytes32 _mintRecipient = _msg._getMintRecipient();\n        bytes32 _burnToken = _msg._getBurnToken();\n        uint256 _amount = _msg._getAmount();\n\n        ITokenMinter _localMinter = _getLocalMinter();\n\n        _mintAndWithdraw(\n            address(_localMinter),\n            remoteDomain,\n            _burnToken,\n            Message.bytes32ToAddress(_mintRecipient),\n            _amount\n        );\n\n        return true;\n    }\n\n    /**\n     * @notice Add the TokenMessenger for a remote domain.\n     * @dev Reverts if there is already a TokenMessenger set for domain.\n     * @param domain Domain of remote TokenMessenger.\n     * @param tokenMessenger Address of remote TokenMessenger as bytes32.\n     */\n    function addRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger)\n        external\n        onlyOwner\n    {\n        require(tokenMessenger != bytes32(0), \"bytes32(0) not allowed\");\n\n        require(\n            remoteTokenMessengers[domain] == bytes32(0),\n            \"TokenMessenger already set\"\n        );\n\n        remoteTokenMessengers[domain] = tokenMessenger;\n        emit RemoteTokenMessengerAdded(domain, tokenMessenger);\n    }\n\n    /**\n     * @notice Remove the TokenMessenger for a remote domain.\n     * @dev Reverts if there is no TokenMessenger set for `domain`.\n     * @param domain Domain of remote TokenMessenger\n     */\n    function removeRemoteTokenMessenger(uint32 domain) external onlyOwner {\n        // No TokenMessenger set for given remote domain.\n        require(\n            remoteTokenMessengers[domain] != bytes32(0),\n            \"No TokenMessenger set\"\n        );\n\n        bytes32 _removedTokenMessenger = remoteTokenMessengers[domain];\n        delete remoteTokenMessengers[domain];\n        emit RemoteTokenMessengerRemoved(domain, _removedTokenMessenger);\n    }\n\n    /**\n     * @notice Add minter for the local domain.\n     * @dev Reverts if a minter is already set for the local domain.\n     * @param newLocalMinter The address of the minter on the local domain.\n     */\n    function addLocalMinter(address newLocalMinter) external onlyOwner {\n        require(newLocalMinter != address(0), \"Zero address not allowed\");\n\n        require(\n            address(localMinter) == address(0),\n            \"Local minter is already set.\"\n        );\n\n        localMinter = ITokenMinter(newLocalMinter);\n\n        emit LocalMinterAdded(newLocalMinter);\n    }\n\n    /**\n     * @notice Remove the minter for the local domain.\n     * @dev Reverts if the minter of the local domain is not set.\n     */\n    function removeLocalMinter() external onlyOwner {\n        address _localMinterAddress = address(localMinter);\n        require(_localMinterAddress != address(0), \"No local minter is set.\");\n\n        delete localMinter;\n        emit LocalMinterRemoved(_localMinterAddress);\n    }\n\n    // ============ Internal Utils ============\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\n     * Emits a `DepositForBurn` event.\n     * @param _amount amount of tokens to burn (must be non-zero)\n     * @param _destinationDomain destination domain\n     * @param _mintRecipient address of mint recipient on destination domain\n     * @param _burnToken address of contract to burn deposited tokens, on local domain\n     * @param _destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function _depositForBurn(\n        uint256 _amount,\n        uint32 _destinationDomain,\n        bytes32 _mintRecipient,\n        address _burnToken,\n        bytes32 _destinationCaller\n    ) internal returns (uint64 nonce) {\n        require(_amount &gt; 0, \"Amount must be nonzero\");\n        require(_mintRecipient != bytes32(0), \"Mint recipient must be nonzero\");\n\n        bytes32 _destinationTokenMessenger = _getRemoteTokenMessenger(\n            _destinationDomain\n        );\n\n        ITokenMinter _localMinter = _getLocalMinter();\n        IMintBurnToken _mintBurnToken = IMintBurnToken(_burnToken);\n        require(\n            _mintBurnToken.transferFrom(\n                msg.sender,\n                address(_localMinter),\n                _amount\n            ),\n            \"Transfer operation failed\"\n        );\n        _localMinter.burn(_burnToken, _amount);\n\n        // Format message body\n        bytes memory _burnMessage = BurnMessage._formatMessage(\n            messageBodyVersion,\n            Message.addressToBytes32(_burnToken),\n            _mintRecipient,\n            _amount,\n            Message.addressToBytes32(msg.sender)\n        );\n\n        uint64 _nonceReserved = _sendDepositForBurnMessage(\n            _destinationDomain,\n            _destinationTokenMessenger,\n            _destinationCaller,\n            _burnMessage\n        );\n\n        emit DepositForBurn(\n            _nonceReserved,\n            _burnToken,\n            _amount,\n            msg.sender,\n            _mintRecipient,\n            _destinationDomain,\n            _destinationTokenMessenger,\n            _destinationCaller\n        );\n\n        return _nonceReserved;\n    }\n\n    /**\n     * @notice Sends a BurnMessage through the local message transmitter\n     * @dev calls local message transmitter's sendMessage() function if `_destinationCaller` == bytes32(0),\n     * or else calls sendMessageWithCaller().\n     * @param _destinationDomain destination domain\n     * @param _destinationTokenMessenger address of registered TokenMessenger contract on destination domain, as bytes32\n     * @param _destinationCaller caller on the destination domain, as bytes32. If `_destinationCaller` == bytes32(0),\n     * any address can call receiveMessage() on destination domain.\n     * @param _burnMessage formatted BurnMessage bytes (message body)\n     * @return nonce unique nonce reserved by message\n     */\n    function _sendDepositForBurnMessage(\n        uint32 _destinationDomain,\n        bytes32 _destinationTokenMessenger,\n        bytes32 _destinationCaller,\n        bytes memory _burnMessage\n    ) internal returns (uint64 nonce) {\n        if (_destinationCaller == bytes32(0)) {\n            return\n                localMessageTransmitter.sendMessage(\n                    _destinationDomain,\n                    _destinationTokenMessenger,\n                    _burnMessage\n                );\n        } else {\n            return\n                localMessageTransmitter.sendMessageWithCaller(\n                    _destinationDomain,\n                    _destinationTokenMessenger,\n                    _destinationCaller,\n                    _burnMessage\n                );\n        }\n    }\n\n    /**\n     * @notice Mints tokens to a recipient\n     * @param _tokenMinter address of TokenMinter contract\n     * @param _remoteDomain domain where burned tokens originate from\n     * @param _burnToken address of token burned\n     * @param _mintRecipient recipient address of minted tokens\n     * @param _amount amount of minted tokens\n     */\n    function _mintAndWithdraw(\n        address _tokenMinter,\n        uint32 _remoteDomain,\n        bytes32 _burnToken,\n        address _mintRecipient,\n        uint256 _amount\n    ) internal {\n        ITokenMinter _minter = ITokenMinter(_tokenMinter);\n        address _mintToken = _minter.mint(\n            _remoteDomain,\n            _burnToken,\n            _mintRecipient,\n            _amount\n        );\n\n        emit MintAndWithdraw(_mintRecipient, _amount, _mintToken);\n    }\n\n    /**\n     * @notice return the remote TokenMessenger for the given `_domain` if one exists, else revert.\n     * @param _domain The domain for which to get the remote TokenMessenger\n     * @return _tokenMessenger The address of the TokenMessenger on `_domain` as bytes32\n     */\n    function _getRemoteTokenMessenger(uint32 _domain)\n        internal\n        view\n        returns (bytes32)\n    {\n        bytes32 _tokenMessenger = remoteTokenMessengers[_domain];\n        require(_tokenMessenger != bytes32(0), \"No TokenMessenger for domain\");\n        return _tokenMessenger;\n    }\n\n    /**\n     * @notice return the local minter address if it is set, else revert.\n     * @return local minter as ITokenMinter.\n     */\n    function _getLocalMinter() internal view returns (ITokenMinter) {\n        require(address(localMinter) != address(0), \"Local minter is not set\");\n        return localMinter;\n    }\n\n    /**\n     * @notice Return true if the given remote domain and TokenMessenger is registered\n     * on this TokenMessenger.\n     * @param _domain The remote domain of the message.\n     * @param _tokenMessenger The address of the TokenMessenger on remote domain.\n     * @return true if a remote TokenMessenger is registered for `_domain` and `_tokenMessenger`,\n     * on this TokenMessenger.\n     */\n    function _isRemoteTokenMessenger(uint32 _domain, bytes32 _tokenMessenger)\n        internal\n        view\n        returns (bool)\n    {\n        return\n            _tokenMessenger != bytes32(0) &amp;&amp;\n            remoteTokenMessengers[_domain] == _tokenMessenger;\n    }\n\n    /**\n     * @notice Returns true if the message sender is the local registered MessageTransmitter\n     * @return true if message sender is the registered local message transmitter\n     */\n    function _isLocalMessageTransmitter() internal view returns (bool) {\n        return\n            address(localMessageTransmitter) != address(0) &amp;&amp;\n            msg.sender == address(localMessageTransmitter);\n    }\n}\n</code></pre> <p>This contract and the interfaces, contracts, and libraries it relies on are stored in Circle's <code>evm-cctp-contracts</code> repository on GitHub.</p> <p>The functions provided by the Token Messenger contract are as follows:</p> <ul> <li> <p><code>depositForBurn</code>: Deposits and burns tokens from the sender to be minted on the destination domain. Minted tokens will be transferred to <code>mintRecipient</code>.</p> Parameters <p><code>amount</code> uint256</p> <p>The amount of tokens to burn.</p> <p><code>destinationDomain</code> uint32</p> <p>The network where the token will be minted after burn.</p> <p><code>mintRecipient</code> bytes32</p> <p>Address of mint recipient on destination domain.</p> <p><code>burnToken</code> address</p> <p>Address of contract to burn deposited tokens, on local domain.</p> Returns <p><code>_nonce</code> uint64</p> <p>Unique nonce reserved by message.</p> Emits <p><code>DepositForBurn</code> - event emitted when <code>depositForBurn</code> is called. The <code>destinationCaller</code> is set to <code>bytes32(0)</code> to allow any address to call <code>receiveMessage</code> on the destination domain</p> Event Arguments <p><code>nonce</code> uint64 </p> <p>Unique nonce reserved by message (indexed).</p> <p><code>burnToken</code> address </p> <p>Address of token burnt on source domain.</p> <p><code>amount</code> uint256</p> <p>The deposit amount.</p> <p><code>depositor</code> address</p> <p>Address where deposit is transferred from.</p> <p><code>mintRecipient</code> bytes32</p> <p>Address receiving minted tokens on destination domain.</p> <p><code>destinationDomain</code> uint32 -</p> <p>Destination domain.</p> <p><code>destinationTokenMessenger</code> bytes32</p> <p>Address of <code>TokenMessenger</code> on destination domain.</p> <p><code>destinationCaller</code> bytes32</p> <p>Authorized caller of the <code>receiveMessage</code> function on the destination domain, if not equal to <code>bytes32(0)</code>. If equal to <code>bytes32(0)</code>, any address can call <code>receiveMessage</code>.</p> </li> <li> <p><code>depositForBurnWithCaller</code>: Deposits and burns tokens from the sender to be minted on the destination domain. This method differs from <code>depositForBurn</code> in that the mint on the destination domain can only be called by the designated <code>destinationCaller</code> address.</p> Parameters <p><code>amount</code> uint256</p> <p>The amount of tokens to burn.</p> <p><code>destinationDomain</code> uint32</p> <p>The network where the token will be minted after burn.</p> <p><code>mintRecipient</code> bytes32</p> <p>Address of mint recipient on destination domain.</p> <p><code>burnToken</code> address</p> <p>Address of contract to burn deposited tokens, on local domain.</p> <p><code>destinationCaller</code> bytes32</p> <p>Address of the caller on the destination domain who will trigger the mint.</p> Returns <p><code>_nonce</code> uint64</p> <p>Unique nonce reserved by message.</p> Emits <p><code>DepositForBurn</code> - event emitted when <code>depositForBurnWithCaller</code> is called</p> Event Arguments <p><code>nonce</code> uint64 </p> <p>Unique nonce reserved by message (indexed).</p> <p><code>burnToken</code> address </p> <p>Address of token burnt on source domain.</p> <p><code>amount</code> uint256</p> <p>The deposit amount.</p> <p><code>depositor</code> address</p> <p>Address where deposit is transferred from.</p> <p><code>mintRecipient</code> bytes32</p> <p>Address receiving minted tokens on destination domain.</p> <p><code>destinationDomain</code> uint32 -</p> <p>Destination domain.</p> <p><code>destinationTokenMessenger</code> bytes32</p> <p>Address of <code>TokenMessenger</code> on destination domain.</p> <p><code>destinationCaller</code> bytes32</p> <p>Authorized caller of the <code>receiveMessage</code> function on the destination domain, if not equal to <code>bytes32(0)</code>. If equal to <code>bytes32(0)</code>, any address can call <code>receiveMessage</code>.</p> </li> <li> <p><code>replaceDepositForBurn</code>: Replaces a previous <code>BurnMessage</code> to modify the mint recipient and/or the destination caller. The replacement message reuses the <code>_nonce</code> created by the original message, which allows the original message's sender to update the details without requiring a new deposit.</p> Parameters <p><code>originalMessage</code> bytes</p> <p>The original burn message to be replaced.</p> <p><code>originalAttestation</code> bytes</p> <p>The attestation of the original message.</p> <p><code>newDestinationCaller</code> bytes32</p> <p>The new caller on the destination domain, can be the same or updated.</p> <p><code>newMintRecipient</code> bytes32</p> <p>The new recipient for the minted tokens, can be the same or updated.</p> Returns <p>None.</p> Emits <p><code>DepositForBurn</code> - event emitted when <code>replaceDepositForBurn</code> is called. Note that the <code>destinationCaller</code> will reflect the new destination caller, which may be the same as the original destination caller, a new destination caller, or an empty destination caller (<code>bytes32(0)</code>), indicating that any destination caller is valid</p> Event Arguments <p><code>nonce</code> uint64 </p> <p>Unique nonce reserved by message (indexed).</p> <p><code>burnToken</code> address </p> <p>Address of token burnt on source domain.</p> <p><code>amount</code> uint256</p> <p>The deposit amount.</p> <p><code>depositor</code> address</p> <p>Address where deposit is transferred from.</p> <p><code>mintRecipient</code> bytes32</p> <p>Address receiving minted tokens on destination domain.</p> <p><code>destinationDomain</code> uint32 -</p> <p>Destination domain.</p> <p><code>destinationTokenMessenger</code> bytes32</p> <p>Address of <code>TokenMessenger</code> on destination domain.</p> <p><code>destinationCaller</code> bytes32</p> <p>Authorized caller of the <code>receiveMessage</code> function on the destination domain, if not equal to <code>bytes32(0)</code>. If equal to <code>bytes32(0)</code>, any address can call <code>receiveMessage</code>.</p> </li> <li> <p><code>handleReceiveMessage</code>: Handles an incoming message received by the local <code>MessageTransmitter</code> and takes the appropriate action. For a burn message, it mints the associated token to the requested recipient on the local domain.</p> Note <p>Though this function can only be called by the local <code>MessageTransmitter</code>, it is included here as it emits the essential event for minting tokens and withdrawing to send to the recipient.</p> Parameters <p><code>remoteDomain</code> uint32</p> <p>The domain where the message originated.</p> <p><code>sender</code> bytes32</p> <p>The address of the sender of the message.</p> <p><code>messageBody</code> bytes</p> <p>The bytes making up the body of the message.</p> Returns <p><code>success</code> boolean</p> <p>Returns <code>true</code> if successful, otherwise, it returns <code>false</code>.</p> Emits <p><code>MintAndWithdraw</code> - event emitted when tokens are minted</p> Event arguments <p><code>localMinter</code> address</p> <p>Minter responsible for minting and burning tokens on the local domain.</p> <p><code>remoteDomain</code> uint32</p> <p>The domain where the message originated from.</p> <p><code>burnToken</code> address</p> <p>Address of contract to burn deposited tokens, on local domain.</p> <p><code>mintRecipient</code> address</p> <p>Recipient address of minted tokens (indexed).</p> <p><code>amount</code> uint256</p> <p>Amount of minted tokens.</p> </li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#message-transmitter-contract","title":"Message Transmitter Contract","text":"<p>The Message Transmitter contract ensures secure messaging across blockchain domains by managing message dispatch and tracking communication with events like <code>MessageSent</code> and <code>MessageReceived</code>. It uses a unique nonce for each message, which ensures proper validation, verifies attestation signatures, and prevents replay attacks.</p> <p>The contract supports flexible delivery options, allowing messages to be sent to a specific <code>destinationCaller</code> or broadcast more generally. It also includes domain-specific configurations to manage communication between chains.</p> <p>Additional features include replacing previously sent messages, setting maximum message body sizes, and verifying that messages are received only once per nonce to maintain network integrity.</p> Message Transmitter contract <pre><code>/*\n * Copyright (c) 2022, Circle Internet Financial Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npragma solidity 0.7.6;\n\nimport \"@memview-sol/contracts/TypedMemView.sol\";\nimport \"./interfaces/IMessageTransmitter.sol\";\nimport \"./interfaces/IMessageHandler.sol\";\nimport \"./messages/Message.sol\";\nimport \"./roles/Pausable.sol\";\nimport \"./roles/Rescuable.sol\";\nimport \"./roles/Attestable.sol\";\n\n/**\n * @title MessageTransmitter\n * @notice Contract responsible for sending and receiving messages across chains.\n */\ncontract MessageTransmitter is\n    IMessageTransmitter,\n    Pausable,\n    Rescuable,\n    Attestable\n{\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched\n     * @param message Raw bytes of message\n     */\n    event MessageSent(bytes message);\n\n    /**\n     * @notice Emitted when a new message is received\n     * @param caller Caller (msg.sender) on destination domain\n     * @param sourceDomain The source domain this message originated from\n     * @param nonce The nonce unique to this message\n     * @param sender The sender of this message\n     * @param messageBody message body bytes\n     */\n    event MessageReceived(\n        address indexed caller,\n        uint32 sourceDomain,\n        uint64 indexed nonce,\n        bytes32 sender,\n        bytes messageBody\n    );\n\n    /**\n     * @notice Emitted when max message body size is updated\n     * @param newMaxMessageBodySize new maximum message body size, in bytes\n     */\n    event MaxMessageBodySizeUpdated(uint256 newMaxMessageBodySize);\n\n    // ============ Libraries ============\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n    using Message for bytes29;\n\n    // ============ State Variables ============\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // Message Format version\n    uint32 public immutable version;\n\n    // Maximum size of message body, in bytes.\n    // This value is set by owner.\n    uint256 public maxMessageBodySize;\n\n    // Next available nonce from this source domain\n    uint64 public nextAvailableNonce;\n\n    // Maps a bytes32 hash of (sourceDomain, nonce) -&gt; uint256 (0 if unused, 1 if used)\n    mapping(bytes32 =&gt; uint256) public usedNonces;\n\n    // ============ Constructor ============\n    constructor(\n        uint32 _localDomain,\n        address _attester,\n        uint32 _maxMessageBodySize,\n        uint32 _version\n    ) Attestable(_attester) {\n        localDomain = _localDomain;\n        maxMessageBodySize = _maxMessageBodySize;\n        version = _version;\n    }\n\n    // ============ External Functions  ============\n    /**\n     * @notice Send the message to the destination domain and recipient\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination chain as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessage(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes calldata messageBody\n    ) external override whenNotPaused returns (uint64) {\n        bytes32 _emptyDestinationCaller = bytes32(0);\n        uint64 _nonce = _reserveAndIncrementNonce();\n        bytes32 _messageSender = Message.addressToBytes32(msg.sender);\n\n        _sendMessage(\n            destinationDomain,\n            recipient,\n            _emptyDestinationCaller,\n            _messageSender,\n            _nonce,\n            messageBody\n        );\n\n        return _nonce;\n    }\n\n    /**\n     * @notice Replace a message with a new message body and/or destination caller.\n     * @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\n     * Reverts if msg.sender does not match sender of original message, or if the source domain of the original message\n     * does not match this MessageTransmitter's local domain.\n     * @param originalMessage original message to replace\n     * @param originalAttestation attestation of `originalMessage`\n     * @param newMessageBody new message body of replaced message\n     * @param newDestinationCaller the new destination caller, which may be the\n     * same as the original destination caller, a new destination caller, or an empty\n     * destination caller (bytes32(0), indicating that any destination caller is valid.)\n     */\n    function replaceMessage(\n        bytes calldata originalMessage,\n        bytes calldata originalAttestation,\n        bytes calldata newMessageBody,\n        bytes32 newDestinationCaller\n    ) external override whenNotPaused {\n        // Validate each signature in the attestation\n        _verifyAttestationSignatures(originalMessage, originalAttestation);\n\n        bytes29 _originalMsg = originalMessage.ref(0);\n\n        // Validate message format\n        _originalMsg._validateMessageFormat();\n\n        // Validate message sender\n        bytes32 _sender = _originalMsg._sender();\n        require(\n            msg.sender == Message.bytes32ToAddress(_sender),\n            \"Sender not permitted to use nonce\"\n        );\n\n        // Validate source domain\n        uint32 _sourceDomain = _originalMsg._sourceDomain();\n        require(\n            _sourceDomain == localDomain,\n            \"Message not originally sent from this domain\"\n        );\n\n        uint32 _destinationDomain = _originalMsg._destinationDomain();\n        bytes32 _recipient = _originalMsg._recipient();\n        uint64 _nonce = _originalMsg._nonce();\n\n        _sendMessage(\n            _destinationDomain,\n            _recipient,\n            newDestinationCaller,\n            _sender,\n            _nonce,\n            newMessageBody\n        );\n    }\n\n    /**\n     * @notice Send the message to the destination domain and recipient, for a specified `destinationCaller` on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external override whenNotPaused returns (uint64) {\n        require(\n            destinationCaller != bytes32(0),\n            \"Destination caller must be nonzero\"\n        );\n\n        uint64 _nonce = _reserveAndIncrementNonce();\n        bytes32 _messageSender = Message.addressToBytes32(msg.sender);\n\n        _sendMessage(\n            destinationDomain,\n            recipient,\n            destinationCaller,\n            _messageSender,\n            _nonce,\n            messageBody\n        );\n\n        return _nonce;\n    }\n\n    /**\n     * @notice Receive a message. Messages with a given nonce\n     * can only be broadcast once for a (sourceDomain, destinationDomain)\n     * pair. The message body of a valid message is passed to the\n     * specified recipient for further processing.\n     *\n     * @dev Attestation format:\n     * A valid attestation is the concatenated 65-byte signature(s) of exactly\n     * `thresholdSignature` signatures, in increasing order of attester address.\n     * ***If the attester addresses recovered from signatures are not in\n     * increasing order, signature verification will fail.***\n     * If incorrect number of signatures or duplicate signatures are supplied,\n     * signature verification will fail.\n     *\n     * Message format:\n     * Field                 Bytes      Type       Index\n     * version               4          uint32     0\n     * sourceDomain          4          uint32     4\n     * destinationDomain     4          uint32     8\n     * nonce                 8          uint64     12\n     * sender                32         bytes32    20\n     * recipient             32         bytes32    52\n     * messageBody           dynamic    bytes      84\n     * @param message Message bytes\n     * @param attestation Concatenated 65-byte signature(s) of `message`, in increasing order\n     * of the attester address recovered from signatures.\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata attestation)\n        external\n        override\n        whenNotPaused\n        returns (bool success)\n    {\n        // Validate each signature in the attestation\n        _verifyAttestationSignatures(message, attestation);\n\n        bytes29 _msg = message.ref(0);\n\n        // Validate message format\n        _msg._validateMessageFormat();\n\n        // Validate domain\n        require(\n            _msg._destinationDomain() == localDomain,\n            \"Invalid destination domain\"\n        );\n\n        // Validate destination caller\n        if (_msg._destinationCaller() != bytes32(0)) {\n            require(\n                _msg._destinationCaller() ==\n                    Message.addressToBytes32(msg.sender),\n                \"Invalid caller for message\"\n            );\n        }\n\n        // Validate version\n        require(_msg._version() == version, \"Invalid message version\");\n\n        // Validate nonce is available\n        uint32 _sourceDomain = _msg._sourceDomain();\n        uint64 _nonce = _msg._nonce();\n        bytes32 _sourceAndNonce = _hashSourceAndNonce(_sourceDomain, _nonce);\n        require(usedNonces[_sourceAndNonce] == 0, \"Nonce already used\");\n        // Mark nonce used\n        usedNonces[_sourceAndNonce] = 1;\n\n        // Handle receive message\n        bytes32 _sender = _msg._sender();\n        bytes memory _messageBody = _msg._messageBody().clone();\n        require(\n            IMessageHandler(Message.bytes32ToAddress(_msg._recipient()))\n                .handleReceiveMessage(_sourceDomain, _sender, _messageBody),\n            \"handleReceiveMessage() failed\"\n        );\n\n        // Emit MessageReceived event\n        emit MessageReceived(\n            msg.sender,\n            _sourceDomain,\n            _nonce,\n            _sender,\n            _messageBody\n        );\n        return true;\n    }\n\n    /**\n     * @notice Sets the max message body size\n     * @dev This value should not be reduced without good reason,\n     * to avoid impacting users who rely on large messages.\n     * @param newMaxMessageBodySize new max message body size, in bytes\n     */\n    function setMaxMessageBodySize(uint256 newMaxMessageBodySize)\n        external\n        onlyOwner\n    {\n        maxMessageBodySize = newMaxMessageBodySize;\n        emit MaxMessageBodySizeUpdated(maxMessageBodySize);\n    }\n\n    // ============ Internal Utils ============\n    /**\n     * @notice Send the message to the destination domain and recipient. If `_destinationCaller` is not equal to bytes32(0),\n     * the message can only be received on the destination chain when called by `_destinationCaller`.\n     * @dev Format the message and emit `MessageSent` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipient Address of message recipient on destination domain as bytes32\n     * @param _destinationCaller caller on the destination domain, as bytes32\n     * @param _sender message sender, as bytes32\n     * @param _nonce nonce reserved for message\n     * @param _messageBody Raw bytes content of message\n     */\n    function _sendMessage(\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes32 _destinationCaller,\n        bytes32 _sender,\n        uint64 _nonce,\n        bytes calldata _messageBody\n    ) internal {\n        // Validate message body length\n        require(\n            _messageBody.length &lt;= maxMessageBodySize,\n            \"Message body exceeds max size\"\n        );\n\n        require(_recipient != bytes32(0), \"Recipient must be nonzero\");\n\n        // serialize message\n        bytes memory _message = Message._formatMessage(\n            version,\n            localDomain,\n            _destinationDomain,\n            _nonce,\n            _sender,\n            _recipient,\n            _destinationCaller,\n            _messageBody\n        );\n\n        // Emit MessageSent event\n        emit MessageSent(_message);\n    }\n\n    /**\n     * @notice hashes `_source` and `_nonce`.\n     * @param _source Domain of chain where the transfer originated\n     * @param _nonce The unique identifier for the message from source to\n              destination\n     * @return hash of source and nonce\n     */\n    function _hashSourceAndNonce(uint32 _source, uint64 _nonce)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_source, _nonce));\n    }\n\n    /**\n     * Reserve and increment next available nonce\n     * @return nonce reserved\n     */\n    function _reserveAndIncrementNonce() internal returns (uint64) {\n        uint64 _nonceReserved = nextAvailableNonce;\n        nextAvailableNonce = nextAvailableNonce + 1;\n        return _nonceReserved;\n    }\n}\n</code></pre> <p>This contract and the interfaces, contracts, and libraries it relies on are stored in Circle's <code>evm-cctp-contracts</code> repository on GitHub.</p> <p>The functions provided by the Message Transmitter contract are as follows:</p> <ul> <li> <p><code>receiveMessage</code>: Processes and validates an incoming message and its attestation. If valid, it triggers further action based on the message body.</p> Parameters <p><code>message</code> bytes</p> <p>The message to be processed, including details such as sender, recipient, and message body.</p> <p><code>attestation</code> bytes</p> <p>Concatenated 65-byte signature(s) that attest to the validity of the <code>message</code>.</p> Returns <p><code>success</code> boolean</p> <p>Returns <code>true</code> if successful, otherwise, returns <code>false</code>.</p> Emits <p><code>MessageReceived</code> - event emitted when a new message is received</p> Event arguments <p><code>caller</code> address</p> <p>Caller on destination domain.</p> <p><code>sourceDomain</code> uint32</p> <p>The source domain this message originated from.</p> <p><code>nonce</code> uint64</p> <p>Nonce unique to this message (indexed).</p> <p><code>sender</code> bytes32</p> <p>Sender of this message.</p> <p><code>messageBody</code> bytes</p> <p>The body of the message.</p> </li> <li> <p><code>sendMessage</code>: Sends a message to the destination domain and recipient. It increments the <code>nonce</code>, assigns a unique <code>nonce</code> to the message, and emits a <code>MessageSent</code> event.</p> Parameters <p><code>destinationDomain</code> uint32</p> <p>The target blockchain network where the message is to be sent.</p> <p><code>recipient</code> bytes32</p> <p>The recipient's address on the destination domain.</p> <p><code>messageBody</code> bytes</p> <p>The raw bytes content of the message.</p> Returns <p><code>nonce</code> uint64</p> <p>Nonce unique to this message.</p> Emits <p><code>MessageSent</code> - event emitted when a new message is dispatched</p> Event arguments <p><code>message</code> bytes</p> <p>The raw bytes of the message.</p> </li> <li> <p><code>sendMessageWithCaller</code>: Sends a message to the destination domain and recipient, requiring a specific caller to trigger the message on the target chain. It increments the <code>nonce</code>, assigns a unique <code>nonce</code> to the message, and emits a <code>MessageSent</code> event.</p> Parameters <p><code>destinationDomain</code> uint32</p> <p>The target blockchain network where the message is to be sent.</p> <p><code>recipient</code> bytes32</p> <p>The recipient's address on the destination domain.</p> <p><code>destinationCaller</code> bytes32 </p> <p>The caller on the destination domain.</p> <p><code>messageBody</code> bytes</p> <p>The raw bytes content of the message.</p> Returns <p><code>nonce</code> uint64</p> <p>Nonce unique to this message.</p> Emits <p><code>MessageSent</code> - event emitted when a new message is dispatched</p> Event arguments <p><code>message</code> bytes</p> <p>The raw bytes of the message.</p> </li> <li> <p><code>replaceMessage</code>: Replaces an original message with a new message body and/or updates the destination caller. The replacement message reuses the <code>_nonce</code> created by the original message.</p> Parameters <p><code>originalMessage</code> bytes</p> <p>The original message to be replaced.</p> <p><code>originalAttestation</code> bytes</p> <p>Attestation verifying the original message.</p> <p><code>newMessageBody</code> bytes</p> <p>The new content for the replaced message.</p> <p><code>newDestinationCaller</code> bytes32</p> <p>The new destination caller, which may be the same as the original destination caller, a new destination caller, or an empty destination caller (<code>bytes32(0)</code>), indicating that any destination caller is valid.</p> Returns <p>None.</p> Emits <p><code>MessageSent</code> - event emitted when a new message is dispatched</p> Event arguments <p><code>message</code> bytes</p> <p>The raw bytes of the message.</p> </li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#token-minter-contract","title":"Token Minter Contract","text":"<p>The Token Minter contract manages the minting and burning of tokens across different blockchain domains. It maintains a registry that links local tokens to their corresponding remote tokens, ensuring that tokens maintain a 1:1 exchange rate across domains.</p> <p>The contract restricts minting and burning functions to a designated Token Messenger, which ensures secure and reliable cross-chain operations. When tokens are burned on a remote domain, an equivalent amount is minted on the local domain for a specified recipient, and vice versa.</p> <p>To enhance control and flexibility, the contract includes mechanisms to pause operations, set burn limits, and update the Token Controller, which governs token minting permissions. Additionally, it provides functionality to add or remove the local Token Messenger and retrieve the local token address associated with a remote token.</p> Token Minter contract <pre><code>/*\n * Copyright (c) 2022, Circle Internet Financial Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npragma solidity 0.7.6;\n\nimport \"./interfaces/ITokenMinter.sol\";\nimport \"./interfaces/IMintBurnToken.sol\";\nimport \"./roles/Pausable.sol\";\nimport \"./roles/Rescuable.sol\";\nimport \"./roles/TokenController.sol\";\nimport \"./TokenMessenger.sol\";\n\n/**\n * @title TokenMinter\n * @notice Token Minter and Burner\n * @dev Maintains registry of local mintable tokens and corresponding tokens on remote domains.\n * This registry can be used by caller to determine which token on local domain to mint for a\n * burned token on a remote domain, and vice versa.\n * It is assumed that local and remote tokens are fungible at a constant 1:1 exchange rate.\n */\ncontract TokenMinter is ITokenMinter, TokenController, Pausable, Rescuable {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a local TokenMessenger is added\n     * @param localTokenMessenger address of local TokenMessenger\n     * @notice Emitted when a local TokenMessenger is added\n     */\n    event LocalTokenMessengerAdded(address localTokenMessenger);\n\n    /**\n     * @notice Emitted when a local TokenMessenger is removed\n     * @param localTokenMessenger address of local TokenMessenger\n     * @notice Emitted when a local TokenMessenger is removed\n     */\n    event LocalTokenMessengerRemoved(address localTokenMessenger);\n\n    // ============ State Variables ============\n    // Local TokenMessenger with permission to call mint and burn on this TokenMinter\n    address public localTokenMessenger;\n\n    // ============ Modifiers ============\n    /**\n     * @notice Only accept messages from the registered message transmitter on local domain\n     */\n    modifier onlyLocalTokenMessenger() {\n        require(_isLocalTokenMessenger(), \"Caller not local TokenMessenger\");\n        _;\n    }\n\n    // ============ Constructor ============\n    /**\n     * @param _tokenController Token controller address\n     */\n    constructor(address _tokenController) {\n        _setTokenController(_tokenController);\n    }\n\n    // ============ External Functions  ============\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    )\n        external\n        override\n        whenNotPaused\n        onlyLocalTokenMessenger\n        returns (address mintToken)\n    {\n        address _mintToken = _getLocalToken(sourceDomain, burnToken);\n        require(_mintToken != address(0), \"Mint token not supported\");\n        IMintBurnToken _token = IMintBurnToken(_mintToken);\n\n        require(_token.mint(to, amount), \"Mint operation failed\");\n        return _mintToken;\n    }\n\n    /**\n     * @notice Burn tokens owned by this TokenMinter.\n     * @param burnToken burnable token address.\n     * @param burnAmount amount of tokens to burn. Must be\n     * &gt; 0, and &lt;= maximum burn amount per message.\n     */\n    function burn(address burnToken, uint256 burnAmount)\n        external\n        override\n        whenNotPaused\n        onlyLocalTokenMessenger\n        onlyWithinBurnLimit(burnToken, burnAmount)\n    {\n        IMintBurnToken _token = IMintBurnToken(burnToken);\n        _token.burn(burnAmount);\n    }\n\n    /**\n     * @notice Add TokenMessenger for the local domain. Only this TokenMessenger\n     * has permission to call mint() and burn() on this TokenMinter.\n     * @dev Reverts if a TokenMessenger is already set for the local domain.\n     * @param newLocalTokenMessenger The address of the new TokenMessenger on the local domain.\n     */\n    function addLocalTokenMessenger(address newLocalTokenMessenger)\n        external\n        onlyOwner\n    {\n        require(\n            newLocalTokenMessenger != address(0),\n            \"Invalid TokenMessenger address\"\n        );\n\n        require(\n            localTokenMessenger == address(0),\n            \"Local TokenMessenger already set\"\n        );\n\n        localTokenMessenger = newLocalTokenMessenger;\n\n        emit LocalTokenMessengerAdded(localTokenMessenger);\n    }\n\n    /**\n     * @notice Remove the TokenMessenger for the local domain.\n     * @dev Reverts if the TokenMessenger of the local domain is not set.\n     */\n    function removeLocalTokenMessenger() external onlyOwner {\n        address _localTokenMessengerBeforeRemoval = localTokenMessenger;\n        require(\n            _localTokenMessengerBeforeRemoval != address(0),\n            \"No local TokenMessenger is set\"\n        );\n\n        delete localTokenMessenger;\n        emit LocalTokenMessengerRemoved(_localTokenMessengerBeforeRemoval);\n    }\n\n    /**\n     * @notice Set tokenController to `newTokenController`, and\n     * emit `SetTokenController` event.\n     * @dev newTokenController must be nonzero.\n     * @param newTokenController address of new token controller\n     */\n    function setTokenController(address newTokenController)\n        external\n        override\n        onlyOwner\n    {\n        _setTokenController(newTokenController);\n    }\n\n    /**\n     * @notice Get the local token address associated with the given\n     * remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken)\n        external\n        view\n        override\n        returns (address)\n    {\n        return _getLocalToken(remoteDomain, remoteToken);\n    }\n\n    // ============ Internal Utils ============\n    /**\n     * @notice Returns true if the message sender is the registered local TokenMessenger\n     * @return True if the message sender is the registered local TokenMessenger\n     */\n    function _isLocalTokenMessenger() internal view returns (bool) {\n        return\n            address(localTokenMessenger) != address(0) &amp;&amp;\n            msg.sender == address(localTokenMessenger);\n    }\n}\n</code></pre> <p>This contract and the interfaces and contracts it relies on are stored in Circle's <code>evm-cctp-contracts</code> repository on GitHub.</p> <p>Most of the methods of the Token Minter contract can be called only by the registered Token Messenger. However, there is one publicly accessible method, a public view function that allows anyone to query the local token associated with a remote domain and token.</p> <ul> <li> <p><code>getLocalToken</code>: A read-only function that returns the local token address associated with a given remote domain and token.</p> Parameters <p><code>remoteDomain</code> uint32</p> <p>The remote blockchain domain where the token resides.</p> <p><code>remoteToken</code> bytes32</p> <p>The address of the token on the remote domain.</p> Returns <p>address</p> <p>The local token address.</p> </li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#how-to-interact-with-cctp-contracts","title":"How to Interact with CCTP Contracts","text":"<p>Before writing your own contracts, it's essential to understand the key functions and events of the Wormhole CCTP contracts. The primary functionality revolves around the following:</p> <ul> <li>Sending tokens with a message payload: Initiating a cross-chain transfer of Circle-supported assets along with a message payload to a specific target address on the target chain.</li> <li>Receiving tokens with a message payload: Validating messages received from other chains via Wormhole and then minting the tokens for the recipient.</li> </ul>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#sending-tokens-and-messages","title":"Sending Tokens and Messages","text":"<p>To initiate a cross-chain transfer, you must call the <code>transferTokensWithPayload</code> method of Wormhole's Circle Integration (CCTP) contract. Once you have initiated a transfer, you must fetch the attested Wormhole message and parse the transaction logs to locate a transfer message emitted by the Circle Bridge contract. Then, a request must be sent to Circle's off-chain process with the transfer message to grab the attestation from the process's response, which validates the token mint on the target chain.</p> <p>To streamline this process, you can use the Wormhole Solidity SDK, which exposes the <code>WormholeRelayerSDK.sol</code> contract, including the <code>CCTPSender</code> abstract contract. By inheriting this contract, you can transfer USDC while automatically relaying the message payload to the destination chain via a Wormhole-deployed relayer.</p> CCTP Sender contract <pre><code>abstract contract CCTPSender is CCTPBase {\n    uint8 internal constant CONSISTENCY_LEVEL_FINALIZED = 15;\n\n    using CCTPMessageLib for *;\n\n    mapping(uint16 =&gt; uint32) public chainIdToCCTPDomain;\n\n    /**\n     * Sets the CCTP Domain corresponding to chain 'chain' to be 'cctpDomain'\n     * So that transfers of USDC to chain 'chain' use the target CCTP domain 'cctpDomain'\n     *\n     * This action can only be performed by 'cctpConfigurationOwner', who is set to be the deployer\n     *\n     * Currently, cctp domains are:\n     * Ethereum: Wormhole chain id 2, cctp domain 0\n     * Avalanche: Wormhole chain id 6, cctp domain 1\n     * Optimism: Wormhole chain id 24, cctp domain 2\n     * Arbitrum: Wormhole chain id 23, cctp domain 3\n     * Base: Wormhole chain id 30, cctp domain 6\n     *\n     * These can be set via:\n     * setCCTPDomain(2, 0);\n     * setCCTPDomain(6, 1);\n     * setCCTPDomain(24, 2);\n     * setCCTPDomain(23, 3);\n     * setCCTPDomain(30, 6);\n     */\n    function setCCTPDomain(uint16 chain, uint32 cctpDomain) public {\n        require(\n            msg.sender == cctpConfigurationOwner,\n            \"Not allowed to set CCTP Domain\"\n        );\n        chainIdToCCTPDomain[chain] = cctpDomain;\n    }\n\n    function getCCTPDomain(uint16 chain) internal view returns (uint32) {\n        return chainIdToCCTPDomain[chain];\n    }\n\n    /**\n     * transferUSDC wraps common boilerplate for sending tokens to another chain using IWormholeRelayer\n     * - approves the Circle TokenMessenger contract to spend 'amount' of USDC\n     * - calls Circle's 'depositForBurnWithCaller'\n     * - returns key for inclusion in WormholeRelayer `additionalVaas` argument\n     *\n     * Note: this requires that only the targetAddress can redeem transfers.\n     *\n     */\n\n    function transferUSDC(\n        uint256 amount,\n        uint16 targetChain,\n        address targetAddress\n    ) internal returns (MessageKey memory) {\n        IERC20(USDC).approve(address(circleTokenMessenger), amount);\n        bytes32 targetAddressBytes32 = addressToBytes32CCTP(targetAddress);\n        uint64 nonce = circleTokenMessenger.depositForBurnWithCaller(\n            amount,\n            getCCTPDomain(targetChain),\n            targetAddressBytes32,\n            USDC,\n            targetAddressBytes32\n        );\n        return\n            MessageKey(\n                CCTPMessageLib.CCTP_KEY_TYPE,\n                abi.encodePacked(getCCTPDomain(wormhole.chainId()), nonce)\n            );\n    }\n\n    // Publishes a CCTP transfer of 'amount' of USDC\n    // and requests a delivery of the transfer along with 'payload' to 'targetAddress' on 'targetChain'\n    //\n    // The second step is done by publishing a wormhole message representing a request\n    // to call 'receiveWormholeMessages' on the address 'targetAddress' on chain 'targetChain'\n    // with the payload 'abi.encode(amount, payload)'\n    // (and we encode the amount so it can be checked on the target chain)\n    function sendUSDCWithPayloadToEvm(\n        uint16 targetChain,\n        address targetAddress,\n        bytes memory payload,\n        uint256 receiverValue,\n        uint256 gasLimit,\n        uint256 amount\n    ) internal returns (uint64 sequence) {\n        MessageKey[] memory messageKeys = new MessageKey[](1);\n        messageKeys[0] = transferUSDC(amount, targetChain, targetAddress);\n\n        bytes memory userPayload = abi.encode(amount, payload);\n        address defaultDeliveryProvider = wormholeRelayer\n            .getDefaultDeliveryProvider();\n\n        (uint256 cost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n            targetChain,\n            receiverValue,\n            gasLimit\n        );\n\n        sequence = wormholeRelayer.sendToEvm{value: cost}(\n            targetChain,\n            targetAddress,\n            userPayload,\n            receiverValue,\n            0,\n            gasLimit,\n            targetChain,\n            address(0x0),\n            defaultDeliveryProvider,\n            messageKeys,\n            CONSISTENCY_LEVEL_FINALIZED\n        );\n    }\n\n    function addressToBytes32CCTP(address addr) private pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n}\n</code></pre> <p>The <code>CCTPSender</code> abstract contract exposes the <code>sendUSDCWithPayloadToEvm</code> function. This function publishes a CCTP transfer of the provided <code>amount</code> of USDC and requests that the transfer be delivered along with a <code>payload</code> to the specified <code>targetAddress</code> on the <code>targetChain</code>.</p> <pre><code>function sendUSDCWithPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    uint256 amount\n) internal returns (uint64 sequence) \n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>The target chain for the transfer.</p> <p><code>targetAddress</code> address</p> <p>The target address for the transfer.</p> <p><code>payload</code> bytes</p> <p>Arbitrary payload to be delivered to the target chain via Wormhole.</p> <p><code>gasLimit</code> uint256</p> <p>The gas limit with which to call <code>targetAddress</code>.</p> <p><code>amount</code> uint256</p> <p>The amount of USDC to transfer.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published VAA containing the delivery instructions.</p> <p>When the <code>sendUSDCWithPayloadToEvm</code> function is called, the following series of actions are executed:</p> <ol> <li> <p>USDC transfer initiation:</p> <ul> <li>The Circle Token Messenger contract is approved to spend the specified amount of USDC.</li> <li>The <code>depositForBurnWithCaller</code> function of the Token Messenger contract is invoked.</li> <li>A key is returned, which is to be provided to the Wormhole relayer for message delivery.</li> </ul> </li> <li> <p>Message encoding: The message <code>payload</code> is encoded for transmission via the Wormhole relayer. The encoded value also includes the <code>amount</code> so that it can be checked on the target chain.</p> </li> <li>Retrieving delivery provider: The current default delivery provider's address is retrieved.</li> <li>Cost calculation: The transfer cost is calculated using the Wormhole relayer's <code>quoteEVMDeliveryPrice</code> function.</li> <li> <p>Message dispatch:</p> <ul> <li>The <code>sendToEvm</code> function of the Wormhole relayer is called with the encoded payload, the delivery provider's address, and the arguments passed to <code>sendUSDCWithPayloadToEvm</code>.</li> <li>The function must be called with <code>msg.value</code> set to the previously calculated cost (from step 4).</li> <li>This function publishes an instruction for the delivery provider to relay the payload and VAAs specified by the key (from step 1) to the target address on the target chain.</li> </ul> </li> </ol> <p>A simple example implementation is as follows:</p> <pre><code>function sendCrossChainDeposit(\n    uint16 targetChain,\n    address targetAddress,\n    address recipient,\n    uint256 amount,\n    uint256,\n    gasLimit\n) public payable {\n    uint256 cost = quoteCrossChainDeposit(targetChain);\n    require(\n        msg.value == cost,\n        \"msg.value must be quoteCrossChainDeposit(targetChain)\"\n    );\n\n    IERC20(USDC).transferFrom(msg.sender, address(this), amount);\n\n    bytes memory payload = abi.encode(recipient);\n    sendUSDCWithPayloadToEvm(\n        targetChain,\n        targetAddress, // address (on targetChain) to send token and payload to\n        payload,\n        0, // receiver value\n        gasLimit,\n        amount\n    );\n}\n</code></pre> <p>The above example sends a specified amount of USDC and the recipient's address as a payload to a target contract on another chain, ensuring that the correct cost is provided for the cross-chain transfer.</p>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#receiving-tokens-and-messages","title":"Receiving Tokens and Messages","text":"<p>To complete the cross-chain transfer, you must invoke the <code>redeemTokensWithPayload</code> function on the target Wormhole Circle Integration contract. This function verifies the message's authenticity, decodes the payload, confirms the recipient and sender, checks message delivery, and then calls the <code>receiveMessage</code> function of the Message Transmitter contract.</p> <p>Using the Wormhole-deployed relayer automatically triggers the <code>receiveWormholeMessages</code> function. This function is defined in the <code>WormholeRelayerSDK.sol</code> contract from the Wormhole Solidity SDK and is implemented within the <code>CCTPReceiver</code> abstract contract.</p> CCTP Receiver contract <pre><code>abstract contract CCTPReceiver is CCTPBase {\n    function redeemUSDC(\n        bytes memory cctpMessage\n    ) internal returns (uint256 amount) {\n        (bytes memory message, bytes memory signature) = abi.decode(\n            cctpMessage,\n            (bytes, bytes)\n        );\n        uint256 beforeBalance = IERC20(USDC).balanceOf(address(this));\n        circleMessageTransmitter.receiveMessage(message, signature);\n        return IERC20(USDC).balanceOf(address(this)) - beforeBalance;\n    }\n\n    function receiveWormholeMessages(\n        bytes memory payload,\n        bytes[] memory additionalMessages,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32 deliveryHash\n    ) external payable {\n        // Currently, 'sendUSDCWithPayloadToEVM' only sends one CCTP transfer\n        // That can be modified if the integrator desires to send multiple CCTP transfers\n        // in which case the following code would have to be modified to support\n        // redeeming these multiple transfers and checking that their 'amount's are accurate\n        require(\n            additionalMessages.length &lt;= 1,\n            \"CCTP: At most one Message is supported\"\n        );\n\n        uint256 amountUSDCReceived;\n        if (additionalMessages.length == 1)\n            amountUSDCReceived = redeemUSDC(additionalMessages[0]);\n\n        (uint256 amount, bytes memory userPayload) = abi.decode(\n            payload,\n            (uint256, bytes)\n        );\n\n        // Check that the correct amount was received\n        // It is important to verify that the 'USDC' sent in by the relayer is the same amount\n        // that the sender sent in on the source chain\n        require(amount == amountUSDCReceived, \"Wrong amount received\");\n\n        receivePayloadAndUSDC(\n            userPayload,\n            amountUSDCReceived,\n            sourceAddress,\n            sourceChain,\n            deliveryHash\n        );\n    }\n\n    // Implement this function to handle in-bound deliveries that include a CCTP transfer\n    function receivePayloadAndUSDC(\n        bytes memory payload,\n        uint256 amountUSDCReceived,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32 deliveryHash\n    ) internal virtual {}\n}\n</code></pre> <p>Although you do not need to interact with the\u00a0<code>receiveWormholeMessages</code>\u00a0function directly, it's important to understand what it does. This function processes cross-chain messages and USDC transfers via Wormhole's Circle (CCTP) Bridge. Here's a summary of what it does:</p> <ol> <li>Validate additional messages: The function checks that there is at most one CCTP transfer message in the <code>additionalMessages</code> array, as it currently only supports processing a single CCTP transfer.</li> <li>Redeem USDC:<ul> <li>If there is a CCTP message, it calls the <code>redeemUSDC</code> function of the <code>CCTPReceiver</code> contract to decode and redeem the USDC.</li> <li>This results in the call of the <code>receiveMessage</code> function of Circle's Message Transmitter contract to redeem the USDC based on the provided message and signature.</li> <li>The amount of USDC received is calculated by subtracting the contract's previous balance from the current balance after redeeming the USDC.</li> </ul> </li> <li>Decode payload: The incoming payload is decoded, extracting both the expected amount of USDC and a <code>userPayload</code> (which could be any additional data).</li> <li>Verify the amount: It ensures that the amount of USDC received matches the amount encoded in the payload. If the amounts don't match, the transaction is reverted.</li> <li>Handle the payload and USDC: After verifying the amounts, <code>receivePayloadAndUSDC</code> is called, which is meant to handle the actual logic for processing the received payload and USDC transfer.</li> </ol> <p>You'll need to implement the <code>receivePayloadAndUSDC</code> function to transfer the USDC and handle the payload as your application needs. A simple example implementation is as follows:</p> <pre><code>function receivePayloadAndUSDC(\n    bytes memory payload,\n    uint256 amountUSDCReceived,\n    bytes32, // sourceAddress\n    uint16, // sourceChain\n    bytes32 // deliveryHash\n) internal override onlyWormholeRelayer {\n    address recipient = abi.decode(payload, (address));\n\n    IERC20(USDC).transfer(recipient, amountUSDCReceived);\n}\n</code></pre>"},{"location":"products/cctp-bridge/guides/cctp-contracts/#complete-example","title":"Complete Example","text":"<p>To view a complete example of creating a contract that integrates with Wormhole's CCTP contracts to send and receive USDC cross-chain, check out the Hello USDC repository on GitHub.</p>"},{"location":"products/cctp-bridge/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerHyperCoreEVM Website Developer DocsHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSonicEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block Explorer</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/","title":"Complete USDC Transfer Flow","text":"<p> Source code on GitHub</p> <p>In this guide, we will show you how to bridge native USDC across different blockchain networks using Circle's Cross-Chain Transfer Protocol (CCTP) and Wormhole's TypeScript SDK.</p> <p>Traditionally, cross-chain transfers using CCTP involve multiple manual steps, such as initiating the transfer on the source chain, relaying messages between chains, and covering gas fees on both the source and destination chains. Without the TypeScript SDK, developers must handle these operations independently, adding complexity and increasing the chance for errors, mainly when dealing with gas payments on the destination chain and native gas token management.</p> <p>Wormhole's TypeScript SDK simplifies this process by offering automated transfer relaying and handling gas payments on the destination chain. It also offers an option to include native gas tokens for seamless execution. This reduces developer overhead, makes transfers faster and more reliable, and enhances the user experience.</p> <p>In this guide, we'll first explore the theory behind CCTP and then provide a step-by-step tutorial for integrating Wormhole's TypeScript SDK into your application to streamline USDC transfers across multiple chains.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#core-concepts","title":"Core Concepts","text":"<p>When bridging assets across chains, there are two primary approaches to handling the transfer process: manual and automated. Below, you may find the differences between these approaches and how they impact the user experience:</p> <ul> <li> <p>Manual transfers: Manual transfers involve three key steps: initiating the transfer on the source chain, fetching the Circle attestation to verify the transfer, and completing the transfer on the destination chain.</p> </li> <li> <p>Automated transfers: Automatic transfers simplify the process by handling Circle attestations and finalization for you. With Wormhole's automated relaying, you only need to initiate the transfer, and the rest is managed for you.</p> </li> </ul>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> <li>USDC tokens on supported chains. This tutorial uses Avalanche and Sepolia as examples.</li> <li>A wallet with a private key, funded with native tokens (testnet or mainnet) for gas fees.</li> </ul>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#supported-chains","title":"Supported Chains","text":"<p>The Wormhole SDK supports a wide range of EVM and non-EVM chains, allowing you to facilitate cross-chain transfers efficiently. You can find a complete list of supported chains in the supported networks page, which covers both Testnet and Mainnet environments.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#project-setup","title":"Project Setup","text":"<p>In this section, you'll set up your project for transferring USDC across chains using Wormhole's SDK and Circle's CCTP. We'll guide you through initializing the project, installing dependencies, and preparing your environment for cross-chain transfers.</p> <ol> <li> <p>Initialize the project: Start by creating a new directory for your project and initializing it with <code>npm</code>, which will create the <code>package.json</code> file for your project.</p> <pre><code>mkdir cctp-circle\ncd cctp-circle\nnpm init -y\n</code></pre> </li> <li> <p>Install dependencies: Install the Wormhole SDK.</p> <pre><code>npm install @wormhole-foundation/sdk\n</code></pre> </li> <li> <p>Set up secure access to your wallets: This guide assumes you are loading your <code>SOL_PRIVATE_KEY</code> and <code>EVM_PRIVATE_KEY</code> from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> <li> <p>Create a <code>helpers.ts</code> file: To simplify the interaction between chains, create a file to store utility functions, setting up signers for different chains, and managing transaction relays.</p> <ol> <li> <p>Create the helpers file:</p> <pre><code>mkdir helpers\ntouch helpers/helpers.ts\n</code></pre> </li> <li> <p>Open the <code>helpers.ts</code> file and add the following code:</p> <pre><code>import {\n  ChainAddress,\n  ChainContext,\n  Network,\n  Signer,\n  Wormhole,\n  Chain,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\n\nexport interface SignerStuff&lt;N extends Network, C extends Chain&gt; {\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}\n\n// Signer setup function for different blockchain platforms\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer;\n  const platform = chain.platform.utils()._platform;\n\n  switch (platform) {\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), 'SOL_PRIVATE_KEY');\n      break;\n    case 'Evm':\n      signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), 'ETH_PRIVATE_KEY');\n      break;\n    default:\n      throw new Error('Unsupported platform: ' + platform);\n  }\n\n  return {\n    chain,\n    signer: signer as Signer&lt;N, C&gt;,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n</code></pre> <ul> <li><code>getSigner</code>: Based on the chain you're working with (EVM, Solana, etc.), this function retrieves a signer for that specific platform. The signer is responsible for signing transactions and interacting with the blockchain. It securely uses the provided private key.</li> </ul> </li> </ol> </li> <li> <p>Create the main script: Create a new file named <code>manual-transfer.ts</code> to hold your script for transferring USDC across chains.</p> <ol> <li> <p>Create the <code>manual-transfer.ts</code> file in the <code>src</code> directory:</p> <pre><code>mkdir src\ntouch src/manual-transfer.ts\n</code></pre> </li> <li> <p>Open the <code>manual-transfer.ts</code> file and begin by importing the necessary modules from the SDK and helper files:</p> <pre><code>import { wormhole, amount } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from './helpers/helpers';\n</code></pre> <ul> <li><code>evm</code>: This import is for working with EVM-compatible chains, like Avalanche, Ethereum, Base Sepolia, and more.</li> <li><code>solana</code>: This adds support for Solana, a non-EVM chain.</li> <li><code>getSigner</code>: Utility function from the helper file that retrieves the signer to sign transactions.</li> </ul> </li> </ol> </li> </ol>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#manual-transfers","title":"Manual Transfers","text":"<p>In a manual USDC transfer, you perform each step of the cross-chain transfer process individually. This approach allows for greater control and flexibility over how the transfer is executed, which can be helpful in scenarios where you need to customize certain aspects of the transfer, such as gas management, specific chain selection, or signing transactions manually.</p> <p>This section will guide you through performing a manual USDC transfer across chains using the Wormhole SDK and Circle's CCTP.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#set-up-the-transfer-environment","title":"Set Up the Transfer Environment","text":""},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#configure-transfer-details","title":"Configure Transfer Details","text":"<p>Before initiating a cross-chain transfer, you must set up the chain context and signers for both the source and destination chains.</p> <ol> <li> <p>Initialize the Wormhole SDK: Initialize the <code>wormhole</code> function for the <code>Testnet</code> environment and specify the platforms (EVM and Solana) to support. This allows us to interact with both EVM-compatible chains like Avalanche and non-EVM chains like Solana if needed.</p> <pre><code>(async function () {\n  const wh = await wormhole('Testnet', [evm, solana]);\n</code></pre> <p>Note</p> <p>You can replace <code>'Testnet'</code> with <code>'Mainnet'</code> if you want to perform transfers on Mainnet.</p> </li> <li> <p>Set up source and destination chains: Specify the source chain (Avalanche) and the destination chain (Sepolia) using the <code>getChain</code> method. This allows us to define where to send the USDC and where to receive them.</p> <pre><code>  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Sepolia');\n</code></pre> </li> <li> <p>Configure the signers: Use the <code>getSigner</code> function to retrieve the signers responsible for signing transactions on the respective chains. This ensures that transactions are correctly authorized on both the source and destination chains.</p> <pre><code>  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n</code></pre> </li> <li> <p>Define the transfer amount: The amount of USDC to transfer is specified. In this case, we're transferring 0.1 USDC, which is parsed and converted into the base units expected by the Wormhole SDK.</p> <pre><code>  const amt = 100_000n;\n</code></pre> </li> <li> <p>Set transfer mode: We specify that the transfer should be manual by setting <code>automatic = false</code>. This means you will need to handle the attestation and finalization steps yourself.</p> <pre><code>  const automatic = false;\n</code></pre> </li> </ol>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#initiate-the-transfer","title":"Initiate the Transfer","text":"<p>To begin the manual transfer process, you first need to create the transfer object and then manually initiate the transfer on the source chain.</p> <ol> <li> <p>Create the Circle transfer object: The <code>wh.circleTransfer()</code> function creates an object with the  transfer details, such as the amount of USDC, the source and destination addresses, and the mode. However, this does not initiate the transfer itself.</p> <pre><code>  const xfer = await wh.circleTransfer(\n    amt,\n    source.address,\n    destination.address,\n    automatic\n  );\n</code></pre> </li> <li> <p>Start the transfer: The <code>initiateTransfer</code> function sends the transaction on the source chain. It involves signing and sending the transaction using the source signer. This will return a list of transaction IDs (<code>srcTxIds</code>) that you can use to track the transfer.</p> <pre><code>  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n</code></pre> </li> </ol>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#fetch-the-circle-attestation-vaa","title":"Fetch the Circle Attestation (VAA)","text":"<p>Once you initialize the transfer on the source chain, you must fetch the VAA from Circle. The VAA serves as cryptographic proof that CCTP has successfully recognized the transfer. The transfer cannot be completed on the destination chain until this attestation is fetched.</p> <ol> <li> <p>Set a timeout: Fetching the attestation can take some time, so setting a timeout is common. In this example, we set the timeout to 60 seconds.</p> <pre><code>  const timeout = 60 * 1000; // Timeout in milliseconds (60 seconds)\n</code></pre> </li> <li> <p>Fetch the attestation: After initiating the transfer, you can use the <code>fetchAttestation()</code> function to retrieve the VAA. This function will wait until the attestation is available or you reach the specified timeout.</p> <pre><code>  const attestIds = await xfer.fetchAttestation(timeout);\n  console.log(`Got Attestation: `, attestIds);\n</code></pre> <p>The <code>attestIds</code> will contain the details of the fetched attestation, which Wormhole uses to complete the transfer on the destination chain.</p> </li> </ol>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#complete-the-transfer-on-the-destination-chain","title":"Complete the Transfer on the Destination Chain","text":"<p>Once you fetch the VAA correctly, the final step is to complete the transfer on the destination chain (Sepolia in this example). This involves redeeming the VAA, which moves the USDC from Circle's custody onto the destination chain.</p> <p>Use the <code>completeTransfer()</code> function to finalize the transfer on the destination chain. This requires the destination signer to sign and submit the transaction to the destination chain.</p> <pre><code>  const dstTxids = await xfer.completeTransfer(destination.signer);\n  console.log(`Completed Transfer: `, dstTxids);\n\n  console.log('Circle Transfer status: ', xfer);\n\n  process.exit(0);\n</code></pre> <p>The <code>dstTxIds</code> will hold the transaction IDs for the transfer on the destination chain, confirming that the transfer has been completed.</p> <p>You can find the full code for the manual USDC transfer script below:</p> <code>manual-transfer.ts</code> <pre><code>import { wormhole, amount } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from './helpers/helpers';\n\n(async function () {\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Set up source and destination chains\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Sepolia');\n\n  // Configure the signers\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Define the transfer amount (in the smallest unit, so 0.1 USDC = 100,000 units assuming 6 decimals)\n  const amt = 100_000n;\n\n  const automatic = false;\n\n  // Create the Circle transfer object\n  const xfer = await wh.circleTransfer(\n    amt,\n    source.address,\n    destination.address,\n    automatic\n  );\n\n  console.log('Circle Transfer object created:', xfer);\n\n  // Initiate the transfer on the source chain (Avalanche)\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  // Wait for Circle Attestation (VAA)\n  const timeout = 60 * 1000; // Timeout in milliseconds (60 seconds)\n  console.log('Waiting for Attestation');\n  const attestIds = await xfer.fetchAttestation(timeout);\n  console.log(`Got Attestation: `, attestIds);\n\n  // Complete the transfer on the destination chain (Sepolia)\n  console.log('Completing Transfer');\n  const dstTxids = await xfer.completeTransfer(destination.signer);\n  console.log(`Completed Transfer: `, dstTxids);\n\n  console.log('Circle Transfer status: ', xfer);\n\n  process.exit(0);\n})();\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#run-manual-transfer","title":"Run Manual Transfer","text":"<p>To execute the manual transfer script, you can use <code>ts-node</code> to run the TypeScript file directly</p> <pre><code>npx ts-node src/manual-transfer.ts\n</code></pre> <p>This will initiate the USDC transfer from the source chain (Avalanche) and complete it on the destination chain (Sepolia).</p> <p>You can monitor the status of the transaction on the Wormhole explorer.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#complete-partial-transfer","title":"Complete Partial Transfer","text":"<p>In some cases, a manual transfer may start but not finish, possibly because the user terminates their session or an issue arises before the transfer can be completed. The Wormhole SDK allows you to reconstitute the transfer object from the transaction hash on the source chain.</p> <p>This feature is handy for recovering an incomplete transfer or when debugging.</p> <p>Here's how you can complete a partial transfer using just the source chain and transaction hash:</p> <pre><code>  const xfer = await CircleTransfer.from(\n    wh,\n    {\n      chain: 'Avalanche',\n      txid: '0x6b6d5f101a32aa6d2f7bf0bf14d72bfbf76a640e1b2fdbbeeac5b82069cda4dd',\n    },\n    timeout\n  );\n\n  const dstTxIds = await xfer.completeTransfer(destination.signer);\n  console.log('Completed transfer: ', dstTxIds);\n</code></pre> <p>You will need to provide the below requirements to complete the partial transfer:  - Transaction ID (<code>txId</code>): The transaction hash from the source chain where the transfer was initiated.  - Signer for the destination chain (<code>destination.signer</code>): The wallet or private key that can authorize and complete the transfer on the destination chain. This signer is the same as the <code>destination.signer</code> defined in the manual transfer setup.</p> <p>This allows you to resume the transfer process by rebuilding the transfer object and completing it on the destination chain. It's especially convenient when debugging or handling interrupted transfers.</p> <p>You can find the full code for the manual USDC transfer script below:</p> <code>partial-transfer.ts</code> <pre><code>import { CircleTransfer, wormhole } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from '../helpers/helpers';\n\n(async function () {\n  // Initialize the Wormhole object for the Testnet environment and add supported chains (evm and solana)\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Grab chain Contexts -- these hold a reference to a cached rpc client\n  const rcvChain = wh.getChain('Sepolia');\n\n  // Get signer from local key\n  const destination = await getSigner(rcvChain);\n\n  const timeout = 60 * 1000; // Timeout in milliseconds (60 seconds)\n\n  // Rebuild the transfer from the source txid\n  const xfer = await CircleTransfer.from(\n    wh,\n    {\n      chain: 'Avalanche',\n      txid: '0x6b6d5f101a32aa6d2f7bf0bf14d72bfbf76a640e1b2fdbbeeac5b82069cda4dd',\n    },\n    timeout\n  );\n\n  const dstTxIds = await xfer.completeTransfer(destination.signer);\n  console.log('Completed transfer: ', dstTxIds);\n\n  console.log('Circle Transfer status: ', xfer);\n\n  process.exit(0);\n})();\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#automatic-transfers","title":"Automatic Transfers","text":"<p>In an automatic CCTP transfer, you submit one transaction on the source chain, and Wormhole's relayer does the rest: it observes the Wormhole message and Circle burn, obtains the required attestations, and submits them on the destination chain to mint native USDC. You don't fetch a VAA or Circle attestation or call redeem, the relayer finalizes (and can handle destination gas). </p> <p>This section will guide you through performing an automatic USDC transfer across chains using the Wormhole SDK and Circle's CCTP.</p> <p> </p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#set-up-the-transfer-environment_1","title":"Set Up the Transfer Environment","text":""},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#configure-transfer-details_1","title":"Configure Transfer Details","text":"<p>The setup for automatic transfers is similar to manual transfers, with the key difference being that the <code>automatic</code> flag is <code>true</code>. This indicates that Wormhole will handle the attestation and finalization steps for you.</p> <pre><code>  const automatic = true;\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#set-native-gas-amount","title":"Set Native Gas Amount","text":"<p>Optionally include a native gas drop for the destination, allowing your receiver to execute without pre-funding. Specify the amount in the destination chain's native token (wei); use 0 to skip.</p> <pre><code>  const nativeGas = amount.units(amount.parse('0.1', 6));\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#initiate-the-transfer_1","title":"Initiate the Transfer","text":"<p>The transfer process is the same as that for manual transfers. You create the transfer object and then start the transfer on the source chain.</p> <pre><code>  const xfer = await wh.circleTransfer(\n    amt,\n    source.address,\n    destination.address,\n    automatic,\n    undefined,\n    nativeGas\n  );\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#log-transfer-details","title":"Log Transfer Details","text":"<p>After initiating the transfer, you can log the transaction IDs for both the source and destination chains. This will help you track the progress of the transfer.</p> <pre><code>  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  process.exit(0);\n</code></pre> <p>You can find the full code for the automatic USDC transfer script below:</p> <code>automatic-transfer.ts</code> <pre><code>import { wormhole, amount } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from '../helpers/helpers';\n\n(async function () {\n  // Initialize the Wormhole object for the Testnet environment and add supported chains (evm and solana)\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Set up source and destination chains\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Sepolia');\n\n  // Configure the signers\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Define the transfer amount (in the smallest unit, so 0.1 USDC = 100,000 units assuming 6 decimals)\n  const amt = 100_000_001n;\n\n  // Set the automatic transfer\n  const automatic = true;\n\n  // Set the native gas amount\n  const nativeGas = amount.units(amount.parse('0.1', 6));\n\n  // Create the Circle transfer object (USDC-only)\n  const xfer = await wh.circleTransfer(\n    amt,\n    source.address,\n    destination.address,\n    automatic,\n    undefined,\n    nativeGas\n  );\n\n  console.log('Circle Transfer object created:', xfer);\n\n  // Initiate the transfer on the source chain (Avalanche)\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  process.exit(0);\n})();\n</code></pre>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#run-automatic-transfer","title":"Run Automatic Transfer","text":"<p>Assuming you have created a new <code>automatic-transfer.ts</code> file for automatic transfers under the <code>src</code> directory, use the following command to run it with <code>ts-node</code>:</p> <pre><code>npx ts-node src/automatic-transfer.ts\n</code></pre> <p>The automatic relayer will take care of fetching the attestation and completing the transfer for you.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#resources","title":"Resources","text":"<p>If you'd like to explore the complete project or need a reference while following this tutorial, you can find the complete codebase in Wormhole's demo GitHub repository. The repository includes all the example scripts and configurations needed to perform USDC cross-chain transfers, including manual, automatic, and partial transfers using the Wormhole SDK and Circle's CCTP.</p>"},{"location":"products/cctp-bridge/tutorials/complete-usdc-transfer/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've gained hands-on experience with Circle's CCTP and the Wormhole SDK. You've learned to perform manual and automatic USDC transfers across multiple chains and recover partial transfers if needed.</p> <p>By following these steps, you've learned how to:</p> <ul> <li>Set up cross-chain transfers for native USDC between supported chains.</li> <li>Handle both manual and automatic relaying of transactions.</li> <li>Recover and complete incomplete transfers using the transaction hash and the destination chain's signer.</li> </ul> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/connect/faqs/","title":"Connect FAQs","text":""},{"location":"products/connect/faqs/#what-types-of-assets-does-connect-support","title":"What types of assets does Connect support?","text":"<p>Connect supports both native and wrapped assets across all Wormhole-supported blockchains. This includes:</p> <ul> <li>Major stablecoins like USDT and USDC (via CCTP).</li> <li>Native gas tokens such as ETH, SOL, etc.</li> <li>Cross-chain asset swaps through integrators like Mayan.</li> </ul> <p>When bridging assets through Wrapped Token Transfers (WTT), depending on the chain and token, assets may arrive as Wormhole-wrapped tokens on the destination chain.</p>"},{"location":"products/connect/faqs/#what-chains-does-connect-support","title":"What chains does Connect support?","text":"<p>Connect supports around 30 chains, spanning various blockchain runtimes:</p> <ul> <li>EVM-based chains (Ethereum, Base, Arbitrum, BSC, etc.)</li> <li>Solana</li> <li>Move-based chains (Sui, Aptos)</li> </ul> <p>For a complete list of supported chains, see the Connect-supported chains list.</p>"},{"location":"products/connect/faqs/#what-is-gas-dropoff","title":"What is gas dropoff?","text":"<p>Gas dropoff allows users to receive gas for transaction fees on the destination chain, eliminating the need to acquire the native gas token from a centralized exchange. The relayer automatically swaps part of the transferred assets into the native gas token, enabling seamless entry into new ecosystems.</p>"},{"location":"products/connect/faqs/#can-i-customize-connect-inside-my-application","title":"Can I customize Connect inside my application?","text":"<p>Connect can be fully customized to choose the chains and assets you wish to support. You may also select different themes and colors to tailor Connect for your decentralized application. For details, see the GitHub readme.</p>"},{"location":"products/connect/faqs/#how-can-i-disable-specific-routes","title":"How can I disable specific routes?","text":"<p>Use <code>isRouteSupportedHandler</code> in your <code>WormholeConnectConfig</code>. The callback runs when Connect evaluates a route for the current selection. If it returns <code>false</code>, that exact route is hidden in the widget, so the user cannot select it.</p> <p>Common patterns you can implement include:</p> <ul> <li>Disabling all routes of a given type (<code>AutomaticTokenBridge</code> or <code>ManualTokenBridge</code>).</li> <li>Disabling routes by token using <code>fromToken</code> or <code>toToken</code>.</li> <li>Disabling routes by direction using <code>fromChain</code> or <code>toChain</code>.</li> </ul> <p>Example: Disable all <code>AutomaticTokenBridge</code> routes</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  // ...\n  isRouteSupportedHandler: async ({ route }) =&gt; {\n    if (route === 'AutomaticTokenBridge') {\n      return false;\n    }\n    return true; // keep other routes visible\n  },\n};\n</code></pre> <p>Example: Disable a specific route for a particular token</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst BLOCKED_ADDRESSES = new Set&lt;string&gt;(['INSERT_TOKEN_ADDRESS']);\n\nconst config: config.WormholeConnectConfig = {\n  // ...\n  isRouteSupportedHandler: async ({ route, fromToken }) =&gt; {\n    const tokenAddress =\n      fromToken.tokenId !== 'native' ? fromToken.tokenId.address : 'native';\n\n    if (\n      BLOCKED_ADDRESSES.has(tokenAddress) &amp;&amp;\n      route === 'AutomaticTokenBridge'\n    ) {\n      return false;\n    }\n    return true; // keep other routes visible\n  },\n};\n</code></pre> <p>Example: Disable <code>AutomaticTokenBridge</code> from a specific chain</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst BLOCKED_SOURCE_CHAINS = new Set&lt;Chain&gt;(['INSERT_CHAIN_NAME']);\n\nconst config: config.WormholeConnectConfig = {\n  // ...\n  isRouteSupportedHandler: async ({ route, fromChain }) =&gt; {\n    if (\n      BLOCKED_SOURCE_CHAINS.has(fromChain) &amp;&amp;\n      route === 'AutomaticTokenBridge'\n    ) {\n      return false;\n    }\n    return true; // keep other routes visible\n  },\n};\n</code></pre>"},{"location":"products/connect/faqs/#how-can-i-hide-specific-tokens-from-the-picker","title":"How can I hide specific tokens from the picker?","text":"<p>Use <code>isTokenSupportedHandler</code> in your <code>WormholeConnectConfig</code>. The callback runs for each token candidate; if it returns <code>false</code>, that token is not shown in the picker and can't be selected.</p> <p>Example: Hide a token by address</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst BLOCKED_ADDRESSES = new Set&lt;string&gt;(['INSERT_TOKEN_ADDRESS']);\n\nconst config: config.WormholeConnectConfig = {\n  // ...\n  isTokenSupportedHandler: (token) =&gt; {\n    // Address string provided by Connect\n    const addr = token.addressString;\n\n    if (addr &amp;&amp; BLOCKED_ADDRESSES.has(addr)) {\n      return false;\n    }\n    return true; // show all others\n  },\n};\n</code></pre>"},{"location":"products/connect/faqs/#which-functions-or-events-does-connect-rely-on-for-ntt-integration","title":"Which functions or events does Connect rely on for NTT integration?","text":"<p>Connect relies on the NTT SDK for integration, with platform-specific implementations for Solana and EVM. The critical methods involved include initiate and redeem functions and rate capacity methods. These functions ensure Connect can handle token transfers and manage chain-rate limits.</p>"},{"location":"products/connect/faqs/#do-integrators-need-to-enable-wallets-like-phantom-or-backpack-in-connect","title":"Do integrators need to enable wallets like Phantom or Backpack in Connect?","text":"<p>Integrators don\u2019t need to explicitly enable wallets like Phantom or Backpack in Connect. However, the wallet must be installed and enabled in the user's browser to appear as an option in the interface.</p>"},{"location":"products/connect/faqs/#which-function-should-be-modified-to-set-priority-fees-for-solana-transactions","title":"Which function should be modified to set priority fees for Solana transactions?","text":"<p>In Wormhole Connect, you can modify the priority fees for Solana transactions by updating the <code>computeBudget/index.ts</code> file. This file contains the logic for adjusting the compute unit limit and priority fees associated with Solana transactions.</p> <p>To control the priority fee applied to your transactions, you can modify the <code>feePercentile</code> and <code>minPriorityFee</code> parameters in the <code>addComputeBudget</code> and <code>determineComputeBudget</code> functions.</p> <p>The relevant file can be found in the Connect codebase: <code>computeBudget/index.ts</code>.</p>"},{"location":"products/connect/faqs/#is-there-a-minimum-amount-for-bridging-with-cctp-or-the-connect-sdk","title":"Is there a minimum amount for bridging with CCTP or the Connect SDK?","text":"<p>There is no minimum amount for bridging via CCTP if the user covers the gas fees on both the source and destination chains. However, if the transfer is automatically relayed, a minimum amount is required to cover relay fees on the destination chain. The relay provider charges these fees at cost.</p> <p>Current relay fees:</p> <ul> <li>Ethereum L1: ~4.2 USDC</li> <li>Base, Optimism, Arbitrum, Avalanche: 0.3 USDC</li> </ul> <p>Additional notes:</p> <ul> <li>USDC to Solana: Wormhole's native CCTP route does not currently support automatic relaying of USDC to Solana. However, you can transfer USDC to Solana using the Mayan plugin for the SDK. Mayan is a protocol that integrates Wormhole and CCTP to enable this functionality.</li> <li>Frontend integrations:<ul> <li>Connect: A pre-built UI available via @wormhole-foundation/wormhole-connect.</li> <li> <p>TypeScript SDK: A lower-level integration option, available via @wormhole-foundation/sdk, allowing developers to build custom UIs.</p> <p>Note</p> <p>The TypeScript SDK was previously referred to as the \"Connect SDK,\" but this naming has since been discontinued.</p> </li> </ul> </li> </ul>"},{"location":"products/connect/get-started/","title":"Get Started with Connect","text":"<p> Source code on GitHub</p> <p>Connect helps you to easily add an intuitive, multichain asset transfer UI to your web applications. The guide demonstrates how to configure the Connect widget, add it to a React application, and view it locally.</p>"},{"location":"products/connect/get-started/#install-connect","title":"Install Connect","text":"<p>To install the Wormhole Connect npm package, run the following command:</p> <pre><code>npm i @wormhole-foundation/wormhole-connect\n</code></pre>"},{"location":"products/connect/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li> <p>Node.js and npm.</p> </li> <li> <p>(Optional) To test a transfer from your demo app, you'll need:</p> <ul> <li>A wallet with Sui testnet tokens.</li> <li>A wallet with an Avalanche Fuji address (to use as the recipient; no tokens required).</li> </ul> </li> </ul>"},{"location":"products/connect/get-started/#install-and-set-up-project","title":"Install and Set Up Project","text":"<ol> <li> <p>Clone the demo repository and navigate to the project directory:</p> <pre><code>git clone https://github.com/wormhole-foundation/demo-basic-connect.git\ncd demo-basic-connect\n</code></pre> </li> <li> <p>Install the dependencies:</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Start the application:</p> <pre><code>npm start\n</code></pre> </li> <li> <p>Open your browser to <code>http://localhost:3000</code> to view the application locally.</p> <p></p> </li> </ol>"},{"location":"products/connect/get-started/#configure-connect","title":"Configure Connect","text":"<p>Open the <code>App.tsx</code> file in your code editor of choice. You will see code similar to the following:</p> App.tsx<pre><code>import './App.css';\nimport WormholeConnect, { type config, WormholeConnectTheme } from '@wormhole-foundation/wormhole-connect';\n\nfunction App() {\n  const config: config.WormholeConnectConfig = {\n    // Define the network\n    network: 'Testnet',\n\n    // Define the chains\n    chains: ['Sui', 'Avalanche'],\n\n    // UI configuration\n    ui: {\n      title: 'SUI Connect TS Demo',\n    },\n  };\n\n  const theme: WormholeConnectTheme = {\n    // Define the theme\n    mode: 'dark',\n    primary: '#78c4b6',\n  };\n\n  return &lt;WormholeConnect config={config} theme={theme} /&gt;;\n}\n\nexport default App;\n</code></pre> <p>The preceding sample code configures Connect by setting values inside <code>config</code> and <code>theme</code> as follows:</p> <ul> <li>Defines the network: Options include <code>Mainnet</code>, <code>Testnet</code>, or <code>Devnet</code>.</li> <li>Defines chains to include: This example uses Sui and Avalanche. See the complete list of Connect-supported chain names if you would like to use different chains.</li> <li>Adds a title to UI: (Optional) If defined, it will render above the widget in the UI.</li> <li>Defines the theme: This example sets the mode to <code>dark</code> and adds a primary color.</li> </ul>"},{"location":"products/connect/get-started/#interact-with-connect","title":"Interact with Connect","text":"<p>Congratulations! You've successfully used Connect to create a simple multichain token transfer application. You can now follow the prompts in the UI to connect your developer wallets and send a test transfer.</p>"},{"location":"products/connect/get-started/#next-steps","title":"Next Steps","text":"<p>Use the following guides to configure your Connect instance and integrate it into your application:</p> <ul> <li>Data Configuration: Learn how to specify custom networks and RPC endpoints, integrate different bridging protocols, add new tokens, and more.</li> <li>Theme Configuration: Learn how to customize Connect's look and feel to match your application's branding.</li> <li>Integrate Connect into a React DApp: Learn how to integrate Connect into a React application, including setting up the widget and handling transfers.</li> </ul>"},{"location":"products/connect/overview/","title":"Connect Overview","text":"<p>With the Wormhole Connect widget, you can enable users to perform multichain asset transfers directly within your application. Connect simplifies the complexity of bridging, offering a single, intuitive point of interaction for moving assets across diverse blockchains. This empowers you to access liquidity and opportunities across any connected network seamlessly.</p>"},{"location":"products/connect/overview/#key-features","title":"Key Features","text":"<p>Connect's notable features include:</p> <ul> <li>In-app multichain transfers: Bridge assets without leaving your app.</li> <li>Customizable features: Specify chains and custom RPCs, manage tokens, and select bridging routes such as WTT, CCTP, or NTT.</li> <li>Customizable UI: Style the bridge interface to match your brand.</li> <li>Optional destination gas: Provide gas for initial transactions on the target chain.</li> <li>Wrapped and native assets support: Supports both wrapped and native tokens and integrates with Settlement.</li> </ul> <p>Be sure to check the Feature Support Matrix to find out which routes and features are supported for each chain.</p>"},{"location":"products/connect/overview/#how-it-works","title":"How It Works","text":"<p>When a user initiates a multichain transfer, Connect walks them through key steps and automates the transfer process behind the scenes, including:</p> <ol> <li>Initiating the transfer: Connect your chosen wallet to the source chain, select asset and source chain for the transfer.</li> <li>Finalize transfer setup: Connect the destination wallet, select the target chain and select a bridging route (manual or automatic).</li> <li>Transaction submission on source chain: Confirms the transfer details to trigger the asset lock or deposit on the initial blockchain. Connect will guide you through the transaction process.</li> <li>VAA or attestation creation: Wormhole Guardians observe the source transaction and produce a Verifiable Action Approval (VAA).</li> <li>Relaying to destination: The VAA or attestation is automatically relayed to the destination chain.</li> <li>Verification on destination: Contracts on the target chain receive and verify the incoming VAA.</li> <li>Asset release/minting: Upon successful verification, the equivalent assets are either released or minted on the target chain and delivered to your wallet.</li> </ol> <p>Tip</p> <p>If you want more hands on experience with Connect, checkout Portal Bridge.</p>"},{"location":"products/connect/overview/#use-cases","title":"Use Cases","text":"<p>Here are some key use cases that highlight the power and versatility of Connect:</p> <ul> <li> <p>Cross-Chain Swaps and Liquidity Aggregation</p> <ul> <li>Connect: Handles user-friendly asset transfers.</li> <li>Native Token Transfers: Moves native assets across chains.</li> <li>Queries: Fetches real-time prices for optimal trade execution.</li> </ul> </li> <li> <p>Cross-Chain Payment Widgets</p> <ul> <li>Connect: Facilitates seamless payments in various tokens.</li> <li>Native Token Transfers: Ensures direct, native asset transfers.</li> </ul> </li> <li> <p>Web3 Game Asset Transfers</p> <ul> <li>Connect: Provide a user-friendly way to move game tokens across chains.</li> <li>Wrapped Token Transfers: Handle the underlying lock-and-mint logic securely.</li> </ul> </li> </ul>"},{"location":"products/connect/overview/#next-steps","title":"Next Steps","text":"<p>Add Connect to your app with these key setup steps:</p> <p>Get Started with Connect</p> <p>Integrate Connect into your React or JavaScript application with minimal setup.</p> <p>Customize Transfer Logic</p> <p>Configure supported chains, tokens, and transfer routes to fit your app's needs.</p> <p>Customize the UI</p> <p>Adapt Connect's interface to match your brand using flexible styling options.</p>"},{"location":"products/connect/concepts/routes/","title":"Routes","text":""},{"location":"products/connect/concepts/routes/#routes-overview","title":"Routes Overview","text":"<p>This page explains the concept of routes in Wormhole Connect. To configure routes for your widget, check the Wormhole Connect Configuration.</p> <p>Routes are methods by which the widget will transfer the assets. Wormhole Connect supports Wrapped Token Transfers (WTT) for transferring any arbitrary token, and for specific tokens, it also supports more advanced transfer methods that provide superior UX.</p> <p>When you select the source chain, source token, and destination chain, Wormhole Connect will display the best routes available for that particular combination. In practice, if routes other than WTT are available, only those will be displayed. Check the feature matrix to see under which exact conditions the routes appear.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/connect/concepts/routes/#wtt-routes","title":"WTT Routes","text":"<p>WTT locks assets on the source chain and mints Wormhole-wrapped \"IOU\" tokens on the destination chain. To transfer the assets back, the Wormhole-wrapped tokens are burned, unlocking the tokens on their original chain.</p>"},{"location":"products/connect/concepts/routes/#manual-route","title":"Manual Route","text":"<p>The manual route transfer method requires two transactions: one on the origin chain to lock the tokens (or burn the Wormhole-wrapped tokens) and one on the destination chain to mint the Wormhole-wrapped tokens (or unlock the original tokens). To offer this option, enable the <code>bridge</code> route in the configuration.</p>"},{"location":"products/connect/concepts/routes/#automatic-route","title":"Automatic Route","text":"<p>Trustless relayers can execute the second transaction on the user's behalf, so the user only needs to perform one transaction on the origin chain to have the tokens delivered to the destination automatically - for a small fee. Wormhole Connect automatically detects whether the relayer supports a token and will display the option if the <code>relay</code> route is enabled in the configuration.</p>"},{"location":"products/connect/concepts/routes/#cctp-routes-usdc","title":"CCTP Routes (USDC)","text":"<p>Circle, the issuer of USDC, provides a native way for native USDC to be transferred between CCTP-enabled chains. Wormhole Connect can facilitate such transfers.</p> <p>Note that if native USDC is transferred from the CCTP-enabled chains to any other outside of this list, the transfer will be routed through WTT, and the resulting asset will be a Wormhole-wrapped token instead of native USDC.</p>"},{"location":"products/connect/concepts/routes/#manual-route-cctp","title":"Manual Route","text":"<p>This transfer method requires two transactions: one on the origin chain to burn the USDC and one on the destination chain to mint the USDC. The manual CCTP route relies on CCTP only and doesn't use Wormhole messaging in the background. Enable the <code>cctpManual</code> route in the configuration to offer this option.</p>"},{"location":"products/connect/concepts/routes/#automatic-route-cctp","title":"Automatic Route","text":"<p>Trustless relayers can execute the second transaction on the user's behalf. Therefore, the user only needs to perform one transaction on the origin chain to have the tokens delivered to the destination automatically\u2014for a small fee. To offer this option, enable the <code>cctpRelay</code> route in the configuration.</p>"},{"location":"products/connect/concepts/routes/#native-token-transfers-ntt-routes","title":"Native Token Transfers (NTT) Routes","text":"<p>Wormhole's Native Token Transfer (NTT) framework enables token issuers to retain full ownership of their tokens across any number of chains, unlike WTT. The token issuer must deploy NTT contracts, and Wormhole Connect needs to be configured with the appropriate <code>nttGroups</code> before such tokens are recognized as transferrable via NTT. Refer to the documentation in the NTT repository for more information about the contracts needed and the framework in general.</p>"},{"location":"products/connect/concepts/routes/#manual-route-ntt","title":"Manual Route","text":"<p>This transfer method requires two transactions: one on the origin chain to burn or lock the tokens and one on the destination chain to mint them. To offer this option, enable the <code>nttManual</code> route in the configuration.</p>"},{"location":"products/connect/concepts/routes/#automatic-route-ntt","title":"Automatic Route","text":"<p>Trustless relayers can execute the second transaction on the user's behalf, so the user only needs to perform one transaction on the origin chain to have the tokens delivered to the destination automatically\u2014for a small fee. Wormhole Connect automatically detects whether the relayer supports a token and will display the option if the <code>nttRelay</code> route is enabled in the configuration.</p>"},{"location":"products/connect/concepts/routes/#eth-bridge-route-for-native-eth-and-wsteth","title":"ETH Bridge Route for Native ETH and wstETH","text":"<p>Powered by Uniswap liquidity pools, this route can transfer native ETH or wstETH between certain EVMs without going through the native bridges. For example, you can transfer native ETH from Arbitrum to Optimism and end up with Optimism ETH all in one go. Supported chains are Ethereum, Arbitrum, Optimism, Base, Polygon (canonical wETH), BSC (canonical wETH), and Avalanche (canonical wETH).</p>"},{"location":"products/connect/concepts/routes/#automatic-route-eth","title":"Automatic Route","text":"<p>Only the relayed route is available due to the complexity of the transaction that needs to be executed at the destination. To offer this option, enable the <code>ethBridge</code> and/or <code>wstETHBridge</code> route in the configuration.</p>"},{"location":"products/connect/concepts/routes/#usdt-bridge-route","title":"USDT Bridge Route","text":"<p>Operating on the same technology as the ETH Bridge, this route can transfer USDT between certain EVMs without going through the native bridges. The resulting token will be the canonical USDT token on the destination instead of the Wormhole-wrapped variant. Supported chains are Ethereum, Polygon, Avalanche, Arbitrum, Optimism, BSC, and Base.</p>"},{"location":"products/connect/concepts/routes/#automatic-route-usdt","title":"Automatic Route","text":"<p>Only the relayed route is available due to the complexity of the transaction that needs to be executed on the destination. Enable the <code>usdtBridge</code> route in the configuration to offer this option.</p>"},{"location":"products/connect/concepts/routes/#tbtc-route","title":"tBTC Route","text":"<p>You can bridge Threshold's Bitcoin via this hybrid solution that combines WTT and Threshold's contracts. Native tBTC is first locked in the Wormhole WTT, transferred to the destination in the form of Wormhole-wrapped tBTC, which is then immediately locked in Threshold's contract that mints native tBTC for it. The net result is that the user ends up with native tBTC on chains where this Threshold contract is deployed (e.g., Solana, Polygon, Arbitrum, Optimism, or Base).</p> <p>Note that if native tBTC is transferred out of these chains to any other outside of this list, the transfer will be routed through WTT, and the resulting asset will be a Wormhole-wrapped token instead of native tBTC.</p>"},{"location":"products/connect/concepts/routes/#manual-route-tbtc","title":"Manual Route","text":"<p>This transfer method requires two transactions: one on the origin chain to burn or lock the tokens and one on the destination chain to mint them. To provide this option, enable the <code>tbtc</code> route in the configuration.</p>"},{"location":"products/connect/configuration/configuration-v0/","title":"Configure Your Connect Widget","text":"<p>Wormhole Connect is a flexible React widget that streamlines cross-chain asset transfers and enables seamless interoperability by leveraging Wormhole's powerful infrastructure. Designed for easy integration into decentralized applications (dApps), Wormhole Connect abstracts the complexities of cross-chain communication, providing a user-friendly experience for both developers and end users.</p> <p>This guide provides detailed instructions on configuring Wormhole Connect and highlights the many ways it can be customized to fit your specific needs, from integrating supported blockchains and tokens to tailoring the user interface.</p> <p>Note</p> <p>For documentation on the latest version of Connect, please refer to the current configuration documentation. If you are looking to upgrade from Wormhole Connect v0 to v1, please refer to the migration guide for detailed instructions.</p>"},{"location":"products/connect/configuration/configuration-v0/#get-started","title":"Get Started","text":"<p>Configure the Wormhole Connect React component by passing a <code>WormholeConnectConfig</code> object as the <code>config</code> attribute. If using the hosted version, provide <code>config</code> and <code>theme</code> as JSON-serialized strings on the mount point.</p> ReactHTML Tags <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  networks: ['ethereum', 'polygon', 'solana'],\n  tokens: ['ETH', 'WETH', 'MATIC', 'WMATIC'],\n  rpcs: {\n    ethereum: 'https://rpc.ankr.com/eth',\n    solana: 'https://rpc.ankr.com/solana',\n  }\n}\n\n&lt;WormholeConnect config={config} /&gt;\n</code></pre> <pre><code>&lt;div\n  id=\"wormhole-connect\"\n  data-config='{\"tokens\":[\"ETH\",\"WETH\",\"WBTC\",\"USDCeth\"]}'\n  data-theme='{\"background\":{\"default\": \"#81c784\"}}'\n/&gt;\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#examples","title":"Examples","text":"<p>Below are some examples of different ways you can configure Connect. See <code>WormholeConnectConfig</code> in the below file for a full view of the supported configuration parameters.</p> View <code>WormholeConnectConfig</code> <pre><code>import {\n  ChainName,\n  WormholeContext,\n  WormholeConfig,\n  ChainResourceMap,\n} from 'sdklegacy';\nimport MAINNET from './mainnet';\nimport TESTNET from './testnet';\nimport DEVNET from './devnet';\nimport type { WormholeConnectConfig } from './types';\nimport {\n  Network,\n  InternalConfig,\n  Route,\n  WrappedTokenAddressCache,\n} from './types';\nimport {\n  mergeCustomTokensConfig,\n  mergeNttGroups,\n  validateDefaults,\n} from './utils';\nimport { wrapEventHandler } from './events';\n\nimport { SDKConverter } from './converter';\n\nimport {\n  wormhole as getWormholeV2,\n  Wormhole as WormholeV2,\n  Network as NetworkV2,\n  Token as TokenV2,\n  Chain as ChainV2,\n  ChainTokens as ChainTokensV2,\n  WormholeConfigOverrides as WormholeConfigOverridesV2,\n} from '@wormhole-foundation/sdk';\n\nimport '@wormhole-foundation/sdk/addresses';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport aptos from '@wormhole-foundation/sdk/aptos';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport cosmwasm from '@wormhole-foundation/sdk/cosmwasm';\nimport algorand from '@wormhole-foundation/sdk/algorand';\n\nexport function buildConfig(\n  customConfig?: WormholeConnectConfig\n): InternalConfig&lt;NetworkV2&gt; {\n  const network = (\n    customConfig?.network ||\n    customConfig?.env || // TODO remove; deprecated\n    import.meta.env.REACT_APP_CONNECT_ENV?.toLowerCase() ||\n    'mainnet'\n  ).toLowerCase() as Network;\n\n  if (!['mainnet', 'testnet', 'devnet'].includes(network))\n    throw new Error(`Invalid env \"${network}\"`);\n\n  const networkData = { MAINNET, DEVNET, TESTNET }[network.toUpperCase()]!;\n\n  const tokens = mergeCustomTokensConfig(\n    networkData.tokens,\n    customConfig?.tokensConfig\n  );\n\n  const sdkConfig = WormholeContext.getConfig(network);\n\n  const rpcs = Object.assign(\n    {},\n    sdkConfig.rpcs,\n    networkData.rpcs,\n    customConfig?.rpcs\n  );\n\n  const wh = getWormholeContext(network, sdkConfig, rpcs);\n\n  if (customConfig?.bridgeDefaults) {\n    validateDefaults(customConfig.bridgeDefaults, networkData.chains, tokens);\n  }\n\n  const sdkConverter = new SDKConverter(wh);\n\n  return {\n    wh,\n    sdkConfig,\n    sdkConverter,\n\n    v2Network: sdkConverter.toNetworkV2(network),\n\n    network,\n    isMainnet: network === 'mainnet',\n    // External resources\n    rpcs,\n    rest: Object.assign(\n      {},\n      sdkConfig.rest,\n      networkData.rest,\n      customConfig?.rest\n    ),\n    graphql: Object.assign({}, networkData.graphql, customConfig?.graphql),\n    wormholeApi: {\n      mainnet: 'https://api.wormholescan.io/',\n      testnet: 'https://api.testnet.wormholescan.io/',\n      devnet: '',\n    }[network],\n    wormholeRpcHosts: {\n      mainnet: [\n        'https://wormhole-v2-mainnet-api.mcf.rocks',\n        'https://wormhole-v2-mainnet-api.chainlayer.network',\n        'https://wormhole-v2-mainnet-api.staking.fund',\n      ],\n      testnet: [\n        'https://guardian.testnet.xlabs.xyz',\n        'https://guardian-01.testnet.xlabs.xyz',\n        'https://guardian-02.testnet.xlabs.xyz',\n      ],\n      devnet: ['http://localhost:7071'],\n    }[network],\n    coinGeckoApiKey: customConfig?.coinGeckoApiKey,\n\n    // Callbacks\n    triggerEvent: wrapEventHandler(customConfig?.eventHandler),\n    validateTransfer: customConfig?.validateTransferHandler,\n\n    // White lists\n    chains: networkData.chains,\n    chainsArr: Object.values(networkData.chains).filter((chain) =&gt; {\n      return customConfig?.networks\n        ? customConfig.networks!.includes(chain.key)\n        : true;\n    }),\n    tokens,\n    tokensArr: Object.values(tokens).filter((token) =&gt; {\n      return customConfig?.tokens\n        ? customConfig.tokens!.includes(token.key)\n        : true;\n    }),\n\n    // For token bridge ^_^\n    wrappedTokenAddressCache: new WrappedTokenAddressCache(\n      tokens,\n      sdkConverter\n    ),\n\n    gasEstimates: networkData.gasEstimates,\n    // TODO: routes that aren't supported yet are disabled\n    routes: (customConfig?.routes ?? Object.values(Route)).filter((r) =&gt;\n      [\n        Route.Bridge,\n        Route.Relay,\n        Route.NttManual,\n        Route.NttRelay,\n        Route.CCTPManual,\n        Route.CCTPRelay,\n      ].includes(r as Route)\n    ),\n\n    // UI details\n    cta: customConfig?.cta,\n    explorer: customConfig?.explorer,\n    attestUrl: {\n      mainnet: 'https://portalbridge.com/legacy-tools/#/register',\n      devnet: '',\n      testnet:\n        'https://wormhole-foundation.github.io/example-token-bridge-ui/#/register',\n    }[network],\n    bridgeDefaults: customConfig?.bridgeDefaults,\n    cctpWarning: customConfig?.cctpWarning?.href || '',\n    pageHeader: customConfig?.pageHeader,\n    pageSubHeader: customConfig?.pageSubHeader,\n    menu: customConfig?.menu ?? [],\n    searchTx: customConfig?.searchTx,\n    moreTokens: customConfig?.moreTokens,\n    moreNetworks: customConfig?.moreNetworks,\n    partnerLogo: customConfig?.partnerLogo,\n    walletConnectProjectId:\n      customConfig?.walletConnectProjectId ??\n      import.meta.env.REACT_APP_WALLET_CONNECT_PROJECT_ID,\n    showHamburgerMenu: customConfig?.showHamburgerMenu ?? false,\n    previewMode: !!customConfig?.previewMode,\n\n    // Route options\n    ethBridgeMaxAmount: customConfig?.ethBridgeMaxAmount ?? 5,\n    wstETHBridgeMaxAmount: customConfig?.wstETHBridgeMaxAmount ?? 5,\n\n    // NTT config\n    nttGroups: mergeNttGroups(\n      tokens,\n      networkData.nttGroups,\n      customConfig?.nttGroups\n    ),\n\n    // Guardian set\n    guardianSet: networkData.guardianSet,\n\n    // Render redesign views\n    useRedesign: customConfig?.useRedesign,\n  };\n}\n\n// Running buildConfig with no argument generates the default configuration\nconst config = buildConfig();\nexport default config;\n\n// TODO SDKV2: REMOVE\nexport function getWormholeContext(\n  network: Network,\n  sdkConfig: WormholeConfig,\n  rpcs: ChainResourceMap\n): WormholeContext {\n  const wh: WormholeContext = new WormholeContext(network, {\n    ...sdkConfig,\n    ...{ rpcs },\n  });\n\n  return wh;\n}\n\nexport function getDefaultWormholeContext(network: Network): WormholeContext {\n  const sdkConfig = WormholeContext.getConfig(network);\n  const networkData = { mainnet: MAINNET, devnet: DEVNET, testnet: TESTNET }[\n    network\n  ]!;\n\n  const rpcs = Object.assign({}, sdkConfig.rpcs, networkData.rpcs);\n\n  return getWormholeContext(network, sdkConfig, rpcs);\n}\n\nexport async function getWormholeContextV2(): Promise&lt;WormholeV2&lt;NetworkV2&gt;&gt; {\n  if (config.v2Wormhole) return config.v2Wormhole;\n  config.v2Wormhole = await newWormholeContextV2();\n  return config.v2Wormhole;\n}\n\nexport async function newWormholeContextV2(): Promise&lt;WormholeV2&lt;NetworkV2&gt;&gt; {\n  const v2Config: WormholeConfigOverridesV2&lt;NetworkV2&gt; = { chains: {} };\n\n  for (const key in config.chains) {\n    const chainV1 = key as ChainName;\n    const chainConfigV1 = config.chains[chainV1]!;\n\n    const chainContextV1 = chainConfigV1.context;\n\n    const chainV2 = config.sdkConverter.toChainV2(\n      chainV1 as ChainName\n    ) as ChainV2;\n\n    const rpc = config.rpcs[chainV1];\n    const tokenMap: ChainTokensV2 = {};\n\n    for (const token of config.tokensArr) {\n      const nativeChainV2 = config.sdkConverter.toChainV2(token.nativeChain);\n\n      const tokenV2: Partial&lt;TokenV2&gt; = {\n        key: token.key,\n        chain: chainV2,\n        symbol: token.symbol,\n      };\n\n      if (nativeChainV2 == chainV2) {\n        const decimals =\n          token.decimals[chainContextV1] ?? token.decimals.default;\n        if (!decimals) {\n          continue;\n        } else {\n          tokenV2.decimals = decimals;\n        }\n        const address = config.sdkConverter.getNativeTokenAddressV2(token);\n        if (!address) throw new Error('Token must have address');\n        tokenV2.address = address;\n      } else {\n        tokenV2.original = nativeChainV2;\n        if (token.foreignAssets) {\n          const fa = token.foreignAssets[chainV1]!;\n\n          if (!fa) {\n            continue;\n          } else {\n            tokenV2.address = fa.address;\n            tokenV2.decimals = fa.decimals;\n          }\n        } else {\n          continue;\n        }\n      }\n\n      tokenMap[token.key] = tokenV2 as TokenV2;\n    }\n\n    v2Config.chains![chainV2] = { rpc, tokenMap };\n  }\n\n  return await getWormholeV2(\n    config.v2Network,\n    [evm, solana, aptos, cosmwasm, sui, algorand],\n    v2Config\n  );\n}\n\n// setConfig can be called afterwards to override the default config with integrator-provided config\nexport function setConfig(customConfig?: WormholeConnectConfig) {\n  const newConfig: InternalConfig&lt;NetworkV2&gt; = buildConfig(customConfig);\n\n  // We overwrite keys in the existing object so the references to the config\n  // imported elsewhere point to the new values\n  for (const key in newConfig) {\n    /* @ts-ignore */\n    config[key] = newConfig[key];\n  }\n}\n\n// TODO: add config validation step to buildConfig\n//validateConfigs();\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#custom-networks-and-rpc-endpoints","title":"Custom Networks and RPC Endpoints","text":"<p>Specify supported networks, tokens, and custom RPC endpoints. Your users may encounter rate limits using public RPC endpoints if you don't provide your own.</p> MainnetTestnet <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  env: 'mainnet',\n  networks: ['ethereum', 'polygon', 'solana'],\n  tokens: ['ETH', 'WETH', 'MATIC', 'WMATIC'],\n  rpcs: {\n    ethereum: 'https://rpc.ankr.com/eth',\n    solana: 'https://rpc.ankr.com/solana',\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  env: 'testnet',\n  networks: ['sepolia', 'arbitrum_sepolia', 'base_sepolia', 'fuji'],\n\n  rpcs: {\n    fuji: 'https://rpc.ankr.com/avalanche_fuji',\n    base_sepolia: 'https://base-sepolia-rpc.publicnode.com',\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <p>Note</p> <p>For a complete list of testnet chain names that can be manually added, see the Testnet Chains List.</p>"},{"location":"products/connect/configuration/configuration-v0/#fully-customized-theme","title":"Fully Customized Theme","text":"<p>Wormhole Connect offers a high level of customizability that suits and integrates with your application's design, including various options for buttons, backgrounds, popovers, fonts, and more. The following example demonstrates a variety of appearance customizations. Remember, if you prefer a visual to aid in designing your widget, you can use the no code style interface.</p> <pre><code>import WormholeConnect, {\n  WormholeConnectTheme,\n} from '@wormhole-foundation/wormhole-connect';\nimport red from '@mui/material/colors/red';\nimport lightblue from '@mui/material/colors/lightBlue';\nimport grey from '@mui/material/colors/grey';\nimport green from '@mui/material/colors/green';\nimport orange from '@mui/material/colors/orange';\n\nconst customTheme: WormholeConnectTheme = {\n  mode: 'dark',\n  primary: grey,\n  secondary: grey,\n  divider: 'rgba(255, 255, 255, 0.2)',\n  background: {\n    default: '#232323',\n  },\n  text: {\n    primary: '#ffffff',\n    secondary: grey[500],\n  },\n  error: red,\n  info: lightblue,\n  success: green,\n  warning: orange,\n  button: {\n    primary: 'rgba(255, 255, 255, 0.2)',\n    primaryText: '#ffffff',\n    disabled: 'rgba(255, 255, 255, 0.1)',\n    disabledText: 'rgba(255, 255, 255, 0.4)',\n    action: orange[300],\n    actionText: '#000000',\n    hover: 'rgba(255, 255, 255, 0.7)',\n  },\n  options: {\n    hover: '#474747',\n    select: '#5b5b5b',\n  },\n  card: {\n    background: '#333333',\n    secondary: '#474747',\n    elevation: 'none',\n  },\n  popover: {\n    background: '#1b2033',\n    secondary: 'rgba(255, 255, 255, 0.5)',\n    elevation: 'none',\n  },\n  modal: {\n    background: '#474747',\n  },\n  font: {\n    primary: 'Impact',\n    header: 'Impact',\n  },\n};\n\nexport default function App() {\n  return &lt;WormholeConnect theme={customTheme} /&gt;;\n}\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#environment","title":"Environment","text":"<p>You can configure Connect to be used in Testnet environments, too. You can toggle between Mainnet and Testnet environments by defining the <code>WormholeConnectConfig</code> as follows:</p> MainnetTestnet <pre><code>const config: WormholeConnectConfig = {\n  env: 'mainnet',\n};\n</code></pre> <pre><code>const config: WormholeConnectConfig = {\n  env: 'testnet',\n};\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#custom-rpc-endpoint","title":"Custom RPC Endpoint","text":"<p>You can define a custom RPC provider for your Connect widget to use. This can be especially helpful if you'd like to replace public endpoints with dedicated or private endpoints.</p> <pre><code>const config: WormholeConnectConfig = {\n  rpcs: {\n    solana: 'https://rpc.ankr.com/solana/ee827255553bb0fa9e0aaeab27e988707e60ea06ae36be0658b778072e94979e',\n  },\n};\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#arbitrary-token","title":"Arbitrary Token","text":"<p>The following section shows how to add an arbitrary token to your deployment of Connect.</p> <p>Note</p> <p>You will need to register your token with Wrapped Token Transfers (WTT) to get the contract addresses necessary for it to work with Connect.</p> <p>This example configuration limits Connect to the Solana and Ethereum networks and a handful of tokens, including <code>BSKT</code>, which isn't built in by default and provided under the <code>tokensConfig</code> key.</p> <p>See <code>src/config/types.ts</code> for the type definition of <code>TokensConfig</code>.</p> <pre><code>const config: WormholeConnectConfig = {\n  networks: ['solana', 'ethereum'],\n  tokens: ['ETH', 'WETH', 'MATIC', 'WMATIC', 'BSKT'],\n  tokensConfig: {\n    BSKT: {\n      key: 'BSKT',\n      symbol: 'BSKT',\n      nativeChain: 'solana',\n      tokenId: {\n        chain: 'solana',\n        address: '6gnCPhXtLnUD76HjQuSYPENLSZdG8RvDB1pTLM5aLSJA',\n      },\n      coinGeckoId: 'basket',\n      icon: 'https://assets.coingecko.com/coins/images/34661/standard/BSKT_Logo.png?1705636891',\n      color: '#2894EE',\n      decimals: {\n        default: 5,\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#more-configuration-options","title":"More Configuration Options","text":""},{"location":"products/connect/configuration/configuration-v0/#whitelisting-tokens","title":"Whitelisting Tokens","text":"<p>By default, Connect will offer its complete built-in list of assets, but you can restrict the displayed assets by defining a subset of tokens under <code>tokens</code>. The default full list is as follows:</p> Mainnet Testnet ETH ETH, ETHsepolia WETH WETH, WETHsepolia USDCeth USDCeth WBTC - USDT - DAI - BUSD - MATIC MATIC WMATIC WMATIC USDCpolygon - BNB BNB WBNB WBNB USDCbnb - AVAX AVAX WAVAX WAVAX USDCavax USDCavax FTM FTM WFTM WFTM CELO CELO GLMR GLMR WGLMR WGLMR SOL WSOL PYTH - SUI SUI USDCsol - APT APT ETHarbitrum ETHarbitrum, ETHarbitrum_sepolia WETHarbitrum WETHarbitrum, WETHarbitrum_sepolia USDCarbitrum USDCarbitrum ETHoptimism ETHoptimism, ETHoptimism_sepolia WETHoptimism WETHoptimism, WETHoptimism_sepolia USDCoptimism USDCoptimism ETHbase ETHbase, ETHbase_sepolia WETHbase WETHbase, WETHbase_sepolia tBTC tBTC tBTCpolygon tBTCpolygon tBTCoptimism tBTCoptimism tBTCarbitrum tBTCarbitrum tBTCbase tBTCbase tBTCsol tBTCsol WETHpolygon - WETHbsc - wstETH wstETH wstETHarbitrum - wstETHoptimism - wstETHpolygon - wstETHbase -"},{"location":"products/connect/configuration/configuration-v0/#routes","title":"Routes","text":"<p>By default, Connect will offer its complete built-in list of routes, but you can restrict the possible route assets by defining a subset under <code>routes.</code> By default, Connect will offer its complete built-in list:</p> Mainnet Testnet bridge bridge relay relay cctpManual cctpManual cctpRelay cctpRelay nttManual nttManual nttRelay nttRelay ethBridge - wstETHBridge - usdtBridge - tBTC tBTC"},{"location":"products/connect/configuration/configuration-v0/#wallet-connect-project-id","title":"Wallet Set Up","text":"<p>When using Wormhole Connect, your selected blockchain network determines the available wallet options.</p> <ul> <li>For EVM chains, wallets like MetaMask and WalletConnect are supported.</li> <li>For Solana, you'll see options such as Phantom, Torus, and Coin98.</li> </ul> <p>The wallet options automatically adjust based on the selected chain, providing a seamless user experience without additional configuration.</p> <p>If you would like to offer WalletConnect as a supported wallet option, you'll need to obtain a project ID on the WalletConnect cloud dashboard.</p>"},{"location":"products/connect/configuration/configuration-v0/#toggle-hamburger-menu","title":"Toggle Hamburger Menu","text":"<p>By setting the <code>showHamburgerMenu</code> option to false, you can deactivate the hamburger menu, causing the links to be positioned at the bottom.</p>"},{"location":"products/connect/configuration/configuration-v0/#add-extra-menu-entry","title":"Add Extra Menu Entry","text":"<p>By setting the <code>showHamburgerMenu</code> option to <code>false</code>, you can add extra links. The following properties are accessed through the <code>menu[]</code> property (e.g., <code>menu[].label</code>):</p> Property Description <code>label</code> Link name to show up <code>href</code> Target URL or URN <code>target</code> Anchor standard target, by default <code>_blank</code> <code>order</code> Order where the new item should be injected"},{"location":"products/connect/configuration/configuration-v0/#sample-configuration","title":"Sample Configuration","text":"<pre><code>{\n    \"showHamburgerMenu\": false,\n    \"menu\": [\n        {\n            \"label\": \"Advance Tools\",\n            \"href\": \"https://portalbridge.com\",\n            \"target\": \"_self\",\n            \"order\": 1\n        }\n    ]\n}\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#coingecko-api-key","title":"CoinGecko API Key","text":"<p>The CoinGecko API can be used to fetch token price data. If you have a CoinGecko API Plan, you can include the API key in the configuration. Remember to always take steps to protect your sensitive API keys, such as defining them in <code>.env</code> files and including such files in your <code>.gitignore</code>.</p>"},{"location":"products/connect/configuration/configuration-v0/#more-networks","title":"More Networks","text":"<p>Specify a set of extra networks to be displayed on the network selection modal, each linking to a different page, dApp, or mobile app the user will be redirected to. The following properties are accessed through the <code>moreNetworks</code> property (e.g., <code>moreNetworks.href</code>):</p> Property Description <code>href</code> Required. Default value for missing network hrefs <code>target</code> Default value for missing network link targets. Defaults to <code>_self</code> <code>description</code> Brief description that should be displayed as a tooltip when the user hovers over a more network icon. Used as default for missing network descriptions <code>networks[].icon</code> Required. URL data encoded icon to display <code>networks[].href</code> Network href to redirect to. If present, the values <code>sourceChain</code> and <code>targetChain</code> are replaced with the currently selected chains before redirecting <code>networks[].label</code> Required. Display text <code>networks[].name</code> Unique network key. Defaults to a snake_case version of the label <code>networks[].description</code> Description value. Defaults to <code>moreNetworks.description</code> <code>networks[].target</code> href target value. Defaults to <code>moreNetworks.target</code> <code>networks[].showOpenInNewIcon</code> Disable top right open in new icon. Defaults to true if target is <code>_blank</code> or false if target is <code>_self</code> View full configuration <pre><code>{\n    ...\n    \"moreNetworks\": {\n        \"href\": \"https://example.com\",\n        \"target\": \"_blank\",\n        \"description\": \"brief description that should be displayed as tooltip when the user hovers over a more network icon\",\n        \"networks\": [\n            {\n                \"icon\": \"https://assets.coingecko.com/coins/images/34661/standard/BSKT_Logo.png?1705636891\",\n                \"name\": \"more\",\n                \"label\": \"More networks\",\n                \"href\": \"https://portalbridge.com/#/transfer\",\n                \"showOpenInNewIcon\": false\n            }\n        ]\n    }\n    ...\n}\n</code></pre>"},{"location":"products/connect/configuration/configuration-v0/#more-tokens","title":"More Tokens","text":"<p>Show a particular entry on the select tokens modal, redirecting the user to a different page, dApp, or mobile app. The following properties are accessed through the <code>moreTokens</code> property (e.g., <code>moreTokens.label</code>):</p> Property Description <code>label</code> Required. Display text <code>href</code> Required. URL to redirect to. If present, the values <code>sourceChain</code> and <code>targetChain</code> are replaced with the currently selected chains before redirecting <code>target</code> href target. Defaults to <code>_self</code>"},{"location":"products/connect/configuration/configuration-v0/#explorer","title":"Explorer","text":"<p>Enable the explorer button to allow users to search for their transactions on a given explorer, filtering by their wallet address. The following properties are accessed through the <code>explorer</code> property (e.g., <code>explorer.label</code>):</p> Property Description <code>label</code> Display text. Defaults to <code>Transactions</code> <code>href</code> Required. URL of the explorer, for instance https://wormholescan.io/. If present, the value <code>address</code> is replaced with the connected wallet address <code>target</code> <code>href</code> target. Defaults to <code>_blank</code>"},{"location":"products/connect/configuration/data/","title":"Connect Data Configuration","text":""},{"location":"products/connect/configuration/data/#data-configuration","title":"Data Configuration","text":"<p>This page explains how to configure Wormhole Connect's core functionality, from choosing supported chains and tokens to bridging routes to setting up wallets and enabling price lookups. By the end, you'll know how to specify custom networks and RPC endpoints, integrate different bridging protocols, add new tokens, and more.</p>"},{"location":"products/connect/configuration/data/#get-started","title":"Get Started","text":"<p>Configure Wormhole Connect by passing a <code>WormholeConnectConfig</code> object as the <code>config</code> prop.</p> React integrationHosted integration <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Ethereum', 'Polygon', 'Solana'],\n  tokens: ['ETH', 'WETH', 'MATIC', 'WMATIC'],\n  rpcs: {\n    Ethereum: 'https://rpc.ankr.com/eth',\n    Solana: 'https://rpc.ankr.com/solana',\n  }\n}\n\n&lt;WormholeConnect config={config} /&gt;\n</code></pre> <pre><code>import WormholeConnect, { wormholeConnectHosted, type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Ethereum', 'Polygon', 'Solana'],\n  tokens: ['ETH', 'WETH', 'MATIC', 'WMATIC'],\n  rpcs: {\n    Ethereum: 'https://rpc.ankr.com/eth',\n    Solana: 'https://rpc.ankr.com/solana',\n  },\n};\n\nconst container = document.getElementById('bridge-container');\n\nwormholeConnectHosted(container, {\n  config,\n});\n</code></pre> <p>Note</p> <p>The complete type definition of <code>WormholeConnectConfig</code> is available in the Wormhole Connect repository.</p>"},{"location":"products/connect/configuration/data/#examples","title":"Examples","text":""},{"location":"products/connect/configuration/data/#chains-and-rpc-endpoints","title":"Configuring Chains and RPC Endpoints","text":"<p>Connect lets you customize the available chains to match your project's needs. You should provide your own RPC endpoints, as the default public ones may not support essential functions like balance fetching.</p> MainnetTestnet <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Ethereum', 'Polygon', 'Solana'],\n  rpcs: {\n    Ethereum: 'https://rpc.ankr.com/eth',\n    Solana: 'https://rpc.ankr.com/solana',\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  // You can use Connect with testnet chains by specifying \"network\":\n  network: 'Testnet',\n  chains: ['Sepolia', 'ArbitrumSepolia', 'BaseSepolia', 'Avalanche'],\n  rpcs: {\n    Avalanche: 'https://rpc.ankr.com/avalanche_fuji',\n    BaseSepolia: 'https://base-sepolia-rpc.publicnode.com',\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <p>Note</p> <p>For a complete list of available chain names, see the Wormhole TypeScript SDK.</p>"},{"location":"products/connect/configuration/data/#configuring-routes","title":"Configuring Routes","text":"<p>By default, Connect offers two bridging protocols: Wrapped Token Transfers (WTT) and Circle's CCTP (for native USDC). For most use cases, integrators require more than these default routes. The <code>routes</code> property allows you to specify which protocols to include and exclude any routes unnecessary for your application, including default and third-party routes.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/connect/configuration/data/#available-route-plugins","title":"Available Route Plugins","text":"<p>The <code>@wormhole-foundation/wormhole-connect</code> package offers a variety of <code>route</code> plugins to give you flexibility in handling different protocols. You can choose from the following <code>route</code> exports for your integration:</p> <ul> <li><code>TokenBridgeRoute</code>: Manually redeemed Wormhole WTT route.</li> <li><code>AutomaticTokenBridgeRoute</code>: Automatically redeemed (relayed) WTT route.</li> <li><code>CCTPRoute</code>: Manually redeemed CCTP route.</li> <li><code>AutomaticCCTPRoute</code>: Automatically redeemed (relayed) CCTP route.</li> <li><code>DEFAULT_ROUTES</code>: Array containing the four preceding routes (<code>TokenBridgeRoute</code>, <code>AutomaticTokenBridgeRoute</code>, <code>CCTPRoute</code>, <code>AutomaticCCTPRoute</code>).</li> <li><code>nttAutomaticRoute(nttConfig)</code>: Function that returns the automatically-redeemed (relayed) Native Token Transfer (NTT) route.</li> <li><code>nttManualRoute(nttConfig)</code>: Function that returns the manually-redeemed NTT route.</li> <li><code>nttRoutes(nttConfig)</code>: Function that returns both NTT routes as an array.</li> <li><code>MayanRoute</code>: Route that offers multiple Mayan protocols.</li> <li><code>MayanRouteSWIFT</code>: Route for Mayan's Swift protocol only.</li> <li><code>MayanRouteMCTP</code>: Route for Mayan's MCTP protocol only.</li> <li><code>MayanRouteWH</code>: Route for Mayan's original Wormhole transfer protocol.</li> </ul> <p>In addition to these routes, developers can create custom routes for their Wormhole-based protocols. For examples, refer to the NTT and the Mayan example GitHub repositories.</p> <p>For further details on the <code>route</code> plugin interface, refer to the Wormhole TypeScript SDK route code.</p>"},{"location":"products/connect/configuration/data/#example-offer-only-cctp-transfers","title":"Example: Offer Only CCTP Transfers","text":"<p>To configure Wormhole Connect to offer only USDC transfers via the CCTP route, use the following configuration:</p> <pre><code>import WormholeConnect, {\n  AutomaticCCTPRoute,\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  routes: [AutomaticCCTPRoute],\n};\n\n&lt;WormholeConnect config={config} /&gt;;\n</code></pre>"},{"location":"products/connect/configuration/data/#example-offer-all-default-routes-and-third-party-plugins","title":"Example: Offer All Default Routes and Third-Party Plugins","text":"<p>In this example, Wormhole Connect is configured with routes for both default protocols (WTT and CCTP), as well as third-party protocols like Native Token Transfers (NTT) and Mayan Swap.</p> <pre><code>import WormholeConnect, {\n  DEFAULT_ROUTES,\n  nttRoutes,\n  MayanRouteSWIFT,\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nimport { myNttConfig } from './consts'; // Custom NTT configuration\n\nconst config: config.WormholeConnectConfig = {\n  routes: [...DEFAULT_ROUTES, ...nttRoutes(myNttConfig), MayanRouteSWIFT],\n};\n\n&lt;WormholeConnect config={config} /&gt;;\n</code></pre> <p>This flexible plugin allows you to combine default routes (such as WTT and CCTP) with third-party protocols, offering complete control over which routes are available in your application.</p>"},{"location":"products/connect/configuration/data/#custom-tokens","title":"Adding Custom Tokens","text":"<p>The following section shows how to add an arbitrary token to your deployment of Connect.</p> <p>Note</p> <p>You will need to register your token with WTT to get the contract addresses necessary for it to work with that protocol.</p> <p>This example configuration adds the BONK token to Connect. Note the <code>wrappedTokens</code> property, which is required for use with WTT.</p> <p>See the Connect source code for the type definition of <code>TokensConfig</code>.</p> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  tokensConfig: {\n    BONK: {\n      key: 'BONK',\n      symbol: 'BONK',\n      nativeChain: 'Ethereum',\n      icon: Icon.ETH,\n      tokenId: {\n        chain: 'Ethereum',\n        address: '0x1151CB3d861920e07a38e03eEAd12C32178567F6',\n      },\n      coinGeckoId: 'bonk',\n      decimals: 18,\n    },\n  },\n  wrappedTokens: {\n    BONK: {\n      Solana: 'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263',\n    },\n  },\n};\n</code></pre>"},{"location":"products/connect/configuration/data/#configuring-native-token-transfers-ntt","title":"Configuring Native Token Transfers (NTT)","text":"<p>Connect supports NTT, which allows native tokens to move between supported chains using NTT-deployed contracts, such as managers and transceivers.</p> <p>To enable NTT in your app, follow these steps:</p> <ol> <li>Add NTT routes to the <code>routes</code> array by calling <code>nttRoutes(...)</code> with your token deployment config using the spread operator. This sets up the route logic for native token transfers.</li> <li>Provide token metadata for each of the tokens listed in <code>nttRoutes</code> in the <code>tokensConfig</code> object. These entries must include <code>symbol</code>, <code>decimals</code>, and the <code>tokenId</code>.</li> </ol> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\nimport { nttRoutes } from '@wormhole-foundation/wormhole-connect/ntt';\n\nconst wormholeConfig: config.WormholeConnectConfig = {\n  network: 'Testnet',\n  chains: ['Solana', 'BaseSepolia'],\n  tokens: ['WSV'],\n  ui: {\n    title: 'Wormhole NTT UI',\n    defaultInputs: {\n      fromChain: 'Solana',\n      toChain: 'BaseSepolia',\n    },\n  },\n  routes: [\n    ...nttRoutes({\n      tokens: {\n        WSV_NTT: [\n          {\n            chain: 'Solana',\n            manager: 'nMxHx1o8GUg2pv99y8JAQb5RyWNqDWixbxWCaBcurQx',\n            token: '2vLDzr7hUpLFHQotmR8EPcMTWczZUwCK31aefAzumkmv',\n            transceiver: [\n              {\n                address: 'AjL3f9FMHJ8VkNUHZqLYxa5aFy3aTN6LUWMv4qmdf5PN',\n                type: 'wormhole',\n              },\n            ],\n          },\n          {\n            chain: 'BaseSepolia',\n            manager: '0xaE02Ff9C3781C5BA295c522fB469B87Dc5EE9205',\n            token: '0xb8dccDA8C166172159F029eb003d5479687452bD',\n            transceiver: [\n              {\n                address: '0xF4Af1Eac8995766b54210b179A837E3D59a9F146',\n                type: 'wormhole',\n              },\n            ],\n          },\n        ],\n      },\n    }),\n  ],\n  tokensConfig: {\n    WSVsol: {\n      symbol: 'WSV',\n      tokenId: {\n        chain: 'Solana',\n        address: '2vLDzr7hUpLFHQotmR8EPcMTWczZUwCK31aefAzumkmv',\n      },\n      icon: 'https://wormhole.com/token.png',\n      decimals: 9,\n    },\n    WSVbase: {\n      symbol: 'WSV',\n      tokenId: {\n        chain: 'BaseSepolia',\n        address: '0xb8dccDA8C166172159F029eb003d5479687452bD',\n      },\n      icon: 'https://wormhole.com/token.png',\n      decimals: 9,\n    },\n  },\n};\n</code></pre> <p>For a complete working example of NTT configuration in Wormhole Connect, see the ntt-connect demo repository.</p>"},{"location":"products/connect/configuration/data/#whitelisting-tokens","title":"Whitelisting Tokens","text":"<p>Connect offers a list of built-in tokens by default. You can see it below:</p> <ul> <li>Mainnet tokens</li> <li>Testnet tokens</li> </ul> <p>You can customize the tokens shown in the UI using the <code>tokens</code> property. The following example adds a custom token and limits Connect to showing only that token, along with the native gas tokens ETH and SOL.</p> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Ethereum', 'Solana'],\n  tokens: ['ETH', 'SOL', 'BONK'],\n  rpcs: {\n    Ethereum: 'https://rpc.ankr.com/eth',\n    Solana: 'https://rpc.ankr.com/solana',\n  },\n  tokensConfig: {\n    BONK: {\n      key: 'BONK',\n      symbol: 'BONK',\n      icon: 'https://assets.coingecko.com/coins/images/28600/large/bonk.jpg?1696527587',\n      tokenId: {\n        chain: 'Ethereum',\n        address: '0x1151CB3d861920e07a38e03eEAd12C32178567F6',\n      },\n      decimals: 18,\n    },\n  },\n  wrappedTokens: {\n    BONK: {\n      Solana: 'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263',\n    },\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <p>You can whitelist tokens by symbol or by specifying tuples of [chain, address]. For example, this would show only BONK token (on all chains you've whitelisted) as well as <code>EPjFW...TDt1v</code> on Solana, which is USDC.</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Ethereum', 'Solana'],\n  tokens: [\n    // Whitelist BONK on every whitelisted chain\n    'BONK',\n    // Also whitelist USDC, specifically on Solana\n    ['Solana', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v']\n  ],\n  ...\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre>"},{"location":"products/connect/configuration/data/#user-inputted-tokens","title":"User-Inputted Tokens","text":"<p>As of version 2.0, Connect allows users to paste token addresses to bridge any token they want. As an integrator, you may want to disable this feature if you are deploying Connect for use only with a specific token(s).</p> <p>If you provide a token whitelist (see above), this is turned off automatically. However, you can also disable it explicitly like this:</p> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  ui: {\n    disableUserInputtedTokens: true,\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <p>Setting <code>ui.disableUserInputtedTokens</code> to <code>true</code> will disable the ability to paste in token addresses.</p>"},{"location":"products/connect/configuration/data/#transaction-settings","title":"Transaction Settings","text":"<p>Landing transactions on Solana can require finely tuned priority fees when there is congestion. You can tweak how Connect determines these with <code>transactionSettings</code>. All of the parameters in this configuration are optional; you can provide any combination of them.</p> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  transactionSettings: {\n    Solana: {\n      priorityFee: {\n        // Number between 0-1, defaults to 0.9. Higher percentile yields higher fees.\n        // For example, you can set percentile to 0.95 to make Connect compute the\n        // 95th percentile priority fee amount based on recent transactions\n        percentile: 0.95,\n\n        // Any number, defaults to 1.0. The fee amount is multiplied by this number.\n        // This can be used to further raise or lower the fees Connect is using.\n        // For example, percentile=0.95 and percentileMultiple=1.1 would use\n        // the 95th percentile fee, with a 10% increase\n        percentileMultiple: 1.1,\n\n        // Minimum fee you want to use in microlamports, regardless of recent transactions\n        // Defaults to 1\n        min: 200_000,\n\n        // Maximum fee you want to use in microlamports, regardless of recent transactions\n        // Defaults to 100,000,000\n        max: 5_000_000,\n      },\n    },\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre> <p>Note</p> <p>Connect can calculate fees more accurately if you are using a Triton RPC endpoint.</p>"},{"location":"products/connect/configuration/data/#reown-cloud-project-id","title":"Wallet Set Up","text":"<p>Your selected blockchain network determines the available wallet options when using Wormhole Connect.</p> <ul> <li>For EVM chains, wallets like MetaMask and Reown Cloud (formerly WalletConnect) are supported.</li> <li>For Solana, you'll see options such as Phantom, Web3Auth, and Coin98.</li> </ul> <p>The wallet options automatically adjust based on the selected chain, providing a seamless user experience without additional configuration.</p> <p>To add Reown Cloud (formerly known as WalletConnect) as a supported wallet option, you need to obtain a project ID from the Reown Cloud dashboard. Once you have the project ID, set it in your <code>WormholeConnectConfig</code> under the <code>walletConnectProjectId</code> property.</p> <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst wormholeConfig: config.WormholeConnectConfig = {\n  ...\n  walletConnectProjectId: 'INSERT_PROJECT_ID',\n};\n</code></pre> <p>Note</p> <p>If the <code>walletConnectProjectId</code> is not set, Reown Cloud (WalletConnect) will be disabled from the available wallet list in the Connect UI.</p>"},{"location":"products/connect/configuration/theme/","title":"Connect Theme & UI Customization","text":""},{"location":"products/connect/configuration/theme/#theme-ui-customization","title":"Theme &amp; UI Customization","text":"<p>This page focuses on how to style the Connect widget, covering color schemes, fonts, layout changes (like toggling the hamburger menu), and adding extra menu entries. You'll learn how to customize Connect's look and feel to match your application's branding.</p>"},{"location":"products/connect/configuration/theme/#changing-the-color-scheme","title":"Changing the Color Scheme","text":"<p>You can customize Connect's color scheme by providing a <code>theme</code> prop.</p> React integrationHosted integration <pre><code>import WormholeConnect, { type config, WormholeConnectTheme } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  /* Your config... */\n};\n\nconst theme: WormholeConnectTheme = {\n  mode: 'dark',\n  primary: '#78c4b6',\n  font: 'Comic Sans; sans-serif',\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} theme={theme} /&gt;;\n}\n</code></pre> <pre><code>import WormholeConnect, { type config, WormholeConnectTheme, wormholeConnectHosted } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  /* Your config... */\n};\n\nconst theme: WormholeConnectTheme = {\n  mode: 'dark',\n  primary: '#78c4b6',\n  font: 'Comic Sans; sans-serif',\n};\n\nconst container = document.getElementById('bridge-container');\n\nwormholeConnectHosted(container, {\n  config,\n  theme,\n});\n</code></pre> <p>The <code>WormholeConnectTheme</code> type supports the following properties:</p> Property Description Example <code>mode</code> Dark mode or light mode. Required <code>\"dark\"</code> or <code>\"light\"</code> <code>input</code> Color used for input fields, dropdowns <code>\"#AABBCC\"</code> <code>primary</code> Primary color used for buttons <code>\"#AABBCC\"</code> <code>secondary</code> Secondary color used for some UI elements <code>\"#AABBCC\"</code> <code>text</code> Primary color used for text <code>\"#AABBCC\"</code> <code>textSecondary</code> Secondary color used for dimmer text <code>\"#AABBCC\"</code> <code>error</code> Color to display errors in, usually some shade of red <code>\"#AABBCC\"</code> <code>success</code> Color to display success messages in <code>\"#AABBCC\"</code> <code>font</code> Font used in the UI, can be custom font available in your application <code>\"Arial; sans-serif\"</code>"},{"location":"products/connect/configuration/theme/#toggle-hamburger-menu","title":"Toggle Hamburger Menu","text":"<p>By setting the <code>showHamburgerMenu</code> option to false, you can deactivate the hamburger menu, which will position the links at the bottom.</p>"},{"location":"products/connect/configuration/theme/#add-extra-menu-entry","title":"Add Extra Menu Entry","text":"<p>By setting the <code>showHamburgerMenu</code> option to <code>false</code>, you can add extra links. The following properties are accessed through the <code>menu[]</code> property (e.g., <code>menu[].label</code>):</p> Property Description <code>label</code> Link name to show up <code>href</code> Target URL or URN <code>target</code> Anchor standard target, by default <code>_blank</code> <code>order</code> Order where the new item should be injected <pre><code>import WormholeConnect, { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  ui: {\n    showHamburgerMenu: false,\n    menu: [\n      {\n        label: 'Advance Tools',\n        href: 'https://portalbridge.com',\n        target: '_self',\n        order: 1,\n      },\n    ],\n  },\n};\n\nfunction App() {\n  return &lt;WormholeConnect config={config} /&gt;;\n}\n</code></pre>"},{"location":"products/connect/guides/hosted-version/","title":"Integrate Connect via CDN","text":"<p>Wormhole Connect is a prebuilt UI component that makes it easy to transfer tokens across chains. You can integrate it into any website using either React or a hosted version served via jsDelivr.</p> <p>This guide focuses on using the hosted version\u2014ideal for simpler setups or non-React environments. It includes everything you need to get started with just a few lines of code.</p> <p>If you're using React, refer to the Get Started with Connect guide.</p>"},{"location":"products/connect/guides/hosted-version/#install-connect","title":"Install Connect","text":"<p>To install the Connect npm package, run the following command:</p> <pre><code>npm i @wormhole-foundation/wormhole-connect\n</code></pre>"},{"location":"products/connect/guides/hosted-version/#add-connect-to-your-project-using-the-hosted-version","title":"Add Connect to Your Project Using the Hosted Version","text":"<p>The hosted version uses pre-built packages (including React) served via jsDelivr from npm. To integrate it without using React directly, add the following to your JavaScript project:</p> <pre><code>import { wormholeConnectHosted } from '@wormhole-foundation/wormhole-connect';\n\n// Existing DOM element where you want to mount Connect\nconst container = document.getElementById('bridge-container');\nif (!container) {\n  throw new Error(\"Element with id 'bridge-container' not found\");\n}\n\nwormholeConnectHosted(container);\n</code></pre> <p>You can provide config and theme parameters in a second function argument:</p> <pre><code>import { wormholeConnectHosted } from '@wormhole-foundation/wormhole-connect';\n\n// Existing DOM element where you want to mount Connect\nconst container = document.getElementById('bridge-container');\nif (!container) {\n  throw new Error(\"Element with id 'connect' not found\");\n}\n\nwormholeConnectHosted(container, {\n  config: {\n    rpcs: {\n      // ...\n    },\n  },\n  theme: {\n    background: {\n      default: '#004547',\n    },\n  },\n});\n</code></pre>"},{"location":"products/connect/guides/hosted-version/#next-steps","title":"Next Steps","text":"<p>Use the following guides to configure your Connect instance:</p> <ul> <li>Data Configuration: Learn how to specify custom networks and RPC endpoints, integrate different bridging protocols, add new tokens, and more.</li> <li>Theme Configuration: Learn how to customize Connect's look and feel to match your application's branding.</li> </ul>"},{"location":"products/connect/guides/upgrade/","title":"Wormhole Connect Migration Guide","text":"<p>The Wormhole Connect feature has been updated to version 3.0, introducing a modernized design and improved routing for faster native-to-native token transfers. This stable release comes with several breaking changes in how to configure the application, requiring minor updates to your integration.</p> <p>This guide will help you migrate to the new version in just a few simple steps. By following this migration guide, you'll learn how to:</p> <ul> <li>Update to the latest Connect package.</li> <li>Apply configuration changes to the <code>WormholeConnectConfig</code> object.</li> <li>Understand new routing capabilities and plugin options.</li> </ul> <p>These updates ensure better performance and a smoother integration experience.</p> <p>Note</p> <p>Connect versions v1.x and v2.x share the same configuration structure. This guide outlines a unified upgrade process to v3.x, regardless of whether you're using v0.x, v1.x, or v2.x.</p>"},{"location":"products/connect/guides/upgrade/#update-the-connect-package","title":"Update the Connect Package","text":"<p>To begin the migration process, update the Connect npm package to the latest version 3.0. Updating to the latest version provides access to the newest features and improvements, including the modernized design and enhanced routing capabilities.</p> <p>Run the following command in your terminal:</p> <pre><code>npm install @wormhole-foundation/wormhole-connect@^3.0\n</code></pre> <p>This command installs the latest stable version of Wormhole Connect and prepares your environment for the new configuration changes.</p>"},{"location":"products/connect/guides/upgrade/#update-the-wormholeconnectconfig-object","title":"Update the <code>WormholeConnectConfig</code> Object","text":"<p>In version 3.0, the <code>config.WormholeConnectConfig</code> object underwent several breaking changes. Most of these changes are minor and can be applied quickly. Below is a summary of the key changes, followed by detailed examples.</p>"},{"location":"products/connect/guides/upgrade/#summary-of-breaking-changes","title":"Summary of Breaking Changes","text":"<ul> <li>Chain names are now capitalized. For example:<code>solana</code> \u2192 <code>Solana</code>.</li> <li><code>env</code> renamed to <code>network</code> and is now capitalized. For example: <code>mainnet</code> \u2192 <code>Mainnet</code>.</li> <li><code>networks</code> renamed to <code>chains</code>, with capitalized names.</li> <li><code>routes</code> updated to use route plugins.</li> <li><code>nttGroups</code> removed in favor of route plugin configuration.</li> <li><code>tokensConfig</code> updated, with a new key <code>wrappedTokens</code> added.</li> <li>Many UI-related properties consolidated under a top-level <code>ui</code> key.</li> <li><code>customTheme</code> and <code>mode</code> were removed, replaced by a top-level <code>theme</code> property.</li> </ul> <p>These changes are explained in more detail below, with examples for easy reference.</p>"},{"location":"products/connect/guides/upgrade/#capitalize-chain-names","title":"Capitalize Chain Names","text":"<p>In version 3.0, chain names are now consistent with the <code>Chain</code> type from the Wormhole TypeScript SDK, and must be capitalized. This affects all config properties where a chain is referenced, including <code>rpcs</code>, <code>rest</code>, <code>graphql</code>, and <code>chains</code>.</p> v0.xv1.xv3.x <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  rpcs: {\n    ethereum: 'INSERT_ETH_RPC_URL',\n    solana: 'INSERT_SOLANA_RPC_URL',\n  },\n};\n</code></pre> <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  rpcs: {\n    Ethereum: 'INSERT_ETH_RPC_URL',\n    Solana: 'INSERT_SOLANA_RPC_URL',\n  },\n};\n</code></pre> <pre><code>import { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  rpcs: {\n    Ethereum: 'INSERT_ETH_RPC_URL',\n    Solana: 'INSERT_SOLANA_RPC_URL',\n  },\n};\n</code></pre> <p>You can find the complete list of supported chain names in the Wormhole TypeScript SDK.</p>"},{"location":"products/connect/guides/upgrade/#rename-env-to-network","title":"Rename <code>env</code> to <code>network</code>","text":"<p>The <code>env</code> property has been renamed to <code>network</code>, with capitalized values. This change affects how you configure Testnet and Mainnet environments.</p> v0.xv1.xv3.x <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  env: 'testnet',\n};\n</code></pre> <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  network: 'Testnet',\n};\n</code></pre> <pre><code>import { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  network: 'Testnet',\n};\n</code></pre> <p>If you don\u2019t explicitly set the <code>network</code> value, Connect will default to <code>Mainnet</code>.</p> <pre><code>// Defaults to Mainnet\nconst config: config.WormholeConnectConfig = {};\n</code></pre> <p>For more information, refer to the network constants list.</p>"},{"location":"products/connect/guides/upgrade/#rename-networks-to-chains","title":"Rename <code>networks</code> to <code>chains</code>","text":"<p>The <code>networks</code> property, which allowed whitelisting chains, is now renamed <code>chains</code>, and the chain names are capitalized.</p> v0.xv1.xv3.x <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  networks: ['solana', 'ethereum'],\n};\n</code></pre> <pre><code>import { WormholeConnectConfig } from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  chains: ['Solana', 'Ethereum'],\n};\n</code></pre> <pre><code>import { type config } from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  chains: ['Solana', 'Ethereum'],\n};\n</code></pre>"},{"location":"products/connect/guides/upgrade/#update-routes-to-use-route-plugins","title":"Update <code>routes</code> to Use Route Plugins","text":"<p>The <code>routes</code> property in Connect version 3.0 has significantly improved. Previously, <code>routes</code> was a simple array of strings. The latest version has been transformed into a flexible plugin system, allowing you to include specific routes for various protocols.</p> <p>By default, if no <code>routes</code> property is set, Connect will provide routes for two core protocols:</p> <ul> <li>Wrapped Token Transfers (WTT)</li> <li>CCTP</li> </ul> <p>For most use cases, integrators require more than the default routes. The new <code>routes</code> property allows you to specify which protocols to include and exclude any routes unnecessary for your application, including both default and third-party routes.</p>"},{"location":"products/connect/guides/upgrade/#available-route-plugins","title":"Available <code>route</code> Plugins","text":"<p>The <code>@wormhole-foundation/wormhole-connect</code> package offers a variety of <code>route</code> plugins to give you flexibility in handling different protocols. You can choose from the following <code>route</code> exports for your integration:</p> <code>route</code> Plugins <ul> <li><code>TokenBridgeRoute</code>: Manually redeemed WTT route.</li> <li><code>AutomaticTokenBridgeRoute</code>: Automatically redeemed (relayed) WTT route.</li> <li><code>CCTPRoute</code>: Manually redeemed CCTP route.</li> <li><code>AutomaticCCTPRoute</code>: Automatically redeemed (relayed) CCTP route.</li> <li><code>DEFAULT_ROUTES</code>: Array containing the four preceding routes (TokenBridgeRoute, AutomaticTokenBridgeRoute, CCTPRoute, AutomaticCCTPRoute).</li> <li><code>nttAutomaticRoute(nttConfig)</code>: Function that returns the automatically-redeemed (relayed) Native Token Transfer (NTT) route.</li> <li><code>nttManualRoute(nttConfig)</code>: Function that returns the manually-redeemed NTT route.</li> <li><code>nttRoutes(nttConfig)</code>: Function that returns both NTT routes as an array.</li> <li><code>MayanRoute</code>: Route that offers multiple Mayan protocols.</li> <li><code>MayanRouteSWIFT</code>: Route for Mayan\u2019s Swift protocol only.</li> <li><code>MayanRouteMCTP</code>: Route for Mayan\u2019s MCTP protocol only.</li> <li><code>MayanRouteWH</code>: Route for Mayan\u2019s original Wormhole transfer protocol.</li> </ul> <p>In addition to these routes, developers can create custom routes for their own Wormhole-based protocols. For examples, refer to the NTT and the Mayan example GitHub repositories.</p> <p>For further details on the Route plugin interface, refer to the Wormhole TypeScript SDK route code.</p> <p>Now that you know the available <code>route</code> plugins, let's explore some examples of configuring them.</p>"},{"location":"products/connect/guides/upgrade/#example-offer-only-cctp-transfers","title":"Example: Offer Only CCTP Transfers","text":"<p>To configure Connect to offer only USDC transfers via the CCTP route, use the following configuration:</p> <pre><code>import WormholeConnect, {\n  AutomaticCCTPRoute,\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  routes: [AutomaticCCTPRoute],\n};\n\n&lt;WormholeConnect config={config} /&gt;;\n</code></pre>"},{"location":"products/connect/guides/upgrade/#example-offer-all-default-routes-and-third-party-plugins","title":"Example: Offer All Default Routes and Third-Party Plugins","text":"<p>In this example, Connect is configured with routes for both default protocols (WTT and CCTP), as well as third-party protocols like Native Token Transfers (NTT) and Mayan Swap.</p> <pre><code>import WormholeConnect, {\n  DEFAULT_ROUTES,\n  nttRoutes,\n  MayanRouteSWIFT,\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nimport { myNttConfig } from './consts'; // Custom NTT configuration\n\nconst config: config.WormholeConnectConfig = {\n  routes: [...DEFAULT_ROUTES, ...nttRoutes(myNttConfig), MayanRouteSWIFT],\n};\n\n&lt;WormholeConnect config={config} /&gt;;\n</code></pre> <p>This flexible plugin allows you to combine default routes (such as WTT and CCTP) with third-party protocols, offering complete control over which routes are available in your application.</p>"},{"location":"products/connect/guides/upgrade/#update-the-tokensconfig-structure","title":"Update the <code>tokensConfig</code> Structure","text":"<p>In Connect version 3.0, the <code>tokensConfig</code> property has been updated to simplify the structure and improve flexibility for token handling across chains. The previous configuration has been streamlined, and a new key, <code>wrappedTokens,</code> has been introduced to handle foreign assets more effectively.</p> <p>Key Changes to <code>tokensConfig</code>:</p> <ul> <li>Capitalized chain names: All chain names, like <code>ethereum</code>, must now be capitalized, such as <code>Ethereum</code>, to maintain consistency with the rest of the Wormhole SDK.</li> <li><code>wrappedTokens</code>: This new key replaces <code>foreignAssets</code> and defines the wrapped token addresses on foreign chains, making it easier to manage cross-chain transfers. It consolidates the wrapped token addresses into a cleaner structure. These addresses must be specified to enable token transfers to and from the foreign chain via WTT routes.</li> <li>Simplified decimals: Instead of using a map of decimal values for different chains, you now only need to provide a single decimals value for the token's native chain.</li> </ul> v0.xv1.xv3.x <p>In the old structure, the <code>foreignAssets</code> field defined the token\u2019s presence on other chains, and <code>decimals</code> were mapped across multiple chains.</p> <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  tokensConfig: {\n    WETH: {\n      key: 'WETH',\n      symbol: 'WETH',\n      nativeChain: 'ethereum',\n      icon: Icon.ETH,\n      tokenId: {\n        chain: 'ethereum',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      coinGeckoId: 'ethereum',\n      color: '#62688F',\n      decimals: { Ethereum: 18, default: 8 },\n      foreignAssets: {\n        Solana: {\n          address: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n          decimals: 8,\n        },\n      },\n    },\n  },\n};\n</code></pre> <p>In v1.0, <code>foreignAssets</code> has been replaced with <code>wrappedTokens</code>, simplifying token transfers across chains by directly mapping wrapped token addresses. The <code>decimals</code> value is now a simple number representing the token\u2019s decimals on its native chain.</p> <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  tokensConfig: {\n    WETH: {\n      key: 'WETH',\n      symbol: 'WETH',\n      nativeChain: 'Ethereum', // Chain name now capitalized\n      icon: Icon.ETH,\n      tokenId: {\n        chain: 'Ethereum',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      coinGeckoId: 'ethereum',\n      color: '#62688F',\n      decimals: 18, // Simplified decimals field\n    },\n  },\n  wrappedTokens: {\n    WETH: {\n      Solana: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n      /* additional chains */\n    },\n  },\n};\n</code></pre> <p>In v3.0, <code>foreignAssets</code> has been replaced with <code>wrappedTokens</code>, simplifying token transfers across chains by directly mapping wrapped token addresses. The <code>decimals</code> value is now a simple number representing the token\u2019s decimals on its native chain.</p> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  tokensConfig: {\n    WETH: {\n      key: 'WETH',\n      symbol: 'WETH',\n      nativeChain: 'Ethereum', // Chain name now capitalized\n      icon: Icon.ETH,\n      tokenId: {\n        chain: 'Ethereum',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      coinGeckoId: 'ethereum',\n      color: '#62688F',\n      decimals: 18, // Simplified decimals field\n    },\n  },\n  wrappedTokens: {\n    WETH: {\n      Solana: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n      /* additional chains */\n    },\n  },\n};\n</code></pre>"},{"location":"products/connect/guides/upgrade/#update-ntt-configuration","title":"Update NTT Configuration","text":"<p>In Connect version 3.0, the <code>nttGroups</code> property, which was used to configure Native Token Transfers (NTT), has been removed. Instead, the NTT configuration is passed directly to the NTT route constructor. This update simplifies the setup and provides more flexibility for defining NTT routes.</p> <p>Key changes:</p> <ul> <li>Removed <code>nttGroups</code>: The <code>nttGroups</code> property has been removed from the configuration and is now passed as an argument to the <code>nttRoutes</code> function.</li> <li>Direct NTT route configuration: NTT routes are now defined more explicitly, allowing for a more organized structure when specifying tokens, chains, and managers.</li> </ul> <p>This change simplifies the configuration process by providing a cleaner, more flexible way to handle NTT routes across different chains.</p> v0.xv1.xv3.x <p>In the previous version, <code>nttGroups</code> defined the NTT managers and transceivers for different tokens across multiple chains.</p> <pre><code>import WormholeConnect, {\n  nttRoutes,\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  nttGroups: {\n    Lido_wstETH: {\n      nttManagers: [\n        {\n          chainName: 'ethereum',\n          address: '0xb948a93827d68a82F6513Ad178964Da487fe2BD9',\n          tokenKey: 'wstETH',\n          transceivers: [\n            {\n              address: '0xA1ACC1e6edaB281Febd91E3515093F1DE81F25c0',\n              type: 'wormhole',\n            },\n          ],\n        },\n        {\n          chainName: 'bsc',\n          address: '0x6981F5621691CBfE3DdD524dE71076b79F0A0278',\n          tokenKey: 'wstETH',\n          transceivers: [\n            {\n              address: '0xbe3F7e06872E0dF6CD7FF35B7aa4Bb1446DC9986',\n              type: 'wormhole',\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n</code></pre> <p>In v1.0, <code>nttGroups</code> has been removed, and the configuration is passed to the NTT route constructor as an argument. The tokens and corresponding transceivers are now clearly defined within the <code>nttRoutes</code> configuration.</p> <pre><code>import WormholeConnect, {\n  nttRoutes,\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  routes: [\n    ...nttRoutes({\n      tokens: {\n        Lido_wstETH: [\n          {\n            chain: 'Ethereum',\n            manager: '0xb948a93827d68a82F6513Ad178964Da487fe2BD9',\n            token: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n            transceiver: [\n              {\n                address: '0xA1ACC1e6edaB281Febd91E3515093F1DE81F25c0',\n                type: 'wormhole',\n              },\n            ],\n          },\n          {\n            chain: 'Bsc',\n            manager: '0x6981F5621691CBfE3DdD524dE71076b79F0A0278',\n            token: '0x26c5e01524d2E6280A48F2c50fF6De7e52E9611C',\n            transceiver: [\n              {\n                address: '0xbe3F7e06872E0dF6CD7FF35B7aa4Bb1446DC9986',\n                type: 'wormhole',\n              },\n            ],\n          },\n        ],\n      },\n    }),\n    /* other routes */\n  ],\n};\n</code></pre> <p>In v3.0, <code>nttGroups</code> has been removed, and the configuration is passed to the NTT route constructor as an argument. The tokens and corresponding transceivers are now clearly defined within the <code>nttRoutes</code> configuration.</p> <pre><code>import WormholeConnect, {\n  nttRoutes,\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  routes: [\n    ...nttRoutes({\n      tokens: {\n        Lido_wstETH: [\n          {\n            chain: 'Ethereum',\n            manager: '0xb948a93827d68a82F6513Ad178964Da487fe2BD9',\n            token: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n            transceiver: [\n              {\n                address: '0xA1ACC1e6edaB281Febd91E3515093F1DE81F25c0',\n                type: 'wormhole',\n              },\n            ],\n          },\n          {\n            chain: 'Bsc',\n            manager: '0x6981F5621691CBfE3DdD524dE71076b79F0A0278',\n            token: '0x26c5e01524d2E6280A48F2c50fF6De7e52E9611C',\n            transceiver: [\n              {\n                address: '0xbe3F7e06872E0dF6CD7FF35B7aa4Bb1446DC9986',\n                type: 'wormhole',\n              },\n            ],\n          },\n        ],\n      },\n    }),\n    /* other routes */\n  ],\n};\n</code></pre> <p>In this new structure, NTT routes are passed directly through the <code>nttRoutes</code> function, with the <code>token</code>, <code>chain</code>, <code>manager</code> and <code>transceiver</code> clearly defined for each supported asset.</p>"},{"location":"products/connect/guides/upgrade/#update-ui-configuration","title":"Update UI Configuration","text":"<p>In Connect version 3.0, the user interface configuration has been significantly updated. Several previously scattered UI properties have now been consolidated under a new <code>ui</code> key, making the UI configuration cleaner and easier to manage.</p> <p>Key UI changes:</p> <ul> <li>Consolidated UI properties: Many UI-related properties moved under a new top-level ui key for better organization.</li> <li>Removed <code>customTheme</code> and <code>mode</code>: These properties have been removed in favor of a new top-level prop called <code>theme</code>, which simplifies theming and allows dynamic switching between themes.</li> </ul>"},{"location":"products/connect/guides/upgrade/#ui-properties","title":"UI Properties","text":"<p>The following properties that were previously defined at the root level of the configuration are now part of the <code>ui</code> key:</p> <ul> <li><code>explorer</code> \u2192 <code>ui.explorer</code>: Specifies the explorer to use for viewing transactions.</li> <li><code>bridgeDefaults</code> \u2192 <code>ui.defaultInputs</code>: Sets default input values for the bridge, such as the source and destination chains and token.</li> <li><code>pageHeader</code> \u2192 <code>ui.pageHeader</code>: Sets the title and header for the page.</li> <li><code>menu</code> \u2192 <code>ui.menu</code>: Defines the menu items displayed in the interface.</li> <li><code>searchTx</code> \u2192 <code>ui.searchTx</code>: Configures the transaction search functionality.</li> <li><code>partnerLogo</code> \u2192 <code>ui.partnerLogo</code>: Displays a partner's logo on the interface.</li> <li><code>walletConnectProjectId</code> \u2192 <code>ui.walletConnectProjectId</code>: Integrates WalletConnect into the UI.</li> <li><code>showHamburgerMenu</code> \u2192 <code>ui.showHamburgerMenu</code>: Enables or disables the hamburger menu for navigation.</li> </ul> <p>Additionally, there are two new properties under <code>ui</code>:</p> <ul> <li><code>ui.title</code>: Sets the title rendered in the top left corner of the UI. The default is \"Wormhole Connect\".</li> <li><code>ui.getHelpUrl</code>: URL that Connect will render when an unknown error occurs, allowing users to seek help. This can link to a Discord server or any other support channel.</li> </ul> <pre><code>import WormholeConnect, {\n  type config,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: config.WormholeConnectConfig = {\n  ui: {\n    title: 'My Custom Bridge Example',\n    getHelpUrl: 'https://examplehelp.com/',\n    menu: [\n      {\n        label: 'Support',\n        href: 'https://examplehelp.com/support',\n        target: '_blank',\n        order: 1, // Order of appearance in the menu\n      },\n      {\n        label: 'About',\n        href: 'https://examplehelp.com/about',\n        target: '_blank',\n        order: 2,\n      },\n    ],\n    showHamburgerMenu: false,\n  },\n};\n</code></pre>"},{"location":"products/connect/guides/upgrade/#ui-configuration","title":"UI Configuration","text":"<p>In the old structure, UI-related settings like <code>explorer</code> and <code>bridgeDefaults</code> were defined at the root level of the configuration. In version 3.0, these properties are now organized under the <code>ui</code> key, improving the configuration's readability and manageability.</p> v0.xv1.xv3.x <pre><code>const config: WormholeConnectConfig = {\n  bridgeDefaults: {\n    fromNetwork: 'solana',\n    toNetwork: 'ethereum',\n    tokenKey: 'USDC',\n    requiredNetwork: 'solana',\n  },\n  showHamburgerMenu: true,\n};\n</code></pre> <pre><code>const config: WormholeConnectConfig = {\n  ui: {\n    defaultInputs: {\n      fromChain: 'Solana', // Chain names now capitalized\n      toChain: 'Ethereum',\n      tokenKey: 'USDC',\n      requiredChain: 'Solana',\n    },\n    showHamburgerMenu: true,\n  },\n};\n</code></pre> <pre><code>const config: config.WormholeConnectConfig = {\n  ui: {\n    defaultInputs: {\n      fromChain: 'Solana', // Chain names now capitalized\n      toChain: 'Ethereum',\n      tokenKey: 'USDC',\n      requiredChain: 'Solana',\n    },\n    showHamburgerMenu: true,\n  },\n};\n</code></pre>"},{"location":"products/connect/guides/upgrade/#remove-customtheme-and-mode-properties","title":"Remove <code>customTheme</code> and <code>mode</code> Properties","text":"<p>In version 3.0, the <code>customTheme</code> and <code>mode</code> properties, which were previously used to set themes, have been removed. They have been replaced by a new top-level prop called <code>theme</code>, which allows for more flexibility and dynamic updates to themes.</p> <p>Important details:</p> <ul> <li>The <code>theme</code> prop is not part of the <code>config</code> object and is passed separately to Connect.</li> <li><code>config</code> cannot be modified after Connect has mounted, but the <code>theme</code> can be updated dynamically to support changes such as switching between light and dark modes or updating color schemes.</li> </ul> v0.x^v1.x <pre><code>import WormholeConnect, {\n  WormholeConnectConfig,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst config: WormholeConnectConfig = {\n  customTheme: {\n    primaryColor: '#4266f5',\n    secondaryColor: '#ff5733',\n  },\n  mode: 'dark',\n};\n\n&lt;WormholeConnect config={config} /&gt;;\n</code></pre> <pre><code>import WormholeConnect, {\n  WormholeConnectTheme,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst theme: WormholeConnectTheme = {\n  mode: 'dark', // Can be dynamically changed\n  font: 'Arial',\n  button: {\n    primary: '#4266f5',\n  },\n};\n\n&lt;WormholeConnect config={config} theme={theme} /&gt;;\n</code></pre>"},{"location":"products/connect/guides/upgrade/#removed-configuration-properties","title":"Removed Configuration Properties","text":"<p>Several configuration properties have been removed in Connect version 3.0. These keys no longer have any effect, and providing values for them in the configuration will not result in any changes.</p> <p>Removed config keys:</p> <ul> <li><code>cta</code></li> <li><code>cctpWarning</code></li> <li><code>pageSubHeader</code></li> <li><code>moreTokens</code></li> <li><code>moreChains</code></li> <li><code>ethBridgeMaxAmount</code></li> <li><code>wstETHBridgeMaxAmount</code></li> <li><code>customTheme</code></li> <li><code>mode</code></li> </ul> <p>If your current setup includes any of these properties, you can safely remove them, as they are no longer supported in v3.0.</p>"},{"location":"products/connect/guides/upgrade/#use-the-cdn-hosted-version-of-wormhole-connect","title":"Use the CDN-Hosted Version of Wormhole Connect","text":"<p>For those using the CDN-hosted version of Wormhole Connect, the package's installation and integration have been updated. You must install the Connect package from npm and use the new <code>wormholeConnectHosted</code> utility function.</p>"},{"location":"products/connect/guides/upgrade/#install-and-integrate-the-hosted-version","title":"Install and Integrate the Hosted Version","text":"<ol> <li> <p>Install the Connect package via npm:</p> <pre><code>npm install @wormhole-foundation/wormhole-connect@^3.0\n</code></pre> </li> <li> <p>After installing the package, you can embed Connect into your page by adding the following code:</p> <pre><code>import { wormholeConnectHosted } from '@wormhole-foundation/wormhole-connect';\n\nconst container = document.getElementById('connect')!;\n\nwormholeConnectHosted(container);\n</code></pre> </li> </ol>"},{"location":"products/connect/guides/upgrade/#example-custom-configuration-for-hosted-version","title":"Example: Custom Configuration for Hosted Version","text":"<p>The <code>wormholeConnectHosted</code> function accepts two parameters: <code>config</code> and <code>theme</code>. This allows you to customize the routes and apply a theme directly within the hosted version. Here\u2019s an example of how you can pass a custom configuration:</p> <pre><code>import {\n  wormholeConnectHosted,\n  MayanRoute,\n} from '@wormhole-foundation/wormhole-connect';\n\nconst container = document.getElementById('connect')!;\n\nwormholeConnectHosted(container, {\n  config: {\n    routes: [MayanRoute],\n    eventHandler: (e) =&gt; {\n      console.log('Connect event', e);\n    },\n  },\n  theme: {\n    background: {\n      default: '#004547',\n    },\n  },\n});\n</code></pre> <p>In this example, the <code>config</code> object defines the routes (in this case, using the Mayan route), while the <code>theme</code> object allows customization of the Connect interface (e.g., background color).</p>"},{"location":"products/connect/reference/support-matrix/","title":"Features","text":""},{"location":"products/connect/reference/support-matrix/#feature-support-matrix","title":"Feature Support Matrix","text":"<p>Scroll down for details about each column.</p> Network WTT WTT Relayer Circle CCTP ETH Bridge Gas Drop Off Solana \u2705 \u2705 \u2705 \u274c \u2705 Ethereum \u2705 \u2705 \u2705 \u2705 \u2705 BSC \u2705 \u2705 \u274c \u2705 \u2705 Polygon \u2705 \u2705 \u2705 \u2705 \u2705 Avalanche \u2705 \u2705 \u2705 \u2705 \u2705 Fantom \u2705 \u2705 \u274c \u274c \u2705 Kaia \u2705 \u274c \u274c \u274c \u274c Celo \u2705 \u2705 \u274c \u274c \u2705 Moonbeam \u2705 \u2705 \u274c \u274c \u2705 Injective \u2705 \u274c \u274c \u274c \u274c Sui \u2705 \u2705 \u2705 \u274c \u2705 Aptos \u2705 \u274c \u2705 \u274c \u274c Arbitrum \u2705 \u2705 \u2705 \u2705 \u2705 Optimism \u2705 \u2705 \u2705 \u2705 \u2705 Base \u2705 \u2705 \u2705 \u2705 \u2705 Sei \u2705 \u274c \u274c \u274c \u274c Scroll \u2705 \u274c \u274c \u274c \u274c Blast \u2705 \u274c \u274c \u274c \u274c X Layer \u2705 \u274c \u274c \u274c \u274c <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/connect/reference/support-matrix/#feature-explanation","title":"Feature Explanation","text":""},{"location":"products/connect/reference/support-matrix/#wrapped-token-transfers","title":"Wrapped Token Transfers (WTT)","text":"<p>Wormhole is best known for its WTT transfer method. It locks assets on the source chain and mints Wormhole-wrapped \"IOU\" tokens on the destination chain. To transfer the assets back, the Wormhole-wrapped tokens are burned, unlocking the tokens on their original chain.</p> <p>This route appears if both of the following conditions are satisfied:</p> <ul> <li>Both the origin and destination chains support WTT.</li> <li>No non-WTT routes are available for the selected token.</li> </ul>"},{"location":"products/connect/reference/support-matrix/#wtt-relayer","title":"WTT Relayer","text":"<p>On the routes page, this is referred to as the automatic route in the WTT section.</p> <p>Trustless relayers can execute the second transaction on behalf of the user, so the user only needs to perform one transaction on the origin chain to have the tokens delivered to the destination automatically\u2014for a small fee.</p> <p>This route appears if all of the following conditions are satisfied:</p> <ul> <li>Both the origin and destination chains support WTT.</li> <li>Both the origin and destination chains support WTT relayer.</li> <li>No non-WTT routes are available for the selected token.</li> <li>The relayer supports the selected token on the origin chain.</li> </ul>"},{"location":"products/connect/reference/support-matrix/#circle-cctp","title":"Circle CCTP","text":"<p>Circle, the issuer of USDC, provides a native way for native USDC to be transferred between CCTP-enabled chains.</p> <p>This route appears if all of the following conditions are satisfied:</p> <ul> <li>Both the origin and destination chains support Circle CCTP.</li> <li>The selected token is native Circle-issued USDC.</li> </ul>"},{"location":"products/connect/reference/support-matrix/#eth-bridge","title":"ETH Bridge","text":"<p>Powered by Uniswap liquidity pools, this route can transfer native ETH or wstETH between certain EVMs without going through the native bridges.</p> <p>This route appears if all of the following conditions are satisfied:</p> <ul> <li>Both the origin and destination chains support the ETH Bridge.</li> <li>The selected token is native ETH, wstETH, or canonical wETH.</li> </ul>"},{"location":"products/connect/reference/support-matrix/#gas-drop-off","title":"Gas Drop Off","text":"<p>A relayer can drop off some gas tokens on the destination chain by swapping some of the assets transferred to the native gas token. This is useful if the user wishes to transfer assets to a chain where they don't already have gas. This way, they don't need to onboard into the ecosystem from a centralized exchange.</p> <p>This route appears if all of the following conditions are satisfied:</p> <ul> <li>Both the origin and destination chains support gas drop off.</li> <li>An automatic route is selected.</li> <li>The relayer accepts the selected token to swap into the gas token.</li> </ul>"},{"location":"products/connect/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerOsmosisCosmWasm Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block Explorer</p>"},{"location":"products/connect/tutorials/react-dapp/","title":"Integrate Connect into a React DApp","text":"<p> Source code on GitHub</p> <p>In this tutorial, we'll explore how to integrate Wormhole Connect to enable cross-chain token transfers and interactions. Connect offers a simplified interface for developers to facilitate seamless token transfers between blockchains. Using Connect, you can easily bridge assets across multiple ecosystems without diving into the complex mechanics of cross-chain communication.</p> <p>While this tutorial will guide you through the process using a specific blockchain as an example, the principles and steps outlined here can be applied to any blockchain supported by Wormhole. In this example, we'll work with Sui as our source blockchain and Avalanche Fuji as the destination blockchain.</p>"},{"location":"products/connect/tutorials/react-dapp/#prerequisites","title":"Prerequisites","text":"<p>To get started with Connect, we'll first need to set up a basic environment that allows for cross-chain token transfers. Before starting this tutorial, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>A Sui wallet set up and ready for use.</li> <li>A compatible wallet for Avalanche Fuji, such as MetaMask.</li> <li>Testnet tokens for Sui and Fuji to cover gas fees. </li> </ul>"},{"location":"products/connect/tutorials/react-dapp/#set-up-connect-for-sui-transfers","title":"Set Up Connect for Sui Transfers","text":""},{"location":"products/connect/tutorials/react-dapp/#create-a-react-project","title":"Create a React Project","text":"<p>In this tutorial, we'll use Next.js, a popular framework built on top of React, to set up your app:</p> <ol> <li> <p>Open your terminal and run the following command to create a new React app:</p> <pre><code>npx create-next-app@latest connect-tutorial\n</code></pre> <p>We recommend enabling TypeScript and creating a <code>src/</code> directory during setup. Other options can be configured based on your preferences.</p> </li> <li> <p>Navigate into the project directory:</p> <pre><code>cd connect-tutorial\n</code></pre> </li> </ol>"},{"location":"products/connect/tutorials/react-dapp/#install-connect","title":"Install Connect","text":"<p>Next, install the Connect package as a dependency by running the following command inside your project directory:</p> <pre><code>npm install @wormhole-foundation/wormhole-connect\n</code></pre>"},{"location":"products/connect/tutorials/react-dapp/#integrate-connect-into-the-application","title":"Integrate Connect into the Application","text":"<p>Now, we need to modify the default <code>page.tsx</code> file to integrate Connect. We are going to use version V1.0 or later, make sure to check which version of Connect you are using. Open <code>src/app/page.tsx</code> and replace the content with the following code:</p> JavaScriptTypeScript <pre><code>'use client';\n\nimport WormholeConnect from '@wormhole-foundation/wormhole-connect';\n\nconst config = {\n  network: 'Testnet',\n  chains: ['Sui', 'Avalanche'],\n};\n\nconst theme = {\n  mode: 'light',\n  primary: '#78c4b6',\n};\n\nexport default function Home() {\n  return &lt;WormholeConnect config={config} theme={theme} /&gt;;\n}\n</code></pre> <pre><code>'use client';\n\nimport WormholeConnect, {\n  type config,\n  WormholeConnectTheme,\n} from '@wormhole-foundation/wormhole-connect';\n\nexport default function Home() {\n  const config: config.WormholeConnectConfig = {\n    network: 'Testnet',\n    chains: ['Sui', 'Avalanche'],\n\n    ui: {\n      title: 'SUI Connect TS Demo',\n    },\n  };\n\n  const theme: WormholeConnectTheme = {\n    mode: 'light',\n    primary: '#78c4b6',\n  };\n  return &lt;WormholeConnect config={config} theme={theme} /&gt;;\n}\n</code></pre> <ul> <li>Set <code>network</code> to <code>'Testnet'</code>: This ensures that Connect uses the testnet environment.</li> <li>Set <code>chains</code> to <code>['Sui', 'Avalanche']</code>: Configures the app to allow transfers between Sui and Avalanche Fuji, the testnet for Avalanche.</li> </ul>"},{"location":"products/connect/tutorials/react-dapp/#customize-connect","title":"Customize Connect","text":"<p>To further customize Connect for your application, such as adjusting the UI, adding custom tokens, enabling Reown (formerly known as WalletConnect), or configuring specific chain settings, you can refer to the Connect Configuration guide.</p>"},{"location":"products/connect/tutorials/react-dapp/#run-the-application","title":"Run the Application","text":"<p>Make sure you're in the root directory of your React app, and run the following command to start the application:</p> <pre><code>npm run dev\n</code></pre> <p>Now your React app should be up and running, and Connect should be visible on <code>http://localhost:3000/</code>. You should see the Connect component, which will include a UI for selecting networks and tokens for cross-chain transfers.</p>"},{"location":"products/connect/tutorials/react-dapp/#transfer-tokens-from-sui-to-fuji","title":"Transfer Tokens from Sui to Fuji","text":"<p>Before transferring token ensure you have enough testnet SUI and Fuji tokens to cover the gas fees for the transfer. </p> <p>To transfer tokens from Sui to Fuji in the Connect interface:</p> <ol> <li>Select Sui as the source network, connect your Sui wallet, and choose SUI as the asset you wish to transfer.</li> <li>Choose Fuji as the destination network and connect your wallet with the Fuji network.</li> <li> <p>Enter the amount of SUI tokens you wish to transfer.</p> <p></p> </li> <li> <p>Choose to view other routes.</p> <p></p> </li> <li> <p>Select the manual bridge option, which will require two transactions: one on the source chain (Sui) and one on the destination chain (Fuji).</p> <p>Note</p> <p>It is recommended to use the manual bridge option for this tutorial. The automatic bridge feature is currently undergoing improvements, while the manual bridge ensures that transfers complete successfully.</p> <p></p> </li> <li> <p>Review and confirm the transfer on Sui. This will lock your tokens on the Sui chain.</p> <p></p> </li> <li> <p>Follow the on-screen prompts to approve the transaction. You will be asked to sign with your Sui wallet.</p> <p></p> </li> </ol> <p>Once the transaction has been submitted, Connect will display the progress of the transfer. Monitor the status until you're prompted to complete the transaction on the destination chain. You can also track your transactions on Wormholescan.</p>"},{"location":"products/connect/tutorials/react-dapp/#claim-tokens-on-fuji","title":"Claim Tokens on Fuji","text":"<p>After the Sui transaction is complete, confirm the final transaction on Fuji by claiming the wrapped tokens. You will be asked to confirm the transaction with your Fuji wallet.</p> <p></p> <p>Once confirmed, check your Fuji wallet to verify that the wrapped SUI tokens have been successfully received.</p> <p></p>"},{"location":"products/connect/tutorials/react-dapp/#resources","title":"Resources","text":"<p>If you'd like to explore the complete project or need a reference while following this tutorial, you can find the entire codebase in the Sui-Connect GitHub repository. The repository includes an integration of Connect in a React app for bridging tokens between the Sui and Fuji (Avalanche Testnet) networks.</p>"},{"location":"products/connect/tutorials/react-dapp/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've gained hands-on experience with integrating Connect to enable cross-chain token transfers. You've learned to configure a React app for seamless interactions between Sui and Avalanche Fuji, providing users with the ability to bridge assets across chains with ease.</p> <p>By following these steps, you've learned how to:</p> <ul> <li>Set up a React project tailored for cross-chain transfers.</li> <li>Install and configure Connect to support multiple blockchains.</li> <li>Implement a streamlined UI for selecting source and destination chains, connecting wallets, and initiating transfers.</li> <li>Execute a token transfer from Sui to Avalanche Fuji, monitoring each step and confirming the transaction on both networks.</li> </ul> <p>With these tools and knowledge, you're now equipped to build powerful cross-chain applications using Connect, opening up possibilities for users to move assets across ecosystems securely and efficiently.</p> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/messaging/get-started/","title":"Get Started with Messaging","text":"<p>Wormhole's core functionality allows you to send any data packet from one supported chain to another. This guide demonstrates how to publish your first simple, arbitrary data message from an EVM environment source chain using the Wormhole TypeScript SDK's core messaging capabilities. </p>"},{"location":"products/messaging/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed.</li> <li>TypeScript installed.</li> <li>Ethers.js installed (this example uses version 6).</li> <li>A small amount of testnet tokens for gas fees. This example uses Sepolia ETH but can be adapted for any supported network.</li> <li>A private key for signing blockchain transactions.</li> </ul>"},{"location":"products/messaging/get-started/#configure-your-messaging-environment","title":"Configure Your Messaging Environment","text":"<ol> <li> <p>Create a directory and initialize a Node.js project:</p> <pre><code>mkdir core-message\ncd core-message\nnpm init -y\n</code></pre> </li> <li> <p>Install TypeScript, tsx, Node.js type definitions, and Ethers.js:</p> <pre><code>npm install --save-dev tsx typescript @types/node ethers\n</code></pre> </li> <li> <p>Create a <code>tsconfig.json</code> file if you don't have one. You can generate a basic one using the following command:</p> <pre><code>npx tsc --init\n</code></pre> <p>Make sure your <code>tsconfig.json</code> includes the following settings:</p> <pre><code>{\n    \"compilerOptions\": {\n        // es2020 or newer\n        \"target\": \"es2020\",\n        // Use esnext if you configured your package.json with type: \"module\"\n        \"module\": \"commonjs\",\n        \"esModuleInterop\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"strict\": true,\n        \"skipLibCheck\": true,\n        \"resolveJsonModule\": true\n        }\n}\n</code></pre> </li> <li> <p>Install the TypeScript SDK:</p> <pre><code>npm install @wormhole-foundation/sdk\n</code></pre> </li> <li> <p>Create a new file named <code>main.ts</code>:</p> <pre><code>touch main.ts\n</code></pre> </li> </ol>"},{"location":"products/messaging/get-started/#construct-and-publish-your-message","title":"Construct and Publish Your Message","text":"<ol> <li> <p>Open <code>main.ts</code> and update the code there as follows:</p> main.ts<pre><code>import {\n  wormhole,\n  signSendWait,\n  toNative,\n  encoding,\n  type Chain,\n  type Network,\n  type NativeAddress,\n  type WormholeMessageId,\n  type UnsignedTransaction,\n  type TransactionId,\n  type WormholeCore,\n  type Signer as WormholeSdkSigner,\n  type ChainContext,\n} from '@wormhole-foundation/sdk';\n// Platform-specific modules\nimport EvmPlatformLoader from '@wormhole-foundation/sdk/evm';\nimport { getEvmSigner } from '@wormhole-foundation/sdk-evm';\nimport {\n  ethers,\n  Wallet,\n  JsonRpcProvider,\n  Signer as EthersSigner,\n} from 'ethers';\n\n/**\n * The required value (SEPOLIA_PRIVATE_KEY) must\n * be loaded securely beforehand, for example via a keystore, secrets\n * manager, or environment variables (not recommended).\n */\n\nconst SEPOLIA_PRIVATE_KEY = SEPOLIA_PRIVATE_KEY!;\n// Provide a private endpoint RPC URL for Sepolia, defaults to a public node\n// if not set\nconst RPC_URL =\n  process.env.SEPOLIA_RPC_URL || 'https://ethereum-sepolia-rpc.publicnode.com';\n\nasync function main() {\n  // Initialize Wormhole SDK\n  const network = 'Testnet';\n  const wh = await wormhole(network, [EvmPlatformLoader]);\n  console.log('Wormhole SDK Initialized.');\n\n  // Get the EVM signer and provider\n  let ethersJsSigner: EthersSigner;\n  let ethersJsProvider: JsonRpcProvider;\n\n  try {\n    if (!SEPOLIA_PRIVATE_KEY) {\n      console.error('Please set the SEPOLIA_PRIVATE_KEY environment variable.');\n      process.exit(1);\n    }\n\n    ethersJsProvider = new JsonRpcProvider(RPC_URL);\n    const wallet = new Wallet(SEPOLIA_PRIVATE_KEY);\n    ethersJsSigner = wallet.connect(ethersJsProvider);\n    console.log(\n      `Ethers.js Signer obtained for address: ${await ethersJsSigner.getAddress()}`,\n    );\n  } catch (error) {\n    console.error('Failed to get Ethers.js signer and provider:', error);\n    process.exit(1);\n  }\n\n  // Define the source chain context\n  const sourceChainName: Chain = 'Sepolia';\n  const sourceChainContext = wh.getChain(sourceChainName) as ChainContext&lt;\n    'Testnet',\n    'Sepolia',\n    'Evm'\n  &gt;;\n  console.log(`Source chain context obtained for: ${sourceChainContext.chain}`);\n\n  // Get the Wormhole SDK signer, which is a wrapper around the Ethers.js\n  // signer using the Wormhole SDK's signing and transaction handling\n  // capabilities\n  let sdkSigner: WormholeSdkSigner&lt;Network, Chain&gt;;\n  try {\n    sdkSigner = await getEvmSigner(ethersJsProvider, ethersJsSigner);\n    console.log(\n      `Wormhole SDK Signer obtained for address: ${sdkSigner.address()}`,\n    );\n  } catch (error) {\n    console.error('Failed to get Wormhole SDK Signer:', error);\n    process.exit(1);\n  }\n\n  // Construct your message payload\n  const messageText = `HelloWormholeSDK-${Date.now()}`;\n  const payload: Uint8Array = encoding.bytes.encode(messageText);\n  console.log(`Message to send: \"${messageText}\"`);\n\n  // Define message parameters\n  const messageNonce = Math.floor(Math.random() * 1_000_000_000);\n  const consistencyLevel = 1;\n\n  try {\n    // Get the core protocol client\n    const coreProtocolClient: WormholeCore&lt;Network&gt; =\n      await sourceChainContext.getWormholeCore();\n\n    // Generate the unsigned transactions\n    const whSignerAddress: NativeAddress&lt;Chain&gt; = toNative(\n      sdkSigner.chain(),\n      sdkSigner.address(),\n    );\n    console.log(\n      `Preparing to publish message from ${whSignerAddress.toString()} on ${\n        sourceChainContext.chain\n      }...`,\n    );\n\n    const unsignedTxs: AsyncGenerator&lt;UnsignedTransaction&lt;Network, Chain&gt;&gt; =\n      coreProtocolClient.publishMessage(\n        whSignerAddress, \n        payload,\n        messageNonce,\n        consistencyLevel,\n      );\n\n    // Sign and send the transactions\n    console.log(\n      'Signing and sending the message publication transaction(s)...',\n    );\n    const txIds: TransactionId[] = await signSendWait(\n      sourceChainContext,\n      unsignedTxs,\n      sdkSigner,\n    );\n\n    if (!txIds || txIds.length === 0) {\n      throw new Error('No transaction IDs were returned from signSendWait.');\n    }\n    const primaryTxIdObject = txIds[txIds.length - 1];\n    const primaryTxid = primaryTxIdObject.txid;\n\n    console.log(`Primary transaction ID for parsing: ${primaryTxid}`);\n    console.log(\n      `View on Sepolia Etherscan: https://sepolia.etherscan.io/tx/${primaryTxid}`,\n    );\n\n    console.log(\n      '\\nWaiting a few seconds for transaction to propagate before parsing...',\n    );\n    await new Promise((resolve) =&gt; setTimeout(resolve, 8000));\n\n    // Retrieve VAA identifiers\n    console.log(\n      `Attempting to parse VAA identifiers from transaction: ${primaryTxid}...`,\n    );\n    const messageIds: WormholeMessageId[] =\n      await sourceChainContext.parseTransaction(primaryTxid);\n\n    if (messageIds &amp;&amp; messageIds.length &gt; 0) {\n      const wormholeMessageId = messageIds[0];\n      console.log('--- VAA Identifiers (WormholeMessageId) ---');\n      console.log('  Emitter Chain:', wormholeMessageId.chain);\n      console.log('  Emitter Address:', wormholeMessageId.emitter.toString());\n      console.log('  Sequence:', wormholeMessageId.sequence.toString());\n      console.log('-----------------------------------------');\n    } else {\n      console.error(\n        `Could not parse Wormhole message IDs from transaction ${primaryTxid}.`,\n      );\n    }\n  } catch (error) {\n    console.error(\n      'Error during message publishing or VAA identifier retrieval:',\n      error,\n    );\n    if (error instanceof Error &amp;&amp; error.stack) {\n      console.error('Stack Trace:', error.stack);\n    }\n  }\n}\n\nmain().catch((e) =&gt; {\n  console.error('Critical error in main function (outer catch):', e);\n  if (e instanceof Error &amp;&amp; e.stack) {\n    console.error('Stack Trace:', e.stack);\n  }\n  process.exit(1);\n});\n</code></pre> <p>This script initializes the SDK, defines values for the source chain, creates an EVM signer, constructs the message, uses the core protocol to generate, sign, and send the transaction, and returns the VAA identifiers upon successful publication of the message.</p> </li> <li> <p>Run the script using the following command:</p> <pre><code>npx tsx main.ts\n</code></pre> <p>You will see terminal output similar to the following:</p> <p> npx tsx main.ts Wormhole SDK Initialized. Ethers.js Signer obtained for address: 0xCD8Bcd9A793a7381b3C66C763c3f463f70De4e12 Source chain context obtained for: Sepolia Wormhole SDK Signer obtained for address: 0xCD8Bcd9A793a7381b3C66C763c3f463f70De4e12 Message to send: \"HelloWormholeSDK-1748362375390\" Preparing to publish message from 0xCD8Bcd9A793a7381b3C66C763c3f463f70De4e12 on Sepolia... Signing and sending the message publication transaction(s)... Primary Transaction ID for parsing: 0xeb34f35f91c72e4e5198509071d24fd25d8a979aa93e2f168de075e3568e1508 View on Sepolia Etherscan: https://sepolia.etherscan.io/tx/0xeb34f35f91c72e4e5198509071d24fd25d8a979aa93e2f168de075e3568e1508 Waiting a few seconds for transaction to propagate before parsing... Attempting to parse VAA identifiers from transaction:     0xeb34f35f91c72e4e5198509071d24fd25d8a979aa93e2f168de075e3568e1508... --- VAA Identifiers (WormholeMessageId) ---  Emitter Chain: Sepolia  Emitter Address: 0x000000000000000000000000cd8bcd9a793a7381b3c66c763c3f463f70de4e12  Sequence: 1 ----------------------------------------- </p> </li> <li> <p>Make a note of the transaction ID and VAA identifier values. You can use the transaction ID to view the transaction on Wormholescan. The emitter chain, emitter address, and sequence values are used to retrieve and decode signed messages.</p> </li> </ol> <p>Congratulations! You've published your first multichain message using Wormhole's TypeScript SDK and core protocol functionality. Consider the following options to build upon what you've accomplished. </p>"},{"location":"products/messaging/get-started/#next-steps","title":"Next Steps","text":"<ul> <li>Get Started with WTT: Follow this guide to start working with multichain token transfers using Wormhole Wrapped Token Transfers' lock and mint mechanism to send tokens across chains.</li> </ul>"},{"location":"products/messaging/overview/","title":"Messaging Overview","text":"<p>Wormhole Messaging is the core protocol of the Wormhole ecosystem\u2014a generic, multichain message-passing layer that enables secure, fast communication between blockchains. It solves the critical problem of blockchain isolation by allowing data and assets to move freely across networks, empowering developers to build true multichain applications.</p>"},{"location":"products/messaging/overview/#key-features","title":"Key Features","text":"<ul> <li>Multichain messaging: Send arbitrary data between blockchains, enabling xDapps, governance actions, or coordination across ecosystems.</li> <li>Decentralized validation: A network of independent Guardians observes and signs multichain messages, producing Verifiable Action Approvals (VAAs) that ensure integrity.</li> <li>Composable architecture: Works with smart contracts, token bridges, or decentralized applications, providing a flexible foundation for multichain use cases.</li> </ul>"},{"location":"products/messaging/overview/#how-it-works","title":"How It Works","text":"<p>The messaging flow consists of several core components:</p> <ol> <li>Source chain (emitter contract): A contract emits a message by calling the Wormhole Core Contract on the source chain.</li> <li>Guardian Network: Guardians observe the message, validate it, and generate a signed VAA.</li> <li>Relayers: Off-chain or on-chain relayers transport the VAA to the destination chain.</li> <li>Target chain (recipient contract): The Core Contract on the destination chain verifies the VAA and triggers the specified application logic.</li> </ol> <p></p>"},{"location":"products/messaging/overview/#use-cases","title":"Use Cases","text":"<p>Wormhole Messaging enables a wide range of multichain applications. Below are common use cases and the Wormhole stack components you can use to build them.</p> <ul> <li> <p>Borrowing and Lending Across Chains (e.g., Folks Finance)</p> <ul> <li>Messaging: Coordinate actions across chains.</li> <li>Native Token Transfers: Transfer collateral as native assets.</li> <li>Queries: Fetch rates and prices in real-time.</li> </ul> </li> <li> <p>Oracle Networks (e.g., Pyth)</p> <ul> <li>Messaging: Relay verified data.</li> <li>Queries: Aggregate multi-chain sources.</li> </ul> </li> <li> <p>Gas Abstraction</p> <ul> <li>Messaging: Coordinate gas logic.</li> <li>Native Token Transfers: Handle native token swaps.</li> </ul> </li> <li> <p>Bridging Intent Library</p> <ul> <li>Messaging: Dispatch and execute intents.</li> <li>Settlement: Execute user-defined bridging intents.</li> </ul> </li> <li> <p>Decentralized Social Platforms (e.g., Chingari)</p> <ul> <li>Messaging: Facilitate decentralized interactions.</li> <li>Wrapped Token Transfers: Enable tokenized rewards.</li> </ul> </li> </ul>"},{"location":"products/messaging/overview/#next-steps","title":"Next Steps","text":"<p>Follow these steps to work with Wormhole Messaging:</p> <ul> <li>Get Started with Messaging: Use the core protocol to publish a multichain message and return transaction info with VAA identifiers.</li> <li>Use Wormhole Relayers: Send and receive messages without off-chain infrastructure.</li> </ul> <p>For lower-cost, efficient integration with Core Bridge on Solana, consider using shim programs:</p> <ul> <li>Solana Shims : Learn about the purpose and benefits of using shims on Solana.</li> <li>Emission Shim: Emit messages without creating permanent accounts, reducing rent costs.</li> <li>Verification Shim: Efficiently verify Wormhole VAAs without leaving rent-exempt accounts.</li> </ul>"},{"location":"products/messaging/concepts/solana-shim/","title":"Solana Shims","text":"<p>Wormhole shims on Solana are lightweight programs that enable cheaper and more flexible message emission and verification while preserving Guardian observation guarantees. They are designed for integrators who want to reduce Solana rent costs without sacrificing core protocol security or Guardian compatibility.</p>"},{"location":"products/messaging/concepts/solana-shim/#the-core-bridge-account-problem","title":"The Core Bridge Account Problem","text":"<p>When you emit a message on Solana using the legacy Wormhole core bridge, it creates a new on-chain account, a Program Derived Address (PDA), for every message. Each of these accounts must hold enough SOL to be rent-exempt, locking up lamports that cannot be reclaimed since the core bridge does not allow these accounts to be closed. Over time, this results in two big problems:</p> <ul> <li>Permanent On-Chain State: Every message leaves behind a permanent account, increasing long-term storage needs on Solana.</li> <li>Lost Lamports to Rent: Integrators lose SOL for every message, as the lamports needed for rent exemption remain locked in the message accounts indefinitely.</li> </ul> <p>Solana\u2019s rent-exemption model isn't the fundamental limitation; the constraint lies in the legacy <code>post_message</code> function of the core bridge, which always creates a new, non-reclaimable account every time it\u2019s called. Even after a message is consumed, these accounts can\u2019t be closed or reused, resulting in unrecoverable rent costs.</p> <p>Although the <code>post_message_unreliable</code> function allows for account reuse, it comes with strict tradeoffs. Once a message is overwritten, it can no longer be recovered, making it no longer observable by Guardians. It also locks you into the original account size, as the feature predates Solana\u2019s account resizing.</p> <p>Verification has similar costs. The <code>post_vaa</code> instruction creates additional temporary accounts for signatures and VAA data, which again require rent and aren\u2019t automatically cleaned up. Over time, these add to both storage bloat and unrecoverable SOL.</p> <p>This design ensures reliability, as message data is always available on-chain for Guardians to observe. However, it comes at a cost in both storage and lost SOL. To address these issues, Wormhole introduces Solana shims, which fundamentally change the cost model for emission and verification.</p>"},{"location":"products/messaging/concepts/solana-shim/#what-are-the-solana-shims","title":"What Are the Solana Shims?","text":"<p>To address the limitations of the core bridge, Wormhole deploys two specialized Solana programs called shims:</p> <ul> <li>Post Message Shim (<code>EtZMZM22ViKMo4r5y4Anovs3wKQ2owUmDpjygnMMcdEX</code>): Emits Wormhole messages efficiently, without creating new message accounts for each emission, reducing rent costs.</li> <li>Verify VAA Shim (<code>EFaNWErqAtVWufdNb7yofSHHfWFos843DFpu4JBw24at</code>): Verifies VAAs on-chain without leaving permanent accounts.</li> </ul> <p>Both act as lightweight wrappers around the existing core bridge. There are two different options, depending on whether you are emitting messages or verifying VAAs:</p>"},{"location":"products/messaging/concepts/solana-shim/#emission-shim","title":"Emission Shim","text":"<p>The Emission Shim is a Solana program deployed at <code>EtZMZM22ViKMo4r5y4Anovs3wKQ2owUmDpjygnMMcdEX</code>. It wraps the core bridge\u2019s <code>post_message_unreliable</code> instruction and emits message data as a log event instead of storing it in a rent-exempt message account. This eliminates rent costs and prevents long-term state bloat. Guardians are configured to observe this canonical shim, allowing integrators to send messages through it without additional setup.</p> <p>It works by calling the <code>post_message</code> instruction on the Post Message Shim program. This emits the Wormhole message as a log event instead of creating a rent-exempt message account.</p> <p>The shim differs from the standard <code>post_message</code> approach in two key ways. First, it utilizes a Program Derived Address (PDA) per emitter for message accounts, eliminating the need to generate a new key pair for each emission. Second, instead of writing the message into a persistent, rent-exempt account, it emits the data via an Anchor CPI event, which Guardians can observe directly. This design reduces rent costs and prevents unused accounts from being left behind.</p> <p>The shim works through a few main components:</p> <ul> <li>Shim Program: Provides a <code>post_message</code> instruction modeled on the core bridge\u2019s <code>post_message_unreliable</code>.</li> <li>Sequence Handling: The core bridge continues to manage sequence numbers. It reads the sequence number from the core bridge and emits it in a CPI event, along with the timestamp.</li> <li>Message Account: Calls <code>post_message_unreliable</code> on the core bridge, writing an empty payload, so no unique message is stored on-chain.</li> <li>Guardian Role: Guardians reconstruct the message from instruction data and the emitted event, not from a persistent account.</li> </ul> <pre><code>graph LR\n    A[Integrator Program]\n    B[Emission Shim]\n    C[Core Bridge]\n    D[Guardians]\n\n    A -- call post_message --&gt; B\n    B -- emits event &amp; calls core --&gt; C\n    C -- instruction data &amp; event --&gt; D</code></pre> <p>The emission fee is still paid, and the core bridge continues to manage sequence numbers as before. The difference is that instead of creating a new message account for each emission, the shim emits a CPI event with the message data. All the information Guardians need is captured in the transaction logs, without leaving behind permanent accounts.</p>"},{"location":"products/messaging/concepts/solana-shim/#verification-shim","title":"Verification Shim","text":"<p>The Verification Shim is a Solana program deployed at <code>EFaNWErqAtVWufdNb7yofSHHfWFos843DFpu4JBw24at</code>. It provides a <code>verify_hash</code> instruction that checks Guardian signatures against the active Guardian set for a VAA's digest. It ensures quorum, validates each signature in order, recovers the public keys, and matches them against the Guardian set. If all checks pass, the VAA is verified without creating persistent rent-exempt accounts. This replaces using the core bridge\u2019s <code>post_vaa</code>. Integrators can call the canonical shim, but existing programs may need to be modified to adopt this approach.</p> <p>It works by first calling the <code>post_signatures</code> on the Verification Shim to store Guardian signatures in a temporary account. Then, from within your program, call <code>verify_hash</code> to check the VAA\u2019s digest against Guardian signatures. In the same transaction, close the signatures account with <code>close_signatures</code> to reclaim rent. </p> <p>Instead of the core bridge instructions, such as <code>verify_signatures</code> and <code>post_vaa</code>, the verification shim provides its own flow using <code>post_signatures</code>, <code>verify_hash</code>, and <code>close_signatures</code>. The flow is a simpler sequence that avoids leaving permanent accounts on-chain:</p> <ol> <li>Call <code>post_signatures</code>: Creates (or appends to) a temporary <code>GuardianSignatures</code> account that stores the collected Guardian signatures. This account is owned and managed by the verification shim.</li> <li>Call <code>verify_hash</code>: Verifies the digest of the VAA against the active Guardian set and checks quorum by recovering and validating each Guardian signature. If verification succeeds, your program can continue its logic.</li> <li>Call <code>close_signatures</code>: Immediately closes the <code>GuardianSignatures</code> account to reclaim the lamports paid for its creation.</li> </ol> <pre><code>graph LR\n    A[post_signatures] --&gt; B[verify_hash]\n    B --&gt; C[Process Logic]\n    C --&gt; D[close_signatures]</code></pre> <p>This flow ensures verification is both rent-efficient and secure, no permanent accounts remain, and Guardians still enforce quorum and integrity guarantees.</p>"},{"location":"products/messaging/concepts/solana-shim/#guardian-observation-methods","title":"Guardian Observation Methods","text":"Legacy Model Shim Model Message Storage On-chain account Transaction logs (CPI) Data Permanence Permanent Until RPC history pruned Guardian Observation Reads account data Reads transaction logs Cost High (rent + compute) Low (compute only) Closing Accounts Not possible Not needed <p>With shims, the message\u2019s existence depends on the transaction log, so cost drops, but indefinite on-chain visibility is no longer guaranteed. Sequence tracking remains the same as the legacy model, so integrators can switch between the two without disrupting sequence numbers.</p>"},{"location":"products/messaging/concepts/solana-shim/#transaction-costs","title":"Transaction Costs","text":"<p>Solana charges for two main resources when processing transactions: compute units (for execution) and rent (for storing data on-chain). Understanding how each contributes to the overall cost is key to seeing why shims are cheaper.</p> <ul> <li>Compute Units (CU): Solana measures CPU resource usage per transaction as \u201ccompute units\u201d. Each transaction has a CU limit (usually ~200,000 \u2014 which can be increased for a fee).</li> <li>Rent: One-time cost in SOL to keep an account on-chain. Most of the core bridge\u2019s cost comes from rent, not CUs.</li> </ul> <p>Even though the shim uses slightly more compute (extra logic for logging), it avoids account creation entirely. Since rent is the most significant cost, the total emission cost drops.</p>"},{"location":"products/messaging/concepts/solana-shim/#safety-tradeoffs-limitations","title":"Safety, Tradeoffs &amp; Limitations","text":"<p>Shims preserve the same security guarantees as the core bridge so that integrators can adopt shims without weakening protocol safety. The only difference is where data lives: instead of being stored permanently in message accounts, it is emitted in transaction logs or held temporarily until verification completes. Guardians are explicitly configured to observe shim output, ensuring messages and VAAs remain verifiable across the network.</p> <p>The main tradeoff is durability. In the legacy model, messages and VAAs were always available on-chain for re-observation. With shims, message data persists only as long as transaction history is retained by RPC providers. This is sufficient for Guardian observation, but doesn\u2019t provide indefinite public access to raw message data. Applications that rely on long-term on-chain storage may still prefer the legacy path, while most integrators benefit from the reduced cost and state bloat.</p> <p>Finally, adopting shims may require some integration changes. For emission, developers should route messages through the Post Message Shim rather than directly through the core bridge. For verification, programs must update their logic to call <code>verify_hash</code> and manage temporary accounts in the same transaction. These are lightweight adjustments, but they are necessary to take full advantage of the cost savings.</p>"},{"location":"products/messaging/concepts/solana-shim/#next-steps","title":"Next Steps","text":"<p>To put these concepts into practice, explore the dedicated guides for emission and verification on Solana:</p> <ul> <li>Efficient Emission on Solana</li> <li>Efficient Verification on Solana</li> </ul>"},{"location":"products/messaging/guides/core-contracts/","title":"Get Started with Core Contracts","text":"<p>Wormhole's Core Contracts, deployed on each supported blockchain network, enable the fundamental operations of sending and receiving cross-chain messages.</p> <p>While the implementation details of the Core Contracts varies by network, the core functionality remains consistent across chains. Each version of the Core Contract facilitates secure and reliable cross-chain communication, ensuring that developers can effectively publish and verify messages.</p> <p>This guide will walk you through the variations and key methods of the Core Contracts, providing you with the knowledge needed to integrate them into your cross-chain contracts. To learn more about Core Contracts' features and how it works, please refer to the\u00a0Core Contracts\u00a0page in the Learn section.</p>"},{"location":"products/messaging/guides/core-contracts/#prerequisites","title":"Prerequisites","text":"<p>To interact with the Wormhole Core Contract, you'll need the following:</p> <ul> <li>The address of the Core Contract on the chains you're deploying your contract on.</li> <li>The Wormhole chain ID of the chains you're deploying your contract on.</li> <li>The Wormhole Finality (consistency) levels (required finality) for the chains you're deploying your contract on.</li> </ul>"},{"location":"products/messaging/guides/core-contracts/#how-to-interact-with-core-contracts","title":"How to Interact with Core Contracts","text":"<p>Before writing your own contracts, it's essential to understand the key functions and events of the Wormhole Core Contracts. The primary functionality revolves around:</p> <ul> <li>Sending messages: Submitting messages to the Wormhole network for cross-chain communication.</li> <li>Receiving and verifying messages: Validating messages received from other chains via the Wormhole network.</li> </ul> <p>While the implementation details of the Core Contracts vary by network, the core functionality remains consistent across chains.</p>"},{"location":"products/messaging/guides/core-contracts/#sending-messages","title":"Sending Messages","text":"<p>To send a message, regardless of the environment or chain, the Core Contract is invoked with a message argument from an emitter. This emitter might be your contract or an existing application such as the Wrapped Token Transfers (WTT).</p> EVMSolana <p>The <code>IWormhole.sol</code> interface provides the <code>publishMessage</code> function, which can be used to publish a message directly to the Core Contract:</p> <pre><code>function publishMessage(\n    uint32 nonce,\n    bytes memory payload,\n    uint8 consistencyLevel\n) external payable returns (uint64 sequence);\n</code></pre> Parameters <p><code>nonce</code> uint32</p> <p>A free integer field that can be used however you like. Note that changing the <code>nonce</code> will result in a different digest.</p> <p><code>payload</code> bytes memory</p> <p>The content of the emitted message. Due to the constraints of individual blockchains, it may be capped to a certain maximum length.</p> <p><code>consistencyLevel</code> uint8</p> <p>A value that defines the required level of finality that must be reached before the Guardians will observe and attest to emitted events.</p> Returns <p><code>sequence</code> uint64</p> <p>A unique number that increments for every message for a given emitter (and implicitly chain). This, combined with the emitter address and emitter chain ID, allows the VAA for this message to be queried from the Wormholescan API.</p> Example <pre><code>IWormhole wormhole = IWormhole(wormholeAddr);\n\n// Get the fee for publishing a message\nuint256 wormholeFee = wormhole.messageFee();\n\n// Check fee and send parameters\n\n// Create the HelloWorldMessage struct\nHelloWorldMessage memory parsedMessage = HelloWorldMessage({\n    payloadID: uint8(1),\n    message: helloWorldMessage\n});\n\n// Encode the HelloWorldMessage struct into bytes\nbytes memory encodedMessage = encodeMessage(parsedMessage);\n\n// Send the HelloWorld message by calling publishMessage on the\n// wormhole core contract and paying the Wormhole protocol fee.\nmessageSequence = wormhole.publishMessage{value: wormholeFee}(\n    0, // batchID\n    encodedMessage,\n    wormholeFinality()\n);\n</code></pre> <p>View the complete Hello World example in the Wormhole Scaffolding repository on GitHub.</p> <p>The <code>wormhole_anchor_sdk::wormhole</code> module and the Wormhole program account can be used to pass a message directly to the Core Contract via the <code>wormhole::post_message</code> function:</p> <pre><code>pub fn post_message&lt;'info&gt;(\n    ctx: CpiContext&lt;'_, '_, '_, 'info, PostMessage&lt;'info&gt;&gt;,\n    batch_id: u32,\n    payload: Vec&lt;u8&gt;,\n    finality: Finality\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>ctx</code> CpiContext&lt;'_, '_, '_, 'info, PostMessage&lt;'info&gt;&gt; </p> <p>Provides the necessary context for executing the function, including the accounts and program information required for the Cross-Program Invocation (CPI).</p> Type <code>pub struct CpiContext&lt;'a, 'b, 'c, 'info, T&gt;</code> <pre><code>pub struct CpiContext&lt;'a, 'b, 'c, 'info, T&gt;\nwhere\n    T: ToAccountMetas + ToAccountInfos&lt;'info&gt;,\n{\n    pub accounts: T,\n    pub remaining_accounts: Vec&lt;AccountInfo&lt;'info&gt;&gt;,\n    pub program: AccountInfo&lt;'info&gt;,\n    pub signer_seeds: &amp;'a [&amp;'b [&amp;'c [u8]]],\n}\n</code></pre> <p>For more information, please refer to the <code>wormhole_anchor_sdk</code> Rust docs.</p> Type <code>PostMessage&lt;'info&gt;</code> <pre><code>pub struct PostMessage&lt;'info&gt; {\n    pub config: AccountInfo&lt;'info&gt;,\n    pub message: AccountInfo&lt;'info&gt;,\n    pub emitter: AccountInfo&lt;'info&gt;,\n    pub sequence: AccountInfo&lt;'info&gt;,\n    pub payer: AccountInfo&lt;'info&gt;,\n    pub fee_collector: AccountInfo&lt;'info&gt;,\n    pub clock: AccountInfo&lt;'info&gt;,\n    pub rent: AccountInfo&lt;'info&gt;,\n    pub system_program: AccountInfo&lt;'info&gt;,\n}\n</code></pre> <p>For more information, please refer to the <code>wormhole_anchor_sdk</code> Rust docs.</p> <p><code>batch_id</code> u32</p> <p>An identifier for the message batch.</p> <p><code>payload</code> Vec&lt;u8&gt;</p> <p>The data being sent in the message. This is a variable-length byte array that contains the actual content or information being transmitted. To learn about the different types of payloads, check out the VAAs page.</p> <p><code>finality</code> Finality</p> <p>Specifies the level of finality or confirmation required for the message.</p> Type <code>Finality</code> <pre><code>pub enum Finality {\n    Confirmed,\n    Finalized,\n}\n</code></pre> Returns <p>Result&lt;()&gt;</p> <p>The result of the function\u2019s execution. If the function completes successfully, it returns <code>Ok(())</code>, otherwise it returns <code>Err(E)</code>, indicating that an error occurred along with the details about the error</p> Example <pre><code>let fee = ctx.accounts.wormhole_bridge.fee();\n// ... Check fee and send parameters\n\nlet config = &amp;ctx.accounts.config;\nlet payload: Vec&lt;u8&gt; = HelloWorldMessage::Hello { message }.try_to_vec()?;\n\n// Invoke `wormhole::post_message`.\nwormhole::post_message(\n    CpiContext::new_with_signer(\n        ctx.accounts.wormhole_program.to_account_info(),\n        wormhole::PostMessage {\n            // ... Set fields\n        },\n        &amp;[\n            // ... Set seeds\n        ],\n    ),\n    config.batch_id,\n    payload,\n    config.finality.into(),\n)?;\n</code></pre> <p>View the complete Hello World example in the Wormhole Scaffolding repository on GitHub.</p> <p>Once the message is emitted from the Core Contract, the Guardian Network will observe the message and sign the digest of an Attestation VAA. On EVM chains, the body of the VAA is hashed twice with keccak256 to produce the signed digest message. On Solana, the Solana secp256k1 program will hash the message passed. In this case, the argument for the message should be a single hash of the body, not the twice-hashed body.</p> <p>VAAs are multicast by default. This means there is no default target chain for a given message. The application developer decides on the format of the message and its treatment upon receipt.</p>"},{"location":"products/messaging/guides/core-contracts/#receiving-messages","title":"Receiving Messages","text":"<p>The way a message is received and handled depends on the environment.</p> EVMSolana <p>On EVM chains, the message passed is the raw VAA encoded as binary. The <code>IWormhole.sol</code> interface provides the <code>parseAndVerifyVM</code> function, which can be used to parse and verify the received message.</p> <pre><code>function parseAndVerifyVM(\n    bytes calldata encodedVM\n) external view returns (VM memory vm, bool valid, string memory reason);\n</code></pre> Parameters <p><code>encodedVM</code> bytes calldata</p> <p>The encoded message as a Verified Action Approval (VAA), which contains all necessary information for verification and processing.</p> Returns <p><code>vm</code> VM memory</p> <p>The valid parsed VAA, which will include the original <code>emitterAddress</code>, <code>sequenceNumber</code>, and <code>consistencyLevel</code>, among other fields outlined on the VAAs page.</p> Struct <code>VM</code> <pre><code>struct VM {\n    uint8 version;\n    uint32 timestamp;\n    uint32 nonce;\n    uint16 emitterChainId;\n    bytes32 emitterAddress;\n    uint64 sequence;\n    uint8 consistencyLevel;\n    bytes payload;\n    uint32 guardianSetIndex;\n    Signature[] signatures;\n    bytes32 hash;\n}\n</code></pre> <p>For more information, refer to the <code>IWormhole.sol</code> interface.</p> <p><code>valid</code> bool</p> <p>A boolean indicating whether the VAA is valid or not.</p> <p><code>reason</code> string</p> <p>If the VAA is not valid, a reason will be provided</p> Example <pre><code>function receiveMessage(bytes memory encodedMessage) public {\n    // Call the Wormhole core contract to parse and verify the encodedMessage\n    (\n        IWormhole.VM memory wormholeMessage,\n        bool valid,\n        string memory reason\n    ) = wormhole().parseAndVerifyVM(encodedMessage);\n\n    // Perform safety checks here\n\n    // Decode the message payload into the HelloWorldMessage struct\n    HelloWorldMessage memory parsedMessage = decodeMessage(\n        wormholeMessage.payload\n    );\n\n    // Your custom application logic here\n}\n</code></pre> <p>View the complete Hello World example in the Wormhole Scaffolding repository on GitHub.</p> <p>On Solana, the VAA is first posted and verified by the Core Contract, after which it can be read by the receiving contract and action taken.</p> <p>Retrieve the raw message data:</p> <pre><code>let posted_message = &amp;ctx.accounts.posted;\nposted_message.data()\n</code></pre> Example <pre><code>pub fn receive_message(ctx: Context&lt;ReceiveMessage&gt;, vaa_hash: [u8; 32]) -&gt; Result&lt;()&gt; {\n    let posted_message = &amp;ctx.accounts.posted;\n\n    if let HelloWorldMessage::Hello { message } = posted_message.data() {\n        // Check message\n        // Your custom application logic here\n        Ok(())\n    } else {\n        Err(HelloWorldError::InvalidMessage.into())\n    }\n}\n</code></pre> <p>View the complete Hello World example in the Wormhole Scaffolding repository on GitHub.</p>"},{"location":"products/messaging/guides/core-contracts/#validating-the-emitter","title":"Validating the Emitter","text":"<p>When processing cross-chain messages, it's critical to ensure that the message originates from a trusted sender (emitter). This can be done by verifying the emitter address and chain ID in the parsed VAA.</p> <p>Typically, contracts should provide a method to register trusted emitters and check incoming messages against this list before processing them. For example, the following check ensures that the emitter is registered and authorized:</p> <pre><code>require(isRegisteredSender(emitterChainId, emitterAddress), \"Invalid emitter\");\n</code></pre> <p>This check can be applied after the VAA is parsed, ensuring only authorized senders can interact with the receiving contract. Trusted emitters can be registered using a method like <code>setRegisteredSender</code> during contract deployment or initialization.</p> <pre><code>const tx = await receiverContract.setRegisteredSender(\n  sourceChain.chainId,\n  ethers.zeroPadValue(senderAddress as BytesLike, 32)\n);\n\nawait tx.wait();\n</code></pre>"},{"location":"products/messaging/guides/core-contracts/#additional-checks","title":"Additional Checks","text":"<p>In addition to environment-specific checks that should be performed, a contract should take care to check other fields in the body, including:</p> <ul> <li>Sequence: Is this the expected sequence number? How should out-of-order deliveries be handled?</li> <li>Consistency level: For the chain this message came from, is the Wormhole Finality level enough to guarantee the transaction won't be reverted after taking some action?</li> </ul> <p>The VAA digest is separate from the VAA body but is also relevant. It can be used for replay protection by checking if the digest has already been seen. Since the payload itself is application-specific, there may be other elements to check to ensure safety.</p>"},{"location":"products/messaging/guides/core-contracts/#source-code-references","title":"Source Code References","text":"<p>For a deeper understanding of the Core Contract implementation for a specific blockchain environment and to review the actual source code, please refer to the following links:</p> <ul> <li>Algorand Core Contract source code</li> <li>Aptos Core Contract source code</li> <li>EVM Core Contract source code (<code>IWormhole.sol</code> interface)</li> <li>NEAR Core Contract source code</li> <li>Solana Core Contract source code</li> <li>Sui Core Contract source code</li> <li>Terra Core Contract source code</li> </ul>"},{"location":"products/messaging/guides/wormhole-relayers/","title":"Wormhole Relayer","text":"<p>The Wormhole-deployed relayers provide a mechanism for contracts on one blockchain to send messages to contracts on another without requiring off-chain infrastructure. Through the Wormhole relayer module, developers can use an untrusted delivery provider to transport VAAs, saving the need to build and maintain custom relaying solutions. The option to run a custom relayer is available for more complex needs.</p> <p>This section covers the components and interfaces involved in using the Wormhole relayer module, such as message sending and receiving, delivery guarantees, and considerations for building reliable and efficient cross-chain applications. Additionally, you'll find details on how to handle specific implementation scenarios and track message delivery progress using the Wormhole CLI tool.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#get-started-with-the-wormhole-relayer","title":"Get Started with the Wormhole Relayer","text":"<p>Before getting started, it's important to note that the Wormhole-deployed relayer configuration is currently limited to EVM environments. The complete list of EVM environment blockchains is on the Supported Networks page.</p> <p>To interact with the Wormhole relayer, you'll need to create contracts on the source and target chains to handle the sending and receiving of messages. No off-chain logic needs to be implemented to take advantage of Wormhole-powered relaying.</p> The components outlined in blue must be implemented."},{"location":"products/messaging/guides/wormhole-relayers/#wormhole-relayer-interfaces","title":"Wormhole Relayer Interfaces","text":"<p>There are three relevant interfaces to discuss when utilizing the Wormhole relayer module:</p> <ul> <li><code>IWormholeRelayer</code>: The primary interface by which you send and receive messages. It allows you to request the sending of messages and VAAs.</li> <li><code>IWormholeReceiver</code>: This is the interface you are responsible for implementing. It allows the selected delivery provider to deliver messages/VAAs to your contract.</li> <li><code>IDeliveryProvider</code>: This interface represents the delivery pricing information for a given relayer network. Each delivery provider implements this on every blockchain they support delivering from.</li> </ul>"},{"location":"products/messaging/guides/wormhole-relayers/#interact-with-the-wormhole-relayer","title":"Interact with the Wormhole Relayer","text":"<p>To start interacting with the Wormhole relayer in your contracts, you'll need to import the <code>IWormholeRelayer</code> interface and set up a reference using the contract address to the Wormhole-deployed relayer on the supported network of your choice.</p> <p>To easily integrate with the Wormhole relayer interface, you can use the Wormhole Solidity SDK.</p> <p>To retrieve the contract address of the Wormhole relayer, refer to the Wormhole relayer section on the Contract Addresses reference page.</p> <p>Your initial set up should resemble the following:</p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport \"wormhole-solidity-sdk/interfaces/IWormholeRelayer.sol\";\n\ncontract Example {\n    IWormholeRelayer public wormholeRelayer;\n\n    constructor(address _wormholeRelayer) {\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\n    }\n}\n</code></pre> <p>The code provided sets up the basic structure for your contract to interact with the Wormhole relayer using the address supplied to the constructor. By leveraging methods from the <code>IWormholeRelayer</code> interface, you can implement message sending and receiving functionalities. The following sections will detail the specific methods you need to use for these tasks.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#send-a-message","title":"Send a Message","text":"<p>To send a message to a contract on another EVM chain, you can call the <code>sendPayloadToEvm</code> method provided by the <code>IWormholeRelayer</code> interface.</p> <pre><code>function sendPayloadToEvm(\n    // Chain ID in Wormhole format\n    uint16 targetChain,     \n    // Contract Address on target chain we're sending a message to\n    address targetAddress,  \n    // The payload, encoded as bytes\n    bytes memory payload,   \n    // How much value to attach to the delivery transaction \n    uint256 receiverValue,  \n    // The gas limit to set on the delivery transaction\n    uint256 gasLimit        \n) external payable returns (\n    // Unique, incrementing ID, used to identify a message\n    uint64 sequence\n);\n</code></pre> <p>Tip</p> <p>To reduce transaction confirmation time, you can lower the consistency level using the <code>sendToEvm</code> method.</p> <p>The <code>sendPayloadToEvm</code> method is marked <code>payable</code> to receive fee payment for the transaction. The value to attach to the invocation is determined by calling the <code>quoteEVMDeliveryPrice</code>, which provides an estimate of the cost of gas on the target chain.</p> <pre><code>function quoteEVMDeliveryPrice(\n    // Chain ID in Wormhole format\n    uint16 targetChain,\n    // How much value to attach to delivery transaction \n    uint256 receiverValue,\n    // The gas limit to attach to the delivery transaction\n    uint256 gasLimit\n) external view returns (\n    // How much value to attach to the send call\n    uint256 nativePriceQuote, \n    uint256 targetChainRefundPerGasUnused\n);\n</code></pre> <p>This method should be called before sending a message, and the value returned for <code>nativePriceQuote</code> should be attached to the call to send the payload to cover the transaction's cost on the target chain.</p> <p>In total, sending a message across EVM chains can be as simple as getting a fee quote and sending the message as follows:</p> <pre><code>// Get a quote for the cost of gas for delivery\n(cost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n    targetChain,\n    valueToSend,\n    GAS_LIMIT\n);\n\n// Send the message\nwormholeRelayer.sendPayloadToEvm{value: cost}(\n    targetChain,\n    targetAddress,\n    abi.encode(payload),\n    valueToSend, \n    GAS_LIMIT\n);\n</code></pre>"},{"location":"products/messaging/guides/wormhole-relayers/#receive-a-message","title":"Receive a Message","text":"<p>To receive a message using a Wormhole relayer, the target contract must implement the <code>IWormholeReceiver</code> interface, as shown in the previous section.</p> <pre><code>function receiveWormholeMessages(\n    bytes memory payload,           // Message passed by source contract \n    bytes[] memory additionalVaas,  // Any additional VAAs that are needed (Note: these are unverified) \n    bytes32 sourceAddress,          // The address of the source contract\n    uint16 sourceChain,             // The Wormhole chain ID\n    bytes32 deliveryHash            // A hash of contents, useful for core Wormhole replay protection\n) external payable;\n</code></pre> <p>The logic inside the function body may be whatever business logic is required to take action on the specific payload.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#delivery-guarantees","title":"Delivery Guarantees","text":"<p>The Wormhole relayer protocol is intended to create a service interface whereby mutually distrustful integrators and delivery providers can work together to provide a seamless dApp experience. You don't trust the delivery providers with your data, and the delivery providers don't trust your smart contract. The primary agreement between integrators and delivery providers is that when a delivery is requested, the provider will attempt to deliver the VAA within the provider's stated delivery timeframe.</p> <p>This creates a marketplace whereby providers can set different price levels and service guarantees. Delivery providers effectively accept the slippage risk premium of delivering your VAAs in exchange for a set fee rate. Thus, the providers agree to deliver your messages even if they do so at a loss.</p> <p>Delivery providers should set their prices such that they turn a profit on average but not necessarily on every single transfer. Thus, some providers may choose to set higher rates for tighter guarantees or lower rates for less stringent guarantees.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#delivery-statuses","title":"Delivery Statuses","text":"<p>All deliveries result in one of the following four outcomes before the delivery provider's delivery timeframe. When they occur, these outcomes are emitted as EVM events from the Wormhole relayer contract. The four possible outcomes are:</p> <ul> <li>(0) Delivery Success</li> <li>(1) Receiver Failure</li> <li>(2) Forward Request Success</li> <li>(3) Forward Request Failure</li> </ul> <p>A receiver failure is a scenario in which the selected provider attempted the delivery but it could not be completely successfully. The three possible causes for a delivery failure are:</p> <ul> <li>The target contract does not implement the <code>IWormholeReceiver</code> interface.</li> <li>The target contract threw an exception or reverted during the execution of <code>receiveWormholeMessages</code>.</li> <li>The target contract exceeded the specified <code>gasLimit</code> while executing <code>receiveWormholeMessages</code>.</li> </ul> <p>All three of these scenarios can be avoided with correct design by the integrator, and thus, it is up to the integrator to resolve them. Any other scenario that causes a delivery to not be performed should be considered an outage by some component of the system, including potentially the blockchains themselves.</p> <p><code>Forward Request Success</code> and <code>Forward Failure</code> represent when the delivery succeeded and the user requested a forward during the delivery. If the user has enough funds left over as a refund to complete the forward, the forward will be executed, and the status will be <code>Forward Request Success</code>. Otherwise, it will be <code>Forward Request Failure</code>.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#other-considerations","title":"Other Considerations","text":"<p>Some implementation details should be considered during development to ensure safety and a pleasant UX. Ensure that your engineering efforts have appropriately considered each of the following areas:</p> <ul> <li>Receiving a message from a relayer.</li> <li>Checking for expected emitter.</li> <li>Calling <code>parseAndVerify</code> on any additional VAAs.</li> <li>Message ordering (no guarantees on order of messages delivered).</li> <li>Forwarding and call chaining.</li> <li>Refunding overpayment of <code>gasLimit</code>.</li> <li>Refunding overpayment of value sent.</li> </ul>"},{"location":"products/messaging/guides/wormhole-relayers/#track-the-progress-of-messages-with-the-wormhole-cli","title":"Track the Progress of Messages with the Wormhole CLI","text":"<p>While no off-chain programs are required, a developer may want to track the progress of messages in flight. To track the progress of messages in flight, use the Wormhole CLI tool's <code>status</code> subcommand. As an example, you can use the following commands to track the status of a transfer by providing the environment, origin network, and transaction hash to the <code>worm status</code> command:</p> MainnetTestnet <pre><code>worm status mainnet ethereum INSERT_TRANSACTION_HASH\n</code></pre> <pre><code>worm status testnet ethereum INSERT_TRANSACTION_HASH\n</code></pre> <p>See the Wormhole CLI tool docs for installation and usage.</p>"},{"location":"products/messaging/guides/wormhole-relayers/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":"<p>For detailed, step-by-step guidance on creating cross-chain contracts that interact with the Wormhole relayer, refer to the Create Cross-Chain Contracts tutorial.</p>"},{"location":"products/messaging/guides/wormholescan-api/","title":"Query NTT Data and Transfers with Wormholescan","text":"<p> Source code on GitHub</p> <p>The Wormholescan API provides a public interface for exploring cross-chain activity powered by Wormhole. You can use it to fetch token transfer operations, Native Token Transfer (NTT) metadata, VAA details, and more.</p> <p>In this guide, you will learn how to build a simple TypeScript project that:</p> <ul> <li>Lists NTT tokens available on Wormhole.</li> <li>Fetches metadata for a selected token across chains.</li> <li>Retrieves recent transfer operations using an emitter address.</li> </ul> <p>This guide is helpful if you are building a dashboard, writing monitoring tools, or want to explore how data flows across Wormhole-connected chains.</p>"},{"location":"products/messaging/guides/wormholescan-api/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> </ul>"},{"location":"products/messaging/guides/wormholescan-api/#project-setup","title":"Project Setup","text":"<p>In this section, you will create the directory, initialize a Node.js project, install dependencies, and configure TypeScript.</p> <ol> <li> <p>Create the project: set up the directory and navigate into it.</p> <pre><code>mkdir wormholescan-api-demo\ncd wormholescan-api-demo\n</code></pre> </li> <li> <p>Initialize a Node.js project: generate a <code>package.json</code> file.</p> <pre><code>npm init -y\n</code></pre> </li> <li> <p>Set up TypeScript: create a <code>tsconfig.json</code> file.</p> <pre><code>touch tsconfig.json\n</code></pre> <p>Then, add the following configuration:</p> tsconfig.json<pre><code>{\n    \"compilerOptions\": {\n        \"target\": \"ES2022\",\n        \"module\": \"ESNext\",\n        \"moduleResolution\": \"node\",\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"skipLibCheck\": true,\n        \"outDir\": \"./dist\",\n        \"declaration\": true,\n        \"declarationMap\": true,\n        \"sourceMap\": true\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\"node_modules\", \"dist\"]\n}\n</code></pre> </li> <li> <p>Install dependencies: add the required packages.</p> <pre><code>npm install @wormhole-foundation/sdk axios\nnpm install -D tsx typescript @types/node\n</code></pre> <ul> <li><code>@wormhole-foundation/sdk</code>: utility methods (e.g., chain ID helpers).</li> <li><code>axios</code>: HTTP client for calling the Wormholescan API.</li> <li><code>tsx</code>: runs TypeScript files without compiling them.</li> <li><code>typescript</code>: adds TypeScript support.</li> <li><code>@types/node</code>: provides Node.js type definitions.</li> </ul> </li> <li> <p>Create the project structure: set up the required directories and files.</p> <pre><code>mkdir -p src/helpers src/scripts\n\ntouch \\\n    src/helpers/api-client.ts \\\n    src/helpers/utils.ts \\\n    src/helpers/types.ts \\\n    src/scripts/fetch-ntt-tokens.ts \\\n    src/scripts/fetch-operations.ts\n</code></pre> <ul> <li><code>src/helpers/</code>: contains shared API logic, utilities, and type definitions.</li> <li><code>src/scripts/</code>: contains runnable scripts for fetching token and transfer data.</li> </ul> </li> </ol>"},{"location":"products/messaging/guides/wormholescan-api/#create-helper-functions","title":"Create Helper Functions","text":"<p>Before writing scripts that interact with Wormholescan, we will define a few reusable helper modules. These will handle API calls, extract token and chain data, and provide consistent TypeScript types for working with NTT tokens and transfers.</p> <p>These helpers will make it easier to write clean, focused scripts later on.</p>"},{"location":"products/messaging/guides/wormholescan-api/#create-a-wormholescan-api-client","title":"Create a Wormholescan API Client","text":"<p>In this step, you will create a lightweight API client to interact with Wormholescan. This helper will enable you to easily fetch NTT tokens and perform token transfer operations using a reusable <code>get()</code> method with built-in error handling. The client supports both mainnet and testnet endpoints.</p> <p>It exposes two core methods:</p> <ul> <li><code>getNTTTokens()</code>: fetches the complete list of NTT-enabled tokens.</li> <li><code>getTokenTransfers()</code>: fetches token transfer operations with optional filters (chain, address, pagination, etc.).</li> </ul> <p>Under the hood, both methods use a generic <code>get(endpoint, params)</code> wrapper that handles URL construction and error reporting.</p> <p>Add the following code to <code>src/helpers/api-client.ts</code>:</p> src/helpers/api-client.ts<pre><code>import axios, { AxiosResponse } from 'axios';\n\n// WormholeScan API Client -  simple wrapper for making requests to the WormholeScan API\nexport class WormholeScanAPI {\n  private baseURL: string;\n\n  constructor(isTestnet: boolean = false) {\n    this.baseURL = isTestnet\n      ? 'https://api.testnet.wormholescan.io/api/v1'\n      : 'https://api.wormholescan.io/api/v1';\n  }\n\n  async get&lt;T&gt;(endpoint: string, params?: Record&lt;string, any&gt;): Promise&lt;T&gt; {\n    try {\n      const response: AxiosResponse&lt;T&gt; = await axios.get(\n        `${this.baseURL}${endpoint}`,\n        {\n          params,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(\n          `API request failed: ${error.response?.status} - ${error.response?.statusText}`\n        );\n      }\n      throw new Error(`Unexpected error: ${error}`);\n    }\n  }\n\n  async getNTTTokens(withLinks: boolean = false) {\n    return this.get('/native-token-transfer/token-list', { withLinks });\n  }\n\n  async getTokenTransfers(\n    params: {\n      tokenAddress?: string;\n      fromChain?: number;\n      toChain?: number;\n      page?: number;\n      pageSize?: number;\n      sortBy?: string;\n      sortOrder?: 'asc' | 'desc';\n    } = {}\n  ) {\n    return this.get('/native-token-transfer', params);\n  }\n}\n\nexport const wormholeScanAPI = new WormholeScanAPI();\nexport const wormholeScanTestnetAPI = new WormholeScanAPI(true);\n</code></pre>"},{"location":"products/messaging/guides/wormholescan-api/#add-utility-functions","title":"Add Utility Functions","text":"<p>Next, you will define two utility functions that help interpret NTT tokens and operations from Wormholescan:</p> <ul> <li><code>getRandomPlatform(token)</code>: selects a random platform for a given NTT token and returns its address and chain ID.</li> <li><code>getOperationStatus(operation)</code>: interprets the status of a token transfer operation (e.g., In Progress, Emitted, Completed).</li> </ul> <p>These utilities will be used in later scripts to randomly select a chain/token combo and display the transfer status more clearly.</p> <p>Add the following code to <code>src/helpers/utils.ts</code>:</p> src/helpers/utils.ts<pre><code>import { toChainId } from '@wormhole-foundation/sdk';\nimport { NTTToken, Operation } from './types';\n\nexport function getRandomPlatform(\n  token: NTTToken\n): { platform: string; address: string; chainId: number } | null {\n  const platforms = Object.entries(token.platforms);\n\n  if (platforms.length === 0) {\n    return null;\n  }\n\n  const randomIndex = Math.floor(Math.random() * platforms.length);\n  const [platform, address] = platforms[randomIndex];\n\n  try {\n    // SDK expects \"Ethereum\" not \"ethereum\"\n    const capitalizedPlatform =\n      platform.charAt(0).toUpperCase() + platform.slice(1);\n    const chainId = toChainId(capitalizedPlatform);\n    return { platform, address, chainId };\n  } catch (error) {\n    const platformMapping: Record&lt;string, string&gt; = {\n      'arbitrum-one': 'Arbitrum',\n      'binance-smart-chain': 'Bsc',\n      'polygon-pos': 'Polygon',\n      'optimistic-ethereum': 'Optimism',\n    };\n\n    const mappedPlatform = platformMapping[platform.toLowerCase()];\n    if (mappedPlatform) {\n      try {\n        const chainId = toChainId(mappedPlatform);\n        return { platform, address, chainId };\n      } catch (mappedError) {\n        console.warn(\n          `Could not convert mapped platform ${mappedPlatform} to chain ID`\n        );\n        return null;\n      }\n    }\n\n    console.warn(`Could not convert platform ${platform} to chain ID`);\n    return null;\n  }\n}\n\nexport function getOperationStatus(operation: Operation): string {\n  if (operation.targetChain) {\n    return 'Completed';\n  } else if (operation.vaa) {\n    return 'Emitted';\n  } else if (operation.sourceChain) {\n    return 'In Progress';\n  } else {\n    return 'Unknown';\n  }\n}\n</code></pre>"},{"location":"products/messaging/guides/wormholescan-api/#define-types-for-ntt-tokens-and-transfers","title":"Define Types for NTT Tokens and Transfers","text":"<p>Before proceeding, let's define the TypeScript interfaces required for type-safe API responses from Wormholescan. These types will be used throughout the project to validate and work with token metadata and transfer operations.</p> <p>Add the following content inside <code>src/helpers/types.ts</code>:</p> src/helpers/types.ts<pre><code>export interface NTTToken {\n  symbol: string;\n  coingecko_id: string;\n  fully_diluted_valuation: string;\n  price: string;\n  price_change_percentage_24h: string;\n  volume_24h: string;\n  total_value_transferred: string;\n  total_value_locked: string | null;\n  market_cap: string;\n  circulating_supply: string;\n  image: {\n    thumb: string;\n    small: string;\n    large: string;\n  };\n  platforms: Record&lt;string, string&gt;;\n}\n\nexport interface NTTTokenDetail {\n  home: {\n    blockchain: string;\n    externalSalt: string | null;\n    isCanonical: boolean;\n    lastIndexed: number;\n    manager: {\n      address: string;\n      limits: Array&lt;{\n        amount: string;\n        baseAmount: string;\n        blockchain: string;\n        type: string;\n        wormholeChainId: number;\n      }&gt;;\n      owner: {\n        address: string | null;\n        nttOwner: string | null;\n      };\n      transceivers: Array&lt;{\n        address: string;\n        index: number;\n        type: string;\n      }&gt;;\n      version: string;\n    };\n    mode: string;\n    token: {\n      address: string;\n      decimals: number;\n      maxSupply: string;\n      minter: string;\n      name: string;\n      owner: string;\n      symbol: string;\n      totalSupply: string;\n    };\n    wormholeChainId: number;\n  };\n  peers: any[];\n}\n\nexport interface Operation {\n  id: string;\n  emitterChain: number;\n  emitterAddress: {\n    hex: string;\n    native: string;\n  };\n  sequence: string;\n  vaa?: {\n    raw: string;\n    guardianSetIndex: number;\n    isDuplicated: boolean;\n  };\n  content: {\n    payload: {\n      nttManagerMessage: {\n        id: string;\n        sender: string;\n      };\n      nttMessage: {\n        additionalPayload: string;\n        sourceToken: string;\n        to: string;\n        toChain: number;\n        trimmedAmount: {\n          amount: string;\n          decimals: number;\n        };\n      };\n      transceiverMessage: {\n        prefix: string;\n        recipientNttManager: string;\n        sourceNttManager: string;\n        transceiverPayload: string;\n      };\n    };\n    standarizedProperties: {\n      appIds: string[];\n      fromChain: number;\n      fromAddress: string;\n      toChain: number;\n      toAddress: string;\n      tokenChain: number;\n      tokenAddress: string;\n      amount: string;\n      feeAddress: string;\n      feeChain: number;\n      fee: string;\n      normalizedDecimals: number;\n    };\n  };\n  sourceChain?: {\n    chainId: number;\n    timestamp: string;\n    transaction: {\n      txHash: string;\n    };\n    from: string;\n    status: string;\n    fee: string;\n    gasTokenNotional: string;\n    feeUSD: string;\n  };\n  targetChain?: {\n    chainId: number;\n    timestamp: string;\n    transaction: {\n      txHash: string;\n    };\n    status: string;\n    from: string;\n    to: string;\n    fee: string;\n    gasTokenNotional: string;\n    feeUSD: string;\n  };\n}\n\nexport interface OperationsResponse {\n  operations: Operation[];\n}\n</code></pre>"},{"location":"products/messaging/guides/wormholescan-api/#fetch-and-inspect-ntt-tokens","title":"Fetch and Inspect NTT Tokens","text":"<p>In this step, you will create a script that fetches a list of NTT tokens from Wormholescan and inspects their detailed metadata.</p> <p>The script does the following:</p> <ul> <li>Retrieves all available NTT tokens via the API client.</li> <li>Picks the first 5 with platform data.</li> <li>Selects a random platform for each token (e.g., Ethereum, Arbitrum).</li> <li>Fetches and logs metadata for that token on that platform.</li> </ul> <p>You can control how many tokens are processed by modifying the <code>TOKENS_TO_PROCESS</code> constant near the top of the script.</p> <p>Add the following code to <code>src/scripts/fetch-ntt-tokens.ts</code>:</p> src/scripts/fetch-ntt-tokens.ts<pre><code>#!/usr/bin/env tsx\n\nimport { wormholeScanAPI } from '../helpers/api-client';\nimport { NTTToken, NTTTokenDetail } from '../helpers/types';\nimport { getRandomPlatform } from '../helpers/utils';\n\n// Configurable variable - easily adjust the number of tokens to process\nconst TOKENS_TO_PROCESS = INSERT_NUMBER_OF_TOKENS;\n\nasync function fetchNTTTokens() {\n  console.log('\ud83d\udd0d Fetching NTT tokens from WormholeScan API...\\n');\n\n  try {\n    const tokens = (await wormholeScanAPI.getNTTTokens(false)) as NTTToken[];\n\n    // Get detailed information for tokens\n    const tokensWithPlatforms = tokens.filter(\n      (token) =&gt; Object.keys(token.platforms).length &gt; 0\n    );\n    const tokensToProcess = tokensWithPlatforms.slice(0, TOKENS_TO_PROCESS);\n\n    console.log(\n      `\ud83d\udd0d Fetching detailed NTT information for first ${TOKENS_TO_PROCESS} tokens...\\n`\n    );\n\n    for (const token of tokensToProcess) {\n      console.log(`\ud83d\udccb ${token.symbol} (${token.coingecko_id})`);\n\n      // Get a random platform from the token's available platforms\n      const platformInfo = getRandomPlatform(token);\n\n      if (!platformInfo) {\n        console.error(\n          `\u274c Could not determine platform info for ${token.symbol}`\n        );\n        continue;\n      }\n\n      const { platform, address, chainId } = platformInfo;\n\n      console.log(`Selected Platform: ${platform} (Chain ID: ${chainId})`);\n\n      try {\n        // Fetch detailed NTT information using the correct chain ID\n        const detail = (await wormholeScanAPI.get(\n          `/ntt/token/${chainId}/${address}`\n        )) as NTTTokenDetail;\n\n        console.log(`Token Name: ${detail.home.token.name}`);\n        console.log(`Token Symbol: ${detail.home.token.symbol}`);\n        console.log(`Mode: ${detail.home.mode}`);\n        console.log(`Manager Address: ${detail.home.manager.address}`);\n        console.log(`Version: ${detail.home.manager.version}`);\n        console.log(\n          `Transceiver Address: ${\n            detail.home.manager.transceivers[0]?.address || 'N/A'\n          }`\n        );\n      } catch (error) {\n        console.log(\n          `\u274c No NTT configuration found for ${token.symbol} on ${platform}`\n        );\n      }\n\n      console.log('\\n' + '='.repeat(50) + '\\n');\n    }\n  } catch (error) {\n    console.error('\u274c Error fetching NTT tokens:', error);\n    process.exit(1);\n  }\n}\n\nfetchNTTTokens();\n</code></pre> <p>Run it with:</p> <pre><code>npx tsx src/scripts/fetch-ntt-tokens.ts\n</code></pre> <p>If successful, the output will be:</p> npm run ntt-tokens &gt; demo-wormholescan-api@1.0.0 ntt-tokens &gt; npx tsx src/scripts/fetch-ntt-tokens.ts \ud83d\udd0d Fetching NTT tokens from WormholeScan API... \ud83d\udd0d Fetching detailed NTT information for first 5 tokens...  \ud83d\udccb LINGO (lingo)  Selected Platform: solana (Chain ID: 1)  Token Name: Lingo  Token Symbol: Lingo  Mode: burning  Manager Address: nTTQspEC1JoEUJVFTcgZSatgcv4PNT8UYtCtyaUSKcX  Version: 3.0.0  Transceiver Address: CnDQ53A3j2EcniJAm7UtuYKmQtovFAmumcuzC648moSE  ==================================================  ..."},{"location":"products/messaging/guides/wormholescan-api/#fetch-transfer-operations","title":"Fetch Transfer Operations","text":"<p>Now, you will create a script to fetch NTT transfer operations using the Wormholescan API. These operations contain key details such as:</p> <ul> <li>Source and target chains.</li> <li>Wallet addresses.</li> <li>Token amount and metadata.</li> <li>VAA and execution status.</li> </ul> <p>You will log the first few operations in a readable format to better understand how transfers are structured.</p> <p>The script will use a specific emitter address to query transfers. You can easily change which token or manager you are tracking by modifying the <code>EMITTER_ADDRESS</code> constant near the top of the file.</p> <p>Add the following code to <code>src/scripts/fetch-operations.ts</code>:</p> src/scripts/fetch-operations.ts<pre><code>#!/usr/bin/env tsx\n\nimport { wormholeScanTestnetAPI } from '../helpers/api-client';\nimport { OperationsResponse } from '../helpers/types';\nimport { getOperationStatus } from '../helpers/utils';\n\nconst EMITTER_ADDRESS = 'INSERT_EMITTER_ADDRESS';\nconst PAGE_SIZE = 'INSERT_NUMBER_OF_TRANSFERS_TO_FETCH'; // e.g., 10, 20, etc.\n\nasync function fetchTokenTransfers() {\n  console.log(\n    '\ud83d\udd0d Fetching token transfer operations from WormholeScan API...\\n'\n  );\n\n  try {\n    const response = (await wormholeScanTestnetAPI.get(\n      `/operations?address=${EMITTER_ADDRESS}&amp;pageSize=${PAGE_SIZE}`\n    )) as OperationsResponse;\n\n    console.log(\n      `\u2705 Found ${response.operations.length} operations for emitter ${EMITTER_ADDRESS}\\n`\n    );\n\n    for (const operation of response.operations) {\n      const overallStatus = getOperationStatus(operation);\n      const { standarizedProperties } = operation.content;\n\n      console.log(`\ud83d\udccb Status: ${overallStatus}`);\n      console.log(\n        `\ud83d\udd17 Transfer: Chain ${standarizedProperties.fromChain} \u2192 Chain ${standarizedProperties.toChain}`\n      );\n      console.log(`\ud83d\udccd From: ${standarizedProperties.fromAddress}`);\n      console.log(`\ud83d\udccd To: ${standarizedProperties.toAddress}`);\n\n      if (operation.sourceChain) {\n        console.log(\n          `\ud83d\udfe2 Source: ${operation.sourceChain.transaction.txHash} (${operation.sourceChain.status})`\n        );\n      }\n\n      if (operation.targetChain) {\n        console.log(\n          `\ud83d\udfe2 Target: ${operation.targetChain.transaction.txHash} (${operation.targetChain.status})`\n        );\n      }\n\n      if (operation.vaa &amp;&amp; !operation.targetChain) {\n        console.log(`\u23f3 VAA emitted, awaiting completion`);\n      }\n\n      console.log(''); // Empty line between operations\n    }\n  } catch (error) {\n    console.error('\u274c Error fetching token transfers:', error);\n    process.exit(1);\n  }\n}\n\nfetchTokenTransfers();\n</code></pre> <p>Run it with:</p> <pre><code>npx tsx src/scripts/fetch-operations.ts\n</code></pre> <p>If successful, the output will look like this:</p> npm run operations &gt; demo-wormholescan-api@1.0.0 operations &gt; npx tsx src/scripts/fetch-operations.ts \ud83d\udd0d Fetching token transfer operations from WormholeScan API... \u2705 Found 5 operations for emitter 0xdF77F921a560F6882e4EC4bbDc2fF37a7A26D4Db \ud83d\udccb Status: Completed \ud83d\udd17 Transfer: Chain 1 \u2192 Chain 10002 \ud83d\udccd From: wA8eCo4AR7pAgFsAPpU64wYouBY6CUVPLGuMMBu2eaB \ud83d\udccd To: 0xdF77F921a560F6882e4EC4bbDc2fF37a7A26D4Db \ud83d\udfe2 Source: 5axKXqHHq8C4vWqKnrZ3vnmDRTu4D9XPMaJBDrMrxuEawhRS7xnwcAJ5UZ1k9eYgakzz4LXopJdJjyCEZDbH9CEH (confirmed) \ud83d\udfe2 Target: 0x619da24b77289c20fbbd2564833b49522f2624db5e92194ddea65f18ebb116fc (completed) ..."},{"location":"products/messaging/guides/wormholescan-api/#resources","title":"Resources","text":"<p>You can explore the complete project and find all necessary scripts and configurations in Wormhole's demo GitHub repository.</p> <p>The repository includes everything covered in this guide, which is helpful for dashboards, bots, or alerting systems built on top of Wormholescan.</p>"},{"location":"products/messaging/guides/solana-shims/sol-emission/","title":"Solana Message Emission via Shim","text":"<p>The emission shim is a lightweight Solana program that lets integrators emit Wormhole messages without creating a new rent-exempt account for every message. It passes an empty payload to the core bridge and emits the message data through transaction logs, reducing rent costs and avoiding state bloat while remaining fully compatible with Guardian observation.</p> <p>Migrating from the legacy path is straightforward: no account resizing is needed, and programs can call the shim directly. The Wormhole fee is still paid through the <code>fee_collector</code>, with the same parallelization limits as before. </p> <p>Guardians are configured to observe the canonical shim address, reading message data, emitter, and nonce from the transaction logs and CPI events, rather than on-chain accounts. They also ignore the empty core bridge payload to prevent duplicate VAAs. On mainnet, all 19 Guardians support shim emissions, and, as with all Wormhole messages, at least 13 attestations are required for a valid VAA.</p> <p>Note</p> <p>For on-chain programs that only call the shim via CPI, consider emitting a dummy/empty message after migration to avoid edge cases with initial CPI depth (Solana limits the depth of cross-program calls).</p> <p>For more background, see Emission Shim concept section. </p>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#prerequisites","title":"Prerequisites","text":"<p>To interact with the emission shim, you'll need the following:</p> <ul> <li>Rust and Solana CLI installed.  </li> <li>Anchor installed.</li> <li>The canonical emission shim program already deployed at <code>EtZMZM22ViKMo4r5y4Anovs3wKQ2owUmDpjygnMMcdEX</code>.</li> <li>The shim\u2019s IDL for wiring accounts.</li> <li>A payer (signer) funded with enough SOL to cover compute and message fees.</li> </ul>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#setup","title":"Setup","text":"<p>To start, import the shim crate to call <code>wormhole_post_message_shim::cpi::post_message</code>. Then, pull the core bridge addresses needed to be passed along.</p> <pre><code>declare_program!(wormhole_post_message_shim);\n\nuse anchor_lang::prelude::*;\n\nuse wormhole_post_message_shim::{program::WormholePostMessageShim, types::Finality};\nuse wormhole_solana_consts::{\n    CORE_BRIDGE_CONFIG, CORE_BRIDGE_FEE_COLLECTOR, CORE_BRIDGE_PROGRAM_ID,\n};\n</code></pre>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#accounts","title":"Accounts","text":"<p>When calling the shim\u2019s <code>post_message</code> instruction, you need to pass:</p> <ul> <li><code>bridge</code>: Holds the Wormhole core bridge config.</li> <li><code>message</code>: Represents the PDA derived from the emitter and is reused by the shim instead of generating new accounts.</li> <li><code>emitter</code>: Serves as the emitter address (signer).</li> <li><code>sequence</code>: Tracks the emitter's sequence account.</li> <li><code>payer</code>: Pays compute and any rent needed on first use (signer).</li> <li><code>fee_collector</code>: Collects the Wormhole message fee.</li> <li><code>clock</code>: Provides the current Solana time from the sysvar.</li> <li><code>system_program</code>: Supplies the standard Solana system program for account creation on first use.</li> <li><code>wormhole_program</code>: Points to the Wormhole core bridge program.</li> <li><code>event_authority</code>: Acts as the PDA used by the shim to emit log events (Anchor CPI events).</li> <li><code>program</code>: Specifies the shim program itself.</li> </ul> <p>The struct below defines the accounts required by your instruction and wires the shim to the core bridge, ensuring the emitter PDA can sign the CPI via seeds.</p> <pre><code>#[derive(Accounts)]\npub struct PostMessage&lt;'info&gt; {\n    #[account(mut)]\n    payer: Signer&lt;'info&gt;,\n\n    wormhole_post_message_shim: Program&lt;'info, WormholePostMessageShim&gt;,\n\n    #[account(mut, address = CORE_BRIDGE_CONFIG)]\n    /// CHECK: Wormhole bridge config. [`wormhole::post_message`] requires this account be mutable.\n    /// Address constraint added for IDL generation / convenience, it will be enforced by the core bridge.\n    pub bridge: UncheckedAccount&lt;'info&gt;,\n\n    #[account(mut, seeds = [&amp;emitter.key.to_bytes()], bump, seeds::program = wormhole_post_message_shim::ID)]\n    /// CHECK: Wormhole Message. [`wormhole::post_message`] requires this account be signer and mutable.\n    /// Seeds constraint added for IDL generation / convenience, it will be enforced by the shim.\n    pub message: UncheckedAccount&lt;'info&gt;,\n\n    #[account(seeds = [b\"emitter\"], bump)]\n    /// CHECK: Our emitter\n    /// Seeds constraint added for IDL generation / convenience, it will be enforced to match the signer used in the CPI call.\n    pub emitter: UncheckedAccount&lt;'info&gt;,\n\n    #[account(mut)]\n    /// CHECK: Emitter's sequence account. [`wormhole::post_message`] requires this account be mutable.\n    /// Explicitly do not re-derive this account. The core bridge verifies the derivation anyway and\n    /// as of Anchor 0.30.1, auto-derivation for other programs' accounts via IDL doesn't work.\n    pub sequence: UncheckedAccount&lt;'info&gt;,\n\n    #[account(mut, address = CORE_BRIDGE_FEE_COLLECTOR)]\n    /// CHECK: Wormhole fee collector. [`wormhole::post_message`] requires this account be mutable.\n    /// Address constraint added for IDL generation / convenience, it will be enforced by the core bridge.\n    pub fee_collector: UncheckedAccount&lt;'info&gt;,\n\n    /// Clock sysvar.\n    /// Type added for IDL generation / convenience, it will be enforced by the core bridge.\n    pub clock: Sysvar&lt;'info, Clock&gt;,\n\n    /// System program.\n    /// Type for IDL generation / convenience, it will be enforced by the core bridge.\n    pub system_program: Program&lt;'info, System&gt;,\n\n    #[account(address = CORE_BRIDGE_PROGRAM_ID)]\n    /// CHECK: Wormhole program.\n    /// Address constraint added for IDL generation / convenience, it will be enforced by the shim.\n    pub wormhole_program: UncheckedAccount&lt;'info&gt;,\n\n    /// CHECK: Shim event authority\n    /// TODO: An address constraint could be included if this address was published to wormhole_solana_consts\n    /// Address will be enforced by the shim.\n    pub wormhole_post_message_shim_ea: UncheckedAccount&lt;'info&gt;,\n}\n</code></pre> <p>This instruction reuses a single per-emitter message PDA (no per-message rent). When invoked, the shim emits your payload as an Anchor CPI event and, in the same transaction, calls the core bridge with an empty payload, allowing the core bridge to still assign the sequence and enforce fees/finality. Guardians read the Core call (sequence/finality) and the shim event (payload) from the transaction logs, producing a standard VAA without leaving a persistent message account.</p>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#call-post_message","title":"Call post_message","text":"<p>The <code>post_message</code> function builds a <code>CpiContext</code> and invokes the shim\u2019s <code>post_message</code> instruction, forwarding the nonce, finality, and your payload. The Core Bridge enforces fee requirements and assigns the sequence, while the shim emits the payload as an event in the same transaction.</p> <pre><code>pub fn post_message(ctx: Context&lt;PostMessage&gt;) -&gt; Result&lt;()&gt; {\n    // wormhole::post_message may require that a fee be sent to the fee_collector account of the core bridge.\n    // The following code could be used to handle this via CPI call.\n    // However, this example handles this complexity on the client side using a `preInstruction`\n    //\n    // let fee = ctx.accounts.wormhole_bridge.fee();\n    // if fee &gt; 0 {\n    //     solana_program::program::invoke(\n    //         &amp;solana_program::system_instruction::transfer(\n    //             &amp;ctx.accounts.payer.key(),\n    //             &amp;ctx.accounts.fee_collector.key(),\n    //             fee,\n    //         ),\n    //         &amp;ctx.accounts.to_account_infos(),\n    //     )?;\n    // }\n\n    wormhole_post_message_shim::cpi::post_message(\n        CpiContext::new_with_signer(\n            ctx.accounts.wormhole_post_message_shim.to_account_info(),\n            wormhole_post_message_shim::cpi::accounts::PostMessage {\n                payer: ctx.accounts.payer.to_account_info(),\n                bridge: ctx.accounts.bridge.to_account_info(),\n                message: ctx.accounts.message.to_account_info(),\n                emitter: ctx.accounts.emitter.to_account_info(),\n                sequence: ctx.accounts.sequence.to_account_info(),\n                fee_collector: ctx.accounts.fee_collector.to_account_info(),\n                clock: ctx.accounts.clock.to_account_info(),\n                system_program: ctx.accounts.system_program.to_account_info(),\n                wormhole_program: ctx.accounts.wormhole_program.to_account_info(),\n                program: ctx.accounts.wormhole_post_message_shim.to_account_info(),\n                event_authority: ctx.accounts.wormhole_post_message_shim_ea.to_account_info(),\n            },\n            &amp;[&amp;[b\"emitter\", &amp;[ctx.bumps.emitter]]],\n        ),\n        0,\n        Finality::Finalized,\n        b\"your message goes here!\".to_vec(),\n    )?;\n\n    Ok(())\n}\n</code></pre>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#limitations-and-considerations","title":"Limitations and Considerations","text":"<ul> <li>Rent: No persistent account rent is paid for every emission; the cost is now dominated by compute and the emission fee.</li> <li>Logs: Since all observability is log-based, re-observation is only possible while Solana transaction history is available.</li> <li>Parallelization: Still limited by the <code>fee_collector</code> account being mutable.</li> <li>CPI Depth: The first shim call for an emitter adds one extra stack depth. This is only relevant if you are near the Solana CPI limit (4).</li> </ul>"},{"location":"products/messaging/guides/solana-shims/sol-emission/#conclusion","title":"Conclusion","text":"<p>By using the emission shim, you can dramatically reduce rent costs when emitting Wormhole messages from Solana, while ensuring compatibility with Guardian observation and core bridge sequencing.</p> <p>For a complete, working reference, see the full example implementation in the Wormhole repo: <code>post_message.rs</code>.</p>"},{"location":"products/messaging/guides/solana-shims/sol-verification/","title":"Solana VAA Verification via Shim","text":"<p>Verifying VAAs on Solana with the legacy core bridge requires creating multiple rent-exempt accounts for signatures and posted VAAs. These accounts persist even after verification is complete, which increases costs and bloats the on-chain state.</p> <p>The verification shim solves this by replacing the core bridge verification flow with its own instructions:</p> <ul> <li><code>post_signatures</code>: Accumulates Guardian signatures into a temporary account.</li> <li><code>verify_hash</code>: Validates the VAA by checking the signatures against the active Guardian set and ensuring quorum.</li> <li><code>close_signatures</code>: Closes the temporary account to reclaim lamports.</li> </ul> <p>Because the shim avoids leaving permanent accounts behind, verification becomes much cheaper while keeping the same security guarantees.</p> <p>This page introduces the Verification Shim, explains how it works, and shows how integrators can adopt it in place of the core bridge\u2019s <code>verify_signatures</code> and <code>post_vaa</code> functions.</p> <p>For more background, see the Verification Shim concept section. </p>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#prerequisites","title":"Prerequisites","text":"<p>To interact with the verification shim, you'll need the following:</p> <ul> <li>Rust and Solana CLI installed.  </li> <li>Anchor installed.</li> <li>The canonical verification shim program already deployed at <code>EFaNWErqAtVWufdNb7yofSHHfWFos843DFpu4JBw24at</code>.</li> <li>The shim\u2019s IDL for wiring accounts.</li> <li>A payer (signer) funded for compute and temporary account rent (you\u2019ll close and reclaim).</li> </ul>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#setup","title":"Setup","text":"<p>To start, add the verification shim CPI and declare the external program so your instruction can CPI into it. This lets your program verify a VAA digest against the active Guardian set without creating persistent core bridge accounts.</p> <pre><code>declare_program!(wormhole_verify_vaa_shim);\n\nuse anchor_lang::{\n    prelude::*,\n    solana_program::{self, keccak},\n};\nuse wormhole_verify_vaa_shim::cpi::accounts::VerifyHash;\nuse wormhole_verify_vaa_shim::program::WormholeVerifyVaaShim;\n</code></pre>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#accounts","title":"Accounts","text":"<p>You\u2019ll wire three accounts for verification:</p> <ul> <li><code>guardian_set</code>: Core bridge <code>GuardianSet</code> PDA for the VAA\u2019s <code>guardianSetIndex</code> (shim checks derivation).</li> <li><code>guardian_signatures</code>: Temporary account created by <code>post_signatures</code> (shim checks ownership &amp; discriminator).</li> <li><code>wormhole_verify_vaa_shim</code>: The verification shim program.</li> </ul> <pre><code>#[derive(Accounts)]\npub struct ConsumeVaa&lt;'info&gt; {\n    /// CHECK: Guardian set used for signature verification by shim.\n    /// Derivation is checked by the shim.\n    guardian_set: UncheckedAccount&lt;'info&gt;,\n\n    /// CHECK: Stored guardian signatures to be verified by shim.\n    /// Ownership ownership and discriminator is checked by the shim.\n    guardian_signatures: UncheckedAccount&lt;'info&gt;,\n\n    wormhole_verify_vaa_shim: Program&lt;'info, WormholeVerifyVaaShim&gt;,\n}\n</code></pre> <p>Here, <code>guardian_set</code> is a core bridge PDA, and <code>guardian_signatures</code> is created and owned by the verification shim. Derive <code>guardian_set = PDA([\"GuardianSet\", index_be_bytes], CORE_BRIDGE_PROGRAM_ID)</code> using the <code>guardianSetIndex</code> from the VAA header (big-endian), compute its bump, and pass that bump into your instruction.</p>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#verify-the-vaa","title":"Verify the VAA","text":"<p>The <code>consume_vaa</code> function computes the digest, calls the shim\u2019s <code>verify_hash</code>, and then proceeds with your logic. This step validates Guardian signatures and quorum against the active Guardian set for the VAA\u2019s <code>guardianSetIndex</code>, then lets your program proceed without persisting a <code>PostedVAA</code>. </p> <pre><code>pub fn consume_vaa(\n    ctx: Context&lt;ConsumeVaa&gt;,\n    guardian_set_bump: u8,\n    vaa_body: Vec&lt;u8&gt;,\n) -&gt; Result&lt;()&gt; {\n    // Compute the message hash.\n    let message_hash = &amp;solana_program::keccak::hashv(&amp;[&amp;vaa_body]).to_bytes();\n    let digest = keccak::hash(message_hash.as_slice()).to_bytes();\n    // Verify the hash against the signatures.\n    wormhole_verify_vaa_shim::cpi::verify_hash(\n        CpiContext::new(\n            ctx.accounts.wormhole_verify_vaa_shim.to_account_info(),\n            VerifyHash {\n                guardian_set: ctx.accounts.guardian_set.to_account_info(),\n                guardian_signatures: ctx.accounts.guardian_signatures.to_account_info(),\n            },\n        ),\n        guardian_set_bump,\n        digest,\n    )?;\n    // Decode vaa_body, perform security checks, and do your thing.\n    Ok(())\n}\n</code></pre>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#limitations-and-security-considerations","title":"Limitations and Security Considerations","text":"<ul> <li>You must be the payer and/or account owner to reclaim lamports from the <code>GuardianSignatures</code> account.</li> <li>The verification proof is not a permanent on-chain record unless you keep the account.</li> <li>Compute usage (CU) is higher for the rent-efficient pattern, but the total cost is dramatically lower than keeping permanent accounts.</li> <li>All validation guarantees remain as strong as with the legacy method.</li> <li>If you do not close accounts you create, rent will be lost as before.</li> <li>This approach assumes you do not need to later re-validate the VAA from an on-chain artifact.</li> </ul>"},{"location":"products/messaging/guides/solana-shims/sol-verification/#conclusion","title":"Conclusion","text":"<p>By following this flow, you can efficiently verify VAAs on Solana with minimal rent overhead, leaving no unnecessary state behind on-chain. For a complete, working reference, see the full example implementation in the Wormhole repo: <code>consume_vaa.rs</code>.</p>"},{"location":"products/messaging/reference/core-contract-evm/","title":"Core Contract (EVM)","text":"<p>The Wormhole Core Contract on EVM chains is a proxy-based contract responsible for receiving and verifying Wormhole messages (VAAs). It implements the messaging interface and delegates logic to upgradeable implementation contracts.</p>"},{"location":"products/messaging/reference/core-contract-evm/#structure-overview","title":"Structure Overview","text":"<p>The Wormhole Core system consists of a proxy contract and a modular implementation constructed through layered inheritance.</p> <pre><code>Wormhole.sol (Proxy)\n\u2514\u2500\u2500 Implementation.sol\n    \u2514\u2500\u2500 Governance.sol\n        \u251c\u2500\u2500 Getters.sol\n        \u251c\u2500\u2500 GovernanceStructs.sol\n        \u251c\u2500\u2500 Messages.sol\n        \u251c\u2500\u2500 Setters.sol\n        \u2514\u2500\u2500 Structs.sol\n</code></pre> <p>Key Components:</p> <ul> <li>Wormhole.sol: The upgradeable proxy contract that delegates all logic to <code>Implementation.sol</code>.</li> <li>Implementation.sol: The main logic contract, which handles message publication and initialization. Inherits from Governance.sol.</li> <li>Governance.sol: Core governance logic for processing upgrades, setting fees, and updating the Guardian set. Also responsible for verifying governance VAAs and performing privileged actions.</li> <li>Getters.sol: Exposes view functions to access internal contract state, such as current Guardian sets, fees, and contract configuration.</li> <li>GovernanceStructs.sol: Provides structures and helpers for processing governance-related VAAs.</li> <li>Messages.sol: Handles VAA parsing and verification.</li> <li>Setters.sol: Contains internal functions for mutating contract state.</li> <li>Structs.sol: Defines core data structures like GuardianSet and VM (VAA Message) used across multiple modules.</li> </ul>"},{"location":"products/messaging/reference/core-contract-evm/#state-variables","title":"State Variables","text":"<ul> <li><code>provider</code> Structs.Provider: Holds metadata like <code>chainId</code>, <code>governanceChainId</code>, and <code>governanceContract</code>. This is a nested struct.</li> <li><code>guardianSets</code> mapping(uint32 =&gt; GuardianSet): Mapping of all Guardian sets by index.</li> <li><code>guardianSetIndex</code> uint32: Index of the currently active Guardian set.</li> <li><code>guardianSetExpiry</code> uint32: How long a Guardian set remains valid after it's replaced (in seconds).</li> <li><code>sequences</code> mapping(address =&gt; uint64): Tracks message sequences per emitter (used to enforce message ordering).</li> <li><code>consumedGovernanceActions</code> mapping(bytes32 =&gt; bool): Used to prevent governance VAAs from being reused (replay protection).</li> <li><code>initializedImplementations</code> mapping(address =&gt; bool): Tracks which implementation addresses have been initialized (for upgrade safety).</li> <li><code>messageFee</code> uint256: The amount (in native gas token) required to post a message. Set via governance.</li> <li><code>evmChainId</code> uint256: The actual EVM chain ID (e.g., 1 for Ethereum, 10 for Optimism). Used in fork recovery.</li> </ul>"},{"location":"products/messaging/reference/core-contract-evm/#events","title":"Events","text":""},{"location":"products/messaging/reference/core-contract-evm/#logmessagepublished","title":"LogMessagePublished","text":"<p>Emitted when a message is published via <code>publishMessage</code>. (Defined in Implementation.sol)</p> <pre><code>event LogMessagePublished(\n    address indexed sender,\n    uint64 sequence,\n    uint32 nonce,\n    bytes payload,\n    uint8 consistencyLevel\n)\n</code></pre> Parameters <p><code>sender</code> address </p> <p>Address that called <code>publishMessage</code>.</p> <p><code>sequence</code> uint64</p> <p>The sequence number of the message.</p> <p><code>nonce</code> uint32</p> <p>The provided nonce.</p> <p><code>payload</code> bytes</p> <p>The payload that was published.</p> <p><code>consistencyLevel</code> uint8</p> <p>Finality level requested.</p>"},{"location":"products/messaging/reference/core-contract-evm/#contractupgraded","title":"ContractUpgraded","text":"<p>Emitted when the Core Contract is upgraded to a new implementation via governance. (Defined in Governance.sol)</p> <pre><code>event ContractUpgraded(\n    address indexed oldContract,\n    address indexed newContract\n)\n</code></pre> Parameters <p><code>oldContract</code> address</p> <p>The address of the previous implementation.</p> <p><code>newContract</code> address</p> <p>The address of the new implementation.</p>"},{"location":"products/messaging/reference/core-contract-evm/#guardiansetadded","title":"GuardianSetAdded","text":"<p>Emitted when a new Guardian set is registered via governance. (Defined in Governance.sol)</p> <pre><code>event GuardianSetAdded(\n    uint32 indexed index\n)\n</code></pre> Parameters <p><code>index</code> uint32</p> <p>Index of the newly added Guardian set.</p>"},{"location":"products/messaging/reference/core-contract-evm/#logguardiansetchanged","title":"LogGuardianSetChanged","text":"<p>Emitted when the active Guardian set is changed. (Defined in State.sol)</p> <pre><code>event LogGuardianSetChanged(\n    uint32 oldGuardianIndex,\n    uint32 newGuardianIndex\n)\n</code></pre> Parameters <p><code>oldGuardianIndex</code> uint32</p> <p>The previous active Guardian set index.</p> <p><code>newGuardianIndex</code> uint32</p> <p>The new active Guardian set index.</p>"},{"location":"products/messaging/reference/core-contract-evm/#functions","title":"Functions","text":""},{"location":"products/messaging/reference/core-contract-evm/#publishmessage","title":"publishMessage","text":"<p>Publishes a message to Wormhole's Guardian Network. (Defined in Implementation.sol)</p> <pre><code>function publishMessage(\n    uint32 nonce,\n    bytes memory payload,\n    uint8 consistencyLevel\n) public payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>nonce</code> uint32</p> <p>Custom sequence identifier for the emitter.</p> <p><code>payload</code> bytes</p> <p>Arbitrary user data to be included in the message.</p> <p><code>consistencyLevel</code> uint8</p> <p>Finality requirement for Guardian attestation (e.g., safe or finalized).</p> Returns <p><code>sequence</code> uint64</p> <p>Unique sequence number assigned to this message.</p>"},{"location":"products/messaging/reference/core-contract-evm/#getcurrentguardiansetindex","title":"getCurrentGuardianSetIndex","text":"<p>Returns the index of the currently active Guardian set. (Defined in Getters.sol)</p> <p>Each VAA includes the index of the Guardian set that signed it. This function allows contracts to retrieve the current index, ensuring the VAA is verified against the correct set.</p> <pre><code>function getCurrentGuardianSetIndex() external view returns (uint32)\n</code></pre> Returns <p><code>index</code> uint32</p> <p>The index of the active Guardian set used to verify signatures.</p>"},{"location":"products/messaging/reference/core-contract-evm/#getguardianset","title":"getGuardianSet","text":"<p>Retrieves metadata for a given Guardian set index. (Defined in Getters.sol)</p> <pre><code>function getGuardianSet(uint32 index) external view returns (address[] memory keys, uint32 expirationTime)\n</code></pre> Parameters <p><code>index</code> uint32</p> <p>Guardian set index to query.</p> Returns <p><code>keys</code> address[]</p> <p>Public keys of the guardians in this set.</p> <p><code>expirationTime</code> uint32</p> <p>Timestamp after which the Guardian set is considered expired.</p>"},{"location":"products/messaging/reference/core-contract-evm/#getguardiansetexpiry","title":"getGuardianSetExpiry","text":"<p>Returns the expiration time of a specific Guardian set index. (Defined in Getters.sol)</p> <pre><code>function getGuardianSetExpiry(uint32 index) external view returns (uint32)\n</code></pre> Parameters <p><code>index</code> uint32</p> <p>The index of the Guardian set to query.</p> Returns <p><code>expiry</code> uint32</p> <p>UNIX timestamp after which the set is no longer valid.</p>"},{"location":"products/messaging/reference/core-contract-evm/#messagefee","title":"messageFee","text":"<p>Returns the current fee (in native tokens) required to publish a message. (Defined in Getters.sol)</p> <pre><code>function messageFee() public view returns (uint256)\n</code></pre> Returns <p><code>fee</code> uint256</p> <p>Fee in Wei required to publish a message successfully. Must be sent as <code>msg.value</code>.</p>"},{"location":"products/messaging/reference/core-contract-evm/#nextsequence","title":"nextSequence","text":"<p>Retrieves the next sequence number for a given emitter address. (Defined in Getters.sol)</p> <pre><code>function nextSequence(address emitter) external view returns (uint64)\n</code></pre> Parameters <p><code>emitter</code> address</p> <p>The address for which the next sequence will be issued.</p> Returns <p><code>sequence</code> uint64</p> <p>The next sequence number for the specified emitter.</p>"},{"location":"products/messaging/reference/core-contract-evm/#parseandverifyvm","title":"parseAndVerifyVM","text":"<p>Verifies signatures and parses a signed VAA. (Defined in Messages.sol)</p> <pre><code>function parseAndVerifyVM(bytes memory encodedVM)\n    external\n    view\n    returns (\n        VM memory vm,\n        bool valid,\n        string memory reason\n    )\n</code></pre> Parameters <p><code>encodedVM</code> bytes</p> <p>Serialized signed VAA from Guardians.</p> Returns <p><code>vm</code> VM memory</p> <p>Full parsed VAA contents</p> <p><code>valid</code> bool</p> <p>Whether the VAA is valid according to the current Guardian set.</p> <p><code>reason</code> string</p> <p>Reason for invalidity if <code>valid</code> is false (invalid).</p>"},{"location":"products/messaging/reference/core-contract-evm/#verifyvm","title":"verifyVM","text":"<p>Performs low-level VAA signature verification. (Defined in Messages.sol)</p> <pre><code>function verifyVM(bytes memory encodedVM)\n    public view returns (bool isValid, string memory reason)\n</code></pre> Parameters <p><code>encodedVM</code> bytes</p> <p>Serialized signed VAA to verify.</p> Returns <p><code>isValid</code> bool</p> <p><code>true</code> if the signatures are valid and meet the quorum.</p> <p><code>reason</code> string</p> <p>Explanation for failure if <code>isValid</code> is <code>false</code>.</p>"},{"location":"products/messaging/reference/core-contract-evm/#verifysignatures","title":"verifySignatures","text":"<p>Used to verify individual Guardian signatures against a VAA digest. (Defined in Messages.sol)</p> <pre><code>function verifySignatures(\n    bytes32 hash,\n    Structs.Signature[] memory signatures,\n    GuardianSet memory guardianSet\n) public view returns (bool)\n</code></pre> Parameters <p><code>hash</code> bytes32</p> <p>The message digest to verify.</p> <p><code>signatures</code> Structs.Signature[]</p> <p>An array of Guardian signatures.</p> <p><code>guardianSet</code> GuardianSet memory</p> <p>Guardian set to validate against.</p> Returns <p><code>isValid</code> bool</p> <p><code>true</code> if the required number of valid signatures is present.</p>"},{"location":"products/messaging/reference/core-contract-evm/#quorum","title":"quorum","text":"<p>Returns the number of Guardian signatures required to reach quorum. (Defined in Governance.sol)</p> <pre><code>function quorum() public view returns (uint8)\n</code></pre> Returns <p><code>quorum</code> uint8</p> <p>Number of valid Guardian signatures required to reach consensus for VAA verification.</p>"},{"location":"products/messaging/reference/core-contract-evm/#chainid","title":"chainId","text":"<p>Returns Wormhole chain ID used internally by the protocol. (Defined in Getters.sol)</p> <pre><code>function chainId() public view returns (uint16)\n</code></pre> Returns <p><code>id</code> uint16</p> <p>Wormhole-specific chain identifier. </p>"},{"location":"products/messaging/reference/core-contract-evm/#evmchainid","title":"evmChainId","text":"<p>Returns the EVM chain ID (i.e., value from <code>block.chainid</code>). (Defined in Getters.sol)</p> <pre><code>function evmChainId() public view returns (uint256)\n</code></pre> Returns <p><code>id</code> uint256</p> <p>Native EVM chain ID for the current network.</p>"},{"location":"products/messaging/reference/core-contract-evm/#errors","title":"Errors","text":""},{"location":"products/messaging/reference/core-contract-evm/#invalid-fee","title":"Invalid Fee","text":"<p>Reverts when the message fee (<code>msg.value</code>) sent is not equal to the required fee returned by <code>messageFee()</code>. (Defined in Implementation.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#unsupported","title":"Unsupported","text":"<p>Reverts on any call to the fallback function. The contract does not support arbitrary calls. (Defined in Implementation.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#the-wormhole-contract-does-not-accept-assets","title":"The Wormhole Contract Does Not Accept Assets","text":"<p>Reverts when native tokens (ETH) are sent directly to the contract via the <code>receive()</code> function. (Defined in Implementation.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#already-initialized","title":"Already Initialized","text":"<p>Reverts when trying to call <code>initialize()</code> on an implementation that has already been initialized. (Defined in Implementation.sol, via <code>initializer</code> modifier)</p>"},{"location":"products/messaging/reference/core-contract-evm/#unknown-chain-id","title":"Unknown Chain ID","text":"<p>Reverts inside the <code>initialize()</code> function if the chain ID stored by the contract does not match any known Wormhole chain. (Defined in Implementation.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#invalid-fork","title":"Invalid Fork","text":"<p>Reverts when attempting to perform a governance action intended only for forked chains on a non-forked chain. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#invalid-module","title":"Invalid Module","text":"<p>Reverts if the VAA\u2019s module field doesn\u2019t match the expected \"Core\" module. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#invalid-chain","title":"Invalid Chain","text":"<p>Reverts if the VAA\u2019s target chain doesn\u2019t match the chain on which this contract is deployed. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#new-guardian-set-is-empty","title":"New Guardian Set is Empty","text":"<p>Reverts when trying to register a new Guardian set that has no keys. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#index-must-increase-in-steps-of-1","title":"Index Must Increase in Steps of 1","text":"<p>Reverts when the new Guardian set index is not exactly one greater than the current. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#not-a-fork","title":"Not a Fork","text":"<p>Reverts when trying to recover chain ID on a non-forked chain. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#invalid-evm-chain","title":"Invalid EVM Chain","text":"<p>Reverts if the recovered chain ID doesn't match the current <code>block.chainid</code>. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#governance-action-already-consumed","title":"Governance Action Already Consumed","text":"<p>Reverts when the same governance VAA is submitted more than once. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#wrong-governance-contract","title":"Wrong Governance Contract","text":"<p>Reverts when the governance VAA\u2019s emitter address doesn't match the expected governance contract address. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#wrong-governance-chain","title":"Wrong Governance Chain","text":"<p>Reverts when the governance VAA\u2019s emitter chain doesn't match the expected governance chain (Solana). (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-evm/#not-signed-by-current-guardian-set","title":"Not Signed by Current Guardian Set","text":"<p>Reverts if the Guardian set index in the VAA doesn\u2019t match the current Guardian set. (Defined in Governance.sol)</p>"},{"location":"products/messaging/reference/core-contract-solana/","title":"Core Contract (Solana)","text":"<p>The Wormhole Core Program on Solana is a native Solana program responsible for posting, verifying, and relaying Wormhole messages (VAAs). It implements core messaging functionality, Guardian set updates, and upgradeability.</p>"},{"location":"products/messaging/reference/core-contract-solana/#structure-overview","title":"Structure Overview","text":"<p>The Wormhole Core program on Solana is implemented using modular Rust files. Logic is separated across instruction dispatch, account definitions, core types, and signature verification.</p> <pre><code>lib.rs\n\u251c\u2500\u2500 instructions.rs\n\u251c\u2500\u2500 accounts.rs\n\u251c\u2500\u2500 api.rs\n\u2502   \u251c\u2500\u2500 post_message\n\u2502   \u251c\u2500\u2500 verify_signatures\n\u2502   \u251c\u2500\u2500 post_vaa\n\u2502   \u251c\u2500\u2500 upgrade_contract\n\u2502   \u2514\u2500\u2500 upgrade_guardian_set\n\u251c\u2500\u2500 types.rs\n\u2514\u2500\u2500 vaa.rs\n</code></pre> <p>Key Components:</p> <ul> <li>lib.rs: Program entry point and instruction dispatcher. Registers all handlers and exposes the on-chain processor.</li> <li>instructions.rs: Defines the <code>WormholeInstruction</code> enum and maps it to individual instruction handlers.</li> <li>accounts.rs: Specifies the account constraints and validation logic for each instruction.</li> <li>api.rs: Contains the main logic for processing instructions such as message posting, VAA verification, upgrades, and governance actions.</li> <li>types.rs: Defines shared structs and enums used throughout the program, including configuration and <code>GuardianSet</code> formats.</li> <li>vaa.rs: Implements VAA parsing, hashing, and signature-related logic used to verify Wormhole messages.</li> <li>error.rs (not listed above): Defines custom error types used across the program for precise failure handling.</li> <li>wasm.rs (not listed above): Provides WebAssembly bindings for testing and external tooling; not used on-chain.</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#state-accounts","title":"State Accounts","text":"<p>Below are on-chain PDAs used to store persistent state for the core contract. All are derived using deterministic seeds with the program ID.</p> <ul> <li><code>bridge</code> BridgeData: Stores global config like the active Guardian set index, message fee, and Guardian set expiration time. (Derived at PDA seed <code>[\"Bridge\"]</code>)</li> <li><code>guardianSets</code> GuardianSetData: Mapping of Guardian sets by index. Each Guardian set includes public key hashes and creation/expiration times. (Derived at PDA seed <code>[\"GuardianSet\", index]</code>)</li> <li><code>sequences</code> SequenceTracker: Tracks the last sequence number used by each emitter, enforcing strict message ordering. (Derived at PDA seed <code>[\"Sequence\", emitter]</code>)</li> <li><code>postedVAAs</code> PostedVAAData: Stores verified and finalized VAAs, preventing replay. (Derived at PDA seed <code>[\"PostedVAA\", hash]</code>)</li> <li><code>claims</code> ClaimData: Tracks consumed governance VAAs to ensure replay protection. (Derived at PDA seed <code>[\"Claim\", emitter, sequence]</code>)</li> <li><code>feeCollector</code> FeeCollector: Holds lamports collected via message fees, and can be drained via governance. (Derived at PDA seed <code>[\"fee_collector\"]</code>)</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#instructions","title":"Instructions","text":""},{"location":"products/messaging/reference/core-contract-solana/#initialize","title":"initialize","text":"<p>Initializes the Wormhole Core contract on Solana with a Guardian set and fee configuration. This should be called only once at deployment time. (Defined in api/initialize.rs)</p> <pre><code>initialize(\n    payer: Pubkey,\n    fee: u64,\n    guardian_set_expiration_time: u32,\n    initial_guardians: &amp;[[u8; 20]]\n)\n</code></pre> Accounts <ul> <li><code>Bridge</code>: PDA to store global configuration.</li> <li><code>GuardianSet</code>: PDA for Guardian set at index 0.</li> <li><code>FeeCollector</code>: PDA to collect message posting fees.</li> <li><code>Payer</code>: Funds account creation.</li> <li><code>Clock</code>, <code>Rent</code>, <code>SystemProgram</code>: Solana system accounts.</li> </ul> Parameters <p><code>fee</code> u64</p> <p>Fee in lamports required to post messages.</p> <p><code>guardian_set_expiration_time</code> u32</p> <p>Time in seconds after which the Guardian set expires.</p> <p><code>initial_guardians</code> [[u8; 20]]</p> <p>List of Guardian public key hashes (Ethereum-style addresses).</p>"},{"location":"products/messaging/reference/core-contract-solana/#post_message","title":"post_message","text":"<p>Posts a Wormhole message to the Solana Core contract. (Defined in api/post_message.rs)</p> <pre><code>PostMessage {\n    nonce: u32,\n    payload: Vec&lt;u8&gt;,\n    consistency_level: u8\n}\n</code></pre> Accounts <ul> <li><code>Bridge</code>: PDA for global config.</li> <li><code>Message</code>: PDA where the posted message will be stored.</li> <li><code>Emitter</code>: The emitting account (must sign).</li> <li><code>Sequence</code>: PDA tracking the emitter\u2019s message sequence.</li> <li><code>Payer</code>: Pays for account creation and fees.</li> <li><code>FeeCollector</code>: PDA that collects message fees.</li> <li><code>Clock</code>, <code>Rent</code>, <code>SystemProgram</code>: Solana system accounts.</li> </ul> Parameters <p><code>nonce</code> u32</p> <p>Unique nonce to disambiguate messages with the same payload.</p> <p><code>payload</code> Vec&lt;u8&gt;</p> <p>The arbitrary message payload to be posted.</p> <p><code>consistency_level</code> u8</p> <p>Level of finality required before the message is processed.</p> <p><code>1</code> = Confirmed, <code>32</code> = Finalized.</p>"},{"location":"products/messaging/reference/core-contract-solana/#post_message_unreliable","title":"post_message_unreliable","text":"<p>Posts a Wormhole message without requiring reliable delivery. Used for lightweight publishing when finality isn't critical. (Defined in api/post_message.rs)</p> <pre><code>PostMessageUnreliable {\n    nonce: u32,\n    payload: Vec&lt;u8&gt;,\n    consistency_level: u8\n}\n</code></pre> Accounts <ul> <li><code>Bridge</code>: PDA for global config.</li> <li><code>Message</code>: PDA where the posted message will be stored.</li> <li><code>Emitter</code>: The emitting account (must sign).</li> <li><code>Sequence</code>: PDA tracking the emitter\u2019s message sequence.</li> <li><code>Payer</code>: Pays for account creation and fees.</li> <li><code>FeeCollector</code>: PDA that collects message fees.</li> <li><code>Clock</code>, <code>Rent</code>, <code>SystemProgram</code>: Solana system accounts.</li> </ul> Parameters <p><code>nonce</code> u32</p> <p>Unique nonce to disambiguate messages with the same payload.</p> <p><code>payload</code> Vec&lt;u8&gt;</p> <p>The arbitrary message payload to be posted.</p> <p><code>consistency_level</code> u8</p> <p>Level of finality required before the message is processed. <code>1</code> = Confirmed, <code>32</code> = Finalized.</p>"},{"location":"products/messaging/reference/core-contract-solana/#verify_signatures","title":"verify_signatures","text":"<p>Verifies Guardian signatures over a VAA body hash. This is the first step in VAA processing and is required before posting the VAA. (Defined in api/verify_signature.rs)</p> <pre><code>VerifySignatures {\n    signers: [i8; 19]\n}\n</code></pre> Accounts <ul> <li><code>Payer</code>: Pays for account creation and fees.</li> <li><code>GuardianSet</code>: PDA holding the current Guardian set.</li> <li><code>SignatureSet</code>: PDA that will store the verified signature data.</li> <li><code>InstructionsSysvar</code>: Required to access prior instructions (e.g., secp256k1 sigverify).</li> <li><code>Rent</code>, <code>SystemProgram</code>: Solana system accounts.</li> </ul> Parameters <p><code>signers</code> [i8; 19]</p> <p>A mapping from Guardian index to its position in the instruction payload (or -1 if not present).</p> <p>Used to correlate secp256k1 verify instructions with Guardian set entries.</p>"},{"location":"products/messaging/reference/core-contract-solana/#post_vaa","title":"post_vaa","text":"<p>Finalizes a VAA after signature verification. This stores the message on-chain and marks it as consumed. (Defined in api/post_vaa.rs)</p> <pre><code>PostVAA {\n    version: u8,\n    guardian_set_index: u32,\n    timestamp: u32,\n    nonce: u32,\n    emitter_chain: u16,\n    emitter_address: [u8; 32],\n    sequence: u64,\n    consistency_level: u8,\n    payload: Vec&lt;u8&gt;\n}\n</code></pre> Accounts <ul> <li><code>GuardianSet</code>: PDA of the Guardian set used to verify the VAA.</li> <li><code>Bridge</code>: Global Wormhole state.</li> <li><code>SignatureSet</code>: Verified signature PDA (from verify_signatures).</li> <li><code>PostedVAA</code>: PDA where the VAA will be stored.</li> <li><code>Payer</code>: Funds the account creation.</li> <li><code>Clock</code>, <code>Rent</code>, <code>SystemProgram</code>: Solana system accounts.</li> </ul> Parameters <p><code>version</code> u8</p> <p>VAA protocol version.</p> <p><code>guardian_set_index</code> u32</p> <p>Index of the Guardian Set that signed this VAA.</p> <p><code>timestamp</code> u32</p> <p>The time the emitter submitted the message.</p> <p><code>nonce</code> u32</p> <p>Unique identifier for the message.</p> <p><code>emitter_chain</code> u16</p> <p>ID of the chain where the message originated.</p> <p><code>emitter_address</code> [u8; 32]</p> <p>Address of the contract or account that emitted the message.</p> <p><code>sequence</code> u64</p> <p>Monotonically increasing sequence number for the emitter.</p> <p><code>consistency_level</code> u8</p> <p>Required confirmation level before the message is accepted.</p> <p><code>1</code> = Confirmed, <code>32</code> = Finalized.</p> <p><code>payload</code> Vec&lt;u8&gt;</p> <p>Arbitrary data being transferred in the message.</p>"},{"location":"products/messaging/reference/core-contract-solana/#set_fees","title":"set_fees","text":"<p>Updates the message posting fee for the core bridge contract. (Defined in api/governance.rs)</p> <pre><code>SetFees {}\n</code></pre> <p>This function is called via governance and requires a valid governance VAA. The VAA payload must contain the new fee value.</p> Accounts <ul> <li><code>Payer</code>: Funds transaction execution.</li> <li><code>Bridge</code>: PDA storing global Wormhole state.</li> <li><code>Message</code>: The PostedVAA account containing the governance message.</li> <li><code>Claim</code>: PDA that ensures this governance message hasn't been processed already.</li> <li><code>SystemProgram</code>: Required by Solana for creating/initializing accounts.</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#transfer_fees","title":"transfer_fees","text":"<p>Transfers the accumulated message posting fees from the contract to a specified recipient. (Defined in api/governance.rs)</p> <pre><code>TransferFees {}\n</code></pre> <p>This function is triggered via a governance VAA and transfers the fee balance from the <code>FeeCollector</code> to the recipient address specified in the VAA payload.</p> Accounts <ul> <li><code>Payer</code>: Funds transaction execution.</li> <li><code>Bridge</code>: PDA storing global Wormhole state.</li> <li><code>Message</code>: PostedVAA account containing the governance message.</li> <li><code>FeeCollector</code>: PDA holding the accumulated fees.</li> <li><code>Recipient</code>: The account that will receive the fees.</li> <li><code>Claim</code>: PDA that ensures this governance message hasn't been processed already.</li> <li><code>Rent</code>, <code>SystemProgram</code>: Standard Solana system accounts.</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#upgrade_contract","title":"upgrade_contract","text":"<p>Upgrades the deployed Wormhole program using a governance VAA. (Defined in api/governance.rs)</p> <pre><code>UpgradeContract {}\n</code></pre> <p>This instruction allows authorized governance messages to trigger an upgrade of the on-chain Wormhole program logic to a new address.</p> Accounts <ul> <li><code>Payer</code>: Funds transaction execution.</li> <li><code>Bridge</code>: PDA storing global Wormhole state.</li> <li><code>Message</code>: PostedVAA account containing the governance message.</li> <li><code>Claim</code>: PDA that ensures this governance message hasn't been processed already.</li> <li><code>UpgradeAuthority</code>: PDA with authority to perform the upgrade (seeded with \"upgrade\").</li> <li><code>Spill</code>: Account that receives remaining funds from the upgrade buffer.</li> <li><code>NewContract</code>: Account holding the new program data.</li> <li><code>ProgramData</code>: Metadata account for the upgradable program.</li> <li><code>Program</code>: Current program to be upgraded.</li> <li><code>Rent</code>, <code>Clock</code>: System accounts used during the upgrade process.</li> <li><code>BPFLoaderUpgradeable</code>: Solana system program for upgrades.</li> <li><code>SystemProgram</code>: Required by Solana for creating/initializing accounts.</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#upgrade_guardian_set","title":"upgrade_guardian_set","text":"<p>Upgrades the current Guardian set using a governance VAA. (Defined in api/governance.rs)</p> <pre><code>UpgradeGuardianSet {}\n</code></pre> <p>This instruction replaces the active Guardian set with a new one, allowing the Wormhole network to rotate its validator keys securely through governance.</p> Accounts <ul> <li><code>Payer</code>: Funds transaction execution.</li> <li><code>Bridge</code>: PDA storing global Wormhole state.</li> <li><code>Message</code>: PostedVAA account containing the governance message.</li> <li><code>Claim</code>: PDA that ensures this governance message hasn't been processed already.</li> <li><code>GuardianSetOld</code>: Current (active) Guardian set PDA.</li> <li><code>GuardianSetNew</code>: PDA for the newly proposed Guardian set.</li> <li><code>SystemProgram</code>: Standard Solana system accounts.</li> </ul>"},{"location":"products/messaging/reference/core-contract-solana/#errors","title":"Errors","text":""},{"location":"products/messaging/reference/core-contract-solana/#guardiansetmismatch","title":"GuardianSetMismatch","text":"<p>The Guardian set index does not match the expected value. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#instructionatwrongindex","title":"InstructionAtWrongIndex","text":"<p>The instruction was found at the wrong index. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#insufficientfees","title":"InsufficientFees","text":"<p>Insufficient fees were provided to post the message. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidfeerecipient","title":"InvalidFeeRecipient","text":"<p>The recipient address does not match the one specified in the governance VAA. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidgovernanceaction","title":"InvalidGovernanceAction","text":"<p>The action specified in the governance payload is invalid. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidgovernancechain","title":"InvalidGovernanceChain","text":"<p>The governance VAA was not emitted by a valid governance chain. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidgovernancekey","title":"InvalidGovernanceKey","text":"<p>The emitter address in the governance VAA is not the expected governance key. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidgovernancemodule","title":"InvalidGovernanceModule","text":"<p>The module string in the governance VAA header is invalid. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidgovernancewithdrawal","title":"InvalidGovernanceWithdrawal","text":"<p>Fee withdrawal would cause the fee collector account to drop below rent-exempt balance. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidguardiansetupgrade","title":"InvalidGuardianSetUpgrade","text":"<p>The Guardian set upgrade VAA is invalid (e.g., skipped index or mismatched current index). (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidhash","title":"InvalidHash","text":"<p>The hash computed from the VAA does not match the expected result. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidsecpinstruction","title":"InvalidSecpInstruction","text":"<p>The SECP256k1 instruction used for signature verification is malformed. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#mathoverflow","title":"MathOverflow","text":"<p>An arithmetic overflow occurred during computation. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#postvaaconsensusfailed","title":"PostVAAConsensusFailed","text":"<p>Not enough valid signatures were collected to achieve quorum. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#postvaaguardiansetexpired","title":"PostVAAGuardianSetExpired","text":"<p>The Guardian set used to verify the VAA has already expired. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#toomanyguardians","title":"TooManyGuardians","text":"<p>The Guardian set exceeds the maximum allowed number of guardians. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#vaaalreadyexecuted","title":"VAAAlreadyExecuted","text":"<p>The VAA has already been executed and cannot be processed again. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#vaainvalid","title":"VAAInvalid","text":"<p>The VAA is structurally invalid or fails to decode. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#invalidpayloadlength","title":"InvalidPayloadLength","text":"<p>The payload length is incorrect or malformed. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/core-contract-solana/#emitterchanged","title":"EmitterChanged","text":"<p>The emitter address changed unexpectedly. (Defined in error.rs)</p>"},{"location":"products/messaging/reference/relayer-contract/","title":"Relayer Contract","text":"<p>The Wormhole Relayer Contract on EVM enables cross-chain message delivery with automatic execution on the destination chain. It publishes delivery instructions as Wormhole messages and defines the logic to process them via the <code>deliver</code> function. The contract supports optional value forwarding, gas refunds, message overrides, and integration with third-party delivery providers.</p>"},{"location":"products/messaging/reference/relayer-contract/#structure-overview","title":"Structure Overview","text":"<p>The Wormhole Relayer system on EVM is implemented as a modular, upgradeable contract suite, organized through layered inheritance and interfaces.</p> <pre><code>IWormholeRelayer.sol (Interface)\n\u2514\u2500\u2500 WormholeRelayerBase.sol\n    \u251c\u2500\u2500 WormholeRelayer.sol\n    \u251c\u2500\u2500 CircleRelayer.sol\n    \u2514\u2500\u2500 TypedUnits.sol\nDeliveryProvider.sol (Standalone)\n</code></pre> <p>Key Components:</p> <ul> <li>IWormholeRelayer.sol: Defines the public interface for the Wormhole Relayer, including delivery functions and fee quoting.</li> <li>WormholeRelayerBase.sol: Base logic contract shared by both WormholeRelayer and CircleRelayer. Handles delivery processing, fee management, and VAA parsing.</li> <li>WormholeRelayer.sol: Main relayer implementation used with the Wormhole Messaging protocol. Inherits from <code>WormholeRelayerBase</code>.</li> <li>CircleRelayer.sol: Specialized implementation for Circle messages. Also extends <code>WormholeRelayerBase</code>, but is out of scope for this reference.</li> <li>TypedUnits.sol: Utility module for safe unit conversions, fee accounting, and delivery quote handling.</li> <li>DeliveryProvider.sol: Separate contract that sets and manages delivery pricing and supported chains. Queried by the relayer when calculating fees.</li> </ul>"},{"location":"products/messaging/reference/relayer-contract/#state-variables","title":"State Variables","text":"<ul> <li><code>chainId</code> uint16: Wormhole chain ID for the current network (e.g., 2 for Ethereum).</li> <li><code>wormhole</code> IWormhole: Address of the core Wormhole messaging contract used to verify VAAs.</li> <li><code>deliveryProvider</code> address: Address of the Delivery Provider contract responsible for quoting and setting delivery prices.</li> <li><code>rewardAddress</code> address: Address that receives excess fees collected from users.</li> <li><code>gasOverheads</code> mapping(uint16 =&gt; GasOverhead): Per-chain gas overheads used to calculate delivery costs.</li> <li><code>supportedChains</code> mapping(uint16 =&gt; bool): Tracks which destination chains are supported for message delivery.</li> <li><code>deliveries</code> mapping(bytes32 =&gt; bool): Records completed deliveries (by VAA hash) to prevent replay.</li> <li><code>deliverySuccessBlock</code> mapping(bytes32 =&gt; uint256): Stores the block number when a delivery succeeded (used for auditing).</li> <li><code>owner</code> address: Contract owner with permission to update system parameters (e.g., gas overheads).</li> <li><code>chainHash</code> uint256: EVM chain ID hash used for cross-checking delivery source chain.</li> <li><code>implementation</code> address: Address of the current logic contract (used in proxy pattern).</li> </ul>"},{"location":"products/messaging/reference/relayer-contract/#events","title":"Events","text":""},{"location":"products/messaging/reference/relayer-contract/#sendevent","title":"SendEvent","text":"<p>Emitted when a send instruction is published and payment is handled. (Defined in IWormholeRelayerTyped.sol)</p> <pre><code>event SendEvent(\n    uint64 indexed sequence,\n    LocalNative deliveryQuote,\n    LocalNative paymentForExtraReceiverValue\n);\n</code></pre> Parameters <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction message.</p> <p><code>deliveryQuote</code> LocalNative</p> <p>Price charged by the delivery provider (in source chain currency units).</p> <p><code>paymentForExtraReceiverValue</code> LocalNative</p> <p>Extra amount (in source chain currency units) used to top up the receiver value on the target chain.</p>"},{"location":"products/messaging/reference/relayer-contract/#delivery","title":"Delivery","text":"<p>Emitted after a delivery attempt is executed by a delivery provider. (Defined in IWormholeRelayerTyped.sol)</p> <pre><code>event Delivery(\n    address indexed recipientContract,\n    uint16 indexed sourceChain,\n    uint64 indexed sequence,\n    bytes32 deliveryVaaHash,\n    DeliveryStatus status,\n    Gas gasUsed,\n    RefundStatus refundStatus,\n    bytes additionalStatusInfo,\n    bytes overridesInfo\n);\n</code></pre> Parameters <p><code>recipientContract</code> address</p> <p>Target contract that was called.</p> <p><code>sourceChain</code> uint16</p> <p>Wormhole chain ID where the delivery was requested.</p> <p><code>sequence</code> uint64</p> <p>Sequence number of the delivery VAA on the source chain.</p> <p><code>deliveryVaaHash</code> bytes32</p> <p>Hash of the delivery VAA.</p> <p><code>status</code> DeliveryStatus</p> <p><code>SUCCESS</code> if the target call did not revert; <code>RECEIVER_FAILURE</code> if it reverted.</p> <p><code>gasUsed</code> Gas</p> <p>Gas consumed when calling the target contract.</p> <p><code>refundStatus</code> RefundStatus</p> <p>Result of the refund path (same-chain or cross-chain) or <code>NO_REFUND_REQUESTED</code>.</p> <p><code>additionalStatusInfo</code> bytes</p> <p>Empty on success; otherwise, truncated return data from the revert.</p> <p><code>overridesInfo</code> bytes</p> <p>Empty if not an override; otherwise, an encoded <code>DeliveryOverride</code>.</p>"},{"location":"products/messaging/reference/relayer-contract/#contractupgraded-wormholerelayer","title":"ContractUpgraded (WormholeRelayer)","text":"<p>Emitted when the Wormhole Relayer contract is upgraded to a new implementation via governance. (Defined in WormholeRelayerGovernance.sol)</p> <pre><code>event ContractUpgraded(\n    address indexed oldContract,\n    address indexed newContract\n);\n</code></pre> Parameters <p><code>oldContract</code> address</p> <p>Address of the previous implementation.</p> <p><code>newContract</code> address</p> <p>Address of the new implementation.</p>"},{"location":"products/messaging/reference/relayer-contract/#contractupgraded-deliveryprovider","title":"ContractUpgraded (DeliveryProvider)","text":"<p>Emitted when the Delivery Provider contract is upgraded to a new implementation. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event ContractUpgraded(\n    address indexed oldContract,\n    address indexed newContract\n);\n</code></pre> Parameters <p><code>oldContract</code> address</p> <p>Address of the previous implementation.</p> <p><code>newContract</code> address</p> <p>Address of the new implementation.</p>"},{"location":"products/messaging/reference/relayer-contract/#chainsupportupdated","title":"ChainSupportUpdated","text":"<p>Emitted when Delivery Provider support for a target chain is changed. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event ChainSupportUpdated(\n    uint16 targetChain,\n    bool isSupported\n);\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID whose support setting changed.</p> <p><code>isSupported</code> bool</p> <p>Whether deliveries to <code>targetChain</code> are supported.</p>"},{"location":"products/messaging/reference/relayer-contract/#ownershiptransfered","title":"OwnershipTransfered","text":"<p>Emitted when Delivery Provider ownership is transferred. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event OwnershipTransfered(\n    address indexed oldOwner,\n    address indexed newOwner\n);\n</code></pre> Parameters <p><code>oldOwner</code> address</p> <p>Previous owner.</p> <p><code>newOwner</code> address</p> <p>New owner.</p>"},{"location":"products/messaging/reference/relayer-contract/#rewardaddressupdated","title":"RewardAddressUpdated","text":"<p>Emitted when the Delivery Provider reward address is updated. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event RewardAddressUpdated(\n    address indexed newAddress\n);\n</code></pre> Parameters <p><code>newAddress</code> address</p> <p>New reward address.</p>"},{"location":"products/messaging/reference/relayer-contract/#targetchainaddressupdated","title":"TargetChainAddressUpdated","text":"<p>Emitted when the Delivery Provider's peer address for a target chain is updated. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event TargetChainAddressUpdated(\n    uint16 indexed targetChain,\n    bytes32 indexed newAddress\n);\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID whose peer address changed.</p> <p><code>newAddress</code> bytes32</p> <p>New peer address in Wormhole bytes32 format.</p>"},{"location":"products/messaging/reference/relayer-contract/#delivergasoverheadupdated","title":"DeliverGasOverheadUpdated","text":"<p>Emitted when the configured gas overhead for deliveries is updated. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event DeliverGasOverheadUpdated(\n    Gas indexed oldGasOverhead,\n    Gas indexed newGasOverhead\n);\n</code></pre> Parameters <p><code>oldGasOverhead</code> Gas</p> <p>Previous overhead value.</p> <p><code>newGasOverhead</code> Gas</p> <p>New overhead value.</p>"},{"location":"products/messaging/reference/relayer-contract/#wormholerelayerupdated","title":"WormholeRelayerUpdated","text":"<p>Emitted when the Delivery Provider's associated Wormhole Relayer address is updated. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event WormholeRelayerUpdated(\n    address coreRelayer\n);\n</code></pre> Parameters <p><code>coreRelayer</code> address</p> <p>New Wormhole Relayer contract address on this chain.</p>"},{"location":"products/messaging/reference/relayer-contract/#assetconversionbufferupdated","title":"AssetConversionBufferUpdated","text":"<p>Emitted when the Delivery Provider's asset conversion buffer is updated. (Defined in DeliveryProviderGovernance.sol)</p> <pre><code>event AssetConversionBufferUpdated(\n    uint16 targetChain,\n    uint16 buffer,\n    uint16 bufferDenominator\n);\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID whose buffer settings changed.</p> <p><code>buffer</code> uint16</p> <p>Buffer numerator.</p> <p><code>bufferDenominator</code> uint16</p> <p>Buffer denominator.</p>"},{"location":"products/messaging/reference/relayer-contract/#functions","title":"Functions","text":""},{"location":"products/messaging/reference/relayer-contract/#sendpayloadtoevm","title":"sendPayloadToEvm","text":"<p>Publishes an instruction for the default delivery provider to relay a payload to an EVM target. Must be called with <code>msg.value == quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)</code>. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function sendPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    TargetNative receiverValue,\n    Gas gasLimit\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>targetAddress</code> address</p> <p>Contract on the destination chain (must implement <code>IWormholeReceiver</code>).</p> <p><code>payload</code> bytes</p> <p>Bytes delivered to <code>targetAddress</code>.</p> <p><code>receiverValue</code> TargetNative</p> <p>Value (destination chain Wei) to forward to <code>targetAddress</code>.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit for calling <code>targetAddress</code>.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#sendpayloadtoevm-with-refund","title":"sendPayloadToEvm (with refund)","text":"<p>Same as above, but sends any refund to refundAddress on refundChain. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function sendPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    TargetNative receiverValue,\n    Gas gasLimit,\n    uint16 refundChain,\n    address refundAddress\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>targetAddress</code> address</p> <p>Contract on the destination chain (must implement <code>IWormholeReceiver</code>).</p> <p><code>payload</code> bytes</p> <p>Bytes delivered to <code>targetAddress</code>.</p> <p><code>receiverValue</code> TargetNative</p> <p>Value (destination chain Wei) to forward to <code>targetAddress</code>.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit for calling <code>targetAddress</code>.</p> <p><code>refundChain</code> uint16</p> <p>Wormhole chain ID where refunds should be sent.</p> <p><code>refundAddress</code> address</p> <p>Address on <code>refundChain</code> to receive refunds.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#sendvaastoevm-with-refund","title":"sendVaasToEvm (with refund)","text":"<p>Publishes an instruction (default delivery provider) to relay a payload and additional VAAs. Refunds go to <code>refundAddress</code> on <code>refundChain</code>. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function sendVaasToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    TargetNative receiverValue,\n    Gas gasLimit,\n    VaaKey[] memory vaaKeys,\n    uint16 refundChain,\n    address refundAddress\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>targetAddress</code> address</p> <p>Contract on the destination chain (must implement <code>IWormholeReceiver</code>).</p> <p><code>payload</code> bytes</p> <p>Bytes delivered to <code>targetAddress</code>.</p> <p><code>receiverValue</code> TargetNative</p> <p>Value (destination chain Wei) to forward to <code>targetAddress</code>.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit for calling <code>targetAddress</code>.</p> <p><code>vaaKeys</code> VaaKey[]</p> <p>Extra Wormhole messages (VAAs) to deliver along with <code>payload</code>.</p> <p><code>refundChain</code> uint16</p> <p>Wormhole chain ID where any refund will be sent.</p> <p><code>refundAddress</code> address</p> <p>Address on <code>refundChain</code> that receives any refund.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#sendtoevm-messagekeys","title":"sendToEvm (MessageKeys)","text":"<p>Publishes an instruction using a specific delivery provider, optionally attaching extra receiver value funded on the source chain and arbitrary MessageKeys (e.g., VAAs or other supported keys). (Defined in WormholeRelayerSend.sol)</p> <pre><code>function sendToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    TargetNative receiverValue,\n    LocalNative paymentForExtraReceiverValue,\n    Gas gasLimit,\n    uint16 refundChain,\n    address refundAddress,\n    address deliveryProviderAddress,\n    MessageKey[] memory messageKeys,\n    uint8 consistencyLevel\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>targetAddress</code> address</p> <p>Contract on the destination chain (must implement <code>IWormholeReceiver</code>).</p> <p><code>payload</code> bytes</p> <p>Bytes delivered to <code>targetAddress</code>.</p> <p><code>receiverValue</code> TargetNative Value (destination chain Wei) to forward to <code>targetAddress</code>.</p> <p><code>paymentForExtraReceiverValue</code> LocalNative</p> <p>Extra source chain amount. The delivery provider converts this to destination native and adds it to <code>receiverValue</code>.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit for calling <code>targetAddress</code> on the destination chain.</p> <p><code>refundChain</code> uint16</p> <p>Wormhole chain ID where any refund will be sent.</p> <p><code>refundAddress</code> address</p> <p>Address on <code>refundChain</code> that receives any refund.</p> <p><code>deliveryProviderAddress</code> address</p> <p>Chosen delivery provider (must implement <code>IDeliveryProvider</code>).</p> <p><code>messageKeys</code> MessageKey[]</p> <p>External messages to deliver (e.g., VAAs). Each key\u2019s <code>keyType</code> must be supported by the delivery provider; otherwise the call reverts.</p> <p><code>consistencyLevel</code> uint8</p> <p>Wormhole publishing consistency (e.g., instant vs. finalized) used when emitting the delivery instruction.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#send-messagekeys-generic","title":"send (MessageKeys, generic)","text":"<p>Generic chain-agnostic form (addresses are Wormhole-formatted bytes32, and execution params are encoded). (Defined in WormholeRelayerSend.sol)</p> <pre><code>function send(\n    uint16 targetChain,\n    bytes32 targetAddress,\n    bytes memory payload,\n    TargetNative receiverValue,\n    LocalNative paymentForExtraReceiverValue,\n    bytes memory encodedExecutionParameters,\n    uint16 refundChain,\n    bytes32 refundAddress,\n    address deliveryProviderAddress,\n    MessageKey[] memory messageKeys,\n    uint8 consistencyLevel\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>targetAddress</code> bytes32</p> <p>Wormhole-formatted 32-byte address of the destination contract.</p> <p><code>payload</code> bytes</p> <p>Bytes delivered to <code>targetAddress</code>.</p> <p><code>receiverValue</code> TargetNative</p> <p>Amount of destination chain native (e.g., Wei) forwarded to <code>targetAddress</code>.</p> <p><code>paymentForExtraReceiverValue</code> LocalNative</p> <p>Extra source chain native to be converted by the delivery provider and added to <code>receiverValue</code>.</p> <p><code>encodedExecutionParameters</code> bytes</p> <p>Versioned execution params for the target chain (e.g., for EVM use <code>encodeEvmExecutionParamsV1(EvmExecutionParamsV1(gasLimit))</code>).</p> <p><code>refundChain</code> uint16</p> <p>Wormhole chain ID where any refund will be sent.</p> <p><code>refundAddress</code> bytes32</p> <p>Wormhole-formatted address on <code>refundChain</code> that receives any refund.</p> <p><code>deliveryProviderAddress</code> address</p> <p>Chosen delivery provider (must implement <code>IDeliveryProvider</code>).</p> <p><code>messageKeys</code> MessageKey[]</p> <p>External messages to deliver (e.g., VAAs). Each key\u2019s <code>keyType</code> must be supported by the delivery provider.</p> <p><code>consistencyLevel</code> uint8</p> <p>Wormhole publishing consistency used when emitting the delivery instruction.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the published delivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#resendtoevm","title":"resendToEvm","text":"<p>Requests a previously published delivery instruction to be redelivered (EVM convenience). (Defined in WormholeRelayerSend.sol)</p> <pre><code>function resendToEvm(\n    VaaKey memory deliveryVaaKey,\n    uint16 targetChain,\n    TargetNative newReceiverValue,\n    Gas newGasLimit,\n    address newDeliveryProviderAddress\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>deliveryVaaKey</code> VaaKey</p> <p>Identifies the original delivery instruction VAA.</p> <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID where the message should be redelivered.</p> <p><code>newReceiverValue</code> TargetNative</p> <p>Updated value sent to the target contract.</p> <p><code>newGasLimit</code> Gas</p> <p>Updated gas limit for the target call.</p> <p><code>newDeliveryProviderAddress</code> address</p> <p>Delivery provider to use for the redelivery.</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the redelivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#resend-generic","title":"resend (generic)","text":"<p>Generic redelivery (chain-agnostic execution params). (Defined in WormholeRelayerSend.sol)</p> <pre><code>function resend(\n    VaaKey memory deliveryVaaKey,\n    uint16 targetChain,\n    TargetNative newReceiverValue,\n    bytes memory newEncodedExecutionParameters,\n    address newDeliveryProviderAddress\n) external payable returns (uint64 sequence)\n</code></pre> Parameters <p><code>deliveryVaaKey</code> VaaKey</p> <p>Identifies the original delivery instruction VAA.</p> <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID where the message should be redelivered.</p> <p><code>newReceiverValue</code> TargetNative</p> <p>Updated value to forward to the target contract on the destination chain.</p> <p><code>newEncodedExecutionParameters</code> bytes</p> <p>Versioned, chain-specific execution params for the redelivery (e.g., for EVM use <code>encodeEvmExecutionParamsV1(EvmExecutionParamsV1(gasLimit))</code>).</p> <p><code>newDeliveryProviderAddress</code> address</p> <p>Delivery provider to use for the redelivery (must implement <code>IDeliveryProvider</code>).</p> Returns <p><code>sequence</code> uint64</p> <p>Sequence number of the redelivery instruction.</p>"},{"location":"products/messaging/reference/relayer-contract/#quoteevmdeliveryprice-default-provider","title":"quoteEVMDeliveryPrice (default provider)","text":"<p>Returns the price and refund-per-gas info for an EVM delivery using the default provider. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function quoteEVMDeliveryPrice(\n    uint16 targetChain,\n    TargetNative receiverValue,\n    Gas gasLimit\n) external view returns (LocalNative nativePriceQuote, GasPrice targetChainRefundPerGasUnused)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>receiverValue</code> TargetNative</p> <p>Amount of destination chain Wei that will be forwarded to the target contract.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit that will be used to call the target contract.</p> Returns <p><code>nativePriceQuote</code> LocalNative</p> <p>Source chain price to request the delivery.</p> <p><code>targetChainRefundPerGasUnused</code> GasPrice</p> <p>Refund rate per unused gas on target chain.</p>"},{"location":"products/messaging/reference/relayer-contract/#quoteevmdeliveryprice-explicit-provider","title":"quoteEVMDeliveryPrice (explicit provider)","text":"<p>Same as above, but quotes using a given provider. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function quoteEVMDeliveryPrice(\n    uint16 targetChain,\n    TargetNative receiverValue,\n    Gas gasLimit,\n    address deliveryProviderAddress\n) external view returns (LocalNative nativePriceQuote, GasPrice targetChainRefundPerGasUnused)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>receiverValue</code> TargetNative</p> <p>Amount of destination chain Wei to forward to the target contract.</p> <p><code>gasLimit</code> Gas</p> <p>Gas limit to call the target contract with.</p> <p><code>deliveryProviderAddress</code> address</p> <p>Address of the chosen provider (implements <code>IDeliveryProvider</code>).</p> Returns <p><code>nativePriceQuote</code> LocalNative</p> <p>Source chain price to request this delivery.</p> <p><code>targetChainRefundPerGasUnused</code> GasPrice</p> <p>Refund rate per unit of unused gas on the destination chain.</p>"},{"location":"products/messaging/reference/relayer-contract/#quotedeliveryprice-generic","title":"quoteDeliveryPrice (generic)","text":"<p>Generic quote (versioned execution params), returning price and provider's encoded execution info. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function quoteDeliveryPrice(\n    uint16 targetChain,\n    TargetNative receiverValue,\n    bytes memory encodedExecutionParameters,\n    address deliveryProviderAddress\n) external view returns (LocalNative nativePriceQuote, bytes memory encodedExecutionInfo)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>receiverValue</code> TargetNative</p> <p>Amount of destination chain Wei to forward to the target contract.</p> <p><code>encodedExecutionParameters</code> bytes</p> <p>Versioned execution parameters (e.g., for <code>EVM_V1</code>, encodes the gas limit).</p> <p><code>deliveryProviderAddress</code> address</p> <p>Address of the chosen provider (implements <code>IDeliveryProvider</code>).</p> Returns <p><code>nativePriceQuote</code> LocalNative</p> <p>Source chain price to request this delivery.</p> <p><code>encodedExecutionInfo</code> bytes</p> <p>Provider's encoded execution info (e.g., for <code>EVM_V1</code>, includes gas limit and refund-per-gas).</p>"},{"location":"products/messaging/reference/relayer-contract/#quotenativeforchain","title":"quoteNativeForChain","text":"<p>Converts a source chain amount into extra value that will be delivered on the target chain. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function quoteNativeForChain(\n    uint16 targetChain,\n    LocalNative currentChainAmount,\n    address deliveryProviderAddress\n) external view returns (TargetNative targetChainAmount)\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>Wormhole chain ID of the destination chain.</p> <p><code>currentChainAmount</code> LocalNative</p> <p>Amount paid on the source chain to fund extra receiver value.</p> <p><code>deliveryProviderAddress</code> address</p> <p>Address of the chosen provider (implements <code>IDeliveryProvider</code>).</p> Returns <p><code>targetChainAmount</code> TargetNative</p> <p>Extra destination chain Wei that will be added to the call's value.</p>"},{"location":"products/messaging/reference/relayer-contract/#getdefaultdeliveryprovider","title":"getDefaultDeliveryProvider","text":"<p>Returns the current default delivery provider address. (Defined in WormholeRelayerSend.sol)</p> <pre><code>function getDefaultDeliveryProvider() external view returns (address deliveryProvider)\n</code></pre> Returns <p><code>deliveryProvider</code> address</p> <p>Address of the default <code>IDeliveryProvider</code> on this chain.</p>"},{"location":"products/messaging/reference/relayer-contract/#deliver","title":"deliver","text":"<p>Called by a delivery provider to execute a delivery on the target chain. (Defined in WormholeRelayerDelivery.sol)</p> <pre><code>function deliver(\n    bytes[] memory encodedVMs,\n    bytes memory encodedDeliveryVAA,\n    address payable relayerRefundAddress,\n    bytes memory deliveryOverrides\n) external payable\n</code></pre> Parameters <p><code>encodedVMs</code> ++\"bytes[]\"+</p> <p>Signed Wormhole messages to relay.</p> <p><code>encodedDeliveryVAA</code> bytes</p> <p>Signed WormholeRelayer instruction VAA.</p> <p><code>relayerRefundAddress</code> address payable</p> <p>Address to receive any relayer refund.</p> <p><code>deliveryOverrides</code> bytes</p> <p>Optional encoded overrides (or empty).</p>"},{"location":"products/messaging/reference/relayer-contract/#deliveryattempted","title":"deliveryAttempted","text":"<p>Checks whether a delivery attempt has been made for a given hash. (Defined in WormholeRelayerBase.sol)</p> <pre><code>function deliveryAttempted(bytes32 deliveryHash) external view returns (bool attempted)\n</code></pre> Parameters <p><code>deliveryHash</code> bytes32</p> <p>Hash of the delivery VAA.</p> Returns <p><code>attempted</code> bool</p> <p><code>true</code> if a success or failure block was recorded for this hash.</p>"},{"location":"products/messaging/reference/relayer-contract/#deliverysuccessblock","title":"deliverySuccessBlock","text":"<p>Block number when a delivery was successfully executed. (Defined in WormholeRelayerBase.sol)</p> <pre><code>function deliverySuccessBlock(bytes32 deliveryHash) external view returns (uint256 blockNumber)\n</code></pre> Parameters <p><code>deliveryHash</code> bytes32</p> <p>Hash of the delivery VAA.</p> Returns <p><code>blockNumber</code> uint256</p> <p>Block number where the delivery was marked successful (0 if never successful).</p>"},{"location":"products/messaging/reference/relayer-contract/#deliveryfailureblock","title":"deliveryFailureBlock","text":"<p>Block number of the latest failed delivery attempt. (Defined in WormholeRelayerBase.sol)</p> <pre><code>function deliveryFailureBlock(bytes32 deliveryHash) external view returns (uint256 blockNumber)\n</code></pre> Parameters <p><code>deliveryHash</code> bytes32</p> <p>Hash of the delivery VAA.</p> Returns <p><code>blockNumber</code> uint256</p> <p>Block number of the most recent failed attempt (0 if none).</p>"},{"location":"products/messaging/reference/relayer-contract/#getregisteredwormholerelayercontract","title":"getRegisteredWormholeRelayerContract","text":"<p>Returns the registered Wormhole Relayer contract address (wormhole format) for a given chain ID. (Defined in WormholeRelayerBase.sol)</p> <pre><code>function getRegisteredWormholeRelayerContract(uint16 chainId) external view returns (bytes32)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>Wormhole chain ID.</p> Returns <p><code>address</code> bytes32</p> <p>Wormhole-formatted address of the relayer contract registered for <code>chainId</code> (zero if none).</p>"},{"location":"products/messaging/reference/relayer-contract/#registerwormholerelayercontract","title":"registerWormholeRelayerContract","text":"<p>Registers a Wormhole Relayer contract deployed on another chain (governance VM required). (Defined in WormholeRelayerGovernance.sol)</p> <pre><code>function registerWormholeRelayerContract(bytes memory encodedVm) external\n</code></pre> Parameters <p><code>encodedVm</code> bytes</p> <p>Signed governance VM that encodes the <code>foreignChainId</code> and <code>foreignContractAddress</code>.</p>"},{"location":"products/messaging/reference/relayer-contract/#setdefaultdeliveryprovider","title":"setDefaultDeliveryProvider","text":"<p>Sets the default delivery provider via a governance VM. (Defined in WormholeRelayerGovernance.sol)</p> <pre><code>function setDefaultDeliveryProvider(bytes memory encodedVm) external\n</code></pre> Parameters <p><code>encodedVm</code> bytes</p> <p>Signed governance VM that encodes the new provider address.</p>"},{"location":"products/messaging/reference/relayer-contract/#submitcontractupgrade","title":"submitContractUpgrade","text":"<p>Upgrades the Wormhole Relayer contract to a new implementation (governance VM required). (Defined in WormholeRelayerGovernance.sol)</p> <pre><code>function submitContractUpgrade(bytes memory encodedVm) external\n</code></pre> Parameters <p><code>encodedVm</code> bytes</p> <p>Signed governance VM that encodes the new implementation address.</p>"},{"location":"products/messaging/reference/relayer-contract/#errors","title":"Errors","text":""},{"location":"products/messaging/reference/relayer-contract/#invaliddeliveryvaa","title":"InvalidDeliveryVaa","text":"<p>Thrown when the delivery VAA fails <code>parseAndVerifyVM</code>. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#invalidemitter","title":"InvalidEmitter","text":"<p>Emitted when the VAA emitter is not the registered Wormhole Relayer for the source chain. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#insufficientrelayerfunds","title":"InsufficientRelayerFunds","text":"<p>Reverts if <code>msg.value</code> is less than the required execution + refund budget on the target chain. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#targetchainisnotthischain","title":"TargetChainIsNotThisChain","text":"<p>Reverts when the instruction's <code>targetChain</code> does not match the current chain. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#messagekeyslengthdoesnotmatchmessageslength","title":"MessageKeysLengthDoesNotMatchMessagesLength","text":"<p>Reverts when the provided message keys do not match the number of delivered messages. (Used in WormholeRelayerDelivery.sol), defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#vaakeysdonotmatchvaas","title":"VaaKeysDoNotMatchVaas","text":"<p>Reverts when described VAAs don't match the actual VAAs delivered. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#invalidoverridegaslimit","title":"InvalidOverrideGasLimit","text":"<p>Reverts if a redelivery override sets a gas limit lower than the original. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#invalidoverridereceivervalue","title":"InvalidOverrideReceiverValue","text":"<p>Reverts if a redelivery override sets a receiver value lower than the original. (Used in WormholeRelayerDelivery.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#invalidmsgvalue","title":"InvalidMsgValue","text":"<p>Reverts when msg.value does not equal <code>wormholeMessageFee</code> + <code>deliveryQuote</code> + <code>paymentForExtraReceiverValue</code>. (Used in WormholeRelayerBase.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#reentrantdelivery","title":"ReentrantDelivery","text":"<p>Reverts on re-entrant calls to relayer entrypoints guarded by <code>nonReentrant</code>. (Used in WormholeRelayerBase.sol, defined in IWormholeRelayerTyped.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#callernotapprovedaddress-msgsender","title":"CallerNotApproved(address msgSender)","text":"<p>Custom error declared for access checks. (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#priceiszerouint16-chain","title":"PriceIsZero(uint16 chain)","text":"<p>Reverts if a required price value for a chain is zero during quoting/conversion. (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#overflowuint256-value-uint256-max","title":"Overflow(uint256 value, uint256 max)","text":"<p>Reverts when an internal quote exceeds a type's allowed maximum (e.g., gas overhead/price bounds). (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#maxrefundgreaterthangaslimitcostuint256-maxrefund-uint256-gaslimitcost","title":"MaxRefundGreaterThanGasLimitCost(uint256 maxRefund, uint256 gasLimitCost)","text":"<p>Declared to guard refund limits vs. gas limit cost. (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#maxrefundgreaterthangaslimitcostonsourcechainuint256-maxrefund-uint256-gaslimitcost","title":"MaxRefundGreaterThanGasLimitCostOnSourceChain(uint256 maxRefund, uint256 gasLimitCost)","text":"<p>Declared to guard source chain refund limits vs. gas limit cost. (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#exceedsmaximumbudgetuint16-targetchain-uint256-exceedingvalue-uint256-maximumbudget","title":"ExceedsMaximumBudget(uint16 targetChain, uint256 exceedingValue, uint256 maximumBudget)","text":"<p>Reverts when required target-chain Wei (receiver value + gas) exceeds that chain's configured maximum budget. (Defined in DeliveryProvider.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#chainidiszero","title":"ChainIdIsZero()","text":"<p>Reverts if an update is attempted with <code>chainId = 0</code>. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#gaspriceiszero","title":"GasPriceIsZero()","text":"<p>Reverts if a price update sets gas price to zero. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#nativecurrencypriceiszero","title":"NativeCurrencyPriceIsZero()","text":"<p>Reverts if a price update sets native currency price to zero. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#failedtoinitializeimplementationstring-reason","title":"FailedToInitializeImplementation(string reason)","text":"<p>Reverts if the implementation's <code>initialize()</code> delegatecall fails during upgrade/setup. (Defined in DeliveryProviderGovernance.sol and DeliveryProviderSetup.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#wrongchainid","title":"WrongChainId()","text":"<p>Reverts when an operation is invoked with a chainId that doesn't match the contract's configured chain. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#addressiszero","title":"AddressIsZero()","text":"<p>Reverts if a zero address is provided where a nonzero address is required (e.g., ownership handoff). (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#callermustbependingowner","title":"CallerMustBePendingOwner()","text":"<p>Reverts if <code>confirmOwnershipTransferRequest</code> is called by an address other than <code>pendingOwner</code>. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#callermustbeowner","title":"CallerMustBeOwner()","text":"<p>Reverts on functions guarded by <code>onlyOwner</code> when <code>msg.sender</code> is not the owner. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#callermustbeownerorpricingwallet","title":"CallerMustBeOwnerOrPricingWallet()","text":"<p>Reverts on functions guarded by <code>onlyOwnerOrPricingWallet</code> when caller is neither. (Defined in DeliveryProviderGovernance.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#implementationalreadyinitialized","title":"ImplementationAlreadyInitialized()","text":"<p>Reverts if <code>initialize()</code> is called on an implementation that was already initialized. (Defined in DeliveryProviderImplementation.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#implementationaddressiszero","title":"ImplementationAddressIsZero()","text":"<p>Reverts if <code>setup()</code> is called with a zero implementation address. (Defined in DeliveryProviderSetup.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#unexpectedexecutioninfoversion","title":"UnexpectedExecutionInfoVersion","text":"<p>Reverts when the <code>executionInfoVersion</code> in the delivery VAA does not match the expected version. (Defined in WormholeRelayerDelivery.sol)</p>"},{"location":"products/messaging/reference/relayer-contract/#versionmismatchoverride","title":"VersionMismatchOverride","text":"<p>Reverts when the override's <code>executionInfoVersion</code> does not match the original delivery's version. (Defined in WormholeRelayerDelivery.sol)</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/","title":"Create Cross-Chain Messaging Contracts","text":"<p> Source code on GitHub</p> <p>Wormhole's cross-chain messaging allows smart contracts to interact seamlessly across multiple blockchains. This enables developers to build decentralized applications that leverage the strengths of different networks, whether it's Avalanche, Celo, Ethereum, or beyond. In this tutorial, we'll explore using Wormhole's Solidity SDK to create cross-chain contracts to send and receive messages across chains.</p> <p>Wormhole's messaging infrastructure simplifies data transmission, event triggering, and transaction initiation across blockchains. In this tutorial, we'll guide you through a simple yet powerful hands-on demonstration that showcases this practical capability. We'll deploy contracts on two Testnets\u2014Avalanche Fuji and Celo Alfajores\u2014and send messages from one chain to another. This tutorial is perfect for those new to cross-chain development and seeking hands-on experience with Wormhole's powerful toolkit.</p> <p>By the end of this tutorial, you will have not only built a fully functioning cross-chain message sender and receiver using Solidity but also developed a comprehensive understanding of how to interact with the Wormhole relayer, manage cross-chain costs, and ensure your smart contracts are configured correctly on both source and target chains.</p> <p>This tutorial assumes a basic understanding of Solidity and smart contract development. Before diving in, it may be helpful to review the basics of Wormhole to familiarize yourself with the protocol.</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#wormhole-overview","title":"Wormhole Overview","text":"<p>We'll interact with two key Wormhole components: the Wormhole relayer and the Wormhole Core Contracts. The relayer handles cross-chain message delivery and ensures the message is accurately received on the target chain. This allows smart contracts to communicate across blockchains without developers worrying about the underlying complexity.</p> <p>Additionally, we'll rely on the Wormhole relayer to automatically determine cross-chain transaction costs and facilitate payments. This feature simplifies cross-chain development by allowing you to specify only the target chain and the message. The relayer handles the rest, ensuring that the message is transmitted with the appropriate fee.</p> <p></p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>Foundry for deploying contracts.</li> <li>Testnet tokens for Avalanche-Fuji and Celo-Alfajores to cover gas fees.</li> <li>Wallet private key.</li> </ul>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#build-cross-chain-messaging-contracts","title":"Build Cross-Chain Messaging Contracts","text":"<p>In this section, we'll deploy two smart contracts: one to send a message from Avalanche Fuji and another to receive it on Celo Alfajores. The contracts interact with the Wormhole relayer to transmit messages across chains.</p> <p>At a high level, our contracts will:</p> <ol> <li>Send a message from Avalanche to Celo using the Wormhole relayer.</li> <li>Receive and process the message on Celo, logging the content of the message.</li> </ol> <p>Before diving into the deployment steps, let's first break down key parts of the contracts.</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#sender-contract-messagesender","title":"Sender Contract: MessageSender","text":"<p>The <code>MessageSender</code> contract is responsible for quoting the cost of sending a message cross-chain and then sending that message. </p> <p>Key functions include:</p> <ul> <li><code>quoteCrossChainCost</code>: Calculates the cost of delivering a message to the target chain using the Wormhole relayer.</li> <li><code>sendMessage</code>: Encodes the message and sends it to the target chain and contract address using the Wormhole relayer.</li> </ul> <p>Here's the core of the contract:</p> <pre><code>    function sendMessage(\n        uint16 targetChain,\n        address targetAddress,\n        string memory message\n    ) external payable {\n        uint256 cost = quoteCrossChainCost(targetChain);\n\n        require(\n            msg.value &gt;= cost,\n            \"Insufficient funds for cross-chain delivery\"\n        );\n\n        wormholeRelayer.sendPayloadToEvm{value: cost}(\n            targetChain,\n            targetAddress,\n            abi.encode(message, msg.sender),\n            0,\n            GAS_LIMIT\n        );\n    }\n</code></pre> <p>You can find the full code for the <code>MessageSender.sol</code> below.</p> MessageSender.sol <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IWormholeRelayer.sol\";\n\ncontract MessageSender {\n    IWormholeRelayer public wormholeRelayer;\n    uint256 constant GAS_LIMIT = 50000;\n\n    constructor(address _wormholeRelayer) {\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\n    }\n\n    function quoteCrossChainCost(\n        uint16 targetChain\n    ) public view returns (uint256 cost) {\n        (cost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n            targetChain,\n            0,\n            GAS_LIMIT\n        );\n    }\n\n    function sendMessage(\n        uint16 targetChain,\n        address targetAddress,\n        string memory message\n    ) external payable {\n        uint256 cost = quoteCrossChainCost(targetChain);\n\n        require(\n            msg.value &gt;= cost,\n            \"Insufficient funds for cross-chain delivery\"\n        );\n\n        wormholeRelayer.sendPayloadToEvm{value: cost}(\n            targetChain,\n            targetAddress,\n            abi.encode(message, msg.sender),\n            0,\n            GAS_LIMIT\n        );\n    }\n}\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#receiver-contract-messagereceiver","title":"Receiver Contract: MessageReceiver","text":"<p>The <code>MessageReceiver</code> contract handles incoming cross-chain messages. When a message arrives, it decodes the payload and logs the message content. It ensures that only authorized contracts can send and process messages, adding an extra layer of security in cross-chain communication.</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#emitter-validation-and-registration","title":"Emitter Validation and Registration","text":"<p>In cross-chain messaging, validating the sender is essential to prevent unauthorized contracts from sending messages. The <code>isRegisteredSender</code> modifier ensures that messages can only be processed if they come from the registered contract on the source chain. This guards against malicious messages and enhances security.</p> <p>Key implementation details include:</p> <ul> <li><code>registeredSender</code>: Stores the address of the registered sender contract.</li> <li><code>setRegisteredSender</code>: Registers the sender's contract address on the source chain. It ensures that only registered contracts can send messages, preventing unauthorized senders.</li> <li><code>isRegisteredSender</code>: Restricts the processing of messages to only those from registered senders, preventing unauthorized cross-chain communication.</li> </ul> <pre><code>    mapping(uint16 =&gt; bytes32) public registeredSenders;\n\n    modifier isRegisteredSender(uint16 sourceChain, bytes32 sourceAddress) {\n        require(\n            registeredSenders[sourceChain] == sourceAddress,\n            \"Not registered sender\"\n        );\n        _;\n    }\n\n    function setRegisteredSender(\n        uint16 sourceChain,\n        bytes32 sourceAddress\n    ) public {\n        require(\n            msg.sender == registrationOwner,\n            \"Not allowed to set registered sender\"\n        );\n        registeredSenders[sourceChain] = sourceAddress;\n    }\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#message-processing","title":"Message Processing","text":"<p>The <code>receiveWormholeMessages</code> is the core function that processes the received message. It checks that the Wormhole relayer sent the message, decodes the payload, and emits an event with the message content. It is essential to verify the message sender to prevent unauthorized messages.</p> <pre><code>    function receiveWormholeMessages(\n        bytes memory payload,\n        bytes[] memory,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32\n    ) public payable override isRegisteredSender(sourceChain, sourceAddress) {\n        require(\n            msg.sender == address(wormholeRelayer),\n            \"Only the Wormhole relayer can call this function\"\n        );\n\n        // Decode the payload to extract the message\n        string memory message = abi.decode(payload, (string));\n\n        // Example use of sourceChain for logging\n        if (sourceChain != 0) {\n            emit SourceChainLogged(sourceChain);\n        }\n\n        // Emit an event with the received message\n        emit MessageReceived(message);\n    }\n</code></pre> <p>You can find the full code for the <code>MessageReceiver.sol</code> below.</p> MessageReceiver.sol <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IWormholeRelayer.sol\";\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IWormholeReceiver.sol\";\n\ncontract MessageReceiver is IWormholeReceiver {\n    IWormholeRelayer public wormholeRelayer;\n    address public registrationOwner;\n\n    // Mapping to store registered senders for each chain\n    mapping(uint16 =&gt; bytes32) public registeredSenders;\n\n    event MessageReceived(string message);\n    event SourceChainLogged(uint16 sourceChain);\n\n    constructor(address _wormholeRelayer) {\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\n        registrationOwner = msg.sender; // Set contract deployer as the owner\n    }\n\n    modifier isRegisteredSender(uint16 sourceChain, bytes32 sourceAddress) {\n        require(\n            registeredSenders[sourceChain] == sourceAddress,\n            \"Not registered sender\"\n        );\n        _;\n    }\n\n    function setRegisteredSender(\n        uint16 sourceChain,\n        bytes32 sourceAddress\n    ) public {\n        require(\n            msg.sender == registrationOwner,\n            \"Not allowed to set registered sender\"\n        );\n        registeredSenders[sourceChain] = sourceAddress;\n    }\n\n    // Update receiveWormholeMessages to include the source address check\n    function receiveWormholeMessages(\n        bytes memory payload,\n        bytes[] memory,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32\n    ) public payable override isRegisteredSender(sourceChain, sourceAddress) {\n        require(\n            msg.sender == address(wormholeRelayer),\n            \"Only the Wormhole relayer can call this function\"\n        );\n\n        // Decode the payload to extract the message\n        string memory message = abi.decode(payload, (string));\n\n        // Example use of sourceChain for logging\n        if (sourceChain != 0) {\n            emit SourceChainLogged(sourceChain);\n        }\n\n        // Emit an event with the received message\n        emit MessageReceived(message);\n    }\n}\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#deploy-contracts","title":"Deploy Contracts","text":"<p>This section will guide you through deploying the cross-chain messaging contracts on the Avalanche Fuji and Celo Alfajores Testnets. Follow these steps to get your contracts up and running.</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#deployment-tools","title":"Deployment Tools","text":"<p>We use Foundry to deploy our smart contracts. However, you can use any tool you're comfortable with, such as:</p> <ul> <li>Remix for a browser-based IDE.</li> <li>Hardhat for a more extensive JavaScript/TypeScript workflow.</li> <li>Foundry for a CLI-focused experience with built-in scripting and testing features.</li> </ul> <p>The contracts and deployment steps remain the same regardless of your preferred tool. The key is to ensure you have the necessary Testnet funds and are deploying to the right networks.</p>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#repository-setup","title":"Repository Setup","text":"<p>To get started with cross-chain messaging using Wormhole, first clone the GitHub repository. This repository includes everything you need to deploy, interact, and test the message flow between chains.</p> <p>This demo focuses on using the scripts, so it's best to take a look at them, starting with <code>deploySender.ts</code>, <code>deployReceiver.ts</code>, and <code>sendMessage.ts</code>.</p> <p>To configure the dependencies properly, run the following command:</p> <pre><code>npm install\n</code></pre> <p>The repository includes:</p> <ul> <li> <p>Two Solidity contracts:</p> <ul> <li><code>MessageSender.sol</code>: Contract that sends the cross-chain message from Avalanche.</li> <li><code>MessageReceiver.sol</code>: Contract that receives the cross-chain message on Celo.</li> </ul> </li> <li> <p>Deployment scripts located in the <code>script</code> directory:</p> <ul> <li><code>deploySender.ts</code>: Deploys the <code>MessageSender</code> contract to Avalanche.</li> <li><code>deployReceiver.ts</code>: Deploys the <code>MessageReceiver</code> contract to Celo.</li> <li><code>sendMessage.ts</code>: Sends a message from Avalanche to Celo.</li> </ul> </li> <li> <p>Configuration files and ABI JSON files for easy deployment and interaction:</p> <ul> <li><code>chains.json</code>: Configuration file that stores key information for the supported Testnets, including the Wormhole relayer addresses, RPC URLs, and chain IDs. You likely won't need to modify this file unless you're working with different networks.</li> </ul> </li> <li> <p>A dedicated <code>interfaces</code> directory inside the <code>src</code> folder for TypeScript type definitions:</p> <ul> <li><code>ChainsConfig.ts</code>: Defines the types for the <code>chains.json</code> configuration file.</li> <li><code>DeployedContracts.ts</code>: Contains types for deployed contract addresses and related information.</li> <li><code>MessageJsons.ts</code>: Includes types for ABI and bytecode JSONs used by the deployment scripts.</li> <li><code>index.ts</code>: Serves as an export aggregator for the interfaces, simplifying imports in other files.</li> </ul> </li> </ul>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#important-setup-steps","title":"Important Setup Steps","text":"<ol> <li> <p>Add your private key: Create a <code>.env</code> file in the root of the project and add your private key.</p> <pre><code>touch .env\n</code></pre> <p>Inside <code>.env</code>, add your private key in the following format:</p> <pre><code>PRIVATE_KEY=INSERT_PRIVATE_KEY\n</code></pre> </li> <li> <p>Compile the contracts: Ensure everything is set up correctly by compiling the contracts.</p> <pre><code>forge build\n</code></pre> </li> </ol> <p>The expected output should be similar to this:</p> forge build  &gt; [\u2812] Compiling...  &gt; [\u2830] Compiling 30 files with 0.8.23  [\u2814] Solc 0.8.23 finished in 2.29s Compiler run successful!"},{"location":"products/messaging/tutorials/cross-chain-contracts/#deployment-process","title":"Deployment Process","text":"<p>Both deployment scripts, <code>deploySender.ts</code> and <code>deployReceiver.ts</code>, perform the following key tasks:</p> <ol> <li> <p>Load configuration and contract details: Each script begins by loading the necessary configuration details, such as the network's RPC URL and the contract's ABI and bytecode. This information is essential for deploying the contract to the correct blockchain network.</p> <code>chains.json</code><code>deploySender.ts</code><code>deployReceiver.ts</code> <pre><code>{\n    \"chains\": [\n        {\n            \"description\": \"Avalanche testnet fuji\",\n            \"chainId\": 6,\n            \"rpc\": \"https://api.avax-test.network/ext/bc/C/rpc\",\n            \"tokenBridge\": \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\",\n            \"wormholeRelayer\": \"0xA3cF45939bD6260bcFe3D66bc73d60f19e49a8BB\",\n            \"wormhole\": \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n        },\n        {\n            \"description\": \"Celo Testnet\",\n            \"chainId\": 14,\n            \"rpc\": \"https://alfajores-forno.celo-testnet.org\",\n            \"tokenBridge\": \"0x05ca6037eC51F8b712eD2E6Fa72219FEaE74E153\",\n            \"wormholeRelayer\": \"0x306B68267Deb7c5DfCDa3619E22E9Ca39C374f84\",\n            \"wormhole\": \"0x88505117CA88e7dd2eC6EA1E13f0948db2D50D56\"\n        }\n    ]\n}\n</code></pre> <pre><code>  // Load the chain configuration from JSON\n  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  // Get the Avalanche Fuji configuration\n  const avalancheChain = chains.chains.find((chain) =&gt;\n    chain.description.includes('Avalanche testnet')\n  );\n</code></pre> <pre><code>  // Load the chain configuration from the JSON file\n  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  // Get the Celo Testnet configuration\n  const celoChain = chains.chains.find((chain) =&gt;\n    chain.description.includes('Celo Testnet')\n  );\n</code></pre> <p>Note</p> <p>The <code>chains.json</code> file contains the configuration details for the Avalanche Fuji and Celo Alfajores Testnets. You can modify this file to add more networks if needed. For a complete list of contract addresses, visit the reference page.</p> </li> <li> <p>Set up provider and wallet: The scripts establish a connection to the blockchain using a provider and create a wallet instance using a private key. This wallet is responsible for signing the deployment transaction.</p> <code>deploySender.ts</code><code>deployReceiver.ts</code> <pre><code>  const provider = new ethers.JsonRpcProvider(avalancheChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n</code></pre> <pre><code>  const provider = new ethers.JsonRpcProvider(celoChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n</code></pre> </li> <li> <p>Deploy the contract: The contract is deployed to the network specified in the configuration. Upon successful deployment, the contract address is returned, which is crucial for interacting with the contract later on.</p> <code>deploySender.ts</code><code>deployReceiver.ts</code> <pre><code>  const senderContract = await MessageSender.deploy(\n    avalancheChain.wormholeRelayer\n  );\n  await senderContract.waitForDeployment();\n</code></pre> <pre><code>  const receiverContract = await MessageReceiver.deploy(\n    celoChain.wormholeRelayer\n  );\n  await receiverContract.waitForDeployment();\n</code></pre> </li> <li> <p>Register the <code>MessageSender</code> on the target chain: After you deploy the <code>MessageReceiver</code> contract on the Celo Alfajores network, the sender contract address from Avalanche Fuji needs to be registered. This ensures that only messages from the registered <code>MessageSender</code> contract are processed.</p> <p>This additional step is essential to enforce emitter validation, preventing unauthorized senders from delivering messages to the <code>MessageReceiver</code> contract</p> <pre><code>  // Retrieve the address of the MessageSender from the deployedContracts.json file\n  const avalancheSenderAddress = deployedContracts.avalanche?.MessageSender;\n  if (!avalancheSenderAddress) {\n    throw new Error('Avalanche MessageSender address not found.');\n  }\n\n  // Define the source chain ID for Avalanche Fuji\n  const sourceChainId = 6;\n\n  // Call setRegisteredSender on the MessageReceiver contract\n  const tx = await (receiverContract as any).setRegisteredSender(\n    sourceChainId,\n    ethers.zeroPadValue(avalancheSenderAddress, 32)\n  );\n  await tx.wait();\n</code></pre> </li> </ol> <p>You can find the full code for the <code>deploySender.ts</code> and <code>deployReceiver.ts</code> below.</p> deploySender.ts <pre><code>import { ethers } from 'ethers';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport {\n  ChainsConfig,\n  DeployedContracts,\n  MessageSenderJson,\n} from './interfaces';\n\ndotenv.config();\n\nasync function main(): Promise&lt;void&gt; {\n  // Load the chain configuration from JSON\n  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  // Get the Avalanche Fuji configuration\n  const avalancheChain = chains.chains.find((chain) =&gt;\n    chain.description.includes('Avalanche testnet')\n  );\n  if (!avalancheChain) {\n    throw new Error(\n      'Avalanche testnet configuration not found in chains.json.'\n    );\n  }\n\n  // Set up the provider and wallet\n  const provider = new ethers.JsonRpcProvider(avalancheChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n\n  // Load the ABI and bytecode of the MessageSender contract\n  const messageSenderJson: MessageSenderJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../out/MessageSender.sol/MessageSender.json'),\n      'utf8'\n    )\n  );\n\n  const { abi, bytecode } = messageSenderJson;\n\n  // Create a ContractFactory for MessageSender\n  const MessageSender = new ethers.ContractFactory(abi, bytecode, wallet);\n\n  // Deploy the contract using the Wormhole Relayer address for Avalanche Fuji\n  const senderContract = await MessageSender.deploy(\n    avalancheChain.wormholeRelayer\n  );\n  await senderContract.waitForDeployment();\n\n  console.log('MessageSender deployed to:', senderContract.target); // `target` is the address in ethers.js v6\n\n  // Update the deployedContracts.json file\n  const deployedContractsPath = path.resolve(\n    __dirname,\n    '../deploy-config/deployedContracts.json'\n  );\n  const deployedContracts: DeployedContracts = JSON.parse(\n    fs.readFileSync(deployedContractsPath, 'utf8')\n  );\n\n  deployedContracts.avalanche = {\n    MessageSender: senderContract.target as any,\n    deployedAt: new Date().toISOString(),\n  };\n\n  fs.writeFileSync(\n    deployedContractsPath,\n    JSON.stringify(deployedContracts, null, 2)\n  );\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre> deployReceiver.ts <pre><code>import { ethers } from 'ethers';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport {\n  ChainsConfig,\n  DeployedContracts,\n  MessageReceiverJson,\n} from './interfaces';\n\ndotenv.config();\n\nasync function main(): Promise&lt;void&gt; {\n  // Load the chain configuration from the JSON file\n  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  // Get the Celo Testnet configuration\n  const celoChain = chains.chains.find((chain) =&gt;\n    chain.description.includes('Celo Testnet')\n  );\n  if (!celoChain) {\n    throw new Error('Celo Testnet configuration not found.');\n  }\n\n  // Set up the provider and wallet\n  const provider = new ethers.JsonRpcProvider(celoChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n\n  // Load the ABI and bytecode of the MessageReceiver contract\n  const messageReceiverJson: MessageReceiverJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(\n        __dirname,\n        '../out/MessageReceiver.sol/MessageReceiver.json'\n      ),\n      'utf8'\n    )\n  );\n\n  const { abi, bytecode } = messageReceiverJson;\n\n  // Create a ContractFactory for MessageReceiver\n  const MessageReceiver = new ethers.ContractFactory(abi, bytecode, wallet);\n\n  // Deploy the contract using the Wormhole Relayer address for Celo Testnet\n  const receiverContract = await MessageReceiver.deploy(\n    celoChain.wormholeRelayer\n  );\n  await receiverContract.waitForDeployment();\n\n  console.log('MessageReceiver deployed to:', receiverContract.target); // `target` is the contract address in ethers.js v6\n\n  // Update the deployedContracts.json file\n  const deployedContractsPath = path.resolve(\n    __dirname,\n    '../deploy-config/deployedContracts.json'\n  );\n  const deployedContracts: DeployedContracts = JSON.parse(\n    fs.readFileSync(deployedContractsPath, 'utf8')\n  );\n\n  // Retrieve the address of the MessageSender from the deployedContracts.json file\n  const avalancheSenderAddress = deployedContracts.avalanche?.MessageSender;\n  if (!avalancheSenderAddress) {\n    throw new Error('Avalanche MessageSender address not found.');\n  }\n\n  // Define the source chain ID for Avalanche Fuji\n  const sourceChainId = 6;\n\n  // Call setRegisteredSender on the MessageReceiver contract\n  const tx = await (receiverContract as any).setRegisteredSender(\n    sourceChainId,\n    ethers.zeroPadValue(avalancheSenderAddress, 32)\n  );\n  await tx.wait();\n\n  console.log(\n    `Registered MessageSender (${avalancheSenderAddress}) for Avalanche chain (${sourceChainId})`\n  );\n\n  deployedContracts.celo = {\n    MessageReceiver: receiverContract.target as any,\n    deployedAt: new Date().toISOString(),\n  };\n\n  fs.writeFileSync(\n    deployedContractsPath,\n    JSON.stringify(deployedContracts, null, 2)\n  );\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#deploy-the-sender-contract","title":"Deploy the Sender Contract","text":"<p>The sender contract will handle quoting and sending messages cross-chain.</p> <ol> <li> <p>Run the following command to deploy the sender contract:</p> <pre><code>npm run deploy:sender\n</code></pre> </li> <li> <p>Once deployed, the contract address will be displayed. You may check the contract on the Avalanche Fuji Explorer.</p> </li> </ol> npm run deploy:sender  &gt; wormhole-cross-chain@1.0.0 deploy:sender  &gt; node script/deploySender.ts  MessageSender deployed to: 0xf5c474f335fFf617fA6FD04DCBb17E20ee0cEfb1"},{"location":"products/messaging/tutorials/cross-chain-contracts/#deploy-the-receiver-contract","title":"Deploy the Receiver Contract","text":"<p>The receiver contract listens for cross-chain messages and logs them when received.</p> <ol> <li> <p>Deploy the receiver contract with this command:</p> <pre><code>npm run deploy:receiver\n</code></pre> </li> <li> <p>After deployment, note down the contract address. You may check the contract on the Celo Alfajores Explorer.</p> </li> </ol>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#send-a-cross-chain-message","title":"Send a Cross-Chain Message","text":"<p>Now that both the sender and receiver contracts are deployed, let's move on to the next exciting step: sending a cross-chain message from Avalanche Fuji to Celo Alfajores.</p> <p>In this example, we will use the <code>sendMessage.ts</code> script to transmit a message from the sender contract on Avalanche to the receiver contract on Celo. The script uses Ethers.js to interact with the deployed contracts, calculate the cross-chain cost dynamically, and handle the transaction.</p> <p>Let's break down the script step by step.</p> <ol> <li> <p>Load configuration files:</p> <ol> <li><code>chains.json</code>: Contains details about the supported Testnet chains, such as RPC URLs and relayer addresses.</li> <li><code>deployedContracts.json</code>: Stores the addresses of the deployed sender and receiver contracts. This file is dynamically updated when contracts are deployed, but users can also manually add their own deployed contract addresses if needed.</li> </ol> <pre><code>  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  const deployedContracts: DeployedContracts = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/deployedContracts.json'),\n      'utf8'\n    )\n  );\n</code></pre> </li> <li> <p>Configure the provider and signer: The script first reads the chain configurations and extracts the contract addresses. One essential step in interacting with a blockchain is setting up a provider. A provider is your connection to the blockchain network. It allows your script to interact with the blockchain, retrieve data, and send transactions. In this case, we're using a JSON-RPC provider.</p> <p>Next, we configure the wallet, which will be used to sign transactions. The wallet is created using the private key and the provider. This ensures that all transactions sent from this wallet are broadcast to the Avalanche Fuji network.</p> <pre><code>  const provider = new ethers.JsonRpcProvider(avalancheChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n</code></pre> <p>After setting up the wallet, the script loads the ABI for the <code>MessageSender.sol</code> contract and creates an instance of it.</p> <pre><code>  const messageSenderJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../out/MessageSender.sol/MessageSender.json'),\n      'utf8'\n    )\n  );\n</code></pre> </li> <li> <p>Set up the message details: The next part of the script defines the target chain (Celo) and the target address (the receiver contract on Celo).</p> <pre><code>  const targetChain = 14; // Wormhole chain ID for Celo Alfajores\n  const targetAddress = deployedContracts.celo.MessageReceiver;\n</code></pre> <p>You can customize the message that will be sent across chains.</p> <pre><code>  const message = 'Hello from Avalanche to Celo!';\n</code></pre> </li> <li> <p>Estimate cross-chain cost: Before sending the message, we dynamically calculate the cross-chain cost using the <code>quoteCrossChainCost</code> function.</p> <pre><code>  const txCost = await MessageSender.quoteCrossChainCost(targetChain);\n</code></pre> <p>This ensures that the transaction includes enough funds to cover the gas fees for the cross-chain message.</p> </li> <li> <p>Send a message: With everything set up, the message is sent using the <code>sendMessage</code> function.</p> <pre><code>  const tx = await MessageSender.sendMessage(\n    targetChain,\n    targetAddress,\n    message,\n    {\n      value: txCost,\n    }\n  );\n</code></pre> <p>After sending, the script waits for the transaction to be confirmed.</p> <pre><code>  await tx.wait();\n</code></pre> </li> <li> <p>Run the script: To send the message, run the following command:</p> <pre><code>npm run send:message\n</code></pre> </li> </ol> <p>If everything is set up correctly, the message will be sent from the Avalanche Fuji Testnet to the Celo Alfajores Testnet. You can monitor the transaction and verify that the message was received on Celo using the Wormhole Explorer.</p> <p>The console should output something similar to this:</p> npm run send:message  &gt; wormhole-cross-chain@1.0.0 send:message  &gt; node script/sendMessage.ts Sender Contract Address: 0xD720BFF42a0960cfF1118454A907a44dB358f2b1 Receiver Contract Address: 0x692550997C252cC5044742D1A2BD91E4f4b46D39 ... Transaction sent, waiting for confirmation... ... Message sent! Transaction hash:         0x9d359a66ba42baced80062229c0b02b4f523fe304aff3473dcf53117aee13fb6 You may see the transaction status on the Wormhole Explorer:         https://wormholescan.io/#/tx/0x9d359a66ba42baced80062229c0b02b4f523fe304aff3473dcf53117aee13fb6?network=TESTNET <p>You can find the full code for the <code>sendMessage.ts</code> below.</p> sendMessage.ts <pre><code>import { ethers } from 'ethers';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport { ChainsConfig, DeployedContracts } from './interfaces';\n\ndotenv.config();\n\nasync function main(): Promise&lt;void&gt; {\n  // Load the chain configuration and deployed contract addresses\n  const chains: ChainsConfig = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/chains.json'),\n      'utf8'\n    )\n  );\n\n  const deployedContracts: DeployedContracts = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../deploy-config/deployedContracts.json'),\n      'utf8'\n    )\n  );\n\n  console.log(\n    'Sender Contract Address: ',\n    deployedContracts.avalanche.MessageSender\n  );\n  console.log(\n    'Receiver Contract Address: ',\n    deployedContracts.celo.MessageReceiver\n  );\n  console.log('...');\n\n  // Get the Avalanche Fuji configuration\n  const avalancheChain = chains.chains.find((chain) =&gt;\n    chain.description.includes('Avalanche testnet')\n  );\n\n  if (!avalancheChain) {\n    throw new Error(\n      'Avalanche testnet configuration not found in chains.json.'\n    );\n  }\n\n  // Set up the provider and wallet\n  const provider = new ethers.JsonRpcProvider(avalancheChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);\n\n  // Load the ABI of the MessageSender contract\n  const messageSenderJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(__dirname, '../out/MessageSender.sol/MessageSender.json'),\n      'utf8'\n    )\n  );\n\n  const abi = messageSenderJson.abi;\n\n  // Create a contract instance for MessageSender\n  const MessageSender = new ethers.Contract(\n    deployedContracts.avalanche.MessageSender, // Automatically use the deployed address\n    abi,\n    wallet\n  );\n\n  // Define the target chain and target address (the Celo receiver contract)\n  const targetChain = 14; // Wormhole chain ID for Celo Alfajores\n  const targetAddress = deployedContracts.celo.MessageReceiver;\n\n  // The message you want to send\n  const message = 'Hello from Avalanche to Celo!';\n\n  // Dynamically quote the cross-chain cost\n  const txCost = await MessageSender.quoteCrossChainCost(targetChain);\n\n  // Send the message (make sure to send enough gas in the transaction)\n  const tx = await MessageSender.sendMessage(\n    targetChain,\n    targetAddress,\n    message,\n    {\n      value: txCost,\n    }\n  );\n\n  console.log('Transaction sent, waiting for confirmation...');\n  await tx.wait();\n  console.log('...');\n\n  console.log('Message sent! Transaction hash:', tx.hash);\n  console.log(\n    `You may see the transaction status on the Wormhole Explorer: https://wormholescan.io/#/tx/${tx.hash}?network=TESTNET`\n  );\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-contracts/#conclusion","title":"Conclusion","text":"<p>You're now fully equipped to build cross-chain contracts using the Wormhole protocol! With this tutorial, you've learned how to:</p> <ul> <li>Deploy sender and receiver contracts on different testnets.</li> <li>Send a cross-chain message from one blockchain to another.</li> <li>Monitor the status of your cross-chain transactions using Wormholescan and the Wormhole Solidity SDK.</li> </ul> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/","title":"Create Cross-Chain Token Transfer Contracts","text":"<p> Source code on GitHub</p> <p>In this tutorial, you'll learn how to create a simple cross-chain token transfer system using the Wormhole protocol via the Wormhole Solidity SDK. We'll guide you through building and deploying smart contracts that enable seamless token transfers of IERC-20 tokens between blockchains. Whether you're a developer looking to explore cross-chain applications or just interested in the Wormhole protocol, this guide will help you understand the fundamentals.</p> <p>By the end of this tutorial, you'll have a working cross-chain token transfer system built with the powerful tools provided by the Wormhole Solidity SDK, which you can further customize and integrate into your projects.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>Foundry for deploying contracts.</li> <li>Testnet tokens for Avalanche-Fuji and Celo-Alfajores to cover gas fees.</li> <li>USDC Testnet tokens on Avalanche-Fuji or/and Celo-Alfajores for cross-chain transfer.</li> <li>Wallet private key.</li> </ul>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#valid-tokens-for-transfer","title":"Valid Tokens for Transfer","text":"<p>It's important to note that this tutorial leverages Wormhole's TokenBridge to transfer tokens between chains. So, the tokens you'd like to transfer must have an attestation on the <code>TokenBridge</code> contract of the target blockchain.</p> <p>To simplify this process, we've included a tool for verifying if a token has an attestation on the target chain. This tool uses the <code>wrappedAsset</code> function from the <code>TokenBridge</code> contract. If the token has an attestation, the <code>wrappedAsset</code> function returns the address of the wrapped token on the target chain; otherwise, it returns the zero address.</p> Check Token Attestation <ol> <li> <p>Clone the repository and navigate to the project directory:</p> <pre><code>git clone https://github.com/wormhole-foundation/demo-cross-chain-token-transfer.git\ncd cross-chain-token-transfers\n</code></pre> </li> <li> <p>Install the dependencies:</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Run the script to check token attestation:</p> <pre><code>npm run verify\n</code></pre> </li> <li> <p>Follow the prompts:</p> <ol> <li>Enter the RPC URL of the target chain.</li> <li>Enter the <code>TokenBridge</code> contract address on the target chain.</li> <li>Enter the token contract address on the source chain.</li> <li>Enter the source chain ID.</li> </ol> </li> <li> <p>The expected output when the token has an attestation:</p> <p> npm run verify  &gt; cross-chain-token-transfer@1.0.0 verify  &gt; npx ts-node script/check-attestation.ts  Enter the TARGET chain RPC URL: https://alfajores-forno.celo-testnet.org  Enter the WTT contract address on the TARGET chain: 0x05...E153  Enter the token contract address on the SOURCE chain: 0x54...bc65  Enter the SOURCE chain ID: 6  The token is attested on the target chain. Wrapped token address: 0xDDB349c976cA2C873644F21f594767Eb5390C831 </p> </li> </ol> <p>Using this tool ensures that you only attempt to transfer tokens with verified attestations, avoiding any potential issues during the cross-chain transfer process.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#project-setup","title":"Project Setup","text":"<p>Let's start by initializing a new Foundry project. This will set up a basic structure for our smart contracts.</p> <ol> <li> <p>Open your terminal and run the following command to initialize a new Foundry project:</p> <pre><code>forge init cross-chain-token-transfers\n</code></pre> <p>This will create a new directory named <code>cross-chain-token-transfers</code> with a basic project structure. This also initializes a new <code>git</code> repository.</p> </li> <li> <p>Navigate into the newly created project directory:</p> <pre><code>cd cross-chain-token-transfers\n</code></pre> </li> <li> <p>Install the Wormhole Solidity SDK:</p> <pre><code>forge install wormhole-foundation/wormhole-solidity-sdk\n</code></pre> <p>To ease development, we'll use the Wormhole Solidity SDK, which provides useful helpers for cross-chain development. This SDK includes the <code>TokenSender</code> and <code>TokenReceiver</code> abstract classes, which simplify sending and receiving tokens across chains.</p> </li> </ol>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#build-cross-chain-contracts","title":"Build Cross-Chain Contracts","text":"<p>In this section, we'll build two smart contracts to send tokens from a source chain and receive them on a target chain. These contracts will interact with the Wormhole protocol to facilitate secure and seamless cross-chain token transfers.</p> <p>At a high level, our contracts will:</p> <ol> <li>Send tokens from one blockchain to another using the Wormhole protocol.</li> <li>Receive and process the tokens on the target chain, ensuring they are correctly transferred to the intended recipient.</li> </ol> <p>Before diving into the contract implementation steps, let\u2019s first break down the key parts of the contracts.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#sender-contract-crosschainsender","title":"Sender Contract: CrossChainSender","text":"<p>The <code>CrossChainSender</code> contract calculates the cost of sending tokens across chains and then facilitates the actual token transfer.</p> <p>Let's start writing the <code>CrossChainSender</code> contract:</p> <ol> <li> <p>Create a new file named <code>CrossChainSender.sol</code> in the <code>/src</code> directory:</p> <pre><code>touch src/CrossChainSender.sol\n</code></pre> </li> <li> <p>Open the file. First, we'll start with the imports and the contract setup:</p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"lib/wormhole-solidity-sdk/src/WormholeRelayerSDK.sol\";\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IERC20.sol\";\n\ncontract CrossChainSender is TokenSender {\n    uint256 constant GAS_LIMIT = 250_000;\n\n    constructor(\n        address _wormholeRelayer,\n        address _tokenBridge,\n        address _wormhole\n    ) TokenBase(_wormholeRelayer, _tokenBridge, _wormhole) {}\n}\n</code></pre> <p>This sets up the basic structure of the contract, including the necessary imports and the constructor that initializes the contract with the Wormhole-related addresses.</p> <p>With the contract structure in place, define the following functions within its body to enable multichain token transfers.</p> </li> <li> <p>Next, let's add a function that estimates the cost of sending tokens across chains:</p> <pre><code>    function quoteCrossChainDeposit(\n        uint16 targetChain\n    ) public view returns (uint256 cost) {\n        uint256 deliveryCost;\n        (deliveryCost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n            targetChain,\n            0,\n            GAS_LIMIT\n        );\n\n        cost = deliveryCost + wormhole.messageFee();\n    }\n</code></pre> <p>This function, <code>quoteCrossChainDeposit</code>, helps calculate the cost of transferring tokens to a different chain. It factors in the delivery cost and the cost of publishing a message via the Wormhole protocol.</p> </li> <li> <p>Finally, we'll add the function that sends the tokens across chains:</p> <pre><code>    function sendCrossChainDeposit(\n        uint16 targetChain,\n        address targetReceiver,\n        address recipient,\n        uint256 amount,\n        address token\n    ) public payable {\n        uint256 cost = quoteCrossChainDeposit(targetChain);\n        require(\n            msg.value == cost,\n            \"msg.value must equal quoteCrossChainDeposit(targetChain)\"\n        );\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        bytes memory payload = abi.encode(recipient);\n\n        sendTokenWithPayloadToEvm(\n            targetChain,\n            targetReceiver,\n            payload,\n            0,\n            GAS_LIMIT,\n            token,\n            amount\n        );\n    }\n</code></pre> <p>This <code>sendCrossChainDeposit</code> function is where the actual token transfer happens. It sends the tokens to the recipient on the target chain using the Wormhole protocol.</p> </li> </ol> <p>Here\u2019s a breakdown of what happens in each step of the <code>sendCrossChainDeposit</code> function:</p> <ol> <li> <p>Cost calculation: The function starts by calculating the cost of the cross-chain transfer using <code>quoteCrossChainDeposit</code>(<code>targetChain</code>). This cost includes both the delivery fee and the Wormhole message fee. The <code>sendCrossChainDeposit</code> function then checks that the user has sent the correct amount of Ether to cover this cost (<code>msg.value</code>).</p> </li> <li> <p>Token transfer to contract: The next step is to transfer the specified amount of tokens from the user to the contract itself using <code>IERC-20(token).transferFrom(msg.sender, address(this), amount)</code>. This ensures that the contract has custody of the tokens before initiating the cross-chain transfer.</p> </li> <li> <p>Payload encoding: The recipient's address on the target chain is encoded into a payload using <code>abi.encode(recipient)</code>. This payload will be sent along with the token transfer, so the target contract knows who should receive the tokens on the destination chain.</p> </li> <li> <p>Cross-chain transfer: The <code>sendTokenWithPayloadToEvm</code> function is called to initiate the cross-chain token transfer. This function does the following:</p> <ul> <li>Specifies the <code>targetChain</code> (the Wormhole chain ID of the destination blockchain).</li> <li>Sends the <code>targetReceiver</code> contract address on the target chain that will receive the tokens.</li> <li>Attaches the payload containing the recipient's address.</li> <li>Sets the <code>GAS_LIMIT</code> for the transaction.</li> <li>Passes the token <code>address</code> and <code>amount</code> to transfer.</li> </ul> <p>This triggers the Wormhole protocol to handle the cross-chain messaging and token transfer, ensuring the tokens and payload reach the correct destination on the target chain.</p> </li> </ol> <p>You can find the complete code for the <code>CrossChainSender.sol</code> below.</p> MessageSender.sol <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"lib/wormhole-solidity-sdk/src/WormholeRelayerSDK.sol\";\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IERC20.sol\";\n\ncontract CrossChainSender is TokenSender {\n    uint256 constant GAS_LIMIT = 250_000;\n\n    constructor(\n        address _wormholeRelayer,\n        address _tokenBridge,\n        address _wormhole\n    ) TokenBase(_wormholeRelayer, _tokenBridge, _wormhole) {}\n\n    // Function to get the estimated cost for cross-chain deposit\n    function quoteCrossChainDeposit(\n        uint16 targetChain\n    ) public view returns (uint256 cost) {\n        uint256 deliveryCost;\n        (deliveryCost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n            targetChain,\n            0,\n            GAS_LIMIT\n        );\n\n        cost = deliveryCost + wormhole.messageFee();\n    }\n\n    // Function to send tokens and payload across chains\n    function sendCrossChainDeposit(\n        uint16 targetChain,\n        address targetReceiver,\n        address recipient,\n        uint256 amount,\n        address token\n    ) public payable {\n        uint256 cost = quoteCrossChainDeposit(targetChain);\n        require(\n            msg.value == cost,\n            \"msg.value must equal quoteCrossChainDeposit(targetChain)\"\n        );\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        bytes memory payload = abi.encode(recipient);\n\n        sendTokenWithPayloadToEvm(\n            targetChain,\n            targetReceiver,\n            payload,\n            0,\n            GAS_LIMIT,\n            token,\n            amount\n        );\n    }\n}\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#receiver-contract-crosschainreceiver","title":"Receiver Contract: CrossChainReceiver","text":"<p>The <code>CrossChainReceiver</code> contract is designed to handle the receipt of tokens and payloads from another blockchain. It ensures that the tokens are correctly transferred to the designated recipient on the receiving chain.</p> <p>Let's start writing the <code>CrossChainReceiver</code> contract:</p> <ol> <li> <p>Create a new file named <code>CrossChainReceiver.sol</code> in the <code>/src</code> directory:</p> <pre><code>touch src/CrossChainReceiver.sol\n</code></pre> </li> <li> <p>Open the file. First, we'll start with the imports and the contract setup:</p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"lib/wormhole-solidity-sdk/src/WormholeRelayerSDK.sol\";\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IERC20.sol\";\n\ncontract CrossChainReceiver is TokenReceiver {\n    // The Wormhole relayer and registeredSenders are inherited from the Base.sol contract\n\n    constructor(\n        address _wormholeRelayer,\n        address _tokenBridge,\n        address _wormhole\n    ) TokenBase(_wormholeRelayer, _tokenBridge, _wormhole) {}\n}\n</code></pre> <p>Similar to the <code>CrossChainSender</code> contract, this sets up the basic structure of the contract, including the necessary imports and the constructor that initializes the contract with the Wormhole-related addresses.</p> </li> <li> <p>Next, let's add a function inside the contract to handle receiving the payload and tokens:</p> <pre><code>    function receivePayloadAndTokens(\n        bytes memory payload,\n        TokenReceived[] memory receivedTokens,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32 // deliveryHash\n    )\n        internal\n        override\n        onlyWormholeRelayer\n        isRegisteredSender(sourceChain, sourceAddress)\n    {\n        require(receivedTokens.length == 1, \"Expected 1 token transfer\");\n\n        // Decode the recipient address from the payload\n        address recipient = abi.decode(payload, (address));\n\n        // Transfer the received tokens to the intended recipient\n        IERC20(receivedTokens[0].tokenAddress).transfer(\n            recipient,\n            receivedTokens[0].amount\n        );\n    }\n</code></pre> <p>This <code>receivePayloadAndTokens</code> function processes the tokens and payload sent from another chain, decodes the recipient address, and transfers the tokens to them using the Wormhole protocol. This function also validates the emitter (<code>sourceAddress</code>) to ensure the message comes from a trusted sender.</p> <p>This function ensures that:</p> <ul> <li>It only processes one token transfer at a time.</li> <li>The <code>sourceAddress</code> is checked against a list of registered senders using the <code>isRegisteredSender</code> modifier, which verifies if the emitter is allowed to send tokens to this contract.</li> <li>The recipient address is decoded from the payload, and the received tokens are transferred to them using the ERC-20 interface.</li> </ul> </li> </ol> <p>After we call <code>sendTokenWithPayloadToEvm</code> on the source chain, the message goes through the standard Wormhole message lifecycle. Once a VAA (Verifiable Action Approval) is available, the delivery provider will call <code>receivePayloadAndTokens</code> on the target chain and target address specified, with the appropriate inputs.</p> Understanding the <code>TokenReceived</code> Struct <p>Let\u2019s delve into the fields provided to us in the <code>TokenReceived</code> struct:</p> <pre><code>struct TokenReceived {\n    bytes32 tokenHomeAddress;\n    uint16 tokenHomeChain;\n    address tokenAddress;\n    uint256 amount;\n    uint256 amountNormalized;\n}\n</code></pre> <ul> <li> <p><code>tokenHomeAddress</code>: The original address of the token on its native chain. This is the same as the token field in the call to <code>sendTokenWithPayloadToEvm</code> unless the original token sent is a Wormhole-wrapped token. In that case, this will be the address of the original version of the token (on its native chain) in Wormhole address format (left-padded with 12 zeros).</p> </li> <li> <p><code>tokenHomeChain</code>: The Wormhole chain ID corresponding to the home address above. This will typically be the source chain unless the original token sent is a Wormhole-wrapped asset, which will be the chain of the unwrapped version of the token.</p> </li> <li> <p><code>tokenAddress</code>: The address of the IERC-20 token on the target chain that has been transferred to this contract. If <code>tokenHomeChain</code> equals the target chain, this will be the same as <code>tokenHomeAddress</code>; otherwise, it will be the Wormhole-wrapped version of the token sent.</p> </li> <li> <p><code>amount</code>: The token amount sent to you with the same units as the original token. Since <code>TokenBridge</code> only sends with eight decimals of precision, if your token has 18 decimals, this will be the \"amount\" you sent, rounded down to the nearest multiple of 10^10.</p> </li> <li> <p><code>amountNormalized</code>: The amount of token divided by (1 if decimals \u2264 8, else 10^(decimals - 8)).</p> </li> </ul> <p>You can find the complete code for the <code>CrossChainReceiver.sol</code> contract below:</p> CrossChainReceiver.sol <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"lib/wormhole-solidity-sdk/src/WormholeRelayerSDK.sol\";\nimport \"lib/wormhole-solidity-sdk/src/interfaces/IERC20.sol\";\n\ncontract CrossChainReceiver is TokenReceiver {\n    // The Wormhole relayer and registeredSenders are inherited from the Base.sol contract\n\n    constructor(\n        address _wormholeRelayer,\n        address _tokenBridge,\n        address _wormhole\n    ) TokenBase(_wormholeRelayer, _tokenBridge, _wormhole) {}\n\n    // Function to receive the cross-chain payload and tokens with emitter validation\n    function receivePayloadAndTokens(\n        bytes memory payload,\n        TokenReceived[] memory receivedTokens,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32 // deliveryHash\n    )\n        internal\n        override\n        onlyWormholeRelayer\n        isRegisteredSender(sourceChain, sourceAddress)\n    {\n        require(receivedTokens.length == 1, \"Expected 1 token transfer\");\n\n        // Decode the recipient address from the payload\n        address recipient = abi.decode(payload, (address));\n\n        // Transfer the received tokens to the intended recipient\n        IERC20(receivedTokens[0].tokenAddress).transfer(\n            recipient,\n            receivedTokens[0].amount\n        );\n    }\n}\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#deploy-the-contracts","title":"Deploy the Contracts","text":"<p>Now that you've written the <code>CrossChainSender</code> and <code>CrossChainReceiver</code> contracts, it's time to deploy them to your chosen networks.</p> <ol> <li> <p>Set up deployment configuration: Before deploying, you must configure the networks and the deployment environment. This information is stored in a configuration file.</p> <ol> <li> <p>Create a directory named deploy-config in the root of your project:</p> <pre><code>mkdir deploy-config\n</code></pre> </li> <li> <p>Create a <code>config.json</code> file in the <code>deploy-config</code> directory:</p> <pre><code>touch deploy-config/config.json\n</code></pre> </li> <li> <p>Open the <code>config.json</code> file and add the following configuration:</p> <pre><code>{\n    \"chains\": [\n        {\n            \"description\": \"Avalanche testnet fuji\",\n            \"chainId\": 6,\n            \"rpc\": \"https://api.avax-test.network/ext/bc/C/rpc\",\n            \"tokenBridge\": \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\",\n            \"wormholeRelayer\": \"0xA3cF45939bD6260bcFe3D66bc73d60f19e49a8BB\",\n            \"wormhole\": \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n        },\n        {\n            \"description\": \"Celo Testnet\",\n            \"chainId\": 14,\n            \"rpc\": \"https://alfajores-forno.celo-testnet.org\",\n            \"tokenBridge\": \"0x05ca6037eC51F8b712eD2E6Fa72219FEaE74E153\",\n            \"wormholeRelayer\": \"0x306B68267Deb7c5DfCDa3619E22E9Ca39C374f84\",\n            \"wormhole\": \"0x88505117CA88e7dd2eC6EA1E13f0948db2D50D56\"\n        }\n    ]\n}\n</code></pre> <p>This file specifies the details for each chain where you plan to deploy your contracts, including the RPC URL, the <code>TokenBridge</code> address, the Wormhole relayer, and the Wormhole Core contract.</p> <p>For a complete list of Wormhole contract addresses on various blockchains, refer to the Wormhole Contract Addresses.</p> <p>Note</p> <p>You can add your desired chains to this file by specifying the required fields for each chain. In this example, we use the Avalanche Fuji and Celo Alfajores Testnets.</p> </li> <li> <p>Create a <code>contracts.json</code> file in the <code>deploy-config</code> directory:</p> <pre><code>echo '{}' &gt; deploy-config/contracts.json\n</code></pre> <p>This file can be left blank initially. It will be automatically updated with the deployed contract addresses after a successful deployment.</p> </li> </ol> </li> <li> <p>Set up your Node.js environment: You'll need to set up your Node.js environment to run the deployment script.</p> <ol> <li> <p>Initialize a Node.js project:</p> <pre><code>npm init -y\n</code></pre> </li> <li> <p>Create a <code>.gitignore</code> file to ensure your private key isn't accidentally exposed or committed to version control:</p> </li> </ol> <pre><code>echo \".env\" &gt;&gt; .gitignore\n</code></pre> <ol> <li> <p>Install the necessary dependencies:</p> <pre><code>npm install ethers dotenv readline-sync @types/readline-sync\n</code></pre> <p>These dependencies are required for the deployment script to work properly.</p> </li> </ol> </li> <li> <p>Compile your smart contracts: Compile your smart contracts using Foundry. This ensures that your contracts are up-to-date and ready for deployment.</p> <ul> <li> <p>Run the following command to compile your contracts:</p> <pre><code>forge build\n</code></pre> <p>This will generate the necessary ABI and bytecode files in a directory named <code>/out</code>.</p> </li> </ul> <p>The expected output should be similar to this:</p> <p> forge build  &gt; [\u2812] Compiling...  &gt; [\u2830] Compiling 30 files with 0.8.23  [\u2814] Solc 0.8.23 finished in 2.29s Compiler run successful! </p> </li> <li> <p>Write the deployment script: You\u2019ll need a script to automate the deployment of your contracts. Let\u2019s create the deployment script.</p> <ol> <li> <p>Create a new file named <code>deploy.ts</code> in the <code>/script</code> directory:</p> <pre><code>touch script/deploy.ts\n</code></pre> </li> <li> <p>Open the file and load imports and configuration:</p> <pre><code>import { BytesLike, ethers } from 'ethers';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as dotenv from 'dotenv';\nimport readlineSync from 'readline-sync';\n\ndotenv.config();\n</code></pre> <p>Import the required libraries and modules to interact with Ethereum, handle file paths, load environment variables, and enable user interaction via the terminal.</p> </li> <li> <p>Define interfaces to use for chain configuration and contract deployment:</p> <pre><code>interface ChainConfig {\n  description: string;\n  chainId: number;\n  rpc: string;\n  tokenBridge: string;\n  wormholeRelayer: string;\n  wormhole: string;\n}\n\ninterface DeployedContracts {\n  [chainId: number]: {\n    networkName: string;\n    CrossChainSender?: string;\n    CrossChainReceiver?: string;\n    deployedAt: string;\n  };\n}\n</code></pre> <p>These interfaces define the structure of the chain configuration and the contract deployment details.</p> </li> <li> <p>Load and select the chains for deployment:</p> <pre><code>function loadConfig(): ChainConfig[] {\n  const configPath = path.resolve(__dirname, '../deploy-config/config.json');\n  return JSON.parse(fs.readFileSync(configPath, 'utf8')).chains;\n}\n\nfunction selectChain(\n  chains: ChainConfig[],\n  role: 'source' | 'target'\n): ChainConfig {\n  console.log(`\\nSelect the ${role.toUpperCase()} chain:`);\n  chains.forEach((chain, index) =&gt; {\n    console.log(`${index + 1}: ${chain.description}`);\n  });\n\n  const chainIndex =\n    readlineSync.questionInt(\n      `\\nEnter the number for the ${role.toUpperCase()} chain: `\n    ) - 1;\n  return chains[chainIndex];\n}\n</code></pre> <p>The <code>loadConfig</code> function reads the chain configuration from the <code>config.json</code> file, and the <code>selectChain</code> function allows the user to choose the source and target chains for deployment interactively. The user is prompted in the terminal to select which chains to use, making the process interactive and user-friendly.</p> </li> <li> <p>Define the main function for deployment and load the chain configuration:</p> <pre><code>async function main() {\n  const chains = loadConfig();\n\n  const sourceChain = selectChain(chains, 'source');\n  const targetChain = selectChain(chains, 'target');\n</code></pre> <ul> <li>The <code>main</code> function is the entry point for the deployment script.</li> <li>We then call the <code>loadConfig</code> function we previously defined to load the chain configuration from the <code>config.json</code> file.</li> </ul> </li> <li> <p>Set up provider and wallet: </p> <pre><code>  const sourceProvider = new ethers.JsonRpcProvider(sourceChain.rpc);\n  const targetProvider = new ethers.JsonRpcProvider(targetChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, sourceProvider);\n</code></pre> <p>The scripts establish a connection to the blockchain using a provider and create a wallet instance using a private key. This wallet is responsible for signing the deployment transaction on the source chain.</p> </li> <li> <p>Read the compiled contracts:</p> <pre><code>  const senderJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(\n        __dirname,\n        '../out/CrossChainSender.sol/CrossChainSender.json'\n      ),\n      'utf8'\n    )\n  );\n</code></pre> <ul> <li>This code reads the <code>CrossChainSender.json</code> file, the compiled output of the <code>CrossChainSender.sol</code> contract.</li> <li>The file is in the <code>../out/</code> directory, which contains the ABI (Application Binary Interface) and bytecode generated during contract compilation.</li> <li>It uses the <code>fs.readFileSync</code> function to read the file and <code>JSON.parse</code> to convert the file contents (in JSON format) into a JavaScript object.</li> </ul> </li> <li> <p>Extract the contract ABI and bytecode:</p> <pre><code>  const abi = senderJson.abi;\n  const bytecode = senderJson.bytecode;\n</code></pre> <ul> <li>ABI (Application Binary Interface): Defines the structure of the contract\u2019s functions, events, and data types, allowing the front end to interact with the contract on the blockchain.</li> <li>Bytecode: This is the compiled machine code that will be deployed to the blockchain to create the contract.</li> </ul> </li> <li> <p>Create the Contract Factory:</p> <pre><code>  const CrossChainSenderFactory = new ethers.ContractFactory(\n    abi,\n    bytecode,\n    wallet\n  );\n</code></pre> <ul> <li><code>ethers.ContractFactory</code>: Creates a new contract factory using the ABI, bytecode, and a wallet (representing the signer). The contract factory is responsible for deploying instances of the contract to the blockchain.</li> <li>This is a crucial step for deploying the contract since the factory will create and deploy the <code>CrossChainSender</code> contract.</li> </ul> </li> <li> <p>Deploy the <code>CrossChainSender</code> and <code>CrossChainReceiver</code> contracts:</p> <code>CrossChainSender</code><code>CrossChainReceiver</code> <pre><code>  try {\n    const senderContract = await CrossChainSenderFactory.deploy(\n      sourceChain.wormholeRelayer,\n      sourceChain.tokenBridge,\n      sourceChain.wormhole\n    );\n    await senderContract.waitForDeployment();\n</code></pre> <pre><code>    const targetWallet = new ethers.Wallet(\n      process.env.PRIVATE_KEY!,\n      targetProvider\n    );\n    const receiverJson = JSON.parse(\n      fs.readFileSync(\n        path.resolve(\n          __dirname,\n          '../out/CrossChainReceiver.sol/CrossChainReceiver.json'\n        ),\n        'utf8'\n      )\n    );\n    const CrossChainReceiverFactory = new ethers.ContractFactory(\n      receiverJson.abi,\n      receiverJson.bytecode,\n      targetWallet\n    );\n\n    const receiverContract = await CrossChainReceiverFactory.deploy(\n      targetChain.wormholeRelayer,\n      targetChain.tokenBridge,\n      targetChain.wormhole\n    );\n    await receiverContract.waitForDeployment();\n</code></pre> <p>Both functions deploy the respective contracts to the selected chains.</p> <p>For the <code>CrossChainReceiver</code> contract:</p> <ul> <li>It defines the wallet related to the target chain.</li> <li>The logic reads the compiled ABI and bytecode from the JSON file generated during compilation.</li> <li>It creates a new contract factory using the ABI, bytecode, and wallet.</li> <li>It deploys the contract to the selected chain passing in the Wormhole Relayer, <code>TokenBridge</code>, and Wormhole addresses.</li> </ul> </li> <li> <p>Save the deployed contract addresses:</p> <code>senderAddress</code><code>receiverAddress</code> <pre><code>    const senderAddress = (senderContract as ethers.Contract).target;\n    console.log(\n      `CrossChainSender on ${sourceChain.description}: ${senderAddress}`\n    );\n</code></pre> <pre><code>    const receiverAddress = (receiverContract as ethers.Contract).target;\n    console.log(\n      `CrossChainReceiver on ${targetChain.description}: ${receiverAddress}`\n    );\n</code></pre> <p>You may display the deployed contract addresses in the terminal or save them to a JSON file for future reference.</p> </li> <li> <p>Register the <code>CrossChainSender</code> address on the target chain:</p> <pre><code>    const CrossChainReceiverContract = new ethers.Contract(\n      receiverAddress,\n      receiverJson.abi,\n      targetWallet\n    );\n\n    const tx = await CrossChainReceiverContract.setRegisteredSender(\n      sourceChain.chainId,\n      ethers.zeroPadValue(senderAddress as BytesLike, 32)\n    );\n\n    await tx.wait();\n</code></pre> <p>After you deploy the <code>CrossChainReceiver</code> contract on the target network, the sender contract address from the source chain needs to be registered. This ensures that only messages from the registered <code>CrossChainSender</code> contract are processed.</p> <p>This additional step is essential to enforce emitter validation, preventing unauthorized senders from delivering messages to the <code>CrossChainReceiver</code> contract.</p> </li> <li> <p>Save the deployment details:</p> Save Deployment Details Example <pre><code>    const deployedContractsPath = path.resolve(\n      __dirname,\n      '../deploy-config/contracts.json'\n    );\n    let deployedContracts: DeployedContracts = {};\n\n    if (fs.existsSync(deployedContractsPath)) {\n      deployedContracts = JSON.parse(\n        fs.readFileSync(deployedContractsPath, 'utf8')\n      );\n    }\n\n    // Update the contracts.json file:\n    // If a contract already exists on a chain, update its address; otherwise, add a new entry.\n    if (!deployedContracts[sourceChain.chainId]) {\n      deployedContracts[sourceChain.chainId] = {\n        networkName: sourceChain.description,\n        deployedAt: new Date().toISOString(),\n      };\n    }\n    deployedContracts[sourceChain.chainId].CrossChainSender =\n      senderAddress.toString();\n    deployedContracts[sourceChain.chainId].deployedAt =\n      new Date().toISOString();\n\n    if (!deployedContracts[targetChain.chainId]) {\n      deployedContracts[targetChain.chainId] = {\n        networkName: targetChain.description,\n        deployedAt: new Date().toISOString(),\n      };\n    }\n    deployedContracts[targetChain.chainId].CrossChainReceiver =\n      receiverAddress.toString();\n    deployedContracts[targetChain.chainId].deployedAt =\n      new Date().toISOString();\n\n    // Save the updated contracts.json file\n    fs.writeFileSync(\n      deployedContractsPath,\n      JSON.stringify(deployedContracts, null, 2)\n    );\n</code></pre> <p>Add your desired logic to save the deployed contract addresses in a JSON file (or another format). This will be important later when transferring tokens, as you'll need these addresses to interact with the deployed contracts.</p> </li> <li> <p>Handle errors and finalize the script:</p> <pre><code>  } catch (error: any) {\n    if (error.code === 'INSUFFICIENT_FUNDS') {\n      console.error(\n        'Error: Insufficient funds for deployment. Please make sure your wallet has enough funds to cover the gas fees.'\n      );\n    } else {\n      console.error('An unexpected error occurred:', error.message);\n    }\n    process.exit(1);\n  }\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre> <p>The try-catch block wraps the deployment logic to catch any errors that may occur.</p> <ul> <li>If the error is due to insufficient funds, it logs a clear message about needing more gas fees.</li> <li>For any other errors, it logs the specific error message to help with debugging.</li> </ul> <p>The <code>process.exit(1)</code> ensures that the script exits with a failure status code if any error occurs.</p> </li> </ol> <p>You can find the full code for the <code>deploy.ts</code> file below:</p> deploy.ts <pre><code>import { BytesLike, ethers } from 'ethers';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as dotenv from 'dotenv';\nimport readlineSync from 'readline-sync';\n\ndotenv.config();\n\ninterface ChainConfig {\n  description: string;\n  chainId: number;\n  rpc: string;\n  tokenBridge: string;\n  wormholeRelayer: string;\n  wormhole: string;\n}\n\ninterface DeployedContracts {\n  [chainId: number]: {\n    networkName: string;\n    CrossChainSender?: string;\n    CrossChainReceiver?: string;\n    deployedAt: string;\n  };\n}\n\nfunction loadConfig(): ChainConfig[] {\n  const configPath = path.resolve(__dirname, '../deploy-config/config.json');\n  return JSON.parse(fs.readFileSync(configPath, 'utf8')).chains;\n}\n\nfunction selectChain(\n  chains: ChainConfig[],\n  role: 'source' | 'target'\n): ChainConfig {\n  console.log(`\\nSelect the ${role.toUpperCase()} chain:`);\n  chains.forEach((chain, index) =&gt; {\n    console.log(`${index + 1}: ${chain.description}`);\n  });\n\n  const chainIndex =\n    readlineSync.questionInt(\n      `\\nEnter the number for the ${role.toUpperCase()} chain: `\n    ) - 1;\n  return chains[chainIndex];\n}\n\nasync function main() {\n  const chains = loadConfig();\n\n  const sourceChain = selectChain(chains, 'source');\n  const targetChain = selectChain(chains, 'target');\n\n  const sourceProvider = new ethers.JsonRpcProvider(sourceChain.rpc);\n  const targetProvider = new ethers.JsonRpcProvider(targetChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, sourceProvider);\n\n  const senderJson = JSON.parse(\n    fs.readFileSync(\n      path.resolve(\n        __dirname,\n        '../out/CrossChainSender.sol/CrossChainSender.json'\n      ),\n      'utf8'\n    )\n  );\n\n  const abi = senderJson.abi;\n  const bytecode = senderJson.bytecode;\n\n  const CrossChainSenderFactory = new ethers.ContractFactory(\n    abi,\n    bytecode,\n    wallet\n  );\n\n  try {\n    const senderContract = await CrossChainSenderFactory.deploy(\n      sourceChain.wormholeRelayer,\n      sourceChain.tokenBridge,\n      sourceChain.wormhole\n    );\n    await senderContract.waitForDeployment();\n\n    // Safely access the deployed contract's address\n    const senderAddress = (senderContract as ethers.Contract).target;\n    console.log(\n      `CrossChainSender on ${sourceChain.description}: ${senderAddress}`\n    );\n\n    const targetWallet = new ethers.Wallet(\n      process.env.PRIVATE_KEY!,\n      targetProvider\n    );\n    const receiverJson = JSON.parse(\n      fs.readFileSync(\n        path.resolve(\n          __dirname,\n          '../out/CrossChainReceiver.sol/CrossChainReceiver.json'\n        ),\n        'utf8'\n      )\n    );\n    const CrossChainReceiverFactory = new ethers.ContractFactory(\n      receiverJson.abi,\n      receiverJson.bytecode,\n      targetWallet\n    );\n\n    const receiverContract = await CrossChainReceiverFactory.deploy(\n      targetChain.wormholeRelayer,\n      targetChain.tokenBridge,\n      targetChain.wormhole\n    );\n    await receiverContract.waitForDeployment();\n\n    // Safely access the deployed contract's address\n    const receiverAddress = (receiverContract as ethers.Contract).target;\n    console.log(\n      `CrossChainReceiver on ${targetChain.description}: ${receiverAddress}`\n    );\n\n    // Register the sender contract in the receiver contract\n    console.log(\n      `Registering CrossChainSender (${senderAddress}) as a valid sender in CrossChainReceiver (${receiverAddress})...`\n    );\n\n    const CrossChainReceiverContract = new ethers.Contract(\n      receiverAddress,\n      receiverJson.abi,\n      targetWallet\n    );\n\n    const tx = await CrossChainReceiverContract.setRegisteredSender(\n      sourceChain.chainId,\n      ethers.zeroPadValue(senderAddress as BytesLike, 32)\n    );\n\n    await tx.wait();\n    console.log(\n      `CrossChainSender registered as a valid sender on ${targetChain.description}`\n    );\n\n    // Load existing deployed contract addresses from contracts.json\n    const deployedContractsPath = path.resolve(\n      __dirname,\n      '../deploy-config/contracts.json'\n    );\n    let deployedContracts: DeployedContracts = {};\n\n    if (fs.existsSync(deployedContractsPath)) {\n      deployedContracts = JSON.parse(\n        fs.readFileSync(deployedContractsPath, 'utf8')\n      );\n    }\n\n    // Update the contracts.json file:\n    // If a contract already exists on a chain, update its address; otherwise, add a new entry.\n    if (!deployedContracts[sourceChain.chainId]) {\n      deployedContracts[sourceChain.chainId] = {\n        networkName: sourceChain.description,\n        deployedAt: new Date().toISOString(),\n      };\n    }\n    deployedContracts[sourceChain.chainId].CrossChainSender =\n      senderAddress.toString();\n    deployedContracts[sourceChain.chainId].deployedAt =\n      new Date().toISOString();\n\n    if (!deployedContracts[targetChain.chainId]) {\n      deployedContracts[targetChain.chainId] = {\n        networkName: targetChain.description,\n        deployedAt: new Date().toISOString(),\n      };\n    }\n    deployedContracts[targetChain.chainId].CrossChainReceiver =\n      receiverAddress.toString();\n    deployedContracts[targetChain.chainId].deployedAt =\n      new Date().toISOString();\n\n    // Save the updated contracts.json file\n    fs.writeFileSync(\n      deployedContractsPath,\n      JSON.stringify(deployedContracts, null, 2)\n    );\n  } catch (error: any) {\n    if (error.code === 'INSUFFICIENT_FUNDS') {\n      console.error(\n        'Error: Insufficient funds for deployment. Please make sure your wallet has enough funds to cover the gas fees.'\n      );\n    } else {\n      console.error('An unexpected error occurred:', error.message);\n    }\n    process.exit(1);\n  }\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre> </li> <li> <p>Add your private key: You'll need to provide your private key. It allows your deployment script to sign the transactions that deploy the smart contracts to the blockchain. Without it, the script won't be able to interact with the blockchain on your behalf.</p> <p>Create a <code>.env</code> file in the root of the project and add your private key:</p> <pre><code>touch .env\n</code></pre> <p>Inside <code>.env</code>, add your private key in the following format:</p> <pre><code>PRIVATE_KEY=INSERT_PRIVATE_KEY\n</code></pre> </li> <li> <p>Run the deployment script:</p> <ol> <li> <p>Open a terminal and run the following command:</p> <pre><code>npx ts-node script/deploy.ts\n</code></pre> <p>This will execute the deployment script, deploying both contracts to the selected chains.</p> </li> <li> <p>Check the deployment output:</p> <ul> <li>You will see the deployed contract addresses printed in the terminal if successful. The <code>contracts.json</code> file will be updated with these addresses.</li> <li>If you encounter an error, the script will provide feedback, such as insufficient funds for gas.</li> </ul> </li> </ol> </li> </ol> <p>If you followed the logic provided in the full code above, your terminal output should look something like this:</p> npx ts-node deploy.ts  &gt; cross-chain-token-transfer@1.0.0 deploy  &gt; npx ts-node script/deploy.ts  Select the SOURCE chain:  1: Avalanche testnet fuji  2: Celo Testnet  Enter the number for the SOURCE chain: 1  Select the TARGET chain:  1: Avalanche testnet fuji  2: Celo Testnet  Enter the number for the TARGET chain: 2  CrossChainSender Avalanche testnet fuji: 0x1Cac52a183D02F9002fdb37b13eC2fAB950d44E3  CrossChainReceiver Celo Testnet: 0xD720BFF42a0960cfF1118454A907a44dB358f2b1  Registering CrossChainSender (0x1Cac52a183D02F9002fdb37b13eC2fAB950d44E3) as a valid sender in CrossChainReceiver (0xD720BFF42a0960cfF1118454A907a44dB358f2b1)...  CrossChainSender registered as a valid sender on Celo Testnet"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#transfer-tokens-across-chains","title":"Transfer Tokens Across Chains","text":""},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#quick-recap","title":"Quick Recap","text":"<p>Up to this point, you've set up a new Solidity project using Foundry, developed two key contracts (<code>CrossChainSender</code> and <code>CrossChainReceiver</code>), and created a deployment script to deploy these contracts to different blockchain networks. The deployment script also saves the new contract addresses for easy reference. With everything in place, it's time to transfer tokens using the deployed contracts.</p> <p>In this step, you'll write a script to transfer tokens across chains using the <code>CrossChainSender</code> and <code>CrossChainReceiver</code> contracts you deployed earlier. This script will interact with the contracts and facilitate the cross-chain token transfer.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#transfer-script","title":"Transfer Script","text":"<ol> <li> <p>Set up the transfer script:</p> <ol> <li> <p>Create a new file named <code>transfer.ts</code> in the <code>/script</code> directory:</p> <pre><code>touch script/transfer.ts\n</code></pre> </li> <li> <p>Open the file. Start with the necessary imports, interfaces and configurations:</p> <pre><code>import { ethers } from 'ethers';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as dotenv from 'dotenv';\nimport readlineSync from 'readline-sync';\n\ndotenv.config();\n\ninterface ChainConfig {\n  description: string;\n  chainId: number;\n  rpc: string;\n  tokenBridge: string;\n  wormholeRelayer: string;\n  wormhole: string;\n}\n\ninterface DeployedContracts {\n  [chainId: number]: {\n    networkName: string;\n    CrossChainSender?: string;\n    CrossChainReceiver?: string;\n    deployedAt: string;\n  };\n}\n</code></pre> <p>These imports include the essential libraries for interacting with Ethereum, handling file paths, loading environment variables, and managing user input.</p> </li> <li> <p>Load configuration and contracts:</p> <pre><code>function loadConfig(): ChainConfig[] {\n  const configPath = path.resolve(__dirname, '../deploy-config/config.json');\n  return JSON.parse(fs.readFileSync(configPath, 'utf8')).chains;\n}\n\nfunction loadDeployedContracts(): DeployedContracts {\n  const contractsPath = path.resolve(\n    __dirname,\n    '../deploy-config/contracts.json'\n  );\n  if (\n    !fs.existsSync(contractsPath) ||\n    fs.readFileSync(contractsPath, 'utf8').trim() === ''\n  ) {\n    console.error(\n      'No contracts found. Please deploy contracts first before transferring tokens.'\n    );\n    process.exit(1);\n  }\n  return JSON.parse(fs.readFileSync(contractsPath, 'utf8'));\n}\n</code></pre> <p>These functions load the network and contract details that were saved during deployment.</p> </li> <li> <p>Allow users to select source and target chains:</p> <p>Refer to the deployed contracts and create logic as desired. In our example, we made this process interactive, allowing users to select the source and target chains from all the historically deployed contracts. This interactive approach helps ensure the correct chains are selected for the token transfer.</p> <pre><code>function selectSourceChain(deployedContracts: DeployedContracts): {\n  chainId: number;\n  networkName: string;\n} {\n  const sourceOptions = Object.entries(deployedContracts).filter(\n    ([, contracts]) =&gt; contracts.CrossChainSender\n  );\n\n  if (sourceOptions.length === 0) {\n    console.error('No source chains available with CrossChainSender deployed.');\n    process.exit(1);\n  }\n\n  console.log('\\nSelect the source chain:');\n  sourceOptions.forEach(([chainId, contracts], index) =&gt; {\n    console.log(`${index + 1}: ${contracts.networkName}`);\n  });\n\n  const selectedIndex =\n    readlineSync.questionInt(`\\nEnter the number for the source chain: `) - 1;\n  return {\n    chainId: Number(sourceOptions[selectedIndex][0]),\n    networkName: sourceOptions[selectedIndex][1].networkName,\n  };\n}\n\nfunction selectTargetChain(deployedContracts: DeployedContracts): {\n  chainId: number;\n  networkName: string;\n} {\n  const targetOptions = Object.entries(deployedContracts).filter(\n    ([, contracts]) =&gt; contracts.CrossChainReceiver\n  );\n\n  if (targetOptions.length === 0) {\n    console.error(\n      'No target chains available with CrossChainReceiver deployed.'\n    );\n    process.exit(1);\n  }\n\n  console.log('\\nSelect the target chain:');\n  targetOptions.forEach(([chainId, contracts], index) =&gt; {\n    console.log(`${index + 1}: ${contracts.networkName}`);\n  });\n\n  const selectedIndex =\n    readlineSync.questionInt(`\\nEnter the number for the target chain: `) - 1;\n  return {\n    chainId: Number(targetOptions[selectedIndex][0]),\n    networkName: targetOptions[selectedIndex][1].networkName,\n  };\n}\n</code></pre> </li> </ol> </li> <li> <p>Implement the token transfer logic:</p> <ol> <li> <p>Create the <code>main</code> function: Add the token transfer logic, including the chain and contract details, wallet and provider for the source chain, and the <code>CrossChainSender</code> contract for interaction.</p> <pre><code>async function main() {\n  const chains = loadConfig();\n  const deployedContracts = loadDeployedContracts();\n\n  // Select the source chain (only show chains with CrossChainSender deployed)\n  const { chainId: sourceChainId, networkName: sourceNetworkName } =\n    selectSourceChain(deployedContracts);\n  const sourceChain = chains.find((chain) =&gt; chain.chainId === sourceChainId)!;\n\n  // Select the target chain (only show chains with CrossChainReceiver deployed)\n  const { chainId: targetChainId, networkName: targetNetworkName } =\n    selectTargetChain(deployedContracts);\n  const targetChain = chains.find((chain) =&gt; chain.chainId === targetChainId)!;\n\n  // Set up providers and wallets\n  const sourceProvider = new ethers.JsonRpcProvider(sourceChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, sourceProvider);\n\n  // Load the ABI from the JSON file (use the compiled ABI from Forge or Hardhat)\n  const CrossChainSenderArtifact = JSON.parse(\n    fs.readFileSync(\n      path.resolve(\n        __dirname,\n        '../out/CrossChainSender.sol/CrossChainSender.json'\n      ),\n      'utf8'\n    )\n  );\n\n  const abi = CrossChainSenderArtifact.abi;\n\n  // Create the contract instance using the full ABI\n  const CrossChainSender = new ethers.Contract(\n    deployedContracts[sourceChainId].CrossChainSender!,\n    abi,\n    wallet\n  );\n</code></pre> </li> <li> <p>Ask the user for token transfer details: You'll now ask the user for the token contract address, the recipient address on the target chain, and the amount of tokens to transfer.</p> <pre><code>  const tokenAddress = readlineSync.question(\n    'Enter the token contract address: '\n  );\n  const recipientAddress = readlineSync.question(\n    'Enter the recipient address on the target chain: '\n  );\n\n  // Get the token contract\n  const tokenContractDecimals = new ethers.Contract(\n    tokenAddress,\n    [\n      'function decimals() view returns (uint8)',\n      'function approve(address spender, uint256 amount) public returns (bool)',\n    ],\n    wallet\n  );\n\n  // Fetch the token decimals\n  const decimals = await tokenContractDecimals.decimals();\n\n  // Get the amount from the user, then parse it according to the token's decimals\n  const amount = ethers.parseUnits(\n    readlineSync.question('Enter the amount of tokens to transfer: '),\n    decimals\n  );\n</code></pre> <p>This section of the script prompts the user for the token contract address and the recipient's address, fetches the token's decimal value, and parses the amount accordingly.</p> </li> <li> <p>Initiate the transfer: Finally, initiate the cross-chain transfer and log the details.</p> <pre><code>  const cost = await CrossChainSender.quoteCrossChainDeposit(targetChainId);\n\n  // Approve the CrossChainSender contract to transfer tokens on behalf of the user\n  const tokenContract = new ethers.Contract(\n    tokenAddress,\n    ['function approve(address spender, uint256 amount) public returns (bool)'],\n    wallet\n  );\n\n  const approveTx = await tokenContract.approve(\n    deployedContracts[sourceChainId].CrossChainSender!,\n    amount\n  );\n  await approveTx.wait();\n  console.log(`Approved tokens for cross-chain transfer.`);\n\n  // Initiate the cross-chain transfer\n  const transferTx = await CrossChainSender.sendCrossChainDeposit(\n    targetChainId,\n    deployedContracts[targetChainId].CrossChainReceiver!,\n    recipientAddress,\n    amount,\n    tokenAddress,\n    { value: cost } // Attach the necessary fee for cross-chain transfer\n  );\n  await transferTx.wait();\n  console.log(\n    `Transfer initiated from ${sourceNetworkName} to ${targetNetworkName}. Transaction Hash: ${transferTx.hash}`\n  );\n}\n</code></pre> <p>This part of the script first approves the token transfer, then initiates the cross-chain transfer using the <code>CrossChainSender</code> contract, and finally logs the transaction hash for the user to track.</p> </li> <li> <p>Finalize the script: Call the <code>main</code> function and handle any errors that may occur during the token transfer process.</p> <pre><code>main().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre> </li> </ol> </li> </ol> <p>You can find the full code for the <code>transfer.ts</code> file below:</p> transfer.ts <pre><code>import { ethers } from 'ethers';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as dotenv from 'dotenv';\nimport readlineSync from 'readline-sync';\n\ndotenv.config();\n\ninterface ChainConfig {\n  description: string;\n  chainId: number;\n  rpc: string;\n  tokenBridge: string;\n  wormholeRelayer: string;\n  wormhole: string;\n}\n\ninterface DeployedContracts {\n  [chainId: number]: {\n    networkName: string;\n    CrossChainSender?: string;\n    CrossChainReceiver?: string;\n    deployedAt: string;\n  };\n}\n\nfunction loadConfig(): ChainConfig[] {\n  const configPath = path.resolve(__dirname, '../deploy-config/config.json');\n  return JSON.parse(fs.readFileSync(configPath, 'utf8')).chains;\n}\n\nfunction loadDeployedContracts(): DeployedContracts {\n  const contractsPath = path.resolve(\n    __dirname,\n    '../deploy-config/contracts.json'\n  );\n  if (\n    !fs.existsSync(contractsPath) ||\n    fs.readFileSync(contractsPath, 'utf8').trim() === ''\n  ) {\n    console.error(\n      'No contracts found. Please deploy contracts first before transferring tokens.'\n    );\n    process.exit(1);\n  }\n  return JSON.parse(fs.readFileSync(contractsPath, 'utf8'));\n}\n\nfunction selectSourceChain(deployedContracts: DeployedContracts): {\n  chainId: number;\n  networkName: string;\n} {\n  const sourceOptions = Object.entries(deployedContracts).filter(\n    ([, contracts]) =&gt; contracts.CrossChainSender\n  );\n\n  if (sourceOptions.length === 0) {\n    console.error('No source chains available with CrossChainSender deployed.');\n    process.exit(1);\n  }\n\n  console.log('\\nSelect the source chain:');\n  sourceOptions.forEach(([chainId, contracts], index) =&gt; {\n    console.log(`${index + 1}: ${contracts.networkName}`);\n  });\n\n  const selectedIndex =\n    readlineSync.questionInt(`\\nEnter the number for the source chain: `) - 1;\n  return {\n    chainId: Number(sourceOptions[selectedIndex][0]),\n    networkName: sourceOptions[selectedIndex][1].networkName,\n  };\n}\n\nfunction selectTargetChain(deployedContracts: DeployedContracts): {\n  chainId: number;\n  networkName: string;\n} {\n  const targetOptions = Object.entries(deployedContracts).filter(\n    ([, contracts]) =&gt; contracts.CrossChainReceiver\n  );\n\n  if (targetOptions.length === 0) {\n    console.error(\n      'No target chains available with CrossChainReceiver deployed.'\n    );\n    process.exit(1);\n  }\n\n  console.log('\\nSelect the target chain:');\n  targetOptions.forEach(([chainId, contracts], index) =&gt; {\n    console.log(`${index + 1}: ${contracts.networkName}`);\n  });\n\n  const selectedIndex =\n    readlineSync.questionInt(`\\nEnter the number for the target chain: `) - 1;\n  return {\n    chainId: Number(targetOptions[selectedIndex][0]),\n    networkName: targetOptions[selectedIndex][1].networkName,\n  };\n}\n\nasync function main() {\n  const chains = loadConfig();\n  const deployedContracts = loadDeployedContracts();\n\n  // Select the source chain (only show chains with CrossChainSender deployed)\n  const { chainId: sourceChainId, networkName: sourceNetworkName } =\n    selectSourceChain(deployedContracts);\n  const sourceChain = chains.find((chain) =&gt; chain.chainId === sourceChainId)!;\n\n  // Select the target chain (only show chains with CrossChainReceiver deployed)\n  const { chainId: targetChainId, networkName: targetNetworkName } =\n    selectTargetChain(deployedContracts);\n  const targetChain = chains.find((chain) =&gt; chain.chainId === targetChainId)!;\n\n  // Set up providers and wallets\n  const sourceProvider = new ethers.JsonRpcProvider(sourceChain.rpc);\n  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, sourceProvider);\n\n  // Load the ABI from the JSON file (use the compiled ABI from Forge or Hardhat)\n  const CrossChainSenderArtifact = JSON.parse(\n    fs.readFileSync(\n      path.resolve(\n        __dirname,\n        '../out/CrossChainSender.sol/CrossChainSender.json'\n      ),\n      'utf8'\n    )\n  );\n\n  const abi = CrossChainSenderArtifact.abi;\n\n  // Create the contract instance using the full ABI\n  const CrossChainSender = new ethers.Contract(\n    deployedContracts[sourceChainId].CrossChainSender!,\n    abi,\n    wallet\n  );\n\n  // Display the selected chains\n  console.log(\n    `\\nInitiating transfer from ${sourceNetworkName} to ${targetNetworkName}.`\n  );\n\n  // Ask the user for token transfer details\n  const tokenAddress = readlineSync.question(\n    'Enter the token contract address: '\n  );\n  const recipientAddress = readlineSync.question(\n    'Enter the recipient address on the target chain: '\n  );\n\n  // Get the token contract\n  const tokenContractDecimals = new ethers.Contract(\n    tokenAddress,\n    [\n      'function decimals() view returns (uint8)',\n      'function approve(address spender, uint256 amount) public returns (bool)',\n    ],\n    wallet\n  );\n\n  // Fetch the token decimals\n  const decimals = await tokenContractDecimals.decimals();\n\n  // Get the amount from the user, then parse it according to the token's decimals\n  const amount = ethers.parseUnits(\n    readlineSync.question('Enter the amount of tokens to transfer: '),\n    decimals\n  );\n\n  // Calculate the cross-chain transfer cost\n  const cost = await CrossChainSender.quoteCrossChainDeposit(targetChainId);\n\n  // Approve the CrossChainSender contract to transfer tokens on behalf of the user\n  const tokenContract = new ethers.Contract(\n    tokenAddress,\n    ['function approve(address spender, uint256 amount) public returns (bool)'],\n    wallet\n  );\n\n  const approveTx = await tokenContract.approve(\n    deployedContracts[sourceChainId].CrossChainSender!,\n    amount\n  );\n  await approveTx.wait();\n  console.log(`Approved tokens for cross-chain transfer.`);\n\n  // Initiate the cross-chain transfer\n  const transferTx = await CrossChainSender.sendCrossChainDeposit(\n    targetChainId,\n    deployedContracts[targetChainId].CrossChainReceiver!,\n    recipientAddress,\n    amount,\n    tokenAddress,\n    { value: cost } // Attach the necessary fee for cross-chain transfer\n  );\n  await transferTx.wait();\n  console.log(\n    `Transfer initiated from ${sourceNetworkName} to ${targetNetworkName}. Transaction Hash: ${transferTx.hash}`\n  );\n}\n\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exit(1);\n});\n</code></pre>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#transfer-tokens","title":"Transfer Tokens","text":"<p>Now that your transfer script is ready, it\u2019s time to execute it and perform a cross-chain token transfer.</p> <ol> <li> <p>Run the transfer script: Open your terminal and run the transfer script.</p> <pre><code>npx ts-node script/transfer.ts\n</code></pre> <p>This command will start the script, prompting you to select the source and target chains, input the token address, recipient address, and the amount of tokens to transfer.</p> </li> <li> <p>Follow the prompts: The script will guide you through selecting the source and target chains and entering the necessary details for the token transfer. Once you provide all the required information, the script will initiate the token transfer.</p> </li> <li> <p>Verify the transaction: After running the script, you should see a confirmation message with the transaction hash. You can use this transaction hash to check the transfer status on the respective blockchain explorers.</p> </li> </ol> <p>You can verify the transaction on the Wormhole Explorer using the link provided in the terminal output. This explorer also offers the option to add the transferred token to your MetaMask wallet automatically.</p> <p>If you followed the logic provided in the <code>transfer.ts</code> file above, your terminal output should look something like this:</p> npx ts-node transfer.ts  &gt; cross-chain-token-transfer@1.0.0 transfer  &gt; npx ts-node script/transfer.ts  Select the source chain:  1: Avalanche testnet fuji  2: Celo Testnet  Enter the number for the SOURCE chain: 1  Select the target chain:  1: Avalanche testnet fuji  2: Celo Testnet  Enter the number for the TARGET chain: 2  Initiating transfer from Avalanche testnet fuji to Celo Testnet  Enter the token contract address: 0x5425890298aed601595a70ab815c96711a31bc65  Enter the recipient address on the target chain: INSERT_YOUR_WALLET_ADDRESS  Enter the amount of tokens to transfer: 2  Approved tokens for cross-chain transfer.  Transfer initiated from Avalanche testnet fuji to Celo Testnet. Transaction Hash: 0x4a923975d955c1f226a1c2f61a1a0fa1ab1a9e229dc29ceaeadf8ef40acd071f <p>Note</p> <p>In this example, we demonstrated a token transfer from the Avalanche Fuji Testnet to the Celo Alfajores Testnet. We sent two units of USDC Testnet tokens using the token contract address <code>0x5425890298aed601595a70ab815c96711a31bc65</code>. You can replace these details with those relevant to your project or use the same for testing purposes.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#resources","title":"Resources","text":"<p>If you'd like to explore the complete project or need a reference while following this tutorial, you can find the complete codebase in the Cross-Chain Token Transfers GitHub repository. The repository includes all the scripts, contracts, and configurations needed to deploy and transfer tokens across chains using the Wormhole protocol.</p>"},{"location":"products/messaging/tutorials/cross-chain-token-contracts/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully built and deployed a cross-chain token transfer system using Solidity and the Wormhole protocol. You've learned how to:</p> <ul> <li>Set up a new Solidity project using Foundry.</li> <li>Develop smart contracts to send and receive tokens across chains.</li> <li>Write deployment scripts to manage and deploy contracts on different networks.</li> </ul> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/messaging/tutorials/replace-signatures/","title":"Replace Outdated Signatures in VAAs","text":"<p> Source code on GitHub</p> <p>Cross-chain transactions in Wormhole rely on Verifiable Action Approvals (VAAs), which contain signatures from a trusted set of validators called Guardians. These signatures prove that the network approved an action, such as a token transfer.</p> <p>However, the set of Guardians changes over time. If a user generates a transaction and waits too long before redeeming it, the Guardian set may have already changed. This means the VAA will contain outdated signatures from Guardians, who are no longer part of the network, causing the transaction to fail.</p> <p>Instead of discarding these VAAs, we can fetch updated signatures and replace the outdated ones to ensure smooth processing.</p> <p>In this tutorial, you'll build a script from scratch to:</p> <ul> <li>Fetch a VAA from Wormholescan.</li> <li>Validate its signatures against the latest Guardian set.</li> <li>Replace outdated signatures using the Wormhole SDK.</li> <li>Output a valid VAA ready for submission.</li> </ul> <p>By the end, you'll have a script that ensures VAAs remain valid and processable, avoiding transaction failures.</p>"},{"location":"products/messaging/tutorials/replace-signatures/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> </ul>"},{"location":"products/messaging/tutorials/replace-signatures/#project-setup","title":"Project Setup","text":"<p>In this section, you will create the directory, initialize a Node.js project, install dependencies, and configure TypeScript.</p> <ol> <li> <p>Create the project: Set up the directory and navigate into it.</p> <pre><code>mkdir wormhole-scan-api-demo\ncd wormhole-scan-api-demo\n</code></pre> </li> <li> <p>Initialize a Node.js project: Generate a <code>package.json</code> file.</p> <pre><code>npm init -y\n</code></pre> </li> <li> <p>Set up TypeScript: Create a <code>tsconfig.json</code> file.</p> <pre><code>touch tsconfig.json\n</code></pre> <p>Then, add the following configuration:</p> tsconfig.json<pre><code>{\n    \"compilerOptions\": {\n        \"target\": \"es2016\",\n        \"module\": \"commonjs\",\n        \"esModuleInterop\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"strict\": true,\n        \"skipLibCheck\": true\n    }\n}\n</code></pre> </li> <li> <p>Install dependencies: Add the required packages.</p> <pre><code>npm install @wormhole-foundation/sdk axios web3 tsx @types/node\n</code></pre> <ul> <li><code>@wormhole-foundation/sdk</code>: Handles VAAs and cross-chain interactions.  </li> <li><code>axios</code>: Makes HTTP requests to the Wormholescan API.  </li> <li><code>web3</code>: Interacts with Ethereum transactions and contracts.  </li> <li><code>tsx</code>: Executes TypeScript files without compilation.  </li> <li><code>@types/node</code>: Provides Node.js type definitions. </li> </ul> </li> <li> <p>Create the project structure: Set up the required directories and files.</p> <pre><code>mkdir -p src/config &amp;&amp; touch src/config/constants.ts src/config/layouts.ts\nmkdir -p src/helpers &amp;&amp; touch src/helpers/vaaHelper.ts\nmkdir -p src/scripts &amp;&amp; touch scripts/replaceSignatures.ts\n</code></pre> <ul> <li><code>src/config/*</code>: Stores public configuration variables and layouts for serializing and deserializing data structures.</li> <li><code>src/helpers/*</code>: Contains utility functions.</li> <li><code>src/scripts/*</code>: Contains scripts for fetching and replacing signatures.</li> </ul> </li> <li> <p>Set variables: Define key constants in <code>src/config/constants.ts</code>.</p> src/config/constants.ts<pre><code>export const RPC = 'https://ethereum-rpc.publicnode.com';\n\nexport const ETH_CORE =\n  '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B'.toLowerCase();\n\nexport const WORMHOLESCAN_API = 'https://api.wormholescan.io/v1';\n\nexport const LOG_MESSAGE_PUBLISHED_TOPIC =\n  '0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2';\n\nexport const TXS = [\n  '0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367',\n  '0x3c989a6bb40dcd4719453fbe7bbac420f23962c900ae75793124fc9cc614368c',\n];\n</code></pre> <ul> <li><code>RPC</code>: Endpoint for interacting with an Ethereum RPC node.</li> <li><code>ETH_CORE</code>: Wormhole's Core Contract address on Ethereum responsible for verifying VAAs.</li> <li><code>WORMHOLESCAN_API</code>: Base URL for querying the Wormholescan API to fetch VAA data and Guardian sets.</li> <li><code>LOG_MESSAGE_PUBLISHED_TOPIC</code>: The event signature hash for <code>LogMessagePublished</code>, a Wormhole contract event that signals when a VAA has been emitted. This is used to identify relevant logs in transaction receipts.</li> <li><code>TXS</code>: List of example transaction hashes that will be used for testing.</li> </ul> </li> <li> <p>Define data structure for working with VAAs: Specify the ABI for the Wormhole Core Contract's <code>parseAndVerifyVM</code> function, which parses and verifies VAAs. Defining the data structure, also referred to as a layout, for this function ensures accurate decoding and validation of VAAs.</p> src/config/layouts.ts<pre><code>export const PARSE_AND_VERIFY_VM_ABI = {\n  inputs: [{ internalType: 'bytes', name: 'encodedVM', type: 'bytes' }],\n  name: 'parseAndVerifyVM',\n  outputs: [\n    {\n      components: [\n        { internalType: 'uint8', name: 'version', type: 'uint8' },\n        { internalType: 'uint32', name: 'timestamp', type: 'uint32' },\n        { internalType: 'uint32', name: 'nonce', type: 'uint32' },\n        { internalType: 'uint16', name: 'emitterChainId', type: 'uint16' },\n        { internalType: 'bytes32', name: 'emitterAddress', type: 'bytes32' },\n        { internalType: 'uint64', name: 'sequence', type: 'uint64' },\n        { internalType: 'uint8', name: 'consistencyLevel', type: 'uint8' },\n        { internalType: 'bytes', name: 'payload', type: 'bytes' },\n        { internalType: 'uint32', name: 'guardianSetIndex', type: 'uint32' },\n        {\n          components: [\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'uint8', name: 'guardianIndex', type: 'uint8' },\n          ],\n          internalType: 'struct Structs.Signature[]',\n          name: 'signatures',\n          type: 'tuple[]',\n        },\n        { internalType: 'bytes32', name: 'hash', type: 'bytes32' },\n      ],\n      internalType: 'struct Structs.VM',\n      name: 'vm',\n      type: 'tuple',\n    },\n    { internalType: 'bool', name: 'valid', type: 'bool' },\n    { internalType: 'string', name: 'reason', type: 'string' },\n  ],\n  stateMutability: 'view',\n  type: 'function',\n};\n</code></pre> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#create-vaa-handling-functions","title":"Create VAA Handling Functions","text":"<p>In this section, we'll create a series of helper functions in the <code>src/helpers/vaaHelper.ts</code> file that will retrieve and verify VAAs and fetch and replace outdated Guardian signatures to generate a correctly signed VAA.</p> <p>To get started, import the necessary dependencies:</p> src/helpers/vaaHelper.ts<pre><code>import axios from 'axios';\nimport { eth } from 'web3';\nimport {\n  deserialize,\n  serialize,\n  VAA,\n  Signature,\n} from '@wormhole-foundation/sdk';\nimport {\n  RPC,\n  ETH_CORE,\n  LOG_MESSAGE_PUBLISHED_TOPIC,\n  WORMHOLESCAN_API,\n} from '../config/constants';\nimport { PARSE_AND_VERIFY_VM_ABI } from '../config/layouts';\n</code></pre>"},{"location":"products/messaging/tutorials/replace-signatures/#fetch-a-vaa-id-from-a-transaction","title":"Fetch a VAA ID from a Transaction","text":"<p>To retrieve a VAA, we first need to get its VAA ID from a transaction hash. This ID allows us to fetch the full VAA later. The VAA ID is structured as follows:</p> <pre><code>chain/emitter/sequence\n</code></pre> <ul> <li><code>chain</code>: The Wormhole chain ID (Ethereum is 2).</li> <li><code>emitter</code>: The contract address that emitted the VAA.</li> <li><code>sequence</code>: A unique identifier for the event.</li> </ul> <p>We must assemble the ID correctly since this is the format the Wormholescan API expects when querying VAAs.</p> <p>Follow the below steps to process the transaction logs and construct the VAA ID:</p> <ol> <li> <p>Get the transaction receipt: Iterate over the array of transaction hashes and fetch the receipt to access its logs.</p> </li> <li> <p>Find the Wormhole event: Iterate over the transaction logs and check for events emitted by the Wormhole Core contract. Look specifically for <code>LogMessagePublished</code> events, which indicate a VAA was created.</p> </li> <li> <p>Extract the emitter and sequence number: If a matching event is found, extract the emitter address from <code>log.topics[1]</code> and remove the <code>0x</code> prefix. Then, the sequence number from <code>log.data</code> is extracted, converting it from hex to an integer.</p> </li> <li> <p>Construct the VAA ID: Format the extracted data in <code>chain/emitter/sequence</code> format.</p> </li> </ol> src/helpers/vaaHelper.ts<pre><code>export async function fetchVaaId(txHashes: string[]): Promise&lt;string[]&gt; {\n  const vaaIds: string[] = [];\n\n  for (const tx of txHashes) {\n    try {\n      const result = (\n        await axios.post(RPC, {\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'eth_getTransactionReceipt',\n          params: [tx],\n        })\n      ).data.result;\n\n      if (!result)\n        throw new Error(`Unable to fetch transaction receipt for ${tx}`);\n\n      for (const log of result.logs) {\n        if (\n          log.address === ETH_CORE &amp;&amp;\n          log.topics?.[0] === LOG_MESSAGE_PUBLISHED_TOPIC\n        ) {\n          const emitter = log.topics[1].substring(2);\n          const seq = BigInt(log.data.substring(0, 66)).toString();\n          vaaIds.push(`2/${emitter}/${seq}`);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing ${tx}:`, error);\n    }\n  }\n\n  return vaaIds;\n}\n</code></pre> Try it out: VAA ID retrieval <p>If you want to try out the function before moving forward, create a test file inside the <code>test</code> directory: </p> <ol> <li> <p>Create the directory and file:</p> <pre><code>mkdir -p test\ntouch test/fetchVaaId.run.ts\n</code></pre> </li> <li> <p>Add the function call:  </p> test/fetchVaaId.run.ts<pre><code>import { fetchVaaId } from '../src/helpers/vaaHelper';\nimport { TXS } from '../src/config/constants';\n\nconst testFetchVaaId = async () =&gt; {\n  for (const tx of TXS) {\n    const vaaIds = await fetchVaaId([tx]);\n\n    if (vaaIds.length &gt; 0) {\n      console.log(`Transaction: ${tx}`);\n      vaaIds.forEach((vaaId) =&gt; console.log(`VAA ID: ${vaaId}`));\n    } else {\n      console.log(`No VAA ID found for transaction: ${tx}`);\n    }\n  }\n};\n\ntestFetchVaaId();\n</code></pre> </li> <li> <p>Run the script:  </p> <pre><code>npx tsx test/fetchVaaId.run.ts\n</code></pre> <p>If successful, the output will be:</p> <p> npx tsx test/fetchVaaId.run.ts Transaction: 0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367 VAA ID: 2/0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585/164170 </p> <p>If no VAA ID is found, the script will log an error message.</p> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#fetch-the-full-vaa","title":"Fetch the Full VAA","text":"<p>Now that you have the VAA ID, we can use it to fetch the full VAA payload from the Wormholescan API. This payload contains the VAA bytes, which will later be used for signature validation.</p> <p>Open <code>src/helpers/vaaHelper.ts</code> and create the <code>fetchVaa()</code> function to iterate through VAA IDs and extract the <code>vaaBytes</code> payload.</p> src/helpers/vaaHelper.ts<pre><code>export async function fetchVaa(\n  vaaIds: string[]\n): Promise&lt;{ id: string; vaaBytes: string }[]&gt; {\n  const results: { id: string; vaaBytes: string }[] = [];\n\n  for (const id of vaaIds) {\n    try {\n      const response = await axios.get(`${WORMHOLESCAN_API}/signed_vaa/${id}`);\n      const vaaBytes = response.data.vaaBytes;\n      results.push({ id, vaaBytes });\n    } catch (error) {\n      console.error(`Error fetching VAA for ${id}:`, error);\n    }\n  }\n  return results;\n}\n</code></pre> Try it out: VAA retrieval <p>If you want to try the function before moving forward, create a script inside the <code>test</code> directory  </p> <ol> <li> <p>Create the script file:</p> <pre><code>touch test/fetchVaa.run.ts\n</code></pre> </li> <li> <p>Add the function call:</p> test/fetchVaa.run.ts<pre><code>import { fetchVaaId, fetchVaa } from '../src/helpers/vaaHelper';\nimport { TXS } from '../src/config/constants';\n\nconst testFetchVaa = async () =&gt; {\n  for (const tx of TXS) {\n    const vaaIds = await fetchVaaId([tx]);\n\n    if (vaaIds.length === 0) {\n      console.log(`No VAA ID found for transaction: ${tx}`);\n      continue;\n    }\n\n    for (const vaaId of vaaIds) {\n      const vaaBytes = await fetchVaa([vaaId]);\n\n      console.log(\n        `Transaction: ${tx}\\nVAA ID: ${vaaId}\\nVAA Bytes: ${\n          vaaBytes.length &gt; 0 ? vaaBytes[0].vaaBytes : 'Not found'\n        }`\n      );\n    }\n  }\n};\n\ntestFetchVaa();\n</code></pre> </li> <li> <p>Run the script:</p> <pre><code>npx tsx test/fetchVaa.run.ts\n</code></pre> <p>If successful, the output will be:</p> <p> npx tsx test/fetchVaa.run.ts Transaction: 0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367 VAA Bytes: AQAAAAMNANQSwD/HRPcKp7Yxypl1ON8dZeMBzgYJrd2KYz6l9Tq9K9fj72fYJgkMeMaB9h... </p> <p>If no VAA is found, the script will log an error message.</p> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#validate-vaa-signatures","title":"Validate VAA Signatures","text":"<p>Now, we need to verify its validity. A VAA is only considered valid if it contains signatures from currently active Guardians and is correctly verified by the Wormhole Core contract.</p> <p>Open <code>src/helpers/vaaHelper.ts</code> and add the <code>checkVaaValidity()</code> function. This function verifies whether a VAA is valid by submitting it to an Ethereum RPC node and checking for outdated signatures.  </p> <p>Follow these steps to implement the function:  </p> <ol> <li> <p>Prepare the VAA for verification: Construct the VAA payload in a format that can be sent to the Wormhole Core contract.</p> </li> <li> <p>Send an <code>eth_call</code> request: Submit the VAA to an Ethereum RPC node, calling the <code>parseAndVerifyVM</code> function on the Wormhole Core contract.</p> </li> <li> <p>Decode the response: Check whether the VAA is valid. If it contains outdated signatures, further action will be required to replace them.</p> </li> </ol> src/helpers/vaaHelper.ts<pre><code>export async function checkVaaValidity(vaaBytes: string) {\n  try {\n    const vaa = Buffer.from(vaaBytes, 'base64');\n    vaa[4] = 4; // Set guardian set index to 4\n\n    const result = (\n      await axios.post(RPC, {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_call',\n        params: [\n          {\n            from: null,\n            to: ETH_CORE,\n            data: eth.abi.encodeFunctionCall(PARSE_AND_VERIFY_VM_ABI, [\n              `0x${vaa.toString('hex')}`,\n            ]),\n          },\n          'latest',\n        ],\n      })\n    ).data.result;\n\n    const decoded = eth.abi.decodeParameters(\n      PARSE_AND_VERIFY_VM_ABI.outputs,\n      result\n    );\n    console.log(\n      `${decoded.valid ? '\u2705' : '\u274c'} VAA Valid: ${decoded.valid}${\n        decoded.valid ? '' : `, Reason: ${decoded.reason}`\n      }`\n    );\n\n    return { valid: decoded.valid, reason: decoded.reason };\n  } catch (error) {\n    console.error(`Error checking VAA validity:`, error);\n    return { valid: false, reason: 'RPC error' };\n  }\n}\n</code></pre> Try it out: VAA Validity <p>If you want to try the function before moving forward, create a script inside the <code>test</code> directory</p> <ol> <li> <p>Create the script file:</p> <pre><code>touch test/checkVaaValidity.run.ts\n</code></pre> </li> <li> <p>Add the function call:</p> test/checkVaaValidity.run.ts<pre><code>import {\n  fetchVaaId,\n  fetchVaa,\n  checkVaaValidity,\n} from '../src/helpers/vaaHelper';\nimport { TXS } from '../src/config/constants';\n\nconst testCheckVaaValidity = async () =&gt; {\n  for (const tx of TXS) {\n    const vaaIds = await fetchVaaId([tx]);\n\n    if (vaaIds.length === 0) {\n      console.log(`No VAA ID found for transaction: ${tx}`);\n      continue;\n    }\n\n    for (const vaaId of vaaIds) {\n      const vaaData = await fetchVaa([vaaId]);\n\n      if (vaaData.length === 0 || !vaaData[0].vaaBytes) {\n        console.log(`VAA not found for ID: ${vaaId}`);\n        continue;\n      }\n\n      const result = await checkVaaValidity(vaaData[0].vaaBytes);\n      console.log(\n        `Transaction: ${tx}\\nVAA ID: ${vaaId}\\nVAA Validity:`,\n        result\n      );\n    }\n  }\n};\n\ntestCheckVaaValidity();\n</code></pre> </li> <li> <p>Run the script:</p> <pre><code>npx tsx test/checkVaaValidity.run.ts\n</code></pre> <p>If the VAA is valid, the output will be:  </p> <p> npx tsx test/checkVaaValidity.run.ts \u2705 VAA Valid: true </p> <p>If invalid, the output will include the reason:</p> <p> npx tsx test/checkVaaValidity.run.ts \u274c VAA Valid: false, Reason: VM signature invalid Transaction: 0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367 </p> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#fetch-observations-vaa-signatures","title":"Fetch Observations (VAA Signatures)","text":"<p>Before replacing outdated signatures, we need to fetch the original VAA signatures from Wormholescan. This allows us to compare them with the latest Guardian set and determine which ones need updating.</p> <p>Inside <code>src/helpers/vaaHelper.ts</code>, create the <code>fetchObservations()</code> function to query the Wormholescan API for observations related to a given VAA. Format the response by converting Guardian addresses to lowercase for consistency, and return an empty array if an error occurs.</p> src/helpers/vaaHelper.ts<pre><code>export async function fetchObservations(vaaId: string) {\n  try {\n    console.log(`Fetching observations`);\n\n    const response = await axios.get(\n      `https://api.wormholescan.io/api/v1/observations/${vaaId}`\n    );\n\n    return response.data.map((obs: any) =&gt; ({\n      guardianAddr: obs.guardianAddr.toLowerCase(),\n      signature: obs.signature,\n    }));\n  } catch (error) {\n    console.error(`Error fetching observations:`, error);\n    return [];\n  }\n}\n</code></pre> Try it out: Fetch Observations <p>If you want to try the function before moving forward, create a script inside the <code>test</code> directory</p> <ol> <li> <p>Create the script file:</p> <pre><code>touch test/fetchObservations.run.ts\n</code></pre> </li> <li> <p>Add the function call:</p> test/fetchObservations.run.ts<pre><code>import { fetchVaaId, fetchObservations } from '../src/helpers/vaaHelper';\nimport { TXS } from '../src/config/constants';\n\nconst testFetchObservations = async () =&gt; {\n  for (const tx of TXS) {\n    const vaaIds = await fetchVaaId([tx]);\n\n    if (vaaIds.length === 0) {\n      console.log(`No VAA ID found for transaction: ${tx}`);\n      continue;\n    }\n\n    for (const vaaId of vaaIds) {\n      const observations = await fetchObservations(vaaId);\n\n      if (observations.length === 0) {\n        console.log(`No observations found for VAA ID: ${vaaId}`);\n        continue;\n      }\n\n      console.log(\n        `Transaction: ${tx}\\nVAA ID: ${vaaId}\\nObservations:`,\n        observations\n      );\n    }\n  }\n};\n\ntestFetchObservations();\n</code></pre> </li> <li> <p>Run the script:</p> <pre><code>npx tsx test/fetchObservations.run.ts\n</code></pre> <p>If successful, the output will be:</p> <p> npx tsx test/fetchObservations.run.ts Fetching observations Transaction: 0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367 Observations: [ { guardianAddr: '0xda798f6896a3331f64b48c12d1d57fd9cbe70811', signature:         'ZGFlMDYyOGNjZjFjMmE0ZTk5YzE2OThhZjAzMDM4NzZlYTM1OWMxMzczNDA3YzdlMDMxZTkyNzk0ODkwYjRiYjRiOWFmNzM3NjRiMzIyOTE0ZTQwYzNlMjllMWEzNmM2NTc3ZDc5ZTdhNTM2MzA5YjA4YjExZjE3YzE3MDViNWIwMQ=='         }, { guardianAddr: '0x74a3bf913953d695260d88bc1aa25a4eee363ef0', signature:         'MzAyOTU4OGU4MWU0ODc0OTAwNDU3N2EzMGZlM2UxMDJjOWYwMjM0NWVhY2VmZWQ0ZGJlNTFkNmI3YzRhZmQ5ZTNiODFjNTg3MDNmYzUzNmJiYWFiZjNlODc1YTY3OTQwMGE4MmE3ZjZhNGYzOGY3YmRmNDNhM2VhNGQyNWNlNGMwMA=='         }, ...] </p> <p>If no observations are found, the script will log an error message.</p> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#fetch-the-latest-guardian-set","title":"Fetch the Latest Guardian Set","text":"<p>Now that we have the original VAA signatures, we must fetch the latest Guardian set from Wormholescan. This will allow us to compare the stored signatures with the current Guardians and determine which signatures need replacing.</p> <p>Create the <code>fetchGuardianSet()</code> function inside <code>src/helpers/vaaHelper.ts</code> to fetch the latest Guardian set.</p> src/helpers/vaaHelper.ts<pre><code>export async function fetchGuardianSet() {\n  try {\n    console.log('Fetching current guardian set');\n\n    const response = await axios.get(`${WORMHOLESCAN_API}/guardianset/current`);\n    const guardians = response.data.guardianSet.addresses.map((addr: string) =&gt;\n      addr.toLowerCase()\n    );\n    const guardianSet = response.data.guardianSet.index;\n\n    return [guardians, guardianSet];\n  } catch (error) {\n    console.error('Error fetching guardian set:', error);\n    return [];\n  }\n}\n</code></pre> Try it out: Fetch Guardian Set <p>If you want to try the function before moving forward, create a script inside the <code>test</code> directory</p> <ol> <li> <p>Create the script file:</p> <pre><code>touch test/fetchGuardianSet.run.ts\n</code></pre> </li> <li> <p>Add the function call:</p> test/fetchGuardianSet.run.ts<pre><code>import { fetchGuardianSet } from '../src/helpers/vaaHelper';\n\nconst testFetchGuardianSet = async () =&gt; {\n  const [guardians, guardianSetIndex] = await fetchGuardianSet();\n\n  console.log('Current Guardian Set Index:', guardianSetIndex);\n  console.log('Guardian Addresses:', guardians);\n};\n\ntestFetchGuardianSet();\n</code></pre> </li> <li> <p>Run the script:</p> <pre><code>npx tsx test/fetchGuardianSet.run.ts\n</code></pre> <p>If successful, the output will be:</p> <p> npx tsx test/fetchGuardianSet.run.ts Fetching current guardian set Current Guardian Set Index: 4 Guardian Addresses: [         '0x5893b5a76c3f739645648885bdccc06cd70a3cd3',         '0xff6cb952589bde862c25ef4392132fb9d4a42157',         '0x114de8460193bdf3a2fcf81f86a09765f4762fd1',         '0x107a0086b32d7a0977926a205131d8731d39cbeb',      ...] </p> <p>If an error occurs while fetching the Guardian set, a <code>500</code> status error will be logged.</p> </li> </ol>"},{"location":"products/messaging/tutorials/replace-signatures/#replace-outdated-signatures","title":"Replace Outdated Signatures","text":"<p>With the full VAA, Guardian signatures, and the latest Guardian set, we can now update outdated signatures while maintaining the required signature count.</p> <ol> <li> <p>Create the <code>replaceSignatures()</code> function: Open <code>src/helpers/vaaHelper.ts</code> and add the function header. To catch and handle errors properly, all logic will be wrapped inside a <code>try</code> block.</p> src/helpers/vaaHelper.ts<pre><code>export async function replaceSignatures(\n  vaa: string | Uint8Array&lt;ArrayBufferLike&gt;,\n  observations: { guardianAddr: string; signature: string }[],\n  currentGuardians: string[],\n  guardianSetIndex: number\n) {\n  console.log('Replacing Signatures...');\n\n  try {\n    // Add logic in the following steps here\n  } catch (error) {\n    console.error('Unexpected error in replaceSignatures:', error);\n  }\n}\n</code></pre> <ul> <li><code>vaa</code>: Original VAA bytes.</li> <li><code>observations</code>: Observed signatures from the network.</li> <li><code>currentGuardians</code>: Latest Guardian set.</li> <li><code>guardianSetIndex</code>: Current Guardian set index.</li> </ul> </li> <li> <p>Validate input data: Ensure all required parameters are present before proceeding. If any required input is missing, the function throws an error to prevent execution with incomplete data. The Guardian set should never be empty; if it is, this likely indicates an error in fetching the Guardian set in a previous step.</p> <pre><code>    if (!vaa) throw new Error('VAA is undefined or empty.');\n    if (currentGuardians.length === 0)\n      throw new Error('Guardian set is empty.');\n    if (observations.length === 0) throw new Error('No observations provided.');\n</code></pre> </li> <li> <p>Filter valid signatures: Remove signatures from inactive Guardians, keeping only valid ones. If there aren't enough valid signatures to replace the outdated ones, execution is halted to prevent an incomplete or invalid VAA.</p> <pre><code>    const validSigs = observations.filter((sig) =&gt;\n      currentGuardians.includes(sig.guardianAddr)\n    );\n\n    if (validSigs.length === 0)\n      throw new Error('No valid signatures found. Cannot proceed.');\n</code></pre> </li> <li> <p>Convert valid signatures: Ensure signatures are correctly formatted for verification. Convert hex-encoded signatures if necessary and extract their components.</p> <pre><code>    const formattedSigs = validSigs\n      .map((sig) =&gt; {\n        try {\n          const sigBuffer = Buffer.from(sig.signature, 'base64');\n          // If it's 130 bytes, it's hex-encoded and needs conversion\n          const sigBuffer1 =\n            sigBuffer.length === 130\n              ? Buffer.from(sigBuffer.toString(), 'hex')\n              : sigBuffer;\n\n          const r = BigInt('0x' + sigBuffer1.subarray(0, 32).toString('hex'));\n          const s = BigInt('0x' + sigBuffer1.subarray(32, 64).toString('hex'));\n          const vRaw = sigBuffer1[64];\n          const v = vRaw &lt; 27 ? vRaw : vRaw - 27;\n\n          return {\n            guardianIndex: currentGuardians.indexOf(sig.guardianAddr),\n            signature: new Signature(r, s, v),\n          };\n        } catch (error) {\n          console.error(\n            `Failed to process signature for guardian: ${sig.guardianAddr}`,\n            error\n          );\n          return null;\n        }\n      })\n      .filter(\n        (sig): sig is { guardianIndex: number; signature: Signature } =&gt;\n          sig !== null\n      ); // Remove null values\n</code></pre> </li> <li> <p>Deserialize the VAA: Convert the raw VAA data into a structured format for further processing.</p> <pre><code>    let parsedVaa: VAA&lt;'Uint8Array'&gt;;\n    try {\n      parsedVaa = deserialize('Uint8Array', vaa);\n    } catch (error) {\n      throw new Error(`Error deserializing VAA: ${error}`);\n    }\n</code></pre> </li> <li> <p>Identify outdated signatures: Compare the current VAA signatures with the newly formatted ones to detect which signatures belong to outdated Guardians. Remove these outdated signatures to ensure only valid ones remain.</p> <pre><code>    const outdatedGuardianIndexes = parsedVaa.signatures\n      .filter(\n        (vaaSig) =&gt;\n          !formattedSigs.some(\n            (sig) =&gt; sig.guardianIndex === vaaSig.guardianIndex\n          )\n      )\n      .map((sig) =&gt; sig.guardianIndex);\n\n    console.log('Outdated Guardian Indexes:', outdatedGuardianIndexes);\n\n    let updatedSignatures = parsedVaa.signatures.filter(\n      (sig) =&gt; !outdatedGuardianIndexes.includes(sig.guardianIndex)\n    );\n</code></pre> </li> <li> <p>Replace outdated signatures: Substitute outdated signatures with valid ones while maintaining the correct number of signatures. If there aren\u2019t enough valid replacements, execution stops.</p> <pre><code>    const validReplacements = formattedSigs.filter(\n      (sig) =&gt;\n        !updatedSignatures.some((s) =&gt; s.guardianIndex === sig.guardianIndex)\n    );\n\n    // Check if we have enough valid signatures to replace outdated ones**\n    if (outdatedGuardianIndexes.length &gt; validReplacements.length) {\n      console.warn(\n        `Not enough valid replacement signatures! Need ${outdatedGuardianIndexes.length}, but only ${validReplacements.length} available.`\n      );\n      return;\n    }\n\n    updatedSignatures = [\n      ...updatedSignatures,\n      ...validReplacements.slice(0, outdatedGuardianIndexes.length),\n    ];\n\n    updatedSignatures.sort((a, b) =&gt; a.guardianIndex - b.guardianIndex);\n</code></pre> </li> <li> <p>Serialize the updated VAA: Reconstruct the VAA with the updated signatures and convert it into a format suitable for submission.</p> <pre><code>    const updatedVaa: VAA&lt;'Uint8Array'&gt; = {\n      ...parsedVaa,\n      guardianSet: guardianSetIndex,\n      signatures: updatedSignatures,\n    };\n\n    let patchedVaa: Uint8Array;\n    try {\n      patchedVaa = serialize(updatedVaa);\n    } catch (error) {\n      throw new Error(`Error serializing updated VAA: ${error}`);\n    }\n</code></pre> </li> <li> <p>Send the updated VAA for verification and handle errors: Submit the updated VAA to an Ethereum RPC node for validation, ensuring it can be proposed for Guardian approval. If an error occurs during submission or signature replacement, log the issue and prevent further execution.</p> <pre><code>    try {\n      if (!(patchedVaa instanceof Uint8Array))\n        throw new Error('Patched VAA is not a Uint8Array!');\n\n      const vaaHex = `0x${Buffer.from(patchedVaa).toString('hex')}`;\n\n      console.log('Sending updated VAA to RPC...');\n\n      const result = await axios.post(RPC, {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_call',\n        params: [\n          {\n            from: null,\n            to: ETH_CORE,\n            data: eth.abi.encodeFunctionCall(PARSE_AND_VERIFY_VM_ABI, [vaaHex]),\n          },\n          'latest',\n        ],\n      });\n\n      const verificationResult = result.data.result;\n      console.log('Updated VAA (hex):', vaaHex);\n      return verificationResult;\n    } catch (error) {\n      throw new Error(`Error sending updated VAA to RPC: ${error}`);\n    }\n</code></pre> </li> </ol> Complete Function <pre><code>export async function replaceSignatures(\n  vaa: string | Uint8Array&lt;ArrayBufferLike&gt;,\n  observations: { guardianAddr: string; signature: string }[],\n  currentGuardians: string[],\n  guardianSetIndex: number\n) {\n  console.log('Replacing Signatures...');\n\n  try {\n    if (!vaa) throw new Error('VAA is undefined or empty.');\n    if (currentGuardians.length === 0)\n      throw new Error('Guardian set is empty.');\n    if (observations.length === 0) throw new Error('No observations provided.');\n\n    const validSigs = observations.filter((sig) =&gt;\n      currentGuardians.includes(sig.guardianAddr)\n    );\n\n    if (validSigs.length === 0)\n      throw new Error('No valid signatures found. Cannot proceed.');\n\n    const formattedSigs = validSigs\n      .map((sig) =&gt; {\n        try {\n          const sigBuffer = Buffer.from(sig.signature, 'base64');\n          // If it's 130 bytes, it's hex-encoded and needs conversion\n          const sigBuffer1 =\n            sigBuffer.length === 130\n              ? Buffer.from(sigBuffer.toString(), 'hex')\n              : sigBuffer;\n\n          const r = BigInt('0x' + sigBuffer1.subarray(0, 32).toString('hex'));\n          const s = BigInt('0x' + sigBuffer1.subarray(32, 64).toString('hex'));\n          const vRaw = sigBuffer1[64];\n          const v = vRaw &lt; 27 ? vRaw : vRaw - 27;\n\n          return {\n            guardianIndex: currentGuardians.indexOf(sig.guardianAddr),\n            signature: new Signature(r, s, v),\n          };\n        } catch (error) {\n          console.error(\n            `Failed to process signature for guardian: ${sig.guardianAddr}`,\n            error\n          );\n          return null;\n        }\n      })\n      .filter(\n        (sig): sig is { guardianIndex: number; signature: Signature } =&gt;\n          sig !== null\n      ); // Remove null values\n\n    let parsedVaa: VAA&lt;'Uint8Array'&gt;;\n    try {\n      parsedVaa = deserialize('Uint8Array', vaa);\n    } catch (error) {\n      throw new Error(`Error deserializing VAA: ${error}`);\n    }\n\n    const outdatedGuardianIndexes = parsedVaa.signatures\n      .filter(\n        (vaaSig) =&gt;\n          !formattedSigs.some(\n            (sig) =&gt; sig.guardianIndex === vaaSig.guardianIndex\n          )\n      )\n      .map((sig) =&gt; sig.guardianIndex);\n\n    console.log('Outdated Guardian Indexes:', outdatedGuardianIndexes);\n\n    let updatedSignatures = parsedVaa.signatures.filter(\n      (sig) =&gt; !outdatedGuardianIndexes.includes(sig.guardianIndex)\n    );\n\n    const validReplacements = formattedSigs.filter(\n      (sig) =&gt;\n        !updatedSignatures.some((s) =&gt; s.guardianIndex === sig.guardianIndex)\n    );\n\n    // Check if we have enough valid signatures to replace outdated ones**\n    if (outdatedGuardianIndexes.length &gt; validReplacements.length) {\n      console.warn(\n        `Not enough valid replacement signatures! Need ${outdatedGuardianIndexes.length}, but only ${validReplacements.length} available.`\n      );\n      return;\n    }\n\n    updatedSignatures = [\n      ...updatedSignatures,\n      ...validReplacements.slice(0, outdatedGuardianIndexes.length),\n    ];\n\n    updatedSignatures.sort((a, b) =&gt; a.guardianIndex - b.guardianIndex);\n\n    const updatedVaa: VAA&lt;'Uint8Array'&gt; = {\n      ...parsedVaa,\n      guardianSet: guardianSetIndex,\n      signatures: updatedSignatures,\n    };\n\n    let patchedVaa: Uint8Array;\n    try {\n      patchedVaa = serialize(updatedVaa);\n    } catch (error) {\n      throw new Error(`Error serializing updated VAA: ${error}`);\n    }\n\n    try {\n      if (!(patchedVaa instanceof Uint8Array))\n        throw new Error('Patched VAA is not a Uint8Array!');\n\n      const vaaHex = `0x${Buffer.from(patchedVaa).toString('hex')}`;\n\n      console.log('Sending updated VAA to RPC...');\n\n      const result = await axios.post(RPC, {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_call',\n        params: [\n          {\n            from: null,\n            to: ETH_CORE,\n            data: eth.abi.encodeFunctionCall(PARSE_AND_VERIFY_VM_ABI, [vaaHex]),\n          },\n          'latest',\n        ],\n      });\n\n      const verificationResult = result.data.result;\n      console.log('Updated VAA (hex):', vaaHex);\n      return verificationResult;\n    } catch (error) {\n      throw new Error(`Error sending updated VAA to RPC: ${error}`);\n    }\n  } catch (error) {\n    console.error('Unexpected error in replaceSignatures:', error);\n  }\n}\n</code></pre>"},{"location":"products/messaging/tutorials/replace-signatures/#create-script-to-replace-outdated-vaa-signatures","title":"Create Script to Replace Outdated VAA Signatures","text":"<p>Now that we have all the necessary helper functions, we will create a script to automate replacing outdated VAA signatures. This script will retrieve a transaction\u2019s VAA sequentially, check its validity, fetch the latest Guardian set, and update its signatures. By the end, it will output a correctly signed VAA that can be proposed for Guardian approval.</p> <ol> <li> <p>Open the file: Inside <code>src/scripts/replaceSignatures.ts</code>, import the required helper functions needed to process the VAAs.</p> src/scripts/replaceSignatures.ts<pre><code>import {\n  fetchVaaId,\n  fetchVaa,\n  checkVaaValidity,\n  fetchObservations,\n  fetchGuardianSet,\n  replaceSignatures,\n} from '../helpers/vaaHelper';\nimport { TXS } from '../config/constants';\n</code></pre> </li> <li> <p>Define the main execution function: Add the following function inside <code>src/scripts/replaceSignatures.ts</code> to process each transaction in <code>TXS</code>, going step by step through the signature replacement process.</p> <pre><code>async function main() {\n  try {\n    for (const tx of TXS) {\n      console.log(`\\nProcessing TX: ${tx}\\n`);\n\n      // 1. Fetch Transaction VAA IDs:\n      const vaaIds = await fetchVaaId([tx]);\n      if (!vaaIds.length) continue;\n\n      // 2. Fetch VAA Data:\n      const vaaData = await fetchVaa(vaaIds);\n      if (!vaaData.length) continue;\n\n      const vaaBytes = vaaData[0].vaaBytes;\n      if (!vaaBytes) continue;\n\n      // 3. Check VAA Validity:\n      const { valid } = await checkVaaValidity(vaaBytes);\n      if (valid) continue;\n\n      // 4. Fetch Observations (VAA signatures):\n      const observations = await fetchObservations(vaaIds[0]);\n\n      // 5. Fetch Current Guardian Set:\n      const [currentGuardians, guardianSetIndex] = await fetchGuardianSet();\n\n      // 6. Replace Signatures:\n      const response = await replaceSignatures(\n        Buffer.from(vaaBytes, 'base64'),\n        observations,\n        currentGuardians,\n        guardianSetIndex\n      );\n\n      if (!response) continue;\n    }\n  } catch (error) {\n    console.error('\u274c Error in execution:', error);\n    process.exit(1);\n  }\n}\n</code></pre> </li> <li> <p>Make the script executable: Ensure it runs when executed.</p> <pre><code>main();\n</code></pre> <p>To run the script, use the following command:</p> <pre><code>npx tsx src/scripts/replaceSignatures.ts\n</code></pre> <p> npx tsx src/scripts/replaceSignatures.ts Processing TX: 0x3ad91ec530187bb2ce3b394d587878cd1e9e037a97e51fbc34af89b2e0719367 \u274c VAA Valid: false, Reason: VM signature invalid Fetching observations Fetching current guardian set Replacing Signatures... Outdated Guardian Indexes: [ 0 ] Sending updated VAA to RPC... Updated VAA (hex): 0x01000000040d010019447b72d51e33923a3d6b28496ccd3722d5f1e33e2... </p> </li> </ol> <p>The script logs each step, skipping valid VAAs, replacing outdated signatures for invalid VAAs, and logging any errors. It then completes with a valid VAA ready for submission.</p>"},{"location":"products/messaging/tutorials/replace-signatures/#resources","title":"Resources","text":"<p>You can explore the complete project and find all necessary scripts and configurations in Wormhole's demo GitHub repository.</p> <p>The demo repository includes a bonus script to check the VAA redemption status on Ethereum and Solana, allowing you to verify whether a transaction has already been redeemed on the destination chain.</p>"},{"location":"products/messaging/tutorials/replace-signatures/#conclusion","title":"Conclusion","text":"<p>You've successfully built a script to fetch, validate, and replace outdated signatures in VAAs using Wormholescan and the Wormhole SDK.</p> <p>It's important to note that this tutorial does not update VAAs in the Wormhole network. Before redeeming the VAA, you must propose it for Guardian approval to finalize the process.</p> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/multigov/faqs/","title":"MultiGov FAQs","text":""},{"location":"products/multigov/faqs/#what-is-multigov","title":"What is MultiGov?","text":"<p>MultiGov is a cross-chain governance system that extends traditional DAO governance across multiple blockchain networks. It leverages Wormhole's interoperability infrastructure for seamless voting and proposal mechanisms across various chains.</p>"},{"location":"products/multigov/faqs/#how-does-multigov-ensure-security-in-cross-chain-communication","title":"How does MultiGov ensure security in cross-chain communication?","text":"<p>MultiGov leverages Wormhole's robust cross-chain communication protocol. It implements several security measures:</p> <ul> <li>Message origin verification to prevent unauthorized governance actions.</li> <li>Timely and consistent data checks to ensure vote aggregation is based on recent and synchronized chain states.</li> <li>Authorized participant validation to maintain the integrity of the governance process.</li> <li>Replay attack prevention by tracking executed messages.</li> </ul>"},{"location":"products/multigov/faqs/#can-multigov-integrate-with-any-blockchain","title":"Can MultiGov integrate with any blockchain?","text":"<p>MultiGov can potentially integrate with any blockchain supported by Wormhole. However, specific implementations may vary depending on the chain's compatibility with the Ethereum Virtual Machine (EVM) and its smart contract capabilities. See the full list of supported networks. The current implementation of MultiGov supports an EVM hub and both the EVM and SVM for spokes.</p>"},{"location":"products/multigov/faqs/#how-are-votes-aggregated-across-different-chains","title":"How are votes aggregated across different chains?","text":"<p>Votes are collected on each spoke chain using each chain's <code>SpokeVoteAggregator</code>. These votes are then transmitted to the HubVotePool on the hub chain for aggregation and tabulation. The <code>HubEvmSpokeVoteDecoder</code> standardizes votes from different EVM chains to ensure consistent processing.</p>"},{"location":"products/multigov/faqs/#can-governance-upgrade-from-a-single-chain-to-multigov","title":"Can governance upgrade from a single chain to MultiGov?","text":"<p>Yes! MultiGov can support progressively upgrading from a single-chain governance to MultiGov. Moving to MultiGov requires upgrading the token to NTT and adding Flexible Voting to the original Governor.</p>"},{"location":"products/multigov/faqs/#how-can-i-create-a-proposal-in-multigov","title":"How can I create a proposal in MultiGov?","text":"<p>Proposals are created on the hub chain using the <code>HubEvmSpokeAggregateProposer</code> contract or by calling <code>propose</code> on the <code>HubGovernor</code>. You need to prepare the proposal details, including targets, values, and calldatas. The proposer's voting weight is aggregated across chains using Wormhole queries to determine eligibility.</p>"},{"location":"products/multigov/faqs/#how-do-i-vote-on-a-proposal-if-i-hold-tokens-on-a-spoke-chain","title":"How do I vote on a proposal if I hold tokens on a spoke chain?","text":"<p>You can vote on proposals via the <code>SpokeVoteAggregator</code> contract on the respective spoke chain where you hold your tokens. The votes are then automatically forwarded to the hub chain for aggregation.</p>"},{"location":"products/multigov/faqs/#how-are-approved-proposals-executed-across-multiple-chains","title":"How are approved proposals executed across multiple chains?","text":"<p>When a proposal is approved and the timelock period elapses, it's first executed on the hub chain. A proposal can include a cross-chain message by including a call to <code>dispatch</code> on the <code>HubMessageDispatcher</code>, which sends a message to the relevant spoke chains. On each spoke chain, the <code>SpokeMessageExecutor</code> receives, verifies, and automatically executes the instructions using the <code>SpokeAirlock</code> as the <code>msg.sender</code>.</p>"},{"location":"products/multigov/faqs/#what-are-the-requirements-for-using-multigov","title":"What are the requirements for using MultiGov?","text":"<p>To use MultiGov, your DAO must meet the following requirements:</p> <ul> <li>ERC20Votes token: Your DAO's token must implement the <code>ERC20Votes</code> standard and support <code>CLOCK_MODE</code> timestamps for compatibility with cross-chain governance.</li> <li>Flexible voting support: Your DAO's Governor must support Flexible Voting to function as the Hub Governor. If your existing Governor does not support Flexible Voting, you can upgrade it to enable this feature.</li> </ul>"},{"location":"products/multigov/faqs/#what-do-i-need-to-set-up-multigov-for-my-project","title":"What do I need to set up MultiGov for my project?","text":"<p>Get started by filling out the form below:</p> <p>https://www.tally.xyz/get-started</p> <p>Tally will reach out to help get your DAO set up with MultiGov.</p> <p>To set up testing MultiGov for your DAO, you'll need:</p> <ul> <li>Foundry and Git installed.</li> <li>Test ETH on the testnets you plan to use (e.g., Sepolia for hub, Optimism Sepolia for spoke).</li> <li>Modify and deploy the hub and spoke contracts using the provided scripts.</li> <li>Set up the necessary environment variables and configurations.</li> </ul>"},{"location":"products/multigov/faqs/#can-multigov-be-used-with-non-evm-chains","title":"Can MultiGov be used with non-EVM chains?","text":"<p>The current implementation is designed for EVM-compatible chains. However, Solana (non-EVM) voting is currently in development and expected to go live after the EVM contracts.</p>"},{"location":"products/multigov/faqs/#how-can-i-customize-voting-parameters-in-multigov","title":"How can I customize voting parameters in MultiGov?","text":"<p>Voting parameters such as voting delay, voting period, proposal threshold, and quorum (and others) can be customized in the deployment scripts (<code>DeployHubContractsSepolia.s.sol</code> and <code>DeploySpokeContractsOptimismSepolia.s.sol</code> as examples for their respective chains). Make sure to adjust these parameters according to your DAO's specific needs before deployment.</p> <p>Remember to thoroughly test your MultiGov implementation on testnets before deploying to Mainnet, and have your contracts audited for additional security.</p>"},{"location":"products/multigov/faqs/#how-does-multigov-handle-potential-network-issues-or-temporary-chain-unavailability","title":"How does MultiGov handle potential network issues or temporary chain unavailability?","text":"<p>MultiGov includes several mechanisms to handle network issues or temporary chain unavailability:</p> <ol> <li>Asynchronous vote aggregation: Votes are aggregated periodically, allowing the system to continue functioning even if one chain is temporarily unavailable.</li> <li>Proposal extension: The <code>HubGovernorProposalExtender</code> allows trusted actors to extend voting periods if needed, which can help mitigate issues caused by temporary network problems.</li> <li>Wormhole retry mechanism: Wormhole's infrastructure includes retry mechanisms for failed message deliveries, helping ensure cross-chain messages eventually get through.</li> <li>Decentralized relayer network: Wormhole's decentralized network of relayers helps maintain system availability even if some relayers are offline.</li> </ol> <p>However, prolonged outages on the hub chain or critical spoke chains could potentially disrupt governance activities. Projects should have contingency plans for such scenarios.</p>"},{"location":"products/multigov/faqs/#how-does-multigov-differ-from-traditional-dao-governance","title":"How does MultiGov differ from traditional DAO governance?","text":"<p>Unlike traditional DAO governance, which typically operates on a single blockchain, MultiGov allows for coordinated decision-making and proposal execution across multiple chains. This enables more inclusive participation from token holders on different networks and more complex, cross-chain governance actions.</p>"},{"location":"products/multigov/faqs/#what-are-the-main-components-of-multigov","title":"What are the main components of MultiGov?","text":"<p>The main components of MultiGov include:</p> <ul> <li>Hub chain: Central coordination point for governance activities.</li> <li>Spoke chains: Additional chains where token holders can participate in governance.</li> <li>Wormhole integration: Enables secure cross-chain message passing.</li> <li>Governance token: Allows holders to participate in governance across all integrated chains.</li> </ul>"},{"location":"products/multigov/get-started/","title":"Get Started with MultiGov","text":"<p>MultiGov enables multichain governance using Wormhole messaging. With MultiGov, token holders can create proposals, vote, and execute decisions from any supported chain, eliminating the need to bridge assets or rely on a single governance hub.</p> <p>This page walks you through the MultiGov deployment flow\u2014from requesting access with Tally to choosing a network and following the appropriate deployment guide.</p>"},{"location":"products/multigov/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before deploying MultiGov, you need a governance token deployed on multiple chains (ERC-20 or SPL):</p> <ul> <li> <p>EVM chains:</p> <ul> <li>Your token must implement the <code>ERC20Votes</code> standard.</li> <li>It must support <code>CLOCK_MODE</code> timestamps for compatibility with cross-chain voting.</li> </ul> </li> <li> <p>Solana:</p> <ul> <li>Use an SPL token.</li> <li>Voting eligibility and weight are managed by the MultiGov staking program.</li> </ul> </li> </ul>"},{"location":"products/multigov/get-started/#request-tally-access","title":"Request Tally Access","text":"<p>MultiGov integrations are coordinated through Tally, a multichain governance platform that powers proposal creation, voting, and execution.</p> <p>To get started, fill out the integration intake form. The Tally team will review your application and contact you to discuss deployment and setup requirements.</p> <p>Once approved, review the deployment flow below to understand the integration process. Then, follow the appropriate deployment guide to integrate MultiGov with your governance token on EVM chains, Solana, or other supported networks.</p>"},{"location":"products/multigov/get-started/#deployment-flow","title":"Deployment Flow","text":"<p>MultiGov deployments follow a similar structure on both EVM and Solana. This section provides a high-level overview of the end-to-end flow. Each step is explained in more detail in the platform-specific deployment guides linked below.</p> <p>Clone The MultiGov Repository</p> <p>Download the codebase and navigate to the appropriate folder (<code>evm</code> or <code>solana</code>).</p> <p>Set Up Your Project</p> <p>Install the required toolchain for your target network. For EVM, use Foundry (or similar); for Solana, use Anchor (or similar), Solana CLI, and Rust.</p> <p>Configure Deployment Settings</p> <p>Set environment variables such as RPC URLs, keypairs, and hub chain details in a <code>.env</code> file or Anchor config.</p> <p>Deploy MultiGov Contracts or Programs</p> <p>Use the provided scripts to deploy the hub (EVM only) and spoke components (EVM or Solana) to your selected networks.</p> <p>Initialize Governance Configuration</p> <p>Set voting parameters, authorities, and metadata. Use deployment scripts or governance proposals depending on your setup.</p>"},{"location":"products/multigov/get-started/#next-steps","title":"Next Steps","text":"<p>You've now completed the initial setup and requested access through Tally. Continue to the deployment guide that matches your governance architecture:</p> <ul> <li>Deploy on EVM Chains: Configure and deploy MultiGov smart contracts to EVM-compatible chains.</li> <li>Deploy on Solana: Launch the Solana staking program and configure spoke chain participation.</li> </ul>"},{"location":"products/multigov/overview/","title":"MultiGov Overview","text":"<p>MultiGov is a multichain governance system that enables decentralized decision-making across multiple blockchain networks. Built on Wormhole messaging, it allows DAOs to manage proposals, voting, and execution from any connected chain without relying on a single hub or bridging assets. It empowers true multichain governance by aggregating voting power across chains and coordinating secure proposal execution.</p>"},{"location":"products/multigov/overview/#key-features","title":"Key Features","text":"<p>MultiGov expands DAO governance across blockchains, increasing participation, improving security with Wormhole messaging, and enabling unified decision-making at scale. Key features include:</p> <ul> <li>Multichain governance: Token holders can vote and execute proposals from any supported chain.</li> <li>Hub-and-spoke model: Proposals are created on a central hub chain and voted on from spoke chains, where governance tokens live.</li> <li>Secure vote aggregation: Vote weights are checkpointed and verified to prevent double voting.</li> <li>Cross-chain proposal execution: Approved proposals can be executed across multiple chains.</li> <li>Flexible architecture: Can integrate with any Wormhole-supported blockchain.</li> <li>Upgradeable and extensible: Supports upgrades across components while preserving vote history and system continuity.</li> <li>Backed by Tally: Proposal creation, voting, and execution are coordinated via  Tally.</li> </ul>"},{"location":"products/multigov/overview/#how-it-works","title":"How It Works","text":"<ol> <li>Create proposal on hub chain: Proposals are created on the hub chain, which manages the core governance logic, including vote aggregation and execution scheduling.</li> <li>Vote from spoke chains: Token holders on spoke chains vote locally using <code>SpokeVoteAggregators</code>, with checkpoints tracking their voting power.</li> <li>Transmit votes via Wormhole: Votes are securely sent to the hub using VAAs, ensuring message integrity and cross-chain verification.</li> <li>Aggregate and finalize on hub: The hub chain receives votes from all spokes, tallies results, and finalizes the outcome once the voting period ends.</li> <li>Execute actions across chains: Upon approval, proposals can trigger execution on one or more chains, again using Wormhole messaging to deliver commands.</li> </ol>"},{"location":"products/multigov/overview/#use-cases","title":"Use Cases","text":"<ul> <li> <p>Cross-Chain Treasury Management</p> <ul> <li>MultiGov: Vote on treasury actions from any supported chain.</li> <li>Messaging: Transmit proposal execution to target chains.</li> <li>Wrapped Token Transfers (WTT): Optionally move assets.</li> </ul> </li> <li> <p>Coordinated Protocol Upgrades Across Chains</p> <ul> <li>MultiGov: Create a unified proposal to upgrade contracts across networks.</li> <li>Messaging: Send upgrade instructions as VAAs and deliver execution payloads to target chains.</li> </ul> </li> <li> <p>Progressive Decentralization for Multichain DAOs</p> <ul> <li>MultiGov: Extend governance to new chains while preserving coordination.</li> <li>Queries: Fetch on-chain vote weights from remote spokes.</li> <li>Messaging: Aggregate results and execute actions via the hub.</li> </ul> </li> </ul>"},{"location":"products/multigov/overview/#next-steps","title":"Next Steps","text":"<p>Follow these steps to get started with MultiGov:</p> <p>Submit an Integration Request with Tally</p> <p>Apply for MultiGov access by submitting your request to Tally.</p> <p>Deploy MultiGov to the Hub and Spoke Chains of Your Choice</p> <p>\u2192 Deploy to EVM chains \u2192 Deploy to Solana</p> <p>Create a Treasury Management Proposal</p> <p>Walk through a real example of creating and executing a cross-chain proposal.</p>"},{"location":"products/multigov/concepts/architecture/","title":"MultiGov Architecture","text":"<p>MultiGov uses a hub-and-spoke architecture to coordinate governance across multiple blockchains. The hub chain is the central controller that handles proposal creation, vote aggregation, and execution. Spoke chains allow token holders to vote locally and can also execute proposal outcomes specific to their network.</p> <p>Wormhole\u2019s multichain messaging infrastructure connects the hub and spokes, enabling secure and efficient chain communication. This design allows DAOs to operate seamlessly across ecosystems while maintaining a unified governance process.</p> <p>The diagram below illustrates this high-level architecture.</p> <p></p>"},{"location":"products/multigov/concepts/architecture/#key-components","title":"Key Components","text":""},{"location":"products/multigov/concepts/architecture/#hub-chain-contracts","title":"Hub Chain Contracts","text":"<p>The hub chain is the central point for managing proposals, tallying votes, executing decisions, and coordinating governance across connected chains.</p> <ul> <li><code>HubGovernor</code>: Central governance contract managing proposals and vote tallying.</li> <li><code>HubVotePool</code>: Receives aggregated votes from spokes and submits them to <code>HubGovernor</code>.</li> <li><code>HubMessageDispatcher</code>: Relays approved proposal executions to spoke chains.</li> <li><code>HubProposalExtender</code>: Allows trusted actors to extend voting periods if needed.</li> <li><code>HubProposalMetadata</code>: Helper contract returning <code>proposalId</code> and vote start for <code>HubGovernor</code> proposals.</li> <li><code>HubEvmSpokeAggregateProposer</code>: Aggregates cross-chain voting weight for an address and proposes via the <code>HubGovernor</code> if eligible.</li> </ul>"},{"location":"products/multigov/concepts/architecture/#spoke-chains-contracts","title":"Spoke Chains Contracts","text":"<p>Spoke chains handle local voting, forward votes to the hub, and execute approved proposals from the hub for decentralized governance.</p> <ul> <li><code>SpokeVoteAggregator</code>: Collects votes on the spoke chain and forwards them to the hub.</li> <li><code>SpokeMessageExecutor</code>: Receives and executes approved proposals from the hub.</li> <li><code>SpokeMetadataCollector</code>: Fetches proposal metadata from the hub for spoke chain voters.</li> <li><code>SpokeAirlock</code>: Acts as governance's \"admin\" on the spoke, has permissions, and its treasury.</li> </ul>"},{"location":"products/multigov/concepts/architecture/#spoke-solana-staking-program","title":"Spoke Solana Staking Program","text":"<p>The Spoke Solana Staking Program handles local voting from users who have staked W tokens or are vested in the program, forwards votes to the hub, and executes approved proposals from the hub for decentralized governance.</p> <p>The program implements its functionality through instructions, using specialized PDA accounts where data is stored. Below are the key accounts in the program:</p> <ul> <li><code>GlobalConfig</code>: Global program configuration.</li> <li><code>StakeAccountMetadata</code>: Stores user's staking information.</li> <li><code>CustodyAuthority</code>: PDA account managing custody and overseeing token operations related to stake accounts.</li> <li><code>StakeAccountCustody</code>: Token account associated with a stake account for securely storing staked tokens.</li> <li><code>CheckpointData</code>: Tracks delegation history.</li> <li><code>SpokeMetadataCollector</code>: Collects and updates proposal metadata from the hub chain.</li> <li><code>GuardianSignatures</code>: Stores guardian signatures for message verification.</li> <li><code>ProposalData</code>: Stores data about a specific proposal, including votes and start time.</li> <li><code>ProposalVotersWeightCast</code>: Tracks individual voter's weight for a proposal.</li> <li><code>SpokeMessageExecutor</code>: Processes messages from a spoke chain via the Wormhole protocol.</li> <li><code>SpokeAirlock</code>: Manages PDA signing and seed validation for secure instruction execution.</li> <li><code>VestingBalance</code>: Stores total vesting balance and related staking information of a vester.</li> <li><code>VestingConfig</code>: Defines vesting configuration, including mint and admin details.</li> <li><code>Vesting</code>: Represents individual vesting allocations with maturation data.</li> <li><code>VoteWeightWindowLengths</code>: Tracks lengths of vote weight windows.</li> </ul> <p>Each account is implemented as a Solana PDA (Program Derived Address) and utilizes Anchor's account framework for serialization and management.</p>"},{"location":"products/multigov/concepts/architecture/#key-components-in-action","title":"Key Components in Action","text":"<p>This architecture ensures that MultiGov can operate securely and efficiently across multiple chains, allowing for truly decentralized and cross-chain governance while maintaining a unified decision-making process.</p> <p></p>"},{"location":"products/multigov/concepts/architecture/#multichain-communication","title":"Multichain Communication","text":"<p>MultiGov relies on Wormhole's infrastructure for all multichain messaging, ensuring secure and reliable communication between chains. Wormhole's cross-chain state read system, known as Queries, is used for vote aggregation and proposal metadata. Additionally, cross-chain proposal execution messages are transmitted through Wormhole's custom relaying system, enabling seamless coordination across multiple blockchain networks.</p>"},{"location":"products/multigov/concepts/architecture/#security-measures","title":"Security Measures","text":"<ul> <li>Vote weight window: Implements a moving window for vote weight checkpoints to mitigate cross-chain double voting.<ul> <li>Proposal extension: <code>HubProposalExtender</code> allows for extending voting periods by a trusted actor in the case of network issues or high-stakes decisions.</li> </ul> </li> <li>Timelock: A timelock period between proposal approval and execution allows for additional security checks and community review.</li> <li>Wormhole verification: All multichain messages are verified using Wormhole's secure messaging protocol.</li> </ul>"},{"location":"products/multigov/concepts/architecture/#conclusion","title":"Conclusion","text":"<p>MultiGov\u2019s hub-and-spoke architecture centralizes proposal authority on the hub while distributing participation and execution to spokes. Wormhole Messaging carries authenticated multichain actions, and Wormhole Queries provide reliable state reads for metadata and vote proofs. With clear trust boundaries, timelocks, Guardian verification, and checkpointing, the system remains coherent across heterogeneous chains.</p> <p>For the end-to-end lifecycle\u2014from proposal creation to multichain execution, see the Flow of a Proposal page.</p>"},{"location":"products/multigov/concepts/proposal-flow/","title":"Flow of a Proposal","text":"<p>MultiGov enables decentralized governance across multiple blockchains by allowing a proposal to be created on a designated hub chain and voted on from various spoke chains. Votes are aggregated, and the proposal is executed once consensus is reached.</p> <p>This page covers the general lifecycle shared by all chains, EVM-specific details, and Solana-specific (SVM) details.</p>"},{"location":"products/multigov/concepts/proposal-flow/#proposal-flow","title":"Proposal Flow","text":"<ol> <li> <p>Proposal Creation (Hub)</p> <p>The proposer, typically a DAO member or smart contract, creates a proposal and submits it to the <code>HubGovernor</code> contract on the hub chain. This proposal includes proposal targets, calldata, metadata, payloads, and the voting timeline. Once submitted, it becomes immutable and is broadcast to all supported spoke chains.</p> </li> <li> <p>Voting Period Begins</p> <p>When the proposal is activated, both the <code>HubGovernor</code> and each <code>SpokeGovernor</code> enter a voting state. On each chain, governance participants can review the proposal and prepare to cast votes using their local voting power.</p> </li> <li> <p>Users Vote on Spokes</p> <p>Individual voters interact with their local spoke voting module to cast a vote (for, against, or abstain). Votes are validated and recorded on the spoke chain and prepared as a spoke-level aggregate.</p> </li> <li> <p>Votes Relayed to Hub</p> <p>Spokes submit their aggregated votes back to the hub using Wormhole: either by emitting a vote message (VAA) or by exposing the aggregate via Queries and submitting the Guardian-signed response on the hub. The hub verifies each aggregate before including it in the tally.</p> </li> <li> <p>Voting Period Ends</p> <p>After the vote deadline (defined at proposal creation), the <code>HubGovernor</code> contract stops accepting new votes. All final tallies are frozen and no additional state transitions can occur until result finalization.   </p> </li> <li> <p>Tally Finalized and Proposal Queued for Execution</p> <p>The <code>HubGovernor</code> evaluates the total votes, checks quorum thresholds, and determines whether the proposal passed or failed. If successful, it marks the proposal as ready for execution. Failed proposals are simply archived.</p> </li> <li> <p>Proposal Executed</p> <p>The <code>HubGovernor</code> executes the proposal. If the action payload is on the hub chain, it\u2019s executed directly. If actions target spoke chains, messages are composed and sent via Wormhole Messaging, then delivered by a relayer to the target executor contract or system.</p> </li> </ol> <pre><code>sequenceDiagram\n  participant Proposer\n  participant HubGovernor\n  participant SpokeGovernor1\n  participant SpokeGovernor2\n  participant Wormhole\n  participant Executor\n\n  Proposer-&gt;&gt;HubGovernor: Create proposal\n  Note right of HubGovernor: Proposal ID assigned\n\n  SpokeGovernor1-&gt;&gt;SpokeGovernor1: User votes\n  SpokeGovernor2-&gt;&gt;SpokeGovernor2: User votes\n\n  SpokeGovernor1-&gt;&gt;Wormhole: Relay vote VAA\n  SpokeGovernor2-&gt;&gt;Wormhole: Relay vote VAA\n\n  Wormhole-&gt;&gt;HubGovernor: Deliver vote VAAs\n  HubGovernor-&gt;&gt;HubGovernor: Tally votes\n\n  HubGovernor-&gt;&gt;HubGovernor: Finalize proposal status\n  alt Proposal Passed\n    HubGovernor-&gt;&gt;Executor: Execute actions\n  else Proposal Failed\n    Note right of HubGovernor: No action taken\n  end</code></pre>"},{"location":"products/multigov/concepts/proposal-flow/#evm-proposal-flow-details","title":"EVM Proposal Flow Details","text":"<ol> <li> <p>On EVM, proposals are created using\u00a0<code>HubGovernor.propose(...)</code>\u00a0or via\u00a0<code>HubEvmSpokeAggregateProposer</code>, which aggregates proposer voting power across registered spokes to meet the threshold. <code>HubProposalMetadata</code> exposes proposal metadata\u00a0and is typically surfaced on each spoke by a\u00a0<code>SpokeMetadataCollector</code>, keeping local views consistent with the hub.</p> </li> <li> <p>Voters cast on the spoke\u2019s\u00a0<code>SpokeVoteAggregator</code>, which validates eligibility and produces a spoke-level aggregate. That aggregate is relayed to the hub as a Wormhole message; a relayer submits the resulting VAA to\u00a0<code>HubVotePool</code>, which verifies and forwards totals to\u00a0<code>HubGovernor</code>\u00a0for inclusion in the global tally. </p> </li> <li> <p>After the timelock, cross-chain actions are dispatched via\u00a0<code>HubMessageDispatcher.dispatch(...)</code>\u00a0and executed by each\u00a0<code>SpokeMessageExecutor</code>\u00a0under\u00a0the\u00a0authority of <code>SpokeAirlock</code>. In practice, configure timestamped snapshots compatible with cross-chain voting (e.g.,\u00a0<code>ERC20Votes</code>\u00a0with the appropriate\u00a0<code>CLOCK_MODE</code>) and register all expected spokes on\u00a0<code>HubVotePool</code>.</p> </li> </ol>"},{"location":"products/multigov/concepts/proposal-flow/#solana-svm-proposal-flow-details","title":"Solana (SVM) Proposal Flow Details","text":"<ol> <li> <p>Proposals that target Solana include a\u00a0<code>SolanaPayload</code>\u00a0in hub calldata describing the destination program and instructions to run. </p> </li> <li> <p>The Solana spoke ingests hub proposals by fetching\u00a0<code>HubProposalMetadata</code>\u00a0via\u00a0Wormhole Queries, initializing local state with\u00a0<code>AddProposal</code>, and posting Guardian signatures. Verification artifacts and proposal states live in\u00a0Anchor PDAs\u00a0(e.g.,\u00a0<code>ProposalData</code>, <code>GuardianSignatures</code>), ensuring the spoke view remains cryptographically aligned with the hub.</p> </li> <li> <p>Voters interact with\u00a0<code>CastVote</code>, which derives weight from checkpointed stake/vesting PDAs and records for/against/abstain. The vote aggregate is exposed in a PDA and read via a Query; Guardians sign the response, and the signed result is submitted to\u00a0<code>HubVotePool.crossChainVote(...)</code>\u00a0for verification and forwarding to\u00a0<code>HubGovernor</code>. </p> </li> <li> <p>When execution targets Solana, the hub dispatches a Solana-bound message. On Solana,\u00a0<code>ReceiveMessage</code>\u00a0verifies the VAA, and\u00a0<code>SpokeAirlock</code>\u00a0performs the authorized instructions. Program-level specifics include PDAs for custody and replay safety, as well as <code>VoteWeightWindowLengths</code>\u00a0to prevent double-counting.</p> </li> </ol>"},{"location":"products/multigov/concepts/proposal-flow/#conclusion","title":"Conclusion","text":"<p>MultiGov keeps proposal authority unified at the hub while distributing participation and execution across spokes. The lifecycle is consistent, create on the hub, vote on spokes, deliver aggregates back to the hub, then dispatch execution, while the delivery mechanics differ per chain (vote VAAs vs. Queries with signed responses).</p> <p>Core guarantees:</p> <ul> <li>Single source of truth: The hub finalizes tallies, enforces quorum/timelock, and authorizes any cross-chain actions.</li> <li>Local first: Votes are cast and validated on each spoke; only aggregates cross chains.</li> <li>Verified transport: All multichain messages are Guardian-verified; spoke execution is gated by the spoke\u2019s authority module.</li> <li>Replay and double-count safety: Checkpoint windows, PDAs/decoders, and replay guards prevent re-execution and double voting.</li> </ul> <p>For components and more architecture details, see the MultiGov Architecture page.</p>"},{"location":"products/multigov/guides/deploy-to-evm/","title":"Deploy MultiGov on EVM Chains","text":"<p>This guide provides instructions to set up and deploy the MultiGov governance system locally. Before diving into the technical deployment, ensure that MultiGov is the right fit for your project\u2019s governance needs by following the steps for the integration process.</p> <p>Once your project is approved through the intake process and you\u2019ve collaborated with the Tally team to tailor MultiGov to your requirements, use this guide to configure, compile, and deploy the necessary smart contracts across your desired blockchain networks. This deployment will enable decentralized governance across your hub and spoke chains.</p>"},{"location":"products/multigov/guides/deploy-to-evm/#prerequisites","title":"Prerequisites","text":"<p>To interact with MultiGov, you'll need the following:</p> <ul> <li>Install Foundry.</li> <li>Install Git.</li> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/wormhole-foundation/multigov\ncd evm # For evm testing/deploying\n</code></pre> </li> </ul>"},{"location":"products/multigov/guides/deploy-to-evm/#development-setup","title":"Development Setup","text":"<p>For developers looking to set up a local MultiGov environment:</p> <ol> <li> <p>Install dependencies:</p> <pre><code>forge install\n</code></pre> </li> <li> <p>Set up environment variables:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your specific configuration.</p> </li> <li> <p>Compile contracts:</p> <pre><code>forge build\n</code></pre> </li> <li> <p>Deploy contracts (example for Sepolia testnet): </p> <p>For hub chains:</p> <pre><code>forge script script/DeployHubContractsSepolia.s.sol --rpc-url $SEPOLIA_RPC_URL --broadcast\n</code></pre> <p>For spoke chains (e.g., Optimism Sepolia):</p> <pre><code>forge script script/DeploySpokeContractsOptimismSepolia.s.sol --rpc-url $OPTIMISM_SEPOLIA_RPC_URL --broadcast\n</code></pre> </li> </ol>"},{"location":"products/multigov/guides/deploy-to-evm/#configuration","title":"Configuration","text":"<p>When deploying MultiGov, several key parameters need to be set. Here are the most important configuration points:</p>"},{"location":"products/multigov/guides/deploy-to-evm/#hub-governor-key-parameters","title":"Hub Governor Key Parameters","text":"<ul> <li><code>initialVotingDelay</code> uint256: The delay measured in seconds before voting on a proposal begins. For example, <code>86400</code> is one day.</li> <li><code>initialProposalThreshold</code> uint256: The number of tokens needed to create a proposal.</li> <li><code>initialQuorum</code> uint256: The minimum number of votes needed for a proposal to be successful.</li> <li> <p><code>initialVoteWeightWindow</code> uint256: A window where the minimum checkpointed voting weight is taken for a given address. The window ends at the vote start for a proposal and begins at the vote start minus the vote weight window. The voting window is measured in seconds, e.g., <code>86400</code> is one day.</p> <p>Note</p> <p>This helps mitigate cross-chain double voting.</p> </li> </ul>"},{"location":"products/multigov/guides/deploy-to-evm/#hub-proposal-extender-key-parameters","title":"Hub Proposal Extender Key Parameters","text":"<ul> <li><code>extensionDuration</code> uint256: The amount of time, in seconds, for which target proposals will be extended. For example, <code>10800</code> is three hours.</li> <li><code>minimumExtensionDuration</code> uint256: Lower time limit, in seconds, for extension duration. For example, <code>3600</code> is one hour.</li> </ul>"},{"location":"products/multigov/guides/deploy-to-evm/#spoke-vote-aggregator-key-parameters","title":"Spoke Vote Aggregator Key Parameters","text":"<ul> <li> <p><code>initialVoteWindow</code> uint256: The moving window in seconds for vote weight checkpoints. These checkpoints are taken whenever an address that is delegating sends or receives tokens. For example, <code>86400</code> is one day.</p> <p>Note</p> <p>This is crucial for mitigating cross-chain double voting</p> </li> </ul>"},{"location":"products/multigov/guides/deploy-to-evm/#hub-evm-spoke-vote-aggregator-key-parameters","title":"Hub Evm Spoke Vote Aggregator Key Parameters","text":"<ul> <li><code>maxQueryTimestampOffset</code> uint256: The max timestamp difference, in seconds, between the requested target time in the query and the current block time on the hub. For example, <code>1800</code> is 30 minutes.</li> </ul>"},{"location":"products/multigov/guides/deploy-to-evm/#updateable-governance-parameters","title":"Updateable Governance Parameters","text":"<p>The following key parameters can be updated through governance proposals:</p> <ul> <li><code>votingDelay</code>: Delay before voting starts (in seconds).</li> <li><code>votingPeriod</code>: Duration of the voting period (in seconds).</li> <li><code>proposalThreshold</code>: Threshold for creating proposals (in tokens).</li> <li><code>quorum</code>: Number of votes required for quorum.</li> <li><code>extensionDuration</code>: The amount of time for which target proposals will be extended (in seconds).</li> <li><code>voteWeightWindow</code>: Window for vote weight checkpoints (in seconds).</li> <li><code>maxQueryTimestampOffset</code>: Max timestamp difference allowed between a query's target time and the hub's block time.</li> </ul> <p>These parameters can be queried using their respective getter functions on the applicable contract.</p> <p>To update these parameters, a governance proposal must be created, voted on, and executed through the standard MultiGov process.</p>"},{"location":"products/multigov/guides/deploy-to-solana/","title":"Deploy MultiGov on Solana","text":"<p>This guide provides instructions on how to set up and deploy the MultiGov Staking Program on Solana. Before proceeding with the deployment, ensure that MultiGov aligns with your project's governance needs by reviewing the system architecture.</p> <p>Once your project setup is complete, follow this guide to configure, compile, and deploy the necessary Solana programs and supporting accounts. This deployment enables decentralized governance participation on Solana as a spoke chain within the MultiGov system.  </p>"},{"location":"products/multigov/guides/deploy-to-solana/#prerequisites","title":"Prerequisites","text":"<p>To deploy MultiGov on Solana, ensure you have the following installed:  </p> <ul> <li>Git </li> <li>Node.js <code>v20.10.0</code></li> <li>Solana CLI <code>v1.18.20</code></li> <li>Anchor <code>v0.30.1</code></li> <li>Rust <code>v1.80.1</code></li> <li>Docker</li> </ul> <p>Then, clone the repository:  </p> <pre><code>git clone https://github.com/wormhole-foundation/multigov.git  \ncd multigov/solana/\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#build-the-project","title":"Build the Project","text":"<p>To create a verifiable build of the MultiGov Staking Program, run the following command:    </p> <pre><code>./scripts/build_verifiable_staking_program.sh\n</code></pre> <p>Once the build is complete, the compiled artifacts will be available in the <code>target</code> folder.</p>"},{"location":"products/multigov/guides/deploy-to-solana/#set-up-the-deployer-account","title":"Set Up the Deployer Account","text":"<p>For a successful deployment, you need a funded deployer account on Solana. This account will store the program and execute deployment transactions. </p> <p>In this section, you will create a new keypair, check the account balance, and ensure it has enough SOL tokens to cover deployment costs. If needed, you can fund the account using different methods before deploying. </p>"},{"location":"products/multigov/guides/deploy-to-solana/#generate-a-new-keypair","title":"Generate a New Keypair","text":"<p>To create a new keypair and save it to a file, run the following command:  </p> <pre><code>solana-keygen new --outfile ./app/keypairs/deployer.json\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#check-the-deployer-account-address","title":"Check the Deployer Account Address","text":"<p>To retrieve the public address of the newly created keypair, run the following command:  </p> <pre><code>solana address -k ./app/keypairs/deployer.json\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#check-the-deployer-account-balance","title":"Check the Deployer Account Balance","text":"<p>To verify the current balance of the deployer account, run the following command:  </p> <pre><code>solana balance -k ./app/keypairs/deployer.json\n</code></pre> <p>Warning</p> <p>When deploying the MultiGov Staking Program, the deployer account must have enough SOL to cover deployment costs and transaction fees:</p> <ul> <li>7.60219224 SOL for deployment costs</li> <li>0.00542 SOL for transaction fees</li> </ul>"},{"location":"products/multigov/guides/deploy-to-solana/#fund-the-deployer-account","title":"Fund the Deployer Account","text":"<p>If the account does not have enough SOL, use one of the following methods to add funds.  </p> <ul> <li> <p>Transfer SOL from another account: If you already have SOL in another account, transfer it using a wallet (Phantom, Solflare, etc.) or in the terminal.</p> <pre><code>solana transfer &lt;deployer_account_address&gt; &lt;amount&gt; --from /path/to/funder.json\n</code></pre> </li> <li> <p>Request an airdrop (devnet only): If deploying to devnet, you can request free SOL.</p> <pre><code>solana airdrop 2 -k ./app/keypairs/deployer.json\n</code></pre> </li> <li> <p>Use a Solana faucet (devnet only): You can use the official Solana faucet to receive 10 free SOL.</p> </li> </ul>"},{"location":"products/multigov/guides/deploy-to-solana/#deploy-the-multigov-staking-program","title":"Deploy the MultiGov Staking Program","text":"<p>With the deployer account set up and funded, you can deploy the MultiGov Staking Program to the Solana blockchain. This step involves deploying the program, verifying the deployment, and ensuring the necessary storage and metadata are correctly configured. Once the IDL is initialized, the program will be ready for further setup and interaction.</p>"},{"location":"products/multigov/guides/deploy-to-solana/#deploy-the-program","title":"Deploy the Program","text":"<p>Deploy the MultiGov Staking Program using Anchor:  </p> <pre><code>anchor deploy --provider.cluster https://api.devnet.solana.com --provider.wallet ./app/keypairs/deployer.json\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#verify-the-deployment","title":"Verify the Deployment","text":"<p>After deployment, check if the program is successfully deployed by running the following command:  </p> <pre><code>solana program show INSERT_PROGRAM_ID\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#extend-program-storage","title":"Extend Program Storage","text":"<p>If the deployed program requires additional storage space for updates or functionality, extend the program storage using the following command:  </p> <pre><code>solana program extend INSERT_PROGRAM_ID 800000\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#initialize-the-idl","title":"Initialize the IDL","text":"<p>To associate an IDL file with the deployed program, run the following command:  </p> <pre><code>anchor idl init --provider.cluster https://api.devnet.solana.com --filepath ./target/idl/staking.json INSERT_PROGRAM_ID\n</code></pre>"},{"location":"products/multigov/guides/deploy-to-solana/#configure-the-staking-program","title":"Configure the Staking Program","text":"<p>The final step after deploying the MultiGov Staking Program is configuring it for proper operation. This includes running a series of deployment scripts to initialize key components and set important governance parameters. These steps ensure that staking, governance, and cross-chain communication function as expected.</p>"},{"location":"products/multigov/guides/deploy-to-solana/#run-deployment-scripts","title":"Run Deployment Scripts","text":"<p>After deploying the program and initializing the IDL, execute the following scripts in order to set up the staking environment and necessary accounts.  </p> <ol> <li> <p>Initialize the MultiGov Staking Program with default settings:</p> <pre><code>npx ts-node app/deploy/01_init_staking.ts\n</code></pre> </li> <li> <p>Create an Account Lookup Table (ALT) to optimize transaction processing:</p> <pre><code>npx ts-node app/deploy/02_create_account_lookup_table.ts\n</code></pre> </li> <li> <p>Set up airlock accounts:</p> <pre><code>npx ts-node app/deploy/03_create_airlock.ts\n</code></pre> </li> <li> <p>Deploy a metadata collector:</p> <pre><code>npx ts-node app/deploy/04_create_spoke_metadata_collector.ts\n</code></pre> </li> <li> <p>Configure vote weight window lengths:</p> <pre><code>npx ts-node app/deploy/05_initializeVoteWeightWindowLengths.ts\n</code></pre> </li> <li> <p>Deploy the message executor for handling governance messages:</p> <pre><code>npx ts-node app/deploy/06_create_message_executor.ts\n</code></pre> </li> </ol>"},{"location":"products/multigov/guides/deploy-to-solana/#set-multigov-staking-program-key-parameters","title":"Set MultiGov Staking Program Key Parameters","text":"<p>When deploying MultiGov on Solana, several key parameters need to be set. Here are the most important configuration points:  </p> <ul> <li><code>maxCheckpointsAccountLimit</code> u64: The maximum number of checkpoints an account can have. For example, <code>654998</code> is used in production, while <code>15</code> might be used for testing.</li> <li><code>hubChainId</code> u16: The chain ID of the hub network where proposals are primarily managed. For example, <code>10002</code> for Sepolia testnet.</li> <li><code>hubProposalMetadata</code> [u8; 20]: An array of bytes representing the address of the Hub Proposal Metadata contract on Ethereum. This is used to identify proposals from the hub.</li> <li><code>voteWeightWindowLength</code> u64: Specifies the length of the checkpoint window in seconds in which the minimum voting weight is taken. The window ends at the vote start for a proposal and begins at the vote start minus the vote weight window. The vote weight window helps solve problems such as manipulating votes in a chain.</li> <li><code>votingTokenMint</code> Pubkey: The mint address of the token used for voting.</li> <li><code>governanceAuthority</code> Pubkey: The account's public key with the authority to govern the staking system. The <code>governanceAuthority</code> should not be the default Pubkey, as this would indicate an uninitialized or incorrectly configured setup.</li> <li><code>vestingAdmin</code> Pubkey: The account's public key for managing vesting operations. The <code>vestingAdmin</code> should not be the default Pubkey, as this would indicate an uninitialized or incorrectly configured setup.</li> <li><code>hubDispatcher</code> Pubkey: The Solana public key derived from an Ethereum address on the hub chain that dispatches messages to the spoke chains. This is crucial for ensuring that only authorized messages from the hub are executed on the spoke.</li> </ul>"},{"location":"products/multigov/guides/upgrade-evm/","title":"Upgrade MultiGov Contracts on EVM Chains","text":"<p>MultiGov is designed to be flexible but stable. Due to the system's complexity and cross-chain nature, upgrades should be rare and carefully considered. When upgrades are necessary, they must be meticulously planned and executed to ensure system integrity and continuity.</p>"},{"location":"products/multigov/guides/upgrade-evm/#key-considerations-for-upgrades","title":"Key Considerations for Upgrades","text":"<ul> <li> <p><code>HubGovernor</code>:</p> <ul> <li>Not upgradeable. A new deployment requires redeploying several components of the MultiGov system. Refer to the Process for Major System Upgrade section for more details.</li> </ul> </li> <li> <p><code>HubVotePool</code>:</p> <ul> <li>Can be replaced by setting a new <code>HubVotePool</code> on the <code>HubGovernor</code>.</li> <li>Requires re-registering all spokes on the new <code>HubVotePool</code>.</li> <li>Must register the query type and implementation for vote decoding by calling <code>registerQueryType</code> on the new <code>HubVotePool</code>.</li> <li>A new proposal would have to authorize the governor to use the newly created hub vote pool and will also handle registering the appropriate query decoders and registering the appropriate spoke <code>SpokeVoteAggregators</code>.</li> </ul> </li> <li> <p><code>SpokeMessageExecutor</code>:</p> <ul> <li>Upgradeable via UUPS proxy pattern.</li> <li>Stores critical parameters in <code>SpokeMessageExecutorStorage</code>.</li> </ul> </li> <li> <p><code>HubEvmSpokeAggregateProposer</code>:</p> <ul> <li>Needs redeployment if <code>HubGovernor</code> changes.</li> <li>Requires re-registering all spokes after redeployment.</li> </ul> </li> <li> <p><code>HubProposalMetadata</code>:</p> <ul> <li>Needs redeployment if <code>HubGovernor</code> changes, as it references <code>HubGovernor</code> as a parameter.</li> </ul> </li> <li> <p><code>SpokeMetadataCollector</code>:</p> <ul> <li>Requires redeployment if the hub chain ID changes or if <code>HubProposalMetadata</code> changes.</li> </ul> </li> </ul>"},{"location":"products/multigov/guides/upgrade-evm/#process-for-major-system-upgrade","title":"Process for Major System Upgrade","text":"<ol> <li>Deploy the new <code>HubGovernor</code> contract.</li> <li>Redeploy the following contracts:<ul> <li><code>HubEvmSpokeAggregateProposer</code> with the new <code>HubGovernor</code> address.</li> <li><code>HubProposalMetadata</code> referencing the new <code>HubGovernor</code>.</li> <li>If hub chain ID changes, redeploy <code>SpokeMetadataCollector</code> on all spoke chains.</li> </ul> </li> <li>Update the <code>HubVotePool</code> contract:<ul> <li>Set the new <code>HubVotePool</code> on the new <code>HubGovernor</code>.</li> <li>Register all spokes on the new <code>HubVotePool</code>.</li> <li>Register the query type and implementation for vote decoding (<code>HubEvmSpokeVoteDecoder</code>).</li> </ul> </li> <li>Re-register all spokes on the new <code>HubEvmSpokeAggregateProposer</code>.</li> <li>Conduct thorough testing of the new system setup and verify all cross-chain interactions are functioning correctly.</li> <li>Create a proposal to switch the timelock to the new governor and communicate clearly to the community what changes were made.</li> <li>Implement a transition period where the new system is closely monitored and address any issues that arise promptly.</li> </ol>"},{"location":"products/multigov/guides/upgrade-evm/#important-considerations","title":"Important Considerations","text":"<ul> <li>Always prioritize system stability, upgrades should only be performed when absolutely necessary.</li> <li>Thoroughly audit all new contract implementations before proposing an upgrade.</li> <li>Account for all affected components across all chains in the upgrade plan.</li> <li>Provide comprehensive documentation for the community about the upgrade process and any changes in functionality.</li> <li>Always test upgrades extensively on testnets before implementing in production.</li> </ul>"},{"location":"products/multigov/guides/upgrade-solana/","title":"Upgrade MultiGov Contracts on Solana","text":"<p>The MultiGov Staking Program on Solana is designed to be upgradeable while maintaining stability. Upgrades introduce improvements, bug fixes, and new features but must be carefully planned and executed to prevent disruptions. </p> <p>This guide covers the key considerations and step-by-step process for upgrading the MultiGov Staking Program, including updating the program binary, Interface Description Language (IDL), and <code>HubProposalMetadata</code> while ensuring cross-chain compatibility.</p>"},{"location":"products/multigov/guides/upgrade-solana/#key-considerations-for-upgrades","title":"Key Considerations for Upgrades","text":"<ul> <li> <p>Program upgradeability: You can upgrade the MultiGov Staking Program on Solana using the <code>anchor upgrade</code> command.</p> <ul> <li>You need the program's new bytecode (<code>.so</code> file) and an updated IDL file to reflect any changes in the program's interface to complete an upgrade.</li> <li>The program's authority (deployer) must execute the upgrade.</li> </ul> </li> <li> <p><code>HubProposalMetadata</code>: Can be updated without redeploying the entire program. You can do this by invoking the <code>updateHubProposalMetadata</code> instruction.</p> <ul> <li>You must carefully validate updates to <code>HubProposalMetadata</code> to ensure compatibility with the existing system.</li> </ul> </li> <li> <p>Cross-chain compatibility: Ensure any changes to the Solana program do not break compatibility with the Ethereum-based <code>HubGovernor</code>.</p> <ul> <li>Test upgrades thoroughly on devnet before deploying to mainnet.</li> </ul> </li> </ul>"},{"location":"products/multigov/guides/upgrade-solana/#upgrade-the-multigov-program","title":"Upgrade the MultiGov Program","text":"<p>Follow these steps to upgrade the MultiGov Staking Program on Solana:</p> <ol> <li> <p>Prepare the new program binary: Build the updated program using the provided script.</p> <pre><code>./scripts/build_verifiable_staking_program.sh\n</code></pre> <p>The new program binary will be located at:</p> <pre><code>target/deploy/staking.so\n</code></pre> </li> <li> <p>Upgrade the program: Use the anchor upgrade command to deploy the new program binary.</p> <pre><code>anchor upgrade --program-id INSERT_PROGRAM_ID --provider.cluster INSERT_CLUSTER_URL INSERT_PATH_TO_PROGRAM_BINARY\n</code></pre> <p>Your completed anchor upgrade command should resemble the following: <pre><code>anchor upgrade --program-id DgCSKsLDXXufYeEkvf21YSX5DMnFK89xans5WdSsUbeY --provider.cluster https://api.devnet.solana.com ./target/deploy/staking.so\n</code></pre></p> </li> <li> <p>Update the IDL: After upgrading the program, update the IDL to reflect any changes in the program's interface.</p> <pre><code>anchor idl upgrade INSERT_PROGRAM_ID --filepath INSERT_PATH_TO_IDL_FILE\n</code></pre> <p>Your completed IDL upgrade command should resemble the following: <pre><code>anchor idl upgrade --provider.cluster https://api.devnet.solana.com --filepath ./target/idl/staking.json DgCSKsLDXXufYeEkvf21YSX5DMnFK89xans5WdSsUbeY\n</code></pre></p> </li> <li> <p>Update <code>HubProposalMetadata</code>: If <code>HubProposalMetadata</code> requires an update, run the following script to invoke the <code>updateHubProposalMetadata</code> instruction and apply the changes.</p> <pre><code>npx ts-node app/deploy/07_update_HubProposalMetadata.ts\n</code></pre> </li> </ol>"},{"location":"products/multigov/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerConvergeEVM WebsiteCreditCoinEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerHyperCoreEVM Website Developer DocsHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlasmaEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeiCosmWasm Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSonicEVM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/multigov/tutorials/treasury-proposal/","title":"Cross-Chain Treasury Management Proposal","text":"<p>This guide walks through the process of creating and executing a cross-chain governance proposal to mint W tokens to both the Optimism and Arbitrum treasuries. In this tutorial, we'll cover how to create a proposal on the hub chain (Ethereum Mainnet), cast votes from spoke chains (Optimism and Arbitrum), aggregate votes, and execute the proposal.</p>"},{"location":"products/multigov/tutorials/treasury-proposal/#create-a-proposal","title":"Create a Proposal","text":"<p>The first step is to create a proposal on the hub chain, which in this case is Ethereum Mainnet. The proposal will contain instructions to mint 10 W tokens to the Optimism treasury and 15 ETH to the Arbitrum treasury.</p> <p>In the following code snippet, we initialize the proposal with two transactions, each targeting the Hub's Message Dispatcher contract. These transactions will relay the governance actions to the respective spoke chains via Wormhole.</p> <p>Key actions:</p> <ul> <li>Define the proposal targets (two transactions to the Message Dispatcher).</li> <li>Set values for each transaction (in this case, both are 0 as we're not transferring any native ETH).</li> <li>Encode the calldata for minting 10 W tokens on Optimism and sending 15 ETH to Arbitrum.</li> <li>Finally, we submit the proposal to the <code>HubGovernor</code> contract.</li> </ul> <pre><code>HubGovernor governor = HubGovernor(GOVERNOR_ADDRESS);\n// Prepare proposal details\naddress[] memory targets = new address[](2);\ntargets[0] = HUB_MESSAGE_DISPATCHER_ADDRESS;\ntargets[1] = HUB_MESSAGE_DISPATCHER_ADDRESS;\nuint256[] memory values = new uint256[](2);\nvalues[0] = 0;\nvalues[1] = 0;\nbytes[] memory calldatas = new bytes[](2);\n// Prepare message for Optimism to mint 10 W tokens\n// bytes created using abi.encodeWithSignature(\"mint(address,uint256)\", 0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91, 10e18)\ncalldatas[0] = abi.encodeWithSignature(\n    \"dispatch(bytes)\", \n    abi.encode(\n        OPTIMISM_WORMHOLE_CHAIN_ID,\n        [OPTIMISM_WORMHOLE_TREASURY_ADDRESS],\n        [uint256(10 ether)],\n        [hex\"0x40c10f19000000000000000000000000b0ffa8000886e57f86dd5264b9582b2ad87b2b910000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000\"] \n    )\n);\n// Prepare message for Arbitrum to receive 15 ETH\ncalldatas[1] = abi.encodeWithSignature(\n    \"dispatch(bytes)\", \n    abi.encode(\n        ARBITRUM_WORMHOLE_CHAIN_ID,\n        [ARBITRUM_WORMHOLE_TREASURY_ADDRESS],\n        [uint256(15 ether)],\n        [hex\"0x40c10f19000000000000000000000000b0ffa8000886e57f86dd5264b9582b2ad87b2b910000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000\"] \n    )\n);\nstring memory description = \"Mint 10 W to Optimism treasury and 10 W to Arbitrum treasury via Wormhole\";\n// Create the proposal\nuint256 proposalId = governor.propose(\n    targets, values, calldatas, description\n)\n</code></pre> Parameters <p><code>GOVERNOR_ADDRESS</code> address</p> <p>The address of the <code>HubGovernor</code> contract on Ethereum Mainnet.</p> <p><code>targets</code> address[]</p> <p>An array that specifies the addresses that will receive the proposal's actions. Here, both are set to the <code>HUB_MESSAGE_DISPATCHER_ADDRESS</code>.</p> <p><code>values</code> uint256[]</p> <p>An array containing the value of each transaction (in Wei). In this case, both are set to zero because no ETH is being transferred.</p> <p><code>calldatas</code> bytes[]</p> <p>The calldata for the proposal. These are encoded contract calls containing cross-chain dispatch instructions for minting tokens and sending ETH. The calldata specifies minting 10 W tokens to the Optimism treasury and sending 15 ETH to the Arbitrum treasury.</p> <p><code>description</code> string</p> <p>A description of the proposal, outlining the intent to mint tokens to Optimism and send ETH to Arbitrum.</p> Returns <p><code>proposalId</code> uint256</p> <p>The ID of the newly created proposal on the hub chain. </p>"},{"location":"products/multigov/tutorials/treasury-proposal/#vote-on-the-proposal-via-spoke","title":"Vote on the Proposal via Spoke","text":"<p>Once the proposal is created on the hub chain, stakeholders can cast their votes on the spoke chains. This snippet demonstrates how to connect to a spoke chain and cast a vote for the proposal. The voting power (weight) is calculated based on each stakeholder's token holdings on the spoke chain.</p> <p>Key actions:</p> <ul> <li>Connect to the <code>SpokeVoteAggregator</code> contract on the spoke chain. This contract aggregates votes from the spoke chains and relays them to the hub chain.</li> <li>Cast a vote in support of the proposal.</li> </ul> <pre><code>// Connect to the SpokeVoteAggregator contract of the desired chain\nSpokeVoteAggregator voteAggregator = SpokeVoteAggregator(VOTE_AGGREGATOR_ADDRESS);\n// Cast a vote\nuint8 support = 1; // 1 for supporting, 0 for opposing\nuint256 weight = voteAggregator.castVote(proposalId, support);\n</code></pre> Parameters <p><code>VOTE_AGGREGATOR_ADDRESS</code> address</p> <p>The address of the <code>SpokeVoteAggregator</code> contract on the spoke chain (Optimism or Arbitrum).</p> <p><code>proposalId</code> uint256</p> <p>The ID of the proposal created on the hub chain, which is being voted on.</p> <p><code>support</code> uint8</p> <p>The vote being cast (<code>1</code> for supporting the proposal, <code>0</code> for opposing).</p> Returns <p><code>weight</code> uint256</p> <p>The weight of the vote, determined by the voter\u2019s token holdings on the spoke chain.</p>"},{"location":"products/multigov/tutorials/treasury-proposal/#vote-aggregation","title":"Vote Aggregation","text":"<p>In the background process, votes cast on the spoke chains are aggregated and sent back to the hub chain for final tallying. This is typically handled off-chain by a \"crank turner\" service, which periodically queries the vote status and updates the hub chain.</p> <p>Key actions:</p> <ul> <li>Aggregate votes from different chains and submit them to the hub chain for tallying.</li> </ul> <pre><code>// Aggregate votes sent to Hub (this would typically be done by a \"crank turner\" off-chain)\nhubVotePool.crossChainVote(queryResponseRaw, signatures);\n</code></pre> Parameters <p><code>queryResponseRaw</code> bytes</p> <p>The raw vote data from the spoke chains.</p> <p><code>signatures</code> bytes</p> <p>Cryptographic signatures that verify the validity of the votes from the spoke chains.</p>"},{"location":"products/multigov/tutorials/treasury-proposal/#execute-proposal-and-dispatch-cross-chain-messages","title":"Execute Proposal and Dispatch Cross-Chain Messages","text":"<p>After the proposal passes and the votes are tallied, the next step is to execute the proposal. The <code>HubGovernor</code> contract will dispatch the cross-chain messages to the spoke chains, where the respective treasuries will receive the tokens.</p> <p>Key actions:</p> <ul> <li>Execute the proposal after the voting period ends and the proposal passes.</li> <li>The <code>execute</code> function finalizes the proposal execution by dispatching the cross-chain governance actions. The <code>descriptionHash</code> ensures that the executed proposal matches the one that was voted on.</li> </ul> <pre><code>HubGovernor governor = HubGovernor(GOVERNOR_ADDRESS);\n// Standard timelock execution\ngovernor.execute(targets, values, calldatas, descriptionHash);\n</code></pre> Parameters <p><code>governor</code> HubGovernor</p> <p>The <code>HubGovernor</code> contract instance.</p> <p><code>targets</code> address[]</p> <p>An array containing the target addresses for the proposal\u2019s transactions (in this case, the <code>HUB_MESSAGE_DISPATCHER_ADDRESS</code> for both).</p> <p><code>values</code> uint256[]</p> <p>An array of values (in Wei) associated with each transaction (both are zero in this case).</p> <p><code>calldatas</code> bytes[]</p> <p>The encoded transaction data to dispatch the governance actions (e.g., minting tokens and transferring ETH).</p> <p><code>descriptionHash</code> bytes32</p> <p>A hash of the proposal\u2019s description, used to verify the proposal before execution.</p> Returns <p>No direct return, but executing this function finalizes the cross-chain governance actions by dispatching the encoded messages via Wormhole to the spoke chains.</p> <p>Once the proposal is executed, the encoded messages will be dispatched via Wormhole to the spoke chains, where the Optimism and Arbitrum treasuries will receive their respective funds.</p>"},{"location":"products/multigov/tutorials/treasury-proposal/#conclusion","title":"Conclusion","text":"<p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/queries/faqs/","title":"Queries FAQs","text":""},{"location":"products/queries/faqs/#what-is-queries","title":"What is Queries?","text":"<p>Queries is Wormhole's on-demand, Guardian-attested data service. It lets you fetch real-time, verifiable on-chain data via a simple REST endpoint and use the signed result on-chain without sending a transaction or paying gas. You can request data on one chain and use the verified result on another. For a quick video summary, watch the Queries speed round.</p>"},{"location":"products/queries/faqs/#what-libraries-are-available-to-handle-queries","title":"What libraries are available to handle queries?","text":"<ul> <li> <p>The Query TypeScript SDK can be used to create query requests, mock query responses for testing, and parse query responses. The SDK also includes utilities for posting query responses.</p> </li> <li> <p>The Solidity <code>QueryResponseLib</code> library can be used to parse and verify query responses on EVM chains. See the Solana Stake Pool repository as an example use case.</p> </li> <li> <p><code>QueryRequestBuilder.sol</code> can be used for mocking query requests and responses in Forge tests.</p> </li> <li> <p>The Go query package can also be used to create query requests and parse query responses.</p> </li> </ul> <p>Note</p> <p>A Rust SDK for Solana is being actively investigated by the Wormhole contributors. See the Solana Queries Verification repository as a proof of concept.</p>"},{"location":"products/queries/faqs/#are-there-any-query-examples","title":"Are there any query examples?","text":"<p>Certainly. You can find a complete guide on the Use Queries page. Additionally, you can find full code examples in the following repositories:</p> <ul> <li>Basic Example Query Demo</li> <li>Solana Stake Pool Example Query</li> <li>Solana Program Derived Address (PDA) / Token Account Balance Example Query</li> <li>Solana Queries Verification Example</li> </ul>"},{"location":"products/queries/faqs/#what-is-the-format-of-the-response-signature","title":"What is the format of the response signature?","text":"<p>The Guardian node calculates an ECDSA signature using <code>Sign</code> function of the crypto package where the digest hash is:</p> <p><code>keccak256(\"query_response_0000000000000000000|\"+keccak256(responseBytes))</code> </p> <p>See the Guardian Key Usage white paper for more background. Once this signature is created, the Guardian's index in the Guardian set is appended to the end.</p> <p>Note</p> <p>If you are used to <code>ecrecover</code> you will notice that the <code>v</code> byte is <code>0</code> or <code>1</code> as opposed to <code>27</code> or <code>28</code>. The <code>signaturesToEvmStruct</code> method in the Query TypeScript SDK accounts for this as well as structuring the signatures into an <code>IWormhole.SignatureStruct[]</code>.</p>"},{"location":"products/queries/faqs/#can-anyone-run-a-query-proxy-server","title":"Can anyone run a query proxy server?","text":"<p>Permissions for Query Proxy are managed by the Guardians. The Guardian nodes are configured to only listen to a set of allow-listed proxies. However, it is possible that this restriction may be lifted in the future and/or more proxies could be added.</p> <p>It is also important to note that the proxies don't impact the verifiability of the request or result, i.e., their role in the process is trustless.</p>"},{"location":"products/queries/faqs/#what-does-queries-offer-over-an-rpc-service","title":"What Does Queries Offer over an RPC Service","text":"<p>Wormhole Queries provides on-demand, attested, on-chain, verifiable RPC results. Each Guardian independently executes the specified query and returns the result and their signature. The proxy handles aggregating the results and signatures, giving you a single result (all within one REST call) with a quorum of signatures suitable for on-chain submission, parsing, and verification using one of our examples or SDKs.</p>"},{"location":"products/queries/get-started/","title":"Get Started with Queries","text":"<p>Queries lets you fetch on-chain data from supported blockchains using <code>eth_call</code>-style requests without submitting transactions or paying gas. The Guardian network signs the result, making it verifiable and suitable for use on-chain.</p> <p>This guide walks you through requesting an API key, constructing your first query using the Wormhole Query SDK, and decoding the result.</p>"},{"location":"products/queries/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>Node.js and npm.</li> <li>A basic understanding of JavaScript or TypeScript.</li> <li>An RPC endpoint for a supported chain (e.g., Ethereum Sepolia).</li> <li>A Wormhole Queries API key.</li> </ul>"},{"location":"products/queries/get-started/#request-an-api-key","title":"Request an API Key","text":"<p>Wormhole Queries is in closed beta, but you can start building today.</p> <p>To interact with the system, you will use the Query Proxy. This hosted service receives your query, routes it to the appropriate chain, and returns a signed, verifiable response from the Guardian network. The Query Proxy allows you to fetch on-chain data without infrastructure overhead.</p> <p>To request access, join the beta by filling out the access form. Once approved, you will receive an API key via email.</p>"},{"location":"products/queries/get-started/#construct-a-query-and-decode-the-response","title":"Construct a Query and Decode the Response","text":"<p>Using the Wormhole Query Proxy, you will write a lightweight script to query a token contract's <code>name()</code> on Ethereum Sepolia. The response is signed by the Guardian network and locally decoded for use in your application.</p> <ol> <li> <p>Create a new directory for your script and initialize a Node.js project:</p> <pre><code>mkdir queries\ncd queries\nnpm init -y\n</code></pre> </li> <li> <p>Add the Wormhole Query SDK, Axios, Web3, and helper tools:</p> <pre><code>npm install axios web3 @wormhole-foundation/wormhole-query-sdk\nnpm install -D tsx typescript\n</code></pre> </li> <li> <p>Add a new <code>query.ts</code> script where you will write and run your query logic:</p> <pre><code>touch query.ts\n</code></pre> </li> <li> <p>Paste the following script into <code>query.ts</code> to build and submit a query to the token contract's <code>name()</code> function on Ethereum Sepolia, then decode the Guardian-signed response:</p> <pre><code>// Import the SDK types and helpers for making the query\nimport {\n  EthCallQueryRequest,\n  EthCallQueryResponse,\n  PerChainQueryRequest,\n  QueryRequest,\n  QueryResponse,\n} from '@wormhole-foundation/wormhole-query-sdk';\nimport axios from 'axios';\nimport * as eth from 'web3';\n\n// Define the endpoint and query parameters\nconst query_url = 'https://testnet.query.wormhole.com/v1/query';\nconst rpc = 'https://ethereum-sepolia.rpc.subquery.network/public';\nconst chain_id = 10002; // Sepolia (Wormhole chain ID)\nconst token = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'; // USDC contract\nconst data = '0x06fdde03'; // function selector for `name()`\n\n// Load your API key from environment variables\nconst apiKey = process.env.API_KEY;\nif (!apiKey) throw new Error('API_KEY is not set in your environment');\n\n(async () =&gt; {\n  // Fetch the latest block number (required to anchor the query)\n  const latestBlock = (\n    await axios.post(rpc, {\n      method: 'eth_getBlockByNumber',\n      params: ['latest', false],\n      id: 1,\n      jsonrpc: '2.0',\n    })\n  ).data?.result?.number;\n\n  // Build the query targeting the token contract's name() function\n  const request = new QueryRequest(1, [\n    new PerChainQueryRequest(\n      chain_id,\n      new EthCallQueryRequest(latestBlock, [{ to: token, data: data }])\n    ),\n  ]);\n  const serialized = request.serialize();\n\n  // Send the query to the Wormhole Query Proxy\n  const response = await axios.post(\n    query_url,\n    { bytes: Buffer.from(serialized).toString('hex') },\n    { headers: { 'X-API-Key': apiKey } }\n  );\n\n  // Decode the response returned by the Guardian network\n  const queryResponse = QueryResponse.from(response.data.bytes);\n  const chainResponse = queryResponse.responses[0]\n    .response as EthCallQueryResponse;\n  const name = eth.eth.abi.decodeParameter('string', chainResponse.results[0]);\n\n  // Output the results\n  console.log('\\n\\nParsed chain response:');\n  console.log(chainResponse);\n  console.log('\\nToken name:', name);\n})();\n</code></pre> </li> <li> <p>Use your API key to execute the script:</p> <pre><code>API_KEY=INSERT_QUERIES_API_KEY npx tsx query.ts\n</code></pre> </li> </ol> <p>The expected output should be similar to this:</p> API_KEY=123_456_789 npx tsx query.ts Parsed chain response: EthCallQueryResponse { blockNumber: 8193548n, blockHash: '0xef97290e043a530dd2cdf2d4c513397495029cdf2ef3e916746c837dadda51a8', blockTime: 1745595132000000n, results: [ '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000'] }  Token name: USDC"},{"location":"products/queries/get-started/#next-steps","title":"Next Steps","text":"<p>Now that you've successfully run your first verifiable query, you are ready to go deeper. Check out the following guides to build on what you've learned:</p> <ul> <li>Query Solana: Try fetching Solana stake pools to see how cross-chain queries apply beyond EVM.</li> <li>Use Queries: Take a deeper look at the complete Queries lifecycle.</li> <li>Browse the Supported Networks: See where Queries are supported.</li> </ul>"},{"location":"products/queries/overview/","title":"Queries Overview","text":"<p>Queries provide on-demand access to Guardian-attested on-chain data. They allow smart contracts to fetch real-time, verifiable data from across the multichain ecosystem, such as prices, rates, and liquidity.</p>"},{"location":"products/queries/overview/#key-features","title":"Key Features","text":"<ul> <li>On-demand data access: Fetch price feeds, interest rates, and other data in real-time.</li> <li>Guardian attested: All data is signed by Guardians for trustless validation.</li> <li>Cross-chain ready: Request data on one chain, use it on another.</li> <li>Smart contract integration: Results are delivered as Verified Action Approvals (VAAs), readable by smart contracts.</li> <li>Chain agnostic: Works across supported EVM chains, Solana, Sui, and more.</li> </ul>"},{"location":"products/queries/overview/#how-it-works","title":"How It Works","text":"<p>A query request follows a simple but robust lifecycle. The off-chain service responsible for handling requests is called the CCQ Server (Cross-Chain Query Server), also referred to as the Query Server throughout this documentation.</p> <ol> <li>An off-chain app sends a query to the CCQ Server via HTTPS.</li> <li>The CCQ Server checks the request and shares it with Guardians.</li> <li>Guardians independently fetch the data, verify it, and sign the result.</li> <li>Once enough Guardians (2/3 quorum) return matching results, the CCQ Server aggregates and sends the final response.</li> <li>The off-chain app submits this result to a smart contract, which verifies the Guardian signatures and uses the data.</li> </ol> <p>The CCQ Server is permissioned but trustless. Most queries resolve in under one second, and Guardians retry failed requests for up to one minute. Up to 255 queries can be batched together to optimize performance, supporting efficient multichain workflows.</p> <p></p>"},{"location":"products/queries/overview/#use-cases","title":"Use Cases","text":"<p>Queries enable a wide range of cross-chain applications. Below are common use cases and the Wormhole stack components you can use to build them.</p> <ul> <li> <p>Borrowing and Lending Across Chains (e.g., Folks Finance)</p> <ul> <li>Queries: Fetch rates and prices in real-time.</li> <li>Messaging: Sync actions between chains.</li> <li>Native Token Transfers: Transfer collateral as native assets.</li> </ul> </li> <li> <p>Cross-Chain Swaps and Liquidity Aggregation (e.g., StellaSwap)</p> <ul> <li>Queries: Fetch live prices for optimal trade execution.</li> <li>Connect: Handle user-friendly asset transfers.</li> <li>Native Token Transfers: Moves native tokens.</li> </ul> </li> <li> <p>Real-Time Price Feeds and Trading Strategies (e.g., Infinex)</p> <ul> <li>Queries: Fetch price feeds.</li> <li>Messaging: Trigger trades.</li> </ul> </li> <li> <p>Multichain Prediction Markets</p> <ul> <li>Queries: Fetch market data and odds.</li> <li>Settlement: Automates token execution.</li> </ul> </li> <li> <p>Oracle Networks (e.g., Pyth)</p> <ul> <li>Queries: Source data from chains.</li> <li>Messaging: Ensures tamper-proof data relay across networks.</li> </ul> </li> </ul>"},{"location":"products/queries/overview/#next-steps","title":"Next Steps","text":"<p>Follow these steps to get started with Queries:</p> <p>Get Started with Queries</p> <p>Install the SDK, request an API key, and run your first verifiable query.</p> <p>Construct a Query</p> <p>Set up the query configuration.</p> <p>Make a Query Request</p> <p>Send your query to the Query Server using HTTPS.</p> <p>Submit a Query Response</p> <p>Post the Guardian-signed VAA to your smart contract.</p>"},{"location":"products/queries/guides/use-queries/","title":"Use Queries","text":"<p>You can visit the Example Queries Demo to view an interactive example of an application interacting with the Query Demo contract.</p> <p>This guide covers using a simple <code>eth_call</code> request to get the total supply of WETH on Ethereum.</p>"},{"location":"products/queries/guides/use-queries/#construct-a-query","title":"Construct a Query","text":"<p>You can use the Wormhole Query SDK to construct a query. You will also need an RPC endpoint from the provider of your choice. This example uses Axios for RPC requests. Ensure that you also have TypeScript installed. </p> <pre><code>npm i @wormhole-foundation/wormhole-query-sdk axios\n</code></pre> <p>In order to make an <code>EthCallQueryRequest</code>, you need a specific block number or hash as well as the call data to request.</p> <p>You can request the latest block from a public node using <code>eth_getBlockByNumber</code>.</p> <pre><code>const rpc = 'https://ethereum.publicnode.com';\n  const latestBlock: string = (\n    await axios.post(rpc, {\n      method: 'eth_getBlockByNumber',\n      params: ['latest', false],\n      id: 1,\n      jsonrpc: '2.0',\n    })\n  ).data?.result?.number;\n</code></pre> <p>Then construct the call data.</p> <pre><code>const callData: EthCallData = {\n  to: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', // WETH\n  data: '0x18160ddd', // web3.eth.abi.encodeFunctionSignature(\"totalSupply()\")\n};\n</code></pre> <p>Finally, put it all together in a <code>QueryRequest</code>.</p> <pre><code>  // Form the query request\n  const request = new QueryRequest(\n    0, // Nonce\n    [\n      new PerChainQueryRequest(\n        2, // Ethereum Wormhole Chain ID\n        new EthCallQueryRequest(latestBlock, [callData])\n      ),\n    ]\n  );\n</code></pre> <p>This request consists of one <code>PerChainQueryRequest</code>, which is an <code>EthCallQueryRequest</code> to Ethereum. You can use <code>console.log</code> to print the JSON object and review the structure.</p> <pre><code>  console.log(JSON.stringify(request, undefined, 2));\n  // {\n  //   \"nonce\": 0,\n  //   \"requests\": [\n  //     {\n  //       \"chainId\": 2,\n  //       \"query\": {\n  //         \"callData\": [\n  //           {\n  //             \"to\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  //             \"data\": \"0x18160ddd\"\n  //           }\n  //         ],\n  //         \"blockTag\": \"0x11e9068\"\n  //       }\n  //     }\n  //   ],\n  //   \"version\": 1\n  // }\n</code></pre>"},{"location":"products/queries/guides/use-queries/#mock-a-query","title":"Mock a Query","text":"<p>For easier testing, the Query SDK provides a <code>QueryProxyMock</code> method. This method will perform the request and sign the result with the Devnet Guardian key. The <code>mock</code> call returns the same format as the Query Proxy.</p> <pre><code>  const mock = new QueryProxyMock({ 2: rpc });\n  const mockData = await mock.mock(request);\n  console.log(mockData);\n  // {\n  //   signatures: ['...'],\n  //   bytes: '...'\n  // }\n</code></pre> <p>This response is suited for on-chain use, but the SDK also includes a parser to make the results readable via the client.</p> <pre><code>  const mockQueryResponse = QueryResponse.from(mockData.bytes);\n  const mockQueryResult = (\n    mockQueryResponse.responses[0].response as EthCallQueryResponse\n  ).results[0];\n  console.log(\n    `Mock Query Result: ${mockQueryResult} (${BigInt(mockQueryResult)})`\n  );\n  // Mock Query Result:\n  // 0x000000000000000000000000000000000000000000029fd09d4d81addb3ccfee\n  // (3172556167631284394053614)\n</code></pre> <p>Testing this all together might look like the following:</p> <pre><code>import {\n  EthCallData,\n  EthCallQueryRequest,\n  EthCallQueryResponse,\n  PerChainQueryRequest,\n  QueryProxyMock,\n  QueryRequest,\n  QueryResponse,\n} from '@wormhole-foundation/wormhole-query-sdk';\nimport axios from 'axios';\n\nconst rpc = 'https://ethereum.publicnode.com';\nconst callData: EthCallData = {\n  to: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', // WETH\n  data: '0x18160ddd', // web3.eth.abi.encodeFunctionSignature(\"totalSupply()\")\n};\n\n(async () =&gt; {\n  const latestBlock: string = (\n    await axios.post(rpc, {\n      method: 'eth_getBlockByNumber',\n      params: ['latest', false],\n      id: 1,\n      jsonrpc: '2.0',\n    })\n  ).data?.result?.number;\n  if (!latestBlock) {\n    console.error(`\u274c Invalid block returned`);\n    return;\n  }\n  console.log('Latest Block:     ', latestBlock, `(${BigInt(latestBlock)})`);\n  const targetResponse = await axios.post(rpc, {\n    method: 'eth_call',\n    params: [callData, latestBlock],\n    id: 1,\n    jsonrpc: '2.0',\n  });\n  // console.log(finalizedResponse.data);\n  if (targetResponse.data.error) {\n    console.error(`\u274c ${targetResponse.data.error.message}`);\n  }\n  const targetResult = targetResponse.data?.result;\n  console.log('Target Result:    ', targetResult, `(${BigInt(targetResult)})`);\n  // Form the query request\n  const request = new QueryRequest(\n    0, // Nonce\n    [\n      new PerChainQueryRequest(\n        2, // Ethereum Wormhole Chain ID\n        new EthCallQueryRequest(latestBlock, [callData])\n      ),\n    ]\n  );\n  console.log(JSON.stringify(request, undefined, 2));\n  const mock = new QueryProxyMock({ 2: rpc });\n  const mockData = await mock.mock(request);\n  console.log(mockData);\n  const mockQueryResponse = QueryResponse.from(mockData.bytes);\n  const mockQueryResult = (\n    mockQueryResponse.responses[0].response as EthCallQueryResponse\n  ).results[0];\n  console.log(\n    `Mock Query Result: ${mockQueryResult} (${BigInt(mockQueryResult)})`\n  );\n})();\n</code></pre>"},{"location":"products/queries/guides/use-queries/#fork-testing","title":"Fork Testing","text":"<p>It is common to test against a local fork of Mainnet with something like</p> <pre><code>anvil --fork-url https://ethereum.publicnode.com\n</code></pre> <p>In order for mock requests to verify against the Mainnet Core Contract, you need to replace the current Guardian set with the single Devnet key used by the mock.</p> <p>Here's an example for Ethereum Mainnet, where the <code>-a</code> parameter is the Core Contract address on that chain.</p> <pre><code>npx @wormhole-foundation/wormhole-cli evm hijack -a 0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B -g 0xbeFA429d57cD18b7F8A4d91A2da9AB4AF05d0FBe\n</code></pre> <p>If you are using <code>EthCallWithFinality</code>, you will need to mine additional blocks (32 if using Anvil) after the latest transaction for it to become finalized. Anvil supports auto-mining with the <code>-b</code> flag if you want to test code that waits naturally for the chain to advance. For integration tests, you may want to simply <code>anvil_mine</code> with <code>0x20</code>.</p>"},{"location":"products/queries/guides/use-queries/#make-a-query-request","title":"Make a Query Request","text":"<p>The standardized means of making a <code>QueryRequest</code> with an API key is as follows:</p> <pre><code>const serialized = request.serialize();\nconst proxyResponse =\n  (await axios.post) &lt;\n  QueryProxyQueryResponse &gt;\n  (QUERY_URL,\n  {\n    bytes: Buffer.from(serialized).toString(\"hex\"),\n  },\n  { headers: { \"X-API-Key\": YOUR_API_KEY } });\n</code></pre> <p>Remember to always take steps to protect your sensitive API keys, such as defining them in <code>.env</code> files and including such files in your <code>.gitignore</code>.</p> <p>A Testnet Query Proxy is available at <code>https://testnet.query.wormhole.com/v1/query</code></p> <p>A Mainnet Query Proxy is available at <code>https://query.wormhole.com/v1/query</code></p>"},{"location":"products/queries/guides/use-queries/#verify-a-query-response-on-chain","title":"Verify a Query Response On-Chain","text":"<p>A <code>QueryResponseLib</code> library is provided to assist with verifying query responses. You can begin by installing the Wormhole Solidity SDK with the following command:</p> <pre><code>forge install wormhole-foundation/wormhole-solidity-sdk\n</code></pre> <p>Broadly, using a query response on-chain comes down to three main steps:</p> <ol> <li>Parse and verify the query response.</li> <li>The <code>parseAndVerifyQueryResponse</code> handles verifying the Guardian signatures against the current Guardian set stored in the Core bridge contract.</li> <li>Validate the request details. This may be different for every integrator depending on their use case, but generally checks the following:<ul> <li>Is the request against the expected chain?</li> <li>Is the request of the expected type? The <code>parseEthCall</code> helpers perform this check when parsing.</li> <li>Is the resulting block number and time expected? Some consumers might require that a block number be higher than the last, or the block time be within the last 5 minutes. <code>validateBlockNum</code> and <code>validateBlockTime</code> can help with the checks.</li> <li>Is the request for the expected contract and function signature? The <code>validateMultipleEthCallData</code> can help with non-parameter-dependent cases.</li> <li>Is the result of the expected length for the expected result type?</li> </ul> </li> <li>Run <code>abi.decode</code> on the result.</li> </ol> <p>See the QueryDemo contract for an example and read the docstrings of the preceding methods for detailed usage instructions.</p> View the complete <code>QueryDemo</code> <pre><code>// contracts/query/QueryDemo.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"wormhole-solidity-sdk/libraries/BytesParsing.sol\";\nimport \"wormhole-solidity-sdk/interfaces/IWormhole.sol\";\nimport \"wormhole-solidity-sdk/QueryResponse.sol\";\n\nerror InvalidOwner();\n// @dev for the onlyOwner modifier\nerror InvalidCaller();\nerror InvalidCalldata();\nerror InvalidForeignChainID();\nerror ObsoleteUpdate();\nerror StaleUpdate();\nerror UnexpectedResultLength();\nerror UnexpectedResultMismatch();\n\n/// @dev QueryDemo is an example of using the QueryResponse library to parse and verify Cross Chain Query (CCQ) responses.\ncontract QueryDemo is QueryResponse {\n    using BytesParsing for bytes;\n\n    struct ChainEntry {\n        uint16 chainID;\n        address contractAddress;\n        uint256 counter;\n        uint256 blockNum;\n        uint256 blockTime;\n    }\n\n    address private immutable owner;\n    uint16 private immutable myChainID;\n    mapping(uint16 =&gt; ChainEntry) private counters;\n    uint16[] private foreignChainIDs;\n\n    bytes4 public GetMyCounter = bytes4(hex\"916d5743\");\n\n    constructor(address _owner, address _wormhole, uint16 _myChainID) QueryResponse(_wormhole) {\n        if (_owner == address(0)) {\n            revert InvalidOwner();\n        }\n        owner = _owner;\n\n        myChainID = _myChainID;\n        counters[_myChainID] = ChainEntry(_myChainID, address(this), 0, 0, 0);\n    }\n\n    // updateRegistration should be used to add the other chains and to set / update contract addresses.\n    function updateRegistration(uint16 _chainID, address _contractAddress) public onlyOwner {\n        if (counters[_chainID].chainID == 0) {\n            foreignChainIDs.push(_chainID);\n            counters[_chainID].chainID = _chainID;\n        }\n\n        counters[_chainID].contractAddress = _contractAddress;\n    }\n\n    // getMyCounter (call signature 916d5743) returns the counter value for this chain. It is meant to be used in a cross chain query.\n    function getMyCounter() public view returns (uint256) {\n        return counters[myChainID].counter;\n    }\n\n    // getState() returns this chain's view of all the counters. It is meant to be used in the front end.\n    function getState() public view returns (ChainEntry[] memory) {\n        ChainEntry[] memory ret = new ChainEntry[](foreignChainIDs.length + 1);\n        ret[0] = counters[myChainID];\n        uint256 length = foreignChainIDs.length;\n\n        for (uint256 i = 0; i &lt; length;) {\n            ret[i + 1] = counters[foreignChainIDs[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return ret;\n    }\n\n    // @notice Takes the cross chain query response for the other counters, stores the results for the other chains, and updates the counter for this chain.\n    function updateCounters(bytes memory response, IWormhole.Signature[] memory signatures) public {\n        ParsedQueryResponse memory r = parseAndVerifyQueryResponse(response, signatures);\n        uint256 numResponses = r.responses.length;\n        if (numResponses != foreignChainIDs.length) {\n            revert UnexpectedResultLength();\n        }\n\n        for (uint256 i = 0; i &lt; numResponses;) {\n            // Create a storage pointer for frequently read and updated data stored on the blockchain\n            ChainEntry storage chainEntry = counters[r.responses[i].chainId];\n            if (chainEntry.chainID != foreignChainIDs[i]) {\n                revert InvalidForeignChainID();\n            }\n\n            EthCallQueryResponse memory eqr = parseEthCallQueryResponse(r.responses[i]);\n\n            // Validate that update is not obsolete\n            validateBlockNum(eqr.blockNum, chainEntry.blockNum);\n\n            // Validate that update is not stale\n            validateBlockTime(eqr.blockTime, block.timestamp - 300);\n\n            if (eqr.result.length != 1) {\n                revert UnexpectedResultMismatch();\n            }\n\n            // Validate addresses and function signatures\n            address[] memory validAddresses = new address[](1);\n            bytes4[] memory validFunctionSignatures = new bytes4[](1);\n            validAddresses[0] = chainEntry.contractAddress;\n            validFunctionSignatures[0] = GetMyCounter;\n\n            validateMultipleEthCallData(eqr.result, validAddresses, validFunctionSignatures);\n\n            require(eqr.result[0].result.length == 32, \"result is not a uint256\");\n\n            chainEntry.blockNum = eqr.blockNum;\n            chainEntry.blockTime = eqr.blockTime / 1_000_000;\n            chainEntry.counter = abi.decode(eqr.result[0].result, (uint256));\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        counters[myChainID].blockNum = block.number;\n        counters[myChainID].blockTime = block.timestamp;\n        counters[myChainID].counter += 1;\n    }\n\n    modifier onlyOwner() {\n        if (owner != msg.sender) {\n            revert InvalidOwner();\n        }\n        _;\n    }\n}\n</code></pre>"},{"location":"products/queries/guides/use-queries/#submit-a-query-response-on-chain","title":"Submit a Query Response On-Chain","text":"<p>The <code>QueryProxyQueryResponse</code> result requires a slight tweak when submitting to the contract to match the format of <code>function parseAndVerifyQueryResponse(bytes memory response, IWormhole.Signature[] memory signatures)</code>. A helper function, <code>signaturesToEvmStruct</code>, is provided in the SDK for this.</p> <p>This example submits the transaction to the demo contract:</p> <pre><code>const tx = await contract.updateCounters(\n  `0x${response.data.bytes}`,\n  signaturesToEvmStruct(response.data.signatures)\n);\n</code></pre>"},{"location":"products/queries/reference/supported-methods/","title":"Supported Methods","text":"<p>Wormhole Queries provides on-demand access to Guardian-attested on-chain data through a simple REST endpoint. It offers a faster, gasless alternative to traditional transaction-based data retrieval, removing the need for gas fees and transaction finality delays. Requests are handled off-chain and processed by the Guardians, delivering verified data efficiently and cost-effectively.</p> <p>This page describes Wormhole Queries, their functionality, and available methods, aiming to assist new developers in utilizing the service.</p>"},{"location":"products/queries/reference/supported-methods/#supported-query-types","title":"Supported Query Types","text":"<p>Wormhole currently supports five distinct query types, each designed for specific data retrieval tasks across various chains.</p> <p>Note</p> <p>For a more comprehensive technical description and further specifics on each query type, please consult the white paper.</p>"},{"location":"products/queries/reference/supported-methods/#eth_call","title":"eth_call","text":"<p>The <code>eth_call</code> query type allows you to perform read-only calls to a smart contract on a specific block, identified by its number or hash. Some of eth_call's configurations include: </p> <ul> <li>Batching: Group multiple calls, even to different contracts, into a single query targeting the same block, which is processed as one batch RPC call to simplify on-chain verification.</li> <li>Capacity: Batch up to 255 individual in a single <code>eth_call</code> query.</li> <li>Result data: Provides the specified block's number, hash, timestamp, and the output from the contract call.</li> </ul>"},{"location":"products/queries/reference/supported-methods/#eth_call_by_timestamp","title":"eth_call_by_timestamp","text":"<p>The <code>eth_call_by_timestamp</code> query is similar to a standard <code>eth_call</code> but targets a specific timestamp instead of a block ID. This is useful for retrieving on-chain data based on a precise point in time, especially for correlating information across different chains.</p> <p>The query returns your target timestamp and the latest block details at or before your specified <code>target_time</code> immediately preceding the subsequent block. </p>"},{"location":"products/queries/reference/supported-methods/#eth_call_with_finality","title":"eth_call_with_finality","text":"<p>The <code>eth_call_with_finality</code> query type functions like a standard <code>eth_call</code>, but with an added critical assurance: it will only return the query results once the specified block has reached a designated level of finality on its chain.</p> <p>You can specify one of two finality levels for your query:</p> <ul> <li>Finalized: Indicates the highest level of assurance that a block is permanent and will not be altered or removed from the chain.</li> <li>Safe: Refers to a block considered highly unlikely to be reorganized, offering a substantial degree of confidence, though the network's consensus may not fully finalize it.</li> </ul> <p>Note</p> <p>If the target blockchain does not natively support or recognize the safe finality tag, requesting safe finality will be treated as a request for finalized finality instead.</p>"},{"location":"products/queries/reference/supported-methods/#sol_account","title":"sol_account","text":"<p>The <code>sol_account</code> query reads on-chain data for one or more specified accounts on the Solana blockchain. This functionality is similar to using Solana's native <code>getMultipleAccounts</code> RPC method, enabling you to retrieve information for multiple accounts simultaneously</p>"},{"location":"products/queries/reference/supported-methods/#sol_pda","title":"sol_pda","text":"<p>The <code>sol_pda</code> query reads data for one or more Solana Program Derived Addresses. It streamlines the standard process of deriving a PDA and fetching its account data.</p> <p>This is particularly useful for accessing multiple PDAs owned by a specific program or for verifying Solana PDA derivations on another blockchain, such as how associated token accounts are all derived from the Associated Token Account Program.</p>"},{"location":"products/queries/reference/supported-networks/","title":"Supported Networks","text":"<p>This page provides a quick reference for chains supported by Wormhole Queries, including each chain's Wormhole chain ID and the level of support for key methods: <code>eth_call</code>, <code>eth_call_by_timestamp</code>, and <code>eth_call_with_finality</code>.</p> <p>The Expected History column shows how much recent state data is typically available for querying, though this can vary depending on the chain and the configuration of each Guardian node.</p> <p>The support shown in the table reflects what has been confirmed through testing. However, query success ultimately depends on whether the underlying call can be executed on each Guardian\u2019s RPC node.</p> <p>For example, many chains use a fork of Geth, which by default retains 128 blocks of state in memory (unless archive mode is enabled). On Ethereum mainnet, this covers around 25 minutes of history\u2014but on faster chains like Optimism, it may span only about three minutes. While Guardian nodes are expected to have access to recent state, there are currently no guarantees on how far back historical data is available.</p>"},{"location":"products/queries/reference/supported-networks/#mainnet","title":"Mainnet","text":"Chain Wormhole Chain ID eth_call eth_call_by_timestamp eth_call_with_finality Expected History Ethereum 2 \u2705 \u2705 \u2705 128 blocks BSC 4 \u2705 \u2705 \u2705 128 blocks Polygon 5 \u2705 \u2705 \u2705 128 blocks Avalanche 6 \u2705 \u2705 \u2705 32 blocks Oasis Emerald 7 \u2705 \u2705 \u2705 archive Fantom 10 \u2705 \u2705 \u2705 16 blocks Karura 11 \u2705 \u2705 \u2705 archive Acala 12 \u2705 \u2705 \u2705 archive Kaia 13 \u2705 \u2705 \u2705 128 blocks Celo 14 \u2705 \u2139\ufe0f \u2705 128 blocks Moonbeam 16 \u2705 \u2139\ufe0f \u2705 256 blocks Arbitrum One 23 \u2705 \u2705 \u2705 ~6742 blocks Optimism 24 \u2705 \u2705 \u274c 128 blocks Base 30 \u2705 \u2705 \u2705 archive <p>\u2139\ufe0f<code>EthCallByTimestamp</code> arguments for <code>targetBlock</code> and <code>followingBlock</code> are currently required for requests to be successful on these chains.</p>"},{"location":"products/reference/chain-ids/","title":"Chain IDs","text":"<p>The following table documents the chain IDs used by Wormhole and places them alongside the more commonly referenced EVM Chain IDs.</p> <p>Note</p> <p>Please note, Wormhole chain IDs are different than the more commonly referenced EVM chain IDs, specified in the Mainnet and Testnet ID columns.</p> <p>Warning</p> <p>Wormhole Contributors recommend that all connected chains implement robust security practices including (but not exclusively): open sourcing code and running public bug bounty programs, undergoing security audits and publishing those reports, using version control with adequate access controls and mandatory code review, and high unit and integration test coverage where the results of those tests are available publicly. Connected chains that can't verifiably prove that they've implemented a high percentage of these practices may be noted below with the  symbol. </p> <p>Wormhole integrators are encouraged to understand the security assumptions of any chain before trusting messages from it. See the recommended security practices for chains in Wormhole's security program.</p> MainnetTestnet <p>Chain NameWormhole Chain IDNetwork IDEthereum<code>2</code><code>1</code>Solana<code>1</code><code>Mainnet Beta</code> - <code>5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d</code>Algorand<code>8</code><code>mainnet-v1.0</code>Aptos<code>22</code><code>1</code>Arbitrum<code>23</code><code>Arbitrum One</code> - <code>42161</code>Avalanche<code>6</code><code>C-Chain</code> - <code>43114</code>Base<code>30</code><code>Base</code> - <code>8453</code>Berachain<code>39</code>BNB Smart Chain<code>4</code><code>56</code>Celestia<code>4004</code><code>celestia</code>Celo<code>14</code><code>42220</code>Converge<code>53</code>Cosmos Hub<code>4000</code><code>cosmoshub-4</code>CreditCoin<code>59</code>Dymension<code>4007</code><code>dymension_1100-1</code>Evmos<code>4001</code><code>evmos_9001-2</code>Fantom<code>10</code><code>250</code>Fogo<code>51</code>HyperCore<code>65000</code><code>20000</code>HyperEVM <code>47</code>Injective<code>19</code><code>injective-1</code>Ink<code>46</code>Kaia<code>13</code><code>8217</code>Kujira<code>4002</code><code>kaiyo-1</code>Linea<code>38</code><code>59144</code>Mantle<code>35</code><code>5000</code>Mezo<code>50</code>Monad<code>48</code>Moonbeam<code>16</code><code>1284</code>NEAR<code>15</code><code>mainnet</code>Neutron<code>4003</code><code>neutron-1</code>Noble<code>4009</code><code>noble-1</code>Optimism<code>24</code><code>10</code>Osmosis<code>20</code><code>osmosis-1</code>Plasma<code>58</code>Plume<code>55</code><code>98866</code>Polygon<code>5</code><code>137</code>Provenance<code>4008</code><code>pio-mainnet-1</code>Pythnet<code>26</code>Scroll<code>34</code><code>534352</code>SEDA<code>4006</code>Sei<code>32</code><code>pacific-1</code>Seievm<code>40</code>Sonic<code>52</code><code>146</code>Stargaze<code>4005</code><code>stargaze-1</code>Sui<code>21</code><code>35834a8a</code>Unichain<code>44</code><code></code>World Chain<code>45</code><code>480</code>X Layer<code>37</code><code>196</code>XRPL-EVM<code>57</code><code>1440000</code></p> <p>Chain NameWormhole Chain IDNetwork IDEthereum Holesky<code>10006</code><code>Holesky</code> - <code>17000</code>Ethereum Sepolia<code>10002</code><code>Sepolia</code> - <code>11155111</code>Solana<code>1</code><code>Devnet</code> - <code>EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG</code>Algorand<code>8</code><code>testnet-v1.0</code>Aptos<code>22</code><code>2</code>Arbitrum Sepolia<code>10003</code><code>Sepolia</code> - <code>421614</code>Avalanche<code>6</code><code>Fuji</code> - <code>43113</code>Base Sepolia<code>10004</code><code>Base Sepolia</code> - <code>84532</code>Berachain<code>39</code><code>80084</code>BNB Smart Chain<code>4</code><code>97</code>Celestia<code>4004</code><code>mocha-4</code>Celo<code>14</code><code>Alfajores</code> - <code>44787</code>Converge<code>53</code><code>52085145</code>Cosmos Hub<code>4000</code><code>theta-testnet-001</code>CreditCoin<code>59</code>Dymension<code>4007</code>Evmos<code>4001</code><code>evmos_9000-4</code>Fantom<code>10</code><code>4002</code>Fogo<code>51</code><code>9GGSFo95raqzZxWqKM5tGYvJp5iv4Dm565S4r8h5PEu9</code>HyperCore<code>65000</code><code>20000</code>HyperEVM <code>47</code><code>998</code>Injective<code>19</code><code>injective-888</code>Ink<code>46</code><code>763373</code>Kaia<code>13</code><code>Kairos</code> - <code>1001</code>Kujira<code>4002</code><code>harpoon-4</code>Linea<code>38</code><code>59141</code>Mantle<code>35</code><code>Sepolia</code> - <code>5003</code>Mezo<code>50</code><code>31611</code>Monad<code>48</code><code>10143</code>Moonbeam<code>16</code><code>Moonbase-Alphanet</code> - <code>1287</code>NEAR<code>15</code><code>testnet</code>Neutron<code>4003</code><code>pion-1</code>Noble<code>4009</code><code>grand-1</code>Optimism Sepolia<code>10005</code><code>Optimism Sepolia</code> - <code>11155420</code>Osmosis<code>20</code><code>osmo-test-5</code>Plasma<code>58</code>Plume<code>55</code><code>98867</code>Polygon Amoy<code>10007</code><code>Amoy</code> - <code>80002</code>Provenance<code>4008</code>Pythnet<code>26</code>Scroll<code>34</code><code>Sepolia</code> - <code>534351</code>SEDA<code>4006</code><code>seda-1-testnet</code>Sei<code>32</code><code>atlantic-2</code>Seievm<code>40</code>Sonic<code>52</code><code>57054</code>Stargaze<code>4005</code>Sui<code>21</code><code>4c78adac</code>Unichain<code>44</code><code>Unichain Sepolia</code> - <code>1301</code>World Chain<code>45</code><code>4801</code>X Layer<code>37</code><code>195</code>XRPL-EVM<code>57</code><code>1449000</code></p>"},{"location":"products/reference/consistency-levels/","title":"Wormhole Finality","text":"<p>The following table documents each chain's <code>consistencyLevel</code> values (i.e., finality reached before signing). The consistency level defines how long the Guardians should wait before signing a VAA. The finalization time depends on the specific chain's consensus mechanism. The consistency level is a <code>u8</code>, so any single byte may be used. However, a small subset has particular meanings. If the <code>consistencyLevel</code> isn't one of those specific values, the <code>Otherwise</code> column describes how it's interpreted.</p> <p>ChainInstantSafeFinalizedOtherwiseTime to FinalizeDetailsEthereum200201finalized~ 19minDetailsSolana01~ 14sDetailsAlgorand0~ 4sDetailsAptos0~ 4sDetailsArbitrum200201finalized~ 18minDetailsAvalanche200finalized~ 2sDetailsBase200201finalized~ 18minBerachain200finalized~ 4sBNB Smart Chain200201finalized~ 48sDetailsCelestia0~ 5sCelo200finalized~ 10sConverge0~ 7minCosmos Hub0~ 5sCreditCoin0~ 60sDymension0~ 5sEvmos0~ 2sFantom200finalized~ 5sFogo0~ 14sHyperEVM 0~ 2sInjective0~ 3sInk0~ 9minKaia200finalized~ 1sKujira0~ 3sMantle200201finalized~ 18minMezo0~ 8sMonad0~ 2sMoonbeam200201finalized~ 24sDetailsNEAR0~ 2sDetailsNeutron0~ 5sOptimism200201finalized~ 18minOsmosis0~ 6sPlasma0~ 3sPlume0~ 18minPolygon200finalized~ 66sDetailsScroll200finalized~ 16minSei0~ 1sSeievm0~ 1sSonic0~ 1sStargaze0~ 5sSui0~ 3sDetailsUnichain200201finalized~ 18minWorld Chain0~ 18minX Layer200201finalized~ 16minXRPL-EVM0~ 10s</p>"},{"location":"products/reference/contract-addresses/","title":"Contract Addresses","text":""},{"location":"products/reference/contract-addresses/#core-contracts","title":"Core Contracts","text":"MainnetTestnetDevnet <p>Chain NameContract AddressEthereum<code>0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B</code>Solana<code>worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth</code>Algorand<code>842125965</code>Aptos<code>0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625</code>Arbitrum<code>0xa5f208e072434bC67592E4C49C1B991BA79BCA46</code>Avalanche<code>0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c</code>Base<code>0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6</code>Berachain<code>0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D</code>BNB Smart Chain<code>0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B</code>Celo<code>0xa321448d90d4e5b0A732867c18eA198e75CAC48E</code>CreditCoin<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code>Fantom<code>0x126783A6Cb203a3E35344528B26ca3a0489a1485</code>HyperEVM <code>0x7C0faFc4384551f063e05aee704ab943b8B53aB3</code>Injective<code>inj17p9rzwnnfxcjp32un9ug7yhhzgtkhvl9l2q74d</code>Ink<code>0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D</code>Kaia<code>0x0C21603c4f3a6387e241c0091A7EA39E43E90bb7</code>Linea<code>0x0C56aebD76E6D9e4a1Ec5e94F4162B4CBbf77b32</code>Mantle<code>0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6</code>Mezo<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code>Moonbeam<code>0xC8e2b0cD52Cf01b0Ce87d389Daa3d414d4cE29f3</code>NEAR<code>contract.wormhole_crypto.near</code>Neutron<code>neutron16rerygcpahqcxx5t8vjla46ym8ccn7xz7rtc6ju5ujcd36cmc7zs9zrunh</code>Optimism<code>0xEe91C335eab126dF5fDB3797EA9d6aD93aeC9722</code>Plume<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code>Polygon<code>0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7</code>Pythnet<code>H3fxXJ86ADW2PNuDDmZJg6mzTtPxkYCpNuQUTgmJ7AjU</code>Scroll<code>0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6</code>Sei<code>sei1gjrrme22cyha4ht2xapn3f08zzw6z3d4uxx6fyy9zd5dyr3yxgzqqncdqn</code>Seievm<code>0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D</code>Sui<code>0xaeab97f96cf9877fee2883315d459552b2b921edc16d7ceac6eab944dd88919c</code>Unichain<code>0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D</code>World Chain<code>0xcbcEe4e081464A15d8Ad5f58BB493954421eB506</code>X Layer<code>0x194B123c5E96B9b2E49763619985790Dc241CAC0</code>XRPL-EVM<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code></p> <p>Chain NameContract AddressEthereum Holesky<code>0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a</code>Ethereum Sepolia<code>0x4a8bc80Ed5a4067f1CCf107057b8270E0cC11A78</code>Solana<code>3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5</code>Algorand<code>86525623</code>Aptos<code>0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625</code>Arbitrum Sepolia<code>0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35</code>Avalanche<code>0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C</code>Base Sepolia<code>0x79A1027a6A159502049F10906D333EC57E95F083</code>Berachain<code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>BNB Smart Chain<code>0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D</code>Celo<code>0x88505117CA88e7dd2eC6EA1E13f0948db2D50D56</code>Converge<code>0x556B259cFaCd9896B2773310080c7c3bcE90Ff01</code>CreditCoin<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code>Fantom<code>0x1BB3B4119b7BA9dfad76B0545fb3F531383c3bB7</code>Fogo<code>BhnQyKoQQgpuRTRo6D8Emz93PvXCYfVgHhnrR4T3qhw4</code>HyperEVM <code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>Injective<code>inj1xx3aupmgv3ce537c0yce8zzd3sz567syuyedpg</code>Ink<code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>Kaia<code>0x1830CC6eE66c84D2F177B94D544967c774E624cA</code>Linea<code>0x79A1027a6A159502049F10906D333EC57E95F083</code>Mantle<code>0x376428e7f26D5867e69201b275553C45B09EE090</code>Mezo<code>0x268557122Ffd64c85750d630b716471118F323c8</code>Monad<code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>Moonbeam<code>0xa5B7D85a8f27dd7907dc8FdC21FA5657D5E2F901</code>NEAR<code>wormhole.wormhole.testnet</code>Neutron<code>neutron1enf63k37nnv9cugggpm06mg70emcnxgj9p64v2s8yx7a2yhhzk2q6xesk4</code>Optimism Sepolia<code>0x31377888146f3253211EFEf5c676D41ECe7D58Fe</code>Osmosis<code>osmo1hggkxr0hpw83f8vuft7ruvmmamsxmwk2hzz6nytdkzyup9krt0dq27sgyx</code>Plasma<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code>Plume<code>0x81705b969cDcc6FbFde91a0C6777bE0EF3A75855</code>Polygon Amoy<code>0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35</code>Pythnet<code>EUrRARh92Cdc54xrDn6qzaqjA77NRrCcfbr8kPwoTL4z</code>Scroll<code>0x055F47F1250012C6B20c436570a76e52c17Af2D5</code>Sei<code>sei1nna9mzp274djrgzhzkac2gvm3j27l402s4xzr08chq57pjsupqnqaj0d5s</code>Seievm<code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>Sui<code>0x31358d198147da50db32eda2562951d53973a0c0ad5ed738e9b17d88b213d790</code>Unichain<code>0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd</code>World Chain<code>0xe5E02cD12B6FcA153b0d7fF4bF55730AE7B3C93A</code>X Layer<code>0xA31aa3FDb7aF7Db93d18DDA4e19F811342EDF780</code>XRPL-EVM<code>0xaBf89de706B583424328B54dD05a8fC986750Da8</code></p> <p>Chain NameContract AddressEthereum<code>0xC89Ce4735882C9F0f0FE26686c53074E09B0D550</code>Solana<code>Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o</code>Algorand<code>1004</code>Aptos<code>0xde0036a9600559e295d5f6802ef6f3f802f510366e0c23912b0655d972166017</code>BNB Smart Chain<code>0xC89Ce4735882C9F0f0FE26686c53074E09B0D550</code>NEAR<code>wormhole.test.near</code>Sui<code>0x5a5160ca3c2037f4b4051344096ef7a48ebf4400b3f385e57ea90e1628a8bde0</code></p>"},{"location":"products/reference/contract-addresses/#wrapped-token-transfers-wtt","title":"Wrapped Token Transfers (WTT)","text":"MainnetTestnetDevnet <p>Chain NameContract AddressEthereum<code>0x3ee18B2214AFF97000D974cf647E7C347E8fa585</code>Solana<code>wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb</code>Algorand<code>842126029</code>Aptos<code>0x576410486a2da45eee6c949c995670112ddf2fbeedab20350d506328eefc9d4f</code>Arbitrum<code>0x0b2402144Bb366A632D14B83F244D2e0e21bD39c</code>Avalanche<code>0x0e082F06FF657D94310cB8cE8B0D9a04541d8052</code>Base<code>0x8d2de8d2f73F1F4cAB472AC9A881C9b123C79627</code>Berachain<code>0x3Ff72741fd67D6AD0668d93B41a09248F4700560</code>BNB Smart Chain<code>0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7</code>Celo<code>0x796Dff6D74F3E27060B71255Fe517BFb23C93eed</code>Fantom<code>0x7C9Fc5741288cDFdD83CeB07f3ea7e22618D79D2</code>Injective<code>inj1ghd753shjuwexxywmgs4xz7x2q732vcnxxynfn</code>Ink<code>0x3Ff72741fd67D6AD0668d93B41a09248F4700560</code>Kaia<code>0x5b08ac39EAED75c0439FC750d9FE7E1F9dD0193F</code>Linea<code>0x167E0752de62cb76EFc0Fbb165Bd342c6e2Bb251</code>Mantle<code>0x24850c6f61C438823F01B7A3BF2B89B72174Fa9d</code>Moonbeam<code>0xb1731c586ca89a23809861c6103f0b96b3f57d92</code>NEAR<code>contract.portalbridge.near</code>Optimism<code>0x1D68124e65faFC907325e3EDbF8c4d84499DAa8b</code>Polygon<code>0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE</code>Scroll<code>0x24850c6f61C438823F01B7A3BF2B89B72174Fa9d</code>Sei<code>sei1smzlm9t79kur392nu9egl8p8je9j92q4gzguewj56a05kyxxra0qy0nuf3</code>Seievm<code>0x3Ff72741fd67D6AD0668d93B41a09248F4700560</code>Sui<code>0xc57508ee0d4595e5a8728974a4a93a787d38f339757230d441e895422c07aba9</code>Unichain<code>0x3Ff72741fd67D6AD0668d93B41a09248F4700560</code>World Chain<code>0xc309275443519adca74c9136b02A38eF96E3a1f6</code>X Layer<code>0x5537857664B0f9eFe38C9f320F75fEf23234D904</code>XRPL-EVM<code>0x47F5195163270345fb4d7B9319Eda8C64C75E278</code></p> <p>Chain NameContract AddressEthereum Holesky<code>0x76d093BbaE4529a342080546cAFEec4AcbA59EC6</code>Ethereum Sepolia<code>0xDB5492265f6038831E89f495670FF909aDe94bd9</code>Solana<code>DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe</code>Algorand<code>86525641</code>Aptos<code>0x576410486a2da45eee6c949c995670112ddf2fbeedab20350d506328eefc9d4f</code>Arbitrum Sepolia<code>0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e</code>Avalanche<code>0x61E44E506Ca5659E6c0bba9b678586fA2d729756</code>Base Sepolia<code>0x86F55A04690fd7815A3D802bD587e83eA888B239</code>Berachain<code>0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a</code>BNB Smart Chain<code>0x9dcF9D205C9De35334D646BeE44b2D2859712A09</code>Celo<code>0x05ca6037eC51F8b712eD2E6Fa72219FEaE74E153</code>Fantom<code>0x599CEa2204B4FaECd584Ab1F2b6aCA137a0afbE8</code>Fogo<code>78HdStBqCMioGii9D8mF3zQaWDqDZBQWTUwjjpdmbJKX</code>HyperEVM <code>0x4a8bc80Ed5a4067f1CCf107057b8270E0cC11A78</code>Injective<code>inj1q0e70vhrv063eah90mu97sazhywmeegp7myvnh</code>Ink<code>0x376428e7f26D5867e69201b275553C45B09EE090</code>Kaia<code>0xC7A13BE098720840dEa132D860fDfa030884b09A</code>Linea<code>0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e</code>Mantle<code>0x75Bfa155a9D7A3714b0861c8a8aF0C4633c45b5D</code>Mezo<code>0xA31aa3FDb7aF7Db93d18DDA4e19F811342EDF780</code>Monad<code>0xF323dcDe4d33efe83cf455F78F9F6cc656e6B659</code>Moonbeam<code>0xbc976D4b9D57E57c3cA52e1Fd136C45FF7955A96</code>NEAR<code>token.wormhole.testnet</code>Optimism Sepolia<code>0x99737Ec4B815d816c49A385943baf0380e75c0Ac</code>Polygon Amoy<code>0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e</code>Scroll<code>0x22427d90B7dA3fA4642F7025A854c7254E4e45BF</code>Sei<code>sei1jv5xw094mclanxt5emammy875qelf3v62u4tl4lp5nhte3w3s9ts9w9az2</code>Seievm<code>0x23908A62110e21C04F3A4e011d24F901F911744A</code>Sui<code>0x6fb10cdb7aa299e9a4308752dadecb049ff55a892de92992a1edbd7912b3d6da</code>Unichain<code>0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a</code>World Chain<code>0x430855B4D43b8AEB9D2B9869B74d58dda79C0dB2</code>X Layer<code>0xdA91a06299BBF302091B053c6B9EF86Eff0f930D</code>XRPL-EVM<code>0x7d8eBc211C4221eA18E511E4f0fD50c5A539f275</code></p> <p>Chain NameContract AddressEthereum<code>0x0290FB167208Af455bB137780163b7B7a9a10C16</code>Solana<code>B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE</code>Algorand<code>1006</code>Aptos<code>0x84a5f374d29fc77e370014dce4fd6a55b58ad608de8074b0be5571701724da31</code>BNB Smart Chain<code>0x0290FB167208Af455bB137780163b7B7a9a10C16</code>NEAR<code>token.test.near</code>Sui<code>0xa6a3da85bbe05da5bfd953708d56f1a3a023e7fb58e5a824a3d4de3791e8f690</code></p>"},{"location":"products/reference/contract-addresses/#wormhole-relayer","title":"Wormhole Relayer","text":"MainnetTestnetDevnet <p>Chain NameContract AddressEthereum<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Arbitrum<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Avalanche<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Base<code>0x706f82e9bb5b0813501714ab5974216704980e31</code>Berachain<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>BNB Smart Chain<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Celo<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Fantom<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Ink<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Kaia<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Mantle<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Mezo<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Moonbeam<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Optimism<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Plume<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Polygon<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Scroll<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Seievm<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>Unichain<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code>World Chain<code>0x1520cc9e779c56dab5866bebfb885c86840c33d3</code>X Layer<code>0x27428DD2d3DD32A4D7f7C497eAaa23130d894911</code></p> <p>Chain NameContract AddressEthereum Sepolia<code>0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470</code>Arbitrum Sepolia<code>0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470</code>Avalanche<code>0xA3cF45939bD6260bcFe3D66bc73d60f19e49a8BB</code>Base Sepolia<code>0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE</code>Berachain<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>BNB Smart Chain<code>0x80aC94316391752A193C1c47E27D382b507c93F3</code>Celo<code>0x306B68267Deb7c5DfCDa3619E22E9Ca39C374f84</code>Fantom<code>0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470</code>Ink<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>Mezo<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>Monad<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>Moonbeam<code>0x0591C25ebd0580E0d4F27A82Fc2e24E7489CB5e0</code>Optimism Sepolia<code>0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE</code>Polygon Amoy<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>Seievm<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>Unichain<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code>XRPL-EVM<code>0x362fca37E45fe1096b42021b543f462D49a5C8df</code></p> <p>Chain NameContract AddressEthereum<code>0xcC680D088586c09c3E0E099a676FA4b6e42467b4</code>BNB Smart Chain<code>0xcC680D088586c09c3E0E099a676FA4b6e42467b4</code></p>"},{"location":"products/reference/contract-addresses/#cctp","title":"CCTP","text":"MainnetTestnet <p>Chain NameContract AddressEthereum<code>0xAaDA05BD399372f0b0463744C09113c137636f6a</code>Arbitrum<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code>Avalanche<code>0x09Fb06A271faFf70A651047395AaEb6265265F13</code>Base<code>0x03faBB06Fa052557143dC28eFCFc63FC12843f1D</code>Optimism<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code>Polygon<code>0x0FF28217dCc90372345954563486528aa865cDd6</code></p> <p>Chain NameContract AddressEthereum Sepolia<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code>Arbitrum Sepolia<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code>Avalanche<code>0x58f4c17449c90665891c42e14d34aae7a26a472e</code>Base Sepolia<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code>Optimism Sepolia<code>0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c</code></p>"},{"location":"products/reference/contract-addresses/#settlement-token-router","title":"Settlement Token Router","text":"MainnetTestnet <p>Chain NameContract AddressEthereum<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code>Solana<code>28topqjtJzMnPaGFmmZk68tzGmj9W9aMntaEK3QkgtRe</code>Arbitrum<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code>Avalanche<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code>Base<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code>Optimism<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code>Polygon<code>0x70287c79ee41C5D1df8259Cd68Ba0890cd389c47</code></p> <p>Chain NameContract AddressSolana<code>tD8RmtdcV7bzBeuFgyrFc8wvayj988ChccEzRQzo6md</code>Arbitrum Sepolia<code>0xe0418C44F06B0b0D7D1706E01706316DBB0B210E</code>Optimism Sepolia<code>0x6BAa7397c18abe6221b4f6C3Ac91C88a9faE00D8</code></p>"},{"location":"products/reference/contract-addresses/#executor","title":"Executor","text":"MainnetTestnet <p>Chain NameContract AddressEthereum<code>0x84EEe8dBa37C36947397E1E11251cA9A06Fc6F8a</code>Solana<code>execXUrAsMnqMmTHj5m7N1YQgsDz3cwGLYCYyuDRciV</code>Aptos<code>0x11aa75c059e1a7855be66b931bf340a2e0973274ac16b5f519c02ceafaf08a18</code>Arbitrum<code>0x3980f8318fc03d79033Bbb421A622CDF8d2Eeab4</code>Avalanche<code>0x4661F0E629E4ba8D04Ee90080Aee079740B00381</code>Base<code>0x9E1936E91A4a5AE5A5F75fFc472D6cb8e93597ea</code>Berachain<code>0x0Dd7a5a32311b8D87A615Cc7f079B632D3d5e2D3</code>BNB Smart Chain<code>0xeC8cCCD058DbF28e5D002869Aa9aFa3992bf4ee0</code>Celo<code>0xe6Ea5087c6860B94Cf098a403506262D8F28cF05</code>CreditCoin<code>0xd2e420188f17607Aa6344ee19c3e76Cf86CA7BDe</code>HyperEVM <code>0xd7717899cc4381033Bc200431286D0AC14265F78</code>Ink<code>0x3e44a5F45cbD400acBEF534F51e616043B211Ddd</code>Linea<code>0x23aF2B5296122544A9A7861da43405D5B15a9bD3</code>Mezo<code>0x0f9b8E144Cc5C5e7C0073829Afd30F26A50c5606</code>Moonbeam<code>0x85D06449C78064c2E02d787e9DC71716786F8D19</code>Optimism<code>0x85B704501f6AE718205C0636260768C4e72ac3e7</code>Polygon<code>0x0B23efA164aB3eD08e9a39AC7aD930Ff4F5A5e81</code>Scroll<code>0xcFAdDE24640e395F5A71456A825D0D7C3741F075</code>Seievm<code>0x25f1c923fb7a5aefa5f0a2b419fc70f2368e66e5</code>Sonic<code>0x3Fdc36b4260Da38fBDba1125cCBD33DD0AC74812</code>Sui<code>0xdb0fe8bb1e2b5be628adbea0636063325073e1070ee11e4281457dfd7f158235</code>Unichain<code>0x764dD868eAdD27ce57BCB801E4ca4a193d231Aed</code>World Chain<code>0x8689b4E6226AdC8fa8FF80aCc3a60AcE31e8804B</code>XRPL-EVM<code>0x8345E90Dcd92f5Cf2FAb0C8E2A56A5bc2c30d896</code></p> <p>Chain NameContract AddressEthereum Sepolia<code>0xD0fb39f5a3361F21457653cB70F9D0C9bD86B66B</code>Solana<code>execXUrAsMnqMmTHj5m7N1YQgsDz3cwGLYCYyuDRciV</code>Aptos<code>0x139717c339f08af674be77143507a905aa28cbc67a0e53e7095c07b630d73815</code>Arbitrum Sepolia<code>0xBF161de6B819c8af8f2230Bcd99a9B3592f6F87b</code>Avalanche<code>0x4661F0E629E4ba8D04Ee90080Aee079740B00381</code>Base Sepolia<code>0x51B47D493CBA7aB97e3F8F163D6Ce07592CE4482</code>Converge<code>0xAab9935349B9c08e0e970720F6D640d5B91C293E</code>Fogo<code>execXUrAsMnqMmTHj5m7N1YQgsDz3cwGLYCYyuDRciV</code>Mezo<code>0x0f9b8E144Cc5C5e7C0073829Afd30F26A50c5606</code>Monad<code>0xC04dE634982cAdF2A677310b73630B7Ac56A3f65</code>Optimism Sepolia<code>0x5856651eB82aeb6979B4954317194d48e1891b3c</code>Plume<code>0x8fc2FbA8F962fbE89a9B02f03557a011c335A455</code>Seievm<code>0x25f1c923Fb7A5aEFA5F0A2b419fC70f2368e66e5</code>Sui<code>0x4000cfe2955d8355b3d3cf186f854fea9f787a457257056926fde1ec977670eb</code>XRPL-EVM<code>0x4d9525D94D275dEB495b7C8840b154Ae04cfaC2A</code></p>"},{"location":"products/reference/contract-addresses/#guardian-governance","title":"Guardian Governance","text":"MainnetTestnet <p>Chain NameContract Address Solana<code>NGoD1yTeq5KaURrZo7MnCTFzTA4g62ygakJCnzMLCfm</code> Ethereum<code>0x23Fea5514DFC9821479fBE18BA1D7e1A61f6FfCf</code> Arbitrum<code>0x36CF4c88FA548c6Ad9fcDc696e1c27Bb3306163F</code> Avalanche<code>0x169D91C797edF56100F1B765268145660503a423</code> Base<code>0x838a95B6a3E06B6f11C437e22f3C7561a6ec40F1</code> HyperEVM <code>0x574B7864119C9223A9870Ea614dC91A8EE09E512</code> Optimism<code>0x0E09a3081837ff23D2e59B179E0Bc48A349Afbd8</code> Unichain<code>0x574b7864119c9223a9870ea614dc91a8ee09e512</code> XRPL-EVM<code>0x574B7864119C9223A9870Ea614dC91A8EE09E512</code> </p> <p> Chain NameContract AddressEthereum Sepolia<code>0x9517F0164c1d089ad72E669E57b9088790966dBd</code>Arbitrum Sepolia<code>0x81b65A48DCAccBA04aCa3C055C4112b0715b90c0</code>Base Sepolia<code>0x720A59128B96Eda6EC2940c7899406E4dc56d0DC</code>Optimism Sepolia<code>0xcE1DE1eA4b040D324a07719043A6234C94fd0b5d</code>XRPL-EVM<code>0x574B7864119C9223A9870Ea614dC91A8EE09E512</code></p> <p>Note</p> <p>Guardian-governed ownership contracts are used where an owner is required, without adding new trust assumptions. They only accept instructions signed by a quorum of Wormhole Guardians, validated on-chain by the Wormhole Core contracts. Implementations: EVM and SVM.</p>"},{"location":"products/reference/contract-addresses/#read-only-deployments","title":"Read-Only Deployments","text":"Mainnet <p>Chain NameContract Address Acala<code>0xa321448d90d4e5b0A732867c18eA198e75CAC48E</code> Aurora<code>0x51b5123a7b0F9b2bA265f9c4C8de7D78D52f510F</code> Blast<code>0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6</code> Corn<code>0xa683c66045ad16abb1bCE5ad46A64d95f9A25785</code> Gnosis<code>0xa321448d90d4e5b0A732867c18eA198e75CAC48E</code> Goat<code>0x352A86168e6988A1aDF9A15Cb00017AAd3B67155</code> Karura<code>0xa321448d90d4e5b0A732867c18eA198e75CAC48E</code> LightLink<code>0x352A86168e6988A1aDF9A15Cb00017AAd3B67155</code> Oasis<code>0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585</code> Rootstock<code>0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6</code> Sonic<code>0x352A86168e6988A1aDF9A15Cb00017AAd3B67155</code> Telos<code>0x352A86168e6988A1aDF9A15Cb00017AAd3B67155</code> Terra<code>terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5</code> Terra 2.0<code>terra12mrnzvhx3rpej6843uge2yyfppfyd3u9c3uq223q8sl48huz9juqffcnhp</code> SNAXchain<code>0xc1BA3CC4bFE724A08FbbFbF64F8db196738665f4</code> XPLA<code>xpla1jn8qmdda5m6f6fqu9qv46rt7ajhklg40ukpqchkejcvy8x7w26cqxamv3w</code> </p> <p>Note</p> <p>Read-only deployments allow Wormhole messages to be received on chains not fully integrated with Wormhole Guardians. These deployments support cross-chain data verification but cannot originate messages. For example, a governance message can be sent from a fully integrated chain and processed on a read-only chain, but the read-only chain cannot send messages back.</p>"},{"location":"products/reference/glossary/","title":"Glossary","text":"<p>This glossary is an index of technical term definitions for words commonly used in Wormhole documentation.</p>"},{"location":"products/reference/glossary/#chain-id","title":"Chain ID","text":"<p>Wormhole assigns a unique <code>u16</code> integer chain ID to each supported blockchain. These chain IDs are specific to Wormhole and may differ from those used by blockchains to identify their networks.</p> <p>You can find each chain ID documented on the Wormhole Chain IDs page.</p>"},{"location":"products/reference/glossary/#consistency-level","title":"Consistency Level","text":"<p>The level of finality (consistency) a transaction should meet before being signed by a Guardian. See the Wormhole Finality reference page for details.</p>"},{"location":"products/reference/glossary/#delivery-provider","title":"Delivery Provider","text":"<p>A Delivery Provider monitors for Wormhole Relayer delivery requests and delivers those requests to the intended target chain as instructed.</p>"},{"location":"products/reference/glossary/#emitter","title":"Emitter","text":"<p>The emitter contract makes the call to the Wormhole Core Contract. The published message includes the emitter contract address and, a sequence number for the message is tracked to provide a unique ID.</p>"},{"location":"products/reference/glossary/#finality","title":"Finality","text":"<p>The finality of a transaction depends on its blockchain properties. Once a transaction is considered final, you can assume the resulting state changes it caused won't be reverted.</p>"},{"location":"products/reference/glossary/#guardian","title":"Guardian","text":"<p>A Guardian is one of the 19 parties running validators in the Guardian Network contributing to the VAA multisig.</p>"},{"location":"products/reference/glossary/#guardian-network","title":"Guardian Network","text":"<p>Validators in their own P2P network who serve as Wormhole's oracle by observing activity on-chain and generating signed messages attesting to that activity.</p>"},{"location":"products/reference/glossary/#guardian-set","title":"Guardian Set","text":"<p>The Guardian Set is a set of guardians responsible for validating a message emitted from the core contracts. Occasionally, the members of the set will change through a governance action.</p>"},{"location":"products/reference/glossary/#heartbeat","title":"Heartbeat","text":"<p>Each Guardian will issue a <code>heartbeat</code> on a 15-second interval to signal that it is still running and convey details about its identity, uptime, version, and the status of the connected nodes.</p> <p>You can view the heartbeats on the Wormhole dashboard.</p>"},{"location":"products/reference/glossary/#observation","title":"Observation","text":"<p>An Observation is a data structure describing a message emitted by the Core Contract and noticed by the Guardian node.</p>"},{"location":"products/reference/glossary/#relayer","title":"Relayer","text":"<p>A relayer is any process that delivers VAAs to a destination.</p>"},{"location":"products/reference/glossary/#sequence","title":"Sequence","text":"<p>A nonce, strictly increasing, which is tracked by the Wormhole Core Contract and unique to the emitter chain and address.</p>"},{"location":"products/reference/glossary/#spy","title":"Spy","text":"<p>A Spy is a daemon that eavesdrops on the messages passed between Guardians, typically to track VAAs as they get signed.</p>"},{"location":"products/reference/glossary/#vaa","title":"VAA","text":"<p>Verifiable Action Approvals (VAAs) are the base data structure in the Wormhole ecosystem. They contain emitted messages along with information such as what contract emitted the message.</p>"},{"location":"products/reference/glossary/#validator","title":"Validator","text":"<p>A daemon configured to monitor a blockchain node and observe messages emitted by the Wormhole contracts.</p>"},{"location":"products/reference/supported-networks/","title":"Supported Networks","text":"<p>Wormhole supports many blockchains across mainnet, testnet, and devnets. You can use these tables to verify if your desired chains are supported by the Wormhole products you plan to include in your integration. </p>"},{"location":"products/reference/supported-networks/#supported-networks-by-product","title":"Supported Networks by Product","text":""},{"location":"products/reference/supported-networks/#connect","title":"Connect","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerOsmosisCosmWasm Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/supported-networks/#ntt","title":"NTT","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerConvergeEVM WebsiteCreditCoinEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerFogoSVM Website Block ExplorerHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/supported-networks/#wtt","title":"WTT","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAlgorandAVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerFogoSVM Website Block ExplorerHyperEVM EVM Website Developer DocsInjectiveCosmWasm Website Developer Docs Block ExplorerInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerNEARNEAR VM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeiCosmWasm Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/supported-networks/#cctp","title":"CCTP","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerHyperCoreEVM Website Developer DocsHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSonicEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/supported-networks/#settlement","title":"Settlement","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/supported-networks/#multigov","title":"Multigov","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerConvergeEVM WebsiteCreditCoinEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerHyperCoreEVM Website Developer DocsHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlasmaEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeiCosmWasm Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSonicEVM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/reference/testnet-faucets/","title":"Testnet Faucets","text":"<p>Don't let the need for testnet tokens get in the way of buildling your next great idea with Wormhole. Use this guide to quickly locate the testnet token faucets you need to deploy and test applications and contracts on Wormhole's supported networks.</p>"},{"location":"products/reference/testnet-faucets/#evm","title":"EVM","text":"<p>TestnetEnvironmentTokenFaucetEthereum HoleskyEVMETHAlchemy FaucetEthereum SepoliaEVMETHAlchemy FaucetArbitrum SepoliaEVMETHList of FaucetsAvalancheEVMAVAXOfficial Avalanche FaucetBase SepoliaEVMETHList of FaucetsBerachainEVMBERAOfficial Berachain FaucetBNB Smart ChainEVMBNBOfficial BNB FaucetCeloEVMCELOOfficial Celo FaucetFantomEVMFTMOfficial Fantom FaucetHyperEVM EVMmock USDCOfficial Hyperliquid FaucetInkEVMETHOfficial Ink FaucetKaiaEVMKAIAOfficial Kaia FaucetLineaEVMETHList of FaucetsMantleEVMMNTOfficial Mantle FaucetMonadEVMMONOfficial Monad FaucetMoonbeamEVMDEVOfficial Moonbeam FaucetOptimism SepoliaEVMETHSuperchain FaucetPlasmaEVMXPLPlasma FaucetPlumeEVMPLUMEOfficial Plume FaucetPolygon AmoyEVMPOLOfficial Polygon FaucetScrollEVMETHList of FaucetsSeievmEVMSEISei Atlantic-2 FaucetUnichainEVMETHQuickNode FaucetWorld ChainEVMETHAlchemy FaucetX LayerEVMOKBX Layer Official FaucetXRPL-EVMEVMXRPXRPL Official Faucet</p>"},{"location":"products/reference/testnet-faucets/#svm","title":"SVM","text":"<p>TestnetEnvironmentTokenFaucetPythnetSVMETHSuperchain Faucet</p>"},{"location":"products/reference/testnet-faucets/#avm","title":"AVM","text":"<p>TestnetEnvironmentTokenFaucetAlgorandAVMALGOOfficial Algorand Faucet</p>"},{"location":"products/reference/testnet-faucets/#cosmwasm","title":"CosmWasm","text":"<p>TestnetEnvironmentTokenFaucetCelestiaCosmWasmTIADiscord FaucetCosmos HubCosmWasmATOMDiscord FaucetInjectiveCosmWasmINJOfficial Injective FaucetKujiraCosmWasmKUJIDiscord FaucetNeutronCosmWasmNTRNList of FaucetsNobleCosmWasmUSDCCircle FaucetOsmosisCosmWasmOSMOOfficial Osmosis FaucetSEDACosmWasmSEDAOfficial SEDA FaucetSeiCosmWasmSEISei Atlantic-2 Faucet</p>"},{"location":"products/reference/testnet-faucets/#move-vm","title":"Move VM","text":"<p>TestnetEnvironmentTokenFaucetAptosMove VMAPTOfficial Aptos Faucet</p>"},{"location":"products/reference/testnet-faucets/#near-vm","title":"NEAR VM","text":"<p>TestnetEnvironmentTokenFaucetNEARNEAR VMNEAROfficial NEAR Faucet</p>"},{"location":"products/reference/testnet-faucets/#sui-move-vm","title":"Sui Move VM","text":"<p>TestnetEnvironmentTokenFaucetSuiSui Move VMSUIList of Faucets</p>"},{"location":"products/reference/wormhole-formatted-addresses/","title":"Wormhole Formatted Addresses","text":"<p>Wormhole formatted addresses are 32-byte hex representations of addresses from any supported blockchain. Whether an address originates from EVM, Solana, Cosmos, or another ecosystem, Wormhole standardizes all addresses into this format to ensure cross-chain compatibility.</p> <p>This uniform format is essential for smooth interoperability in token transfers and messaging across chains. Wormhole uses formatted addresses throughout the Wormhole SDK, especially in cross-chain transactions, such as transfer functions that utilize the <code>bytes32</code> representation for recipient addresses.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#platform-specific-address-formats","title":"Platform-Specific Address Formats","text":"<p>Each blockchain ecosystem Wormhole supports has its method for formatting native addresses. To enable cross-chain compatibility, Wormhole converts these native addresses into the standardized 32-byte hex format.</p> <p>Here\u2019s an overview of the native address formats and how they are normalized to the Wormhole format:</p> Platform Native Address Format Wormhole Formatted Address EVM Hex (e.g., 0x...) 32-byte Hex Solana Base58 32-byte Hex CosmWasm Bech32 32-byte Hex Algorand Algorand App ID 32-byte Hex Sui Hex 32-byte Hex Aptos Hex 32-byte Hex Near SHA-256 32-byte Hex <p>These conversions allow Wormhole to interact seamlessly with various chains using a uniform format for all addresses.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#address-format-handling","title":"Address Format Handling","text":"<p>The Wormhole SDK provides mappings that associate each platform with its native address format. You can find this mapping in the Wormhole SDK file <code>platforms.ts</code>:</p> <pre><code>const platformAddressFormatEntries = [\n  ['Evm', 'hex'],\n  ['Solana', 'base58'],\n  ['Cosmwasm', 'bech32'],\n  ['Algorand', 'algorandAppId'],\n  ['Sui', 'hex'],\n  ['Aptos', 'hex'],\n  ['Near', 'sha256'],\n];\n</code></pre> <p>These entries define how the <code>UniversalAddress</code> class handles different address formats based on the platform.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#universal-address-methods","title":"Universal Address Methods","text":"<p>The <code>UniversalAddress</code> class is essential for working with Wormhole formatted addresses. It converts native blockchain addresses into the standardized 32-byte hex format used across Wormhole operations.</p> <p>Key functions:</p> <ul> <li> <p><code>new UniversalAddress()</code>: Use the <code>UniversalAddress</code> constructor to convert native addresses into the Wormhole format.</p> <pre><code>const universalAddress = new UniversalAddress('0x123...', 'hex');\n</code></pre> </li> <li> <p><code>toUniversalAddress()</code>: Converts a platform-specific address into the Wormhole formatted 32-byte hex address.</p> <pre><code>const ethAddress: NativeAddress&lt;'Evm'&gt; = toNative('Ethereum', '0x0C9...');\nconst universalAddress = ethAddress.toUniversalAddress().toString();\n</code></pre> </li> <li> <p><code>toNative()</code>: Converts the Wormhole formatted address back to a native address for a specific blockchain platform.</p> <pre><code>const nativeAddress = universalAddress.toNative('Evm');\n</code></pre> </li> <li> <p><code>toString()</code>: Returns the Wormhole formatted address as a hex string, which can be used in various SDK operations.</p> <pre><code>console.log(universalAddress.toString());\n</code></pre> </li> </ul> <p>These methods allow developers to convert between native addresses and the Wormhole format, ensuring cross-chain compatibility.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#convert-between-native-and-wormhole-formatted-addresses","title":"Convert Between Native and Wormhole Formatted Addresses","text":"<p>The Wormhole SDK allows developers to easily convert between native addresses and Wormhole formatted addresses when building cross-chain applications.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#convert-a-native-address-to-a-wormhole-formatted-address","title":"Convert a Native Address to a Wormhole Formatted Address","text":"<p>Example conversions for EVM and Solana:</p> EVMSolana <pre><code>import { toNative } from '@wormhole-foundation/sdk-core';\n\nconst ethAddress: NativeAddress&lt;'Evm'&gt; = toNative(\n  'Ethereum',\n  '0x0C99567DC6f8f1864cafb580797b4B56944EEd28'\n);\nconst universalAddress = ethAddress.toUniversalAddress().toString();\nconsole.log('Universal Address (EVM):', universalAddress);\n</code></pre> <pre><code>import { toNative } from '@wormhole-foundation/sdk-core';\n\nconst solAddress: NativeAddress&lt;'Solana'&gt; = toNative(\n  'Solana',\n  '6zZHv9EiqQYcdg52ueADRY6NbCXa37VKPngEHaokZq5J'\n);\nconst universalAddressSol = solAddress.toUniversalAddress().toString();\nconsole.log('Universal Address (Solana):', universalAddressSol);\n</code></pre> <p>The result is a standardized address format that is ready for cross-chain operations.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#convert-back-to-native-addresses","title":"Convert Back to Native Addresses","text":"<p>Below is how you can convert a Wormhole formatted address back to an EVM or Solana native address:</p> <pre><code>const nativeAddressEvm = universalAddress.toNative('Evm');\nconsole.log('EVM Native Address:', nativeAddressEvm);\n\nconst nativeAddressSolana = universalAddress.toNative('Solana');\nconsole.log('Solana Native Address:', nativeAddressSolana);\n</code></pre> <p>These conversions ensure that your cross-chain applications can seamlessly handle addresses across different ecosystems.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#use-cases-for-wormhole-formatted-addresses","title":"Use Cases for Wormhole Formatted Addresses","text":""},{"location":"products/reference/wormhole-formatted-addresses/#cross-chain-token-transfers","title":"Cross-chain Token Transfers","text":"<p>Cross-chain token transfers require addresses to be converted into a standard format. For example, when transferring tokens from Ethereum to Solana, the Ethereum address is converted into a Wormhole formatted address to ensure compatibility. After the transfer, the Wormhole formatted address is converted back into the Solana native format.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#smart-contract-interactions","title":"Smart Contract Interactions","text":"<p>In smart contract interactions, especially when building dApps that communicate across multiple chains, Wormhole formatted addresses provide a uniform way to reference addresses. This ensures that addresses from different blockchains can interact seamlessly, whether you're sending messages or making cross-chain contract calls.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#dapp-development","title":"DApp Development","text":"<p>For cross-chain dApp development, Wormhole formatted addresses simplify handling user wallet addresses across various blockchains. This allows developers to manage addresses consistently, regardless of whether they work with EVM, Solana, or another supported platform.</p>"},{"location":"products/reference/wormhole-formatted-addresses/#relayers-and-infrastructure","title":"Relayers and Infrastructure","text":"<p>Finally, relayers and infrastructure components, such as Wormhole Guardians, rely on the standardized format to efficiently process and relay cross-chain messages. A uniform address format simplifies operations, ensuring smooth interoperability across multiple blockchains.</p>"},{"location":"products/settlement/faqs/","title":"Settlement FAQs","text":""},{"location":"products/settlement/faqs/#can-i-use-wormhole-settlement-from-a-smart-contract-if-so-how-is-a-message-signed-and-relayed","title":"Can I use Wormhole Settlement from a smart contract? If so, how is a message signed and relayed?","text":"<p>Yes, Wormhole Settlement can be used from a smart contract. The composing protocol's relayer relays the message. </p>"},{"location":"products/settlement/faqs/#what-happens-if-no-solver-participates-in-the-auction","title":"What happens if no solver participates in the auction?","text":"<p>Mayan Swift uses a refund mechanism. If an auction does not start within the specified deadline, it means no solvers placed a bid, and the user's funds will be refunded on the source chain.</p>"},{"location":"products/settlement/faqs/#what-guarantees-does-wormhole-settlement-provide-for-message-execution","title":"What guarantees does Wormhole Settlement provide for message execution?","text":"<p>After the user receives the token upfront, the execution of additional contract calls depends on the relayer of the composing protocol. </p>"},{"location":"products/settlement/get-started/","title":"Get Started with Settlement","text":"<p>Settlement is Wormhole\u2019s intent-based execution layer, enabling fast, multichain token transfers. It coordinates routing logic, relayers, and on-chain infrastructure to let users express what they want to be done, not how.</p> <p>This guide walks you through performing a real token swap using the Mayan Swift route with the Wormhole TypeScript SDK.</p> <p>By the end, you'll have a working script that:</p> <ul> <li>Resolves token transfer routes using Mayan Swift.</li> <li>Quotes and validates the best route.</li> <li>Initiates a swap on a source chain and completes the transfer on a destination chain (no destination signer required for Mayan Swift).</li> </ul> <p>For a coding walkthrough, watch the Intent-Based Swap demo.</p> <p>Note</p> <p>Mayan Swift currently supports mainnet only. Attempting to run this demo on a testnet will fail.</p>"},{"location":"products/settlement/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>One source-chain wallet funded with native gas on a Swift-supported chain.</li> <li>A destination wallet address on the target chain (no destination signer or gas required).</li> </ul> <p>This example utilizes Ethereum as the source chain and Solana as the destination chain. You\u2019ll need ETH for gas on Ethereum only. You do not need SOL or a Solana signer; you\u2019ll provide a Solana recipient address, and Mayan Swift\u2019s relayer handles the destination leg. You can adapt the example to match your preferred chains.</p>"},{"location":"products/settlement/get-started/#set-up-a-project","title":"Set Up a Project","text":"<p>Start by scaffolding a basic Node.js project and installing the required SDKs.</p> <ol> <li> <p>Create a new project folder:</p> <pre><code>mkdir settlement-swap\ncd settlement-swap\nnpm init -y\n</code></pre> </li> <li> <p>Install the required dependencies:</p> <pre><code>npm install @wormhole-foundation/sdk-connect \\\n    @wormhole-foundation/sdk-evm \\\n    @wormhole-foundation/sdk-solana \\\n    @mayanfinance/wormhole-sdk-route \\\n    dotenv\nnpm install -D typescript tsx\n</code></pre> </li> <li> <p>Create the file structure:</p> <pre><code>mkdir src\ntouch src/helpers.ts src/swap.ts .gitignore\n</code></pre> </li> <li> <p>Set up secure access to your wallets. This guide assumes you are loading a source private key and an Ethereum mainnet RPC URL from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like cast wallet. The RPC is required so the SDK can sign and send the source-chain transaction reliably.</p> <p>Note</p> <p>Some auto-selected public RPCs may require API keys or rate-limit intermittently. Providing your own mainnet RPC URL avoids 401/500 errors and timeouts during <code>initiate</code> and status polling.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> </ol>"},{"location":"products/settlement/get-started/#perform-a-token-swap","title":"Perform a Token Swap","text":"<p>This section shows you how to perform a token swap using the Mayan Swift route. You will define a helper function to configure the source chain signer.</p> <p>Then, you'll create a script that initiates a transfer on Ethereum, uses the Mayan Swift resolver to find valid routes, sends the transaction, and lets the route complete the transfer on Solana.</p> <ol> <li> <p>Open <code>helper.ts</code> and define the <code>getSigner</code> utility function to load private key, instantiate signer for your source chain, and return the signer along with the Wormhole-formatted address:</p> src/helpers.ts<pre><code>import {\n  Chain,\n  ChainAddress,\n  ChainContext,\n  Network,\n  Signer,\n  Wormhole,\n} from '@wormhole-foundation/sdk-connect';\nimport { getEvmSignerForKey } from '@wormhole-foundation/sdk-evm';\nimport { getSolanaSigner } from '@wormhole-foundation/sdk-solana';\nimport { JsonRpcProvider } from \"ethers\";\n\n/**\n * Create a helper function that returns a signer for the given chain using locally scoped credentials.\n * The required values (MAINNET_ETH_PRIVATE_KEY, ETHEREUM_MAINNET_RPC)\n * must be loaded securely beforehand, for example via a keystore,\n * secrets manager, or environment variables (not recommended).\n */\n\n// Define transfer interface.\nexport interface SignerContext&lt;N extends Network, C extends Chain&gt; {\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}\n\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;\n): Promise&lt;SignerContext&lt;N, C&gt;&gt; {\n  let signer: Signer;\n  const platform = chain.platform.utils()._platform;\n  switch (platform) {\n    case \"Solana\":\n      signer = await getSolanaSigner(\n        await chain.getRpc(),\n        \"MAINNET_SOL_PRIVATE_KEY\"\n      );\n      break;\n    case 'Evm':\n      signer = await getEvmSignerForKey(\n        await chain.getRpc(),\n        'MAINNET_ETH_PRIVATE_KEY'\n      );\n      break;\n    default:\n      throw new Error('Unrecognized platform: ' + platform);\n  }\n\n  return {\n    signer: signer as Signer&lt;N, C&gt;,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n</code></pre> </li> <li> <p>In <code>swap.ts</code>, add the following script, which will handle all of the logic required to perform the token swap: </p> src/swap.ts<pre><code>import { Wormhole, routes } from '@wormhole-foundation/sdk-connect';\nimport { EvmPlatform } from '@wormhole-foundation/sdk-evm';\nimport { SolanaPlatform } from '@wormhole-foundation/sdk-solana';\nimport { MayanRouteSWIFT } from '@mayanfinance/wormhole-sdk-route';\nimport { getSigner } from './helpers';\n\n(async function () {\n  const wh = new Wormhole(\"Mainnet\", [EvmPlatform, SolanaPlatform]);\n\n  const sendChain = wh.getChain('Ethereum');\n  const destChain = wh.getChain('Solana');\n  const destAddress = Wormhole.chainAddress(destChain.chain, \"INSERT_DESTINATION_ADDRESS\");\n\n  //  To transfer native ETH on Ethereum to native SOL on Solana.\n  const source = Wormhole.tokenId(sendChain.chain, 'native');\n  const destination = Wormhole.tokenId(destChain.chain, 'native');\n\n  // Create a new Wormhole route resolver, adding the Mayan route to the default list\n  // @ts-ignore: Suppressing TypeScript error because the resolver method expects a specific type,\n  // but MayanRouteSWIFT is compatible and works as intended in this context.\n  const resolver = wh.resolver([MayanRouteSWIFT]);\n\n  // Show supported tokens\n  const dstTokens = await resolver.supportedDestinationTokens(\n    source,\n    sendChain,\n    destChain\n  );\n  console.log(dstTokens.slice(0, 5));\n\n  // Load signers and addresses from helpers.\n  const sender = await getSigner(sendChain);\n\n  // Creating a transfer request fetches token details\n  // since all routes will need to know about the tokens.\n  const tr = await routes.RouteTransferRequest.create(wh, {\n    source,\n    destination,\n  });\n\n  // Resolve the transfer request to a set of routes that can perform it\n  const foundRoutes = await resolver.findRoutes(tr);\n  const bestRoute = foundRoutes[0]!;\n\n  // Specify the amount as a decimal string.\n  const transferParams = {\n    amount: '0.001',\n    options: bestRoute.getDefaultOptions(),\n  };\n\n  // Validate the queries route\n  let validated = await bestRoute.validate(tr, transferParams);\n  if (!validated.valid) {\n    console.error(validated.error);\n    return;\n  }\n  console.log('Validated: ', validated);\n\n  const quote = await bestRoute.quote(tr, validated.params);\n  if (!quote.success) {\n    console.error(`Error fetching a quote: ${quote.error.message}`);\n    return;\n  }\n  console.log('Quote: ', quote);\n\n  // Initiate the transfer\n  const receipt = await bestRoute.initiate(\n    tr,\n    sender.signer,\n    quote,\n    destAddress\n  );\n  console.log('Initiated transfer with receipt: ', receipt);\n\n  const timeout = 15 * 60 * 1000;\n  await routes.checkAndCompleteTransfer(\n    bestRoute,\n    receipt,\n    undefined,\n    timeout\n  );\n})();\n</code></pre> </li> <li> <p>Execute the script to initiate and complete the transfer:</p> <pre><code>npx tsx src/swap.ts\n</code></pre> <p>If successful, you\u2019ll see terminal output like this:</p> <p> npx tsx src/swap.ts Validated: { valid: true, ... } Quote: { success: true, ... } Initiated transfer with receipt: ... Checking transfer state... Current Transfer State: SourceInitiated Current Transfer State: SourceInitiated Current Transfer State: SourceInitiated Current Transfer State: DestinationFinalized </p> </li> </ol> <p>Congratulations! You've just completed a cross-chain token swap from Ethereum to Solana using Settlement.</p>"},{"location":"products/settlement/get-started/#customize-the-integration","title":"Customize the Integration","text":"<p>You can tailor the example to your use case by adjusting:</p> <ul> <li>Tokens and chains: Use <code>getSupportedTokens()</code> to explore what's available.</li> <li>Source and destination chains: Modify <code>sendChain</code> and <code>destChain</code> in <code>swap.ts</code>.</li> <li>Transfer settings: Update the amount or route parameters.</li> <li>Signer management: Modify <code>src/helpers.ts</code> to integrate with your preferred wallet setup.</li> </ul>"},{"location":"products/settlement/get-started/#next-steps","title":"Next Steps","text":"<p>Once you've chosen a path, follow the corresponding guide to start building:</p> <ul> <li><code>demo-mayanswift</code>: Check out the repository for the full code example.</li> </ul>"},{"location":"products/settlement/overview/","title":"Settlement Overview","text":"<p>Wormhole Settlement is a multichain transfer system that allows users to specify what they want to happen, such as sending or swapping tokens, without handling the execution themselves. Instead, off-chain agents called solvers compete to fulfill these user intents.</p> <p>Settlement prioritizes speed, execution quality, and reliability. Its primary route, Mayan Swift, leverages fast off-chain auctions among a curated set of solvers to achieve low-latency bridging with minimal slippage. All settlement steps remain verifiable on-chain through Wormhole messages. </p> <p>For broader use cases and protocol-level execution, Mayan MCTP provides an alternative path. It wraps Circle\u2019s CCTP to facilitate native USDC bridging and token delivery in a single, verifiable flow. While slower due to chain finality constraints, MCTP offers a reliable mechanism for cross-chain transfers.</p> <p>In the following video, learn the core concepts behind intents and Wormhole Settlement, including the roles of users, solvers, and the settlement layer:</p> Video Chapters <ul> <li>00:00: Defining the Problem: UX and Liquidity Fragmentation</li> <li>00:52: Core Concept: Declarative vs. Imperative Transactions</li> <li>01:12: Intent Key Players: Users, Solvers, and Settlement Layers</li> <li>01:46: Anatomy of an Intent-Based Transaction</li> <li>02:11: Wormhole Settlement: The Onchain Execution Layer</li> <li>02:22: Mayan Swift: An Intent-Based Protocol for Swaps</li> <li>02:52: Benefits for Devs: Chain Abstraction &amp; Gasless UX</li> <li>03:22: Code Demo: Cross-Chain Swap with Mayan Swift</li> </ul>"},{"location":"products/settlement/overview/#key-features","title":"Key Features","text":"<ul> <li>Intent-based architecture: Users express what they want to happen (e.g., swap X for Y on chain Z), and solvers execute it.</li> <li>Solver auctions: Solvers compete in on-chain auctions for the right to fulfill intents, improving execution quality.</li> <li>Fast and fallback-capable: Combines high-speed execution with a reliable fallback path.</li> <li>Minimal slippage: Settlement abstracts away complex balancing operations and uses shuttle assets like USDC and tokens deployed via NTT.</li> <li>On-chain verifiability: Even though auctions are off-chain, all settlement steps remain verifiable on-chain via Wormhole messages.</li> <li>Two integrated routes: Mayan Swift for speed, Mayan MCTP for compatibility and redundancy.</li> </ul>"},{"location":"products/settlement/overview/#how-it-works","title":"How It Works","text":"<p>At the core of Settlement are two components:</p> <ul> <li>Intents: Signed transactions where a user defines what outcome they want (e.g., send USDC to another chain and receive ETH). It abstracts what the user wants, not how it should be executed.</li> <li>Solvers: Third-party agents that compete in auctions to fulfill these intents. They front capital, perform swaps or transfers, and receive fees in return.</li> </ul> <p>Settlement currently supports the following integrated protocols.</p>"},{"location":"products/settlement/overview/#mayan-swift","title":"Mayan Swift","text":"<p>Mayan Swift implements a traditional intent-based architecture, where solvers compete to fulfill user intents by utilizing their inventory. It offers fast execution, typically around 12 seconds. To participate, solvers must hold assets on multiple chains, which can lead to imbalances: some chains may get depleted while others accumulate excess. This requires occasional rebalancing and adds operational overhead. Despite that, Mayan Swift is ideal for high-speed transfers and benefits from open, competitive auctions that can drive down execution prices.</p> <p>The diagram below shows how Mayan Swift handles a cross-chain intent when a user wants to swap ARB on Arbitrum for WIF on Solana. Behind the scenes, the process is more involved and relies on solver-managed liquidity across both chains.</p> <ol> <li>Solver initiates on Arbitrum: Solver swaps ARB \u2192 ETH and deposits ETH into an escrow on Arbitrum.</li> <li>VAA emitted to Solana: A Verifiable Action Approval (VAA) triggers the solver to release SOL on Solana, which is swapped to WIF using an aggregator.</li> <li>User receives WIF: Once the user receives WIF, a second VAA is emitted to finalize the transfer and releases the ETH held in the escrow to the solver.</li> <li>Failure handling: If any step fails, the ETH in escrow is either retained or returned to the user; the solver only gets paid if execution succeeds.</li> </ol> <pre><code>sequenceDiagram\n    participant User\n    participant Solver_ARB as Solver (Arbitrum)\n    participant Escrow\n    participant Wormhole\n    participant Solver_SOL as Solver (Solana)\n    participant Aggregator\n\n    Note over User,Aggregator: User has ARB and wants WIF\n\n    User-&gt;&gt;Solver_ARB: Submit intent (ARB \u2192 WIF)\n    Solver_ARB-&gt;&gt;Escrow: Swaps ARB \u2192 ETH and deposits ETH\n    Escrow--&gt;&gt;Wormhole: Emits VAA\n    Wormhole--&gt;&gt;Solver_SOL: Delivers VAA\n    Solver_SOL-&gt;&gt;Aggregator: Releases SOL and swaps to WIF\n    Aggregator-&gt;&gt;Solver_SOL: Receives WIF\n    Solver_SOL-&gt;&gt;User: Sends WIF\n    User--&gt;&gt;Wormhole: Emits final VAA\n    Wormhole--&gt;&gt;Escrow: Confirms receipt\n    Escrow-&gt;&gt;Solver_ARB: Releases ETH to solver</code></pre>"},{"location":"products/settlement/overview/#mayan-mctp","title":"Mayan MCTP","text":"<p>Mayan MCTP is a fallback protocol that wraps Circle\u2019s CCTP into the Settlement framework. It bundles USDC bridging and swaps into a single operation handled by protocol logic. This route is slower due to its reliance on chain finality. However, it provides broad compatibility and redundancy, making it useful when faster routes are unavailable or when targeting chains that aren\u2019t supported by Swift. While typically more expensive due to protocol fees, it ensures reliable settlement when faster options are unavailable.</p>"},{"location":"products/settlement/overview/#use-cases","title":"Use Cases","text":"<ul> <li> <p>Cross-Chain Perpetuals </p> <ul> <li>Settlement: Provides fast token execution across chains.</li> <li>Queries: Fetch live prices and manage position state across chains.</li> </ul> </li> <li> <p>Bridging Intent Library</p> <ul> <li>Settlement: Handles user-defined bridge intents.</li> <li>Messaging: Triggers cross-chain function calls.</li> </ul> </li> <li> <p>Multichain Prediction Markets</p> <ul> <li>Settlement: Executes token flows between chains.</li> <li>Queries: Gets market data and tracks state.</li> </ul> </li> </ul>"},{"location":"products/settlement/overview/#next-steps","title":"Next Steps","text":"<p>Start building with Settlement or dive deeper into specific components:</p> <ul> <li>Get Started with Settlement: Follow a hands-on demo using Mayan Swift.</li> <li>Architecture Documentation: Explore the Settlement architecture and components.</li> </ul>"},{"location":"products/settlement/concepts/architecture/","title":"Settlement Protocol Architecture","text":"<p>This page describes the high-level mechanics of the underlying native swap protocols in the Wormhole SDK. While built on Wormhole messaging, each protocol uses a novel architecture with unique price discovery, scalability, and latency tradeoffs. These designs enable redundancy to handle highly asymmetric flows and sharp volume changes. These sections will cover the following:</p> <ul> <li>Mayan Swift: A flexible cross-chain intent protocol that embeds a competitive on-chain price auction to determine the best possible execution for the expressed user intent.</li> <li>Mayan MCTP: A cross-chain intents protocol that leverages Circle's CCTP (Cross-Chain Transfer Protocol) mechanism and Wormhole messaging to enable secure, fee-managed asset transfers across chains.</li> </ul>"},{"location":"products/settlement/concepts/architecture/#mayan-swift","title":"Mayan Swift","text":"<p>Mayan Swift is a flexible cross-chain intent protocol that embeds a competitive on-chain price auction to determine the best possible execution for the expressed user intent.</p>"},{"location":"products/settlement/concepts/architecture/#on-chain-competitive-price-discovery-mechanism","title":"On-Chain Competitive Price Discovery Mechanism","text":"<p>Traditional intent-based protocols essentially function as cross-chain limit orders. If the order is profitable, solvers will compete to fulfill it, leading to MEV-like competition focused on speed. While functional, this methodology presents two clear inefficiencies and drawbacks.</p> <p>First, they lack a competitive price discovery mechanism as limit order prices are typically determined through centralized off-chain systems. Second, in this MEV-like market structure, only a single solver can win, while the others lose out on transaction fees. This dynamic of deadweight loss results in solvers prioritizing high-margin orders, ultimately resulting in elevated fees for end-users without commensurate benefits.</p> <p>Mayan Swift addresses these limitations by implementing competitive on-chain English auctions on Solana as an embedded price discovery mechanism, fundamentally shifting solver competition from speed-based to price-based execution. Through this architecture, the solver offering the best possible price secures the right to fulfill the order within pre-specified deadline parameters.</p> <p></p>"},{"location":"products/settlement/concepts/architecture/#protocol-flow-how-it-works","title":"Protocol Flow: How It Works","text":"<ol> <li> <p>Initiation: The user creates an order by signing a transaction that locks one of the primary assets (USDC or ETH) into the Mayan smart contract, specifying the desired outcome. </p> <p>Note</p> <p>If the input asset is not a primary asset, it is converted into a primary asset within the same transaction before the order is submitted.</p> <p>Each order includes properties such as destination chain, destination wallet address, output token address, minimum output amount, gas drop amount, deadline, and 32 bytes of random hex to prevent collisions. A Keccak-256 hash is then calculated to identify the order.</p> </li> <li> <p>Auction: Solvers observe on-chain data or subscribe to the Mayan explorer web socket (solvers using the Mayan explorer verify the order's integrity by checking the data against the on-chain hash). Once the new order is verified, an on-chain auction on Solana is initiated by passing the order ID and the bid amount, which cannot be lower than the minimum amount. Other solvers can increase the bid by submitting a higher amount before the auction ends.</p> </li> <li>Fulfillment: The auction ends three seconds after the initial bid. Once the auction ends, the winning solver can execute an instruction that passes their wallet address on the destination chain. This triggers a Wormhole message containing the order ID and the winner's wallet address. Wormhole Guardians then sign this message, allowing the winning solver to fulfill the order on the destination chain by submitting proof of their win and the promised amount to the Mayan contract before the deadline. The Mayan contract deducts a protocol fee (currently 3 basis points) and a referral fee (if applicable), transferring the remaining amount to the user's destination wallet. It also triggers a Wormhole message as proof of fulfillment.</li> <li>Settlement: After the Wormhole Guardians sign the fulfillment message, the winning solver can submit this message on the source chain to unlock the user's funds and transfer them to their own wallet. Upon fulfillment, the solver has the option to delay triggering a Wormhole message immediately. Instead, they can batch the proofs and, once the batch reaches a certain threshold, issue a batched proof to unlock all orders simultaneously, saving on gas fees.</li> </ol>"},{"location":"products/settlement/concepts/architecture/#mayan-mctp","title":"Mayan MCTP","text":"<p>Mayan MCTP is a cross-chain intents protocol that leverages Circle's CCTP (Cross-Chain Transfer Protocol) mechanism and Wormhole messaging to enable secure, fee-managed asset transfers across chains.</p> <p></p>"},{"location":"products/settlement/concepts/architecture/#protocol-flow-how-it-works_1","title":"Protocol Flow: How It Works","text":"<ol> <li> <p>Initiation: The user creates an order by signing a transaction that locks one USDC into the Mayan smart contract, specifying the desired outcome. </p> <p>Note</p> <p>If the input asset is not USDC, it is converted into a primary asset within the same transaction before the order is submitted.</p> <p>The contract constructs a <code>BridgeWithFeeMsg</code> structure, which includes parameters such as the action type, payload type, nonce, destination address, gas drop, redeem fee, and an optional custom payload hash.</p> </li> <li> <p>Intent submission: The contract calls the CCTP messenger to deposit the tokens for bridging. A unique nonce is generated, and a corresponding fee-lock record is created in the contract's storage. This record includes the locked fee, gas drop parameters, and destination details. The constructed message is hashed and published through Wormhole. The protocol fee is deducted during this step, and the Wormhole message is broadcast with the specified consistency (finality) level.</p> </li> <li>Fulfillment: On the destination chain, the protocol receives a CCTP message with corresponding signatures and verifies the payload using Wormhole's verification mechanism. Once validated, the redeemed tokens are transferred to the intended recipient, deducting the redeem fee as per protocol rules.</li> </ol> <p>The protocol provides mechanisms for unlocking the fee once the bridging process is completed. This can occur immediately upon fulfillment or be batched for efficiency. In the fee unlock flow, the contract verifies the unlock message via Wormhole and then releases the locked fee to the designated unlocker address.</p>"},{"location":"products/settlement/concepts/architecture/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li>To learn how to integrate settlement routes into your application, see the Integrate Wormhole Settlement Routes Using the SDK tutorial.</li> </ul>"},{"location":"products/settlement/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block Explorer</p>"},{"location":"products/token-transfers/overview/","title":"Token Transfers Overview","text":""},{"location":"products/token-transfers/overview/#token-transfers-overview","title":"Token Transfers Overview","text":"<p>Wormhole Token Transfers let you move assets seamlessly across chains. Developers can choose between Native Token Transfers (NTT), which enable direct movement of native tokens, or Wrapped Token Transfers (WTT), which use a lock-and-mint model for broad compatibility. Both approaches are secured by the Wormhole Guardians and integrate with the same cross-chain messaging layer.</p>"},{"location":"products/token-transfers/overview/#how-token-transfers-work","title":"How Token Transfers Work","text":"<p>Both NTT and WTT rely on Guardian-signed messages (VAAs) to transfer tokens across chains securely. The difference lies in how tokens are represented on the destination chain.</p> <p>At a high level, the flow looks like this:</p> <ol> <li>A user sends tokens to the Wormhole contract on the source chain.</li> <li>The contract emits a message, which the Guardians sign as a VAA.</li> <li>The VAA is submitted to the destination chain.</li> <li>Depending on the transfer type:<ul> <li>NTT: Tokens are minted or released from escrow.</li> <li>WTT: Wrapped tokens are minted to the recipient\u2019s wallet.</li> </ul> </li> </ol> <pre><code>flowchart LR\n    A[User] --&gt; B[Source chain&lt;br/&gt;Wormhole contract]\n    B --&gt; C[Guardians&lt;br/&gt;sign VAA]\n    C --&gt; D[Destination chain&lt;br/&gt;Wormhole contract]\n    D --&gt;|NTT| E[Mint or release&lt;br/&gt;native tokens]\n    D --&gt;|WTT| F[Mint wrapped&lt;br/&gt;tokens]\n    E --&gt; G[Recipient]\n    F --&gt; G[Recipient]</code></pre>"},{"location":"products/token-transfers/overview/#choosing-between-ntt-and-wtt","title":"Choosing Between NTT and WTT","text":"<p>Wormhole provides two distinct mechanisms for transferring assets cross-chain: Native Token Transfers (NTT) and Wrapped Token Transfers (WTT). Both options offer distinct integration paths and feature sets tailored to your requirements, as outlined below.</p> <p>Choosing between the two models comes down to trade-offs. NTT offers an adaptable, upgradable, and customizable framework that enables teams to retain ownership and define policies across chains. WTT provides the most straightforward and permissionless path, but wrapped token contracts are managed by Wormhole Governance, with no ownership transfer or contract upgradeability possible.</p> Feature Native Token Transfers Wrapped Token Transfers Best for DeFi governance, native assets with multichain liquidity, stablecoins, institutional use cases, and projects that want full control of their cross-chain token Consumer apps, games, wrapped-token use cases, and projects that want a fast, managed bridging solution Mechanism Burn-and-mint or hub-and-spoke Lock-and-mint Security Configurable rate limiting, pausing, access control, threshold attestations. Integrated Global Accountant Preconfigured rate limiting and integrated Global Accountant Contract Ownership User retains ownership and upgrade authority on each chain Managed via Wormhole Governance; wrapped token contracts are controlled by WTT (ownership is not transferable, and integrators cannot upgrade wrapped contracts) Token Contracts Native contracts owned by your protocol governance, maintain the same token across chains Wrapped asset contract owned by the Wormhole WTT contract, creates a new wrapped version on the destination chain Integration Customizable, flexible framework for advanced deployments (optional: deploy via NTT Launchpad for EVM chains) Straightforward, permissionless deployment User Experience Seamless, users interact with the same token everywhere Wrapped assets may need explorer metadata updates for clarity Examples NTT Connect, NTT TypeScript SDK Portal Bridge UI <p>Terminology</p> <p>In the SDK and smart contracts, Wrapped Token Transfers (WTT) are referred to as Token Bridge. In documentation, we use WTT for clarity. Both terms describe the same protocol.</p> <p>In the following video, Wormhole Foundation DevRel Pauline Barnades walks you through the key differences between Wormhole\u2019s Native Token Transfers (NTT) and Wrapped Token Transfers (WTT) and how to select the best option for your use case:</p>"},{"location":"products/token-transfers/overview/#next-steps","title":"Next Steps","text":"<p>If you are looking for more guided practice, take a look at:</p> <ul> <li>Get Started with NTT: Learn how to deploy and register contracts to transfer native tokens across chains.</li> <li>Get Started with WTT: Perform token transfers using WTT, including manual and automatic transfers.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/faqs/","title":"NTT FAQs","text":""},{"location":"products/token-transfers/native-token-transfers/faqs/#what-is-ntt","title":"What is NTT?","text":"<p>Native Token Transfers (NTT) is a framework for moving your own token across multiple chains without wrapping. It preserves your token's native contract design on every chain and keeps control in your hands for metadata, ownership, upgrades, and custom features.</p> <p>NTT includes configurable controls like rate limiting and access control, and supports deployment modes that fit either new or existing tokens. For a quick video summary, watch the NTT speed round.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#do-you-have-an-example-of-how-cross-chain-lending-can-be-implemented-using-wormhole","title":"Do you have an example of how cross-chain lending can be implemented using Wormhole?","text":"<p>Yes, we have an example of cross-chain lending that leverages Wormhole\u2019s Wrapped Token Transfers (WTT). In this example, collateral deposits (such as ETH on Ethereum) are bridged to a hub chain. Once the collateral is deposited, the borrowed assets, like wrapped BNB, are bridged to Binance Smart Chain. You can explore the full implementation in the Wormhole Lending Examples repository on GitHub.</p> <p>Alternatively, you can also implement cross-chain lending using Wormhole\u2019s core messaging instead of WTT, which avoids the limitations imposed by governor limits. ETH would be custodied on Ethereum, and BNB on the Binance spoke during this setup. When a user deposits ETH on Ethereum, a core bridge message is sent to the hub for accounting purposes. The hub then emits a message that can be redeemed on Binance to release the BNB. This approach allows for more direct asset control across chains while reducing reliance on WTT limits.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#what-causes-the-no-protocols-registered-for-evm-error-in-wormhole-sdk","title":"What causes the \"No protocols registered for Evm\" error in Wormhole SDK?","text":"<p>This error typically occurs when the Wormhole SDK cannot recognize or register the necessary EVM protocols, which are required for interacting with Ethereum-based networks. The most common reason for this error is that the relevant EVM package for Wormhole's NTT has not been imported correctly.</p> <p>To resolve this issue, ensure you have imported the appropriate Wormhole SDK package for EVM environments. The necessary package for handling NTT on EVM chains is <code>@wormhole-foundation/sdk-evm-ntt</code>. Here's the correct import statement:</p> <pre><code>import '@wormhole-foundation/sdk-evm-ntt';\n</code></pre> <p>By importing this package, the Wormhole SDK can register and utilize the required protocols for EVM chains, enabling cross-chain token transfers using the NTT framework. Ensure to include this import at the start of your code, especially before attempting any interactions with EVM chains in your project.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-mint-tokens-after-moving-the-treasury-object-to-the-ntt-manager-on-sui","title":"How can I mint tokens after moving the treasury object to the NTT manager on Sui?","text":"<p>To mint tokens after moving the treasury object to the NTT manager on Sui, you need to use the <code>take_treasury_cap</code> function from the NTT contract. This function allows the admin to temporarily take the treasury cap to mint assets.</p> <p>The flow works as follows:</p> <ol> <li>Take the treasury cap: Use <code>state.take_treasury_cap(admin_cap)</code> to extract the treasury cap.</li> <li>Mint assets: Perform your minting operations with the treasury cap.</li> <li>Return the treasury cap: Use <code>state.return_treasury_cap(treasury_cap)</code> to return it to the state.</li> </ol> <p>Important</p> <p>Return the Treasury Cap! If the treasury cap is not returned in the same transaction, the NTT deployment will stop working. The contract will break and become non-functional.</p> <p>It is recommended to use Programmable Transaction Blocks (PTBs) for this operation. PTBs allow you to execute multiple operations atomically in a single transaction, ensuring that both the minting operation and returning the treasury cap happen together, preventing any risk of the contract breaking.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-specify-a-custom-rpc-for-ntt","title":"How can I specify a custom RPC for NTT?","text":"<p>To specify a custom RPC for Wormhole's NTT, create an <code>overrides.json</code> file in the root of your deployment directory. This file allows you to define custom RPC endpoints, which can be helpful when you need to connect to specific nodes or networks for better performance, security, or control over the RPC connection.</p> <p>Below is an example of how the <code>overrides.json</code> file should be structured:</p> <code>overrides.json</code> <pre><code>{\n\"chains\": {\n    \"Bsc\": {\n        \"rpc\": \"http://127.0.0.1:8545\"\n    },\n    \"Sepolia\": {\n        \"rpc\": \"http://127.0.0.1:8546\"\n    },\n    \"Solana\": {\n        \"rpc\": \"http://127.0.0.1:8899\"\n    }\n    }\n}\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-redeem-tokens-if-ntt-rate-limits-block-them-on-the-target-chain","title":"How can I redeem tokens if NTT rate limits block them on the target chain?","text":"<p>If the rate limits on Wormhole's NTT block tokens from being received on the target chain, the transaction will typically be paused until the rate limits are adjusted. Rate limits are implemented to manage congestion and prevent chain abuse, but they can occasionally delay token redemptions.</p> <p>To resolve this:</p> <ol> <li>Adjust rate limits: The rate limits must be modified by an administrator or through the appropriate configuration tools to allow the blocked transaction to proceed.</li> <li>Resume transaction flow: Once the rate limits are adjusted, you can resume the flow, which should be visible in the UI. The tokens will then be redeemable on the target chain.</li> </ol> <p>In most cases, the transaction will resume automatically once the rate limits are adjusted, and the UI will guide you through the redemption process.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#what-are-the-challenges-of-deploying-ntt-to-non-evm-chains","title":"What are the challenges of deploying NTT to non-EVM chains?","text":"<p>NTT requires the same transceiver for all routes, limiting flexibility when deploying across EVM and non-EVM chains. For example, if you're deploying to Ethereum, Arbitrum, and Solana, you can't use Wormhole and Axelar as transceivers because Axelar doesn't support Solana. This constraint forces integrators to use a single transceiver (e.g., Wormhole) for all chains, reducing flexibility in optimizing cross-chain transfers.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#does-the-ntt-manager-function-as-an-escrow-account-for-a-hub-chain","title":"Does the NTT manager function as an escrow account for a hub chain?","text":"<p>Yes, the NTT manager acts like an escrow account for non-transferable tokens on a hub chain. To manage non-transferable tokens, you would add the NTT manager to the allowlist, ensuring that only the NTT manager can hold and control the tokens as they are transferred across chains.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#which-functions-or-events-does-connect-rely-on-for-ntt-integration","title":"Which functions or events does Connect rely on for NTT integration?","text":"<p>Connect relies on the NTT SDK for integration, with platform-specific implementations for both SVM and EVM. The key methods involved include:</p> <ul> <li>Initiate and redeem functions: These functions are essential for initiating token transfers and redeeming them on the destination chain.</li> <li>Rate capacity methods: Methods for fetching inbound and outbound rate limits are also critical for controlling the flow of tokens and preventing congestion.</li> </ul> <p>These functions ensure Connect can handle token transfers and manage chain-rate limits.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-does-the-relayer-contract-determine-which-transceiver-to-call","title":"How does the relayer contract determine which transceiver to call?","text":"<p>The source chain's transceiver includes the destination chain's transceiver in the message via the relayer contract. The admin configures each transceiver's mapping of its peers on other chains. This mapping allows the destination transceiver to verify that the message came from a trusted source.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-do-i-create-a-verifier-or-transceiver","title":"How do I create a verifier or transceiver?","text":"<p>To run your verifier, you need to implement a transceiver. This involves approximately 200 lines of code, leveraging the base functionality provided by the abstract transceiver contract.</p> <p>For reference, you can review the Axelar transceiver implementation.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#can-i-use-hetzner-for-the-ntt-deployment","title":"Can I use Hetzner for the NTT deployment?","text":"<p>No, using Hetzner servers for Solana deployments is not recommended. Hetzner has blocked Solana network activity on its servers, leading to connection issues. Hetzner nodes will return a <code>ConnectionRefused: Unable to connect</code> error for Solana deployments. Therefore, choosing alternative hosting providers that support Solana deployments is advisable to ensure seamless operation.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-transfer-tokens-with-ntt-with-an-additional-payload","title":"How can I transfer tokens with NTT with an additional payload?","text":"<p>You can include an extra payload in NTT messages by overriding specific methods in the NttManager contract.</p> <ul> <li>On the source chain, override the <code>_handleMsg</code> function to query any additional data you need for the transfer. The extra payload can then be added to the message.</li> <li>On the destination chain override the <code>_handleAdditionalPayload</code> function to process and utilize the extra payload sent in the message.</li> </ul> <p>Important</p> <p>You cannot pass the additional data as part of the entry point directly. Instead, the data must be queried on-chain via the <code>_handleMsg</code> method, ensuring the payload is properly included and processed.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#why-use-ntt-over-xerc20","title":"Why use NTT over xERC20?","text":"<p>Shortcomings of xERC20:</p> <ul> <li>Single point of failure: xERC20 relies on multiple bridges, but a compromise in any single bridge can jeopardize the token. It enforces a 1-of-n design rather than a more robust m-of-n approach.</li> <li>No pausing: xERC20 lacks mechanisms to pause operations during emergencies.</li> <li>No access control: There are no built-in access controls for managing token transfers securely.</li> <li>Limited rate limiting: Rate limits are bridge-specific and cannot be set per chain, reducing flexibility and security.</li> <li>No integration with relaying systems: xERC20 does not natively support relayer systems, limiting its usability in automated or dynamic setups.</li> </ul> <p>While xERC20 is an extension of the ERC20 standard, NTT is designed as a framework rather than a rigid standard. It is compatible with any token that supports <code>burn</code> and <code>mint</code> functions and allows the NTT manager to act as a minter. </p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-start-transferring-tokens-to-a-chain-that-is-in-burning-mode-if-no-tokens-are-locked-yet","title":"How can I start transferring tokens to a chain that is in burning mode, if no tokens are locked yet?","text":"<p>To begin transferring tokens to a chain in burning mode when no tokens are locked, you must first send tokens to the NTT manager to back the supply. The address of the NTT manager can be found in the <code>deployment.json</code> file.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#is-there-a-way-to-use-ntt-tokens-with-chains-that-dont-currently-support-ntt","title":"Is there a way to use NTT tokens with chains that don't currently support NTT?","text":"<p>Yes. NTT tokens can be used with chains that do not support NTT by leveraging the Wrapped Token Transfers (WTT). For example:</p> <ul> <li>Wrapped token scenario: A token, such as the W token, can be bridged to non-NTT networks using WTT. When the token is bridged to a chain like Sui, a wrapped version of the token is created (e.g., Wrapped W token).</li> <li>Unwrapping requirement: Tokens bridged using WTT cannot be directly transferred to NTT-supported chains. To transfer them, they must first be unwrapped on the non-NTT chain and then transferred via the appropriate mechanism.</li> <li>Messaging consistency: WTT exclusively uses Wormhole messaging, ensuring consistent communication across all chains, whether or not they support NTT.</li> </ul> <p>This approach ensures interoperability while maintaining the integrity of the token's cross-chain movement.</p>"},{"location":"products/token-transfers/native-token-transfers/faqs/#how-can-i-update-my-ntt-cli-version","title":"How can I update my NTT CLI version?","text":"<p>To update an existing NTT CLI installation, run the following command in your terminal:</p> <pre><code>ntt update\n</code></pre> <p>NTT CLI installations and updates will always pick up the latest tag with name vX.Y.Z+cli and verify that the underlying commit is included in main.</p> <p>For local development, you can update your CLI version from a specific branch or install from a local path.</p> <p>To install from a specific branch, run:</p> <pre><code>ntt update --branch foo\n</code></pre> <p>To install locally, run: <pre><code>ntt update --path path/to/ntt/repo\n</code></pre></p> <p>Git branch and local installations enable a fast iteration loop as changes to the CLI code will immediately be reflected in the running binary without having to run any build steps.</p>"},{"location":"products/token-transfers/native-token-transfers/get-started/","title":"Get Started with NTT","text":""},{"location":"products/token-transfers/native-token-transfers/get-started/#introduction","title":"Introduction","text":"<p>The Native Token Transfers (NTT) framework enables seamless cross-chain token movement without wrapping or liquidity pools. This guide shows you how to install the NTT CLI, which is used to configure and deploy native token contracts, and scaffold your first project for deployment on testnet or mainnet.</p> <p>If you are looking for a no-code experience to deploy on mainnet, you can explore the NTT Launchpad. For a coding walkthrough, watch the NTT deployment demo.</p>"},{"location":"products/token-transfers/native-token-transfers/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Node.js and npm installed.</li> <li>Bun installed.</li> <li>A wallet private key with tokens on supported chains.</li> <li>ERC-20 or SPL tokens already deployed on the source and destination chains.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/get-started/#dont-have-a-token-yet","title":"Don\u2019t Have a Token Yet?","text":"<p>To use NTT, you must have a token already deployed on the source and destination chains. If you don\u2019t have one, follow the quick guides below to deploy a basic test token.</p> Deploy an ERC-20 Token on EVM <p>Use the example NTT token repository to deploy a basic ERC-20 token contract on testnet.</p> <ol> <li> <p>Install Foundry: Install the Forge CLI.</p> </li> <li> <p>Clone the repository: Fetch the example contract repository.</p> <pre><code>git clone https://github.com/wormhole-foundation/example-ntt-token-evm.git\ncd example-ntt-token\n</code></pre> </li> <li> <p>Deploy the token contract: Deploy to testnet with your preferred name, symbol, minter, and owner addresses.</p> <pre><code>forge create --broadcast \\\n    --rpc-url INSERT_RPC_URL \\\n    --private-key INSERT_YOUR_PRIVATE_KEY \\\n    src/PeerToken.sol:PeerToken \\\n    --constructor-args \"INSERT_TOKEN_NAME\" \"INSERT_TOKEN_SYMBOL\" INSERT_MINTER_ADDRESS INSERT_OWNER_ADDRESS\n</code></pre> </li> <li> <p>Mint tokens: Send tokens to your address.</p> <pre><code>cast send INSERT_TOKEN_ADDRESS \\\n    \"mint(address,uint256)\" \\\n    INSERT_RECIPIENT_ADDRESS \\\n    INSERT_AMOUNT_IN_WEI \\\n    --private-key INSERT_YOUR_PRIVATE_KEY \\\n    --rpc-url INSERT_RPC_URL\n</code></pre> </li> </ol> <p>Note</p> <p>This token uses 18 decimals by default. All minting values must be specified in <code>wei</code> (1 token = 10^18).</p> Create and Mint an SPL Token <p>This section walks you through generating a Solana wallet, deploying an SPL token, creating a token account, and minting tokens.</p> <ol> <li> <p>Generate a key pair: Run the following command to create a new wallet compatible with supported SVM chains.</p> <pre><code>solana-keygen grind --starts-with w:1 --ignore-case\n</code></pre> </li> <li> <p>Set CLI keypair configuration: Configure the Solana CLI to use the generated key pair.</p> <pre><code>solana config set --keypair INSERT_PATH_TO_KEYPAIR_JSON\n</code></pre> </li> <li> <p>Select an RPC URL: Configure the CLI to use the appropriate network using one of the following commands.</p> MainnetTestnet (Solana's Devnet)Fogo Testnet <pre><code>solana config set -um\n</code></pre> <pre><code>solana config set -ud\n</code></pre> <pre><code>solana config set --url INSERT_FOGO_TESTNET_RPC_URL\n</code></pre> <p>Note</p> <p>Solana's official testnet cluster is not supported for token creation or deployment with NTT. You must use the Solana devnet instead.</p> </li> <li> <p>Fund your wallet: Ensure your wallet has enough native tokens to cover transaction fees.</p> <ul> <li> <p>On Solana Devnet, you can request an airdrop:</p> <pre><code>solana airdrop 2\nsolana balance\n</code></pre> </li> </ul> </li> <li> <p>Install SPL Token CLI: Install or update the required CLI tool.</p> <pre><code>cargo install spl-token-cli\n</code></pre> </li> <li> <p>Create a new SPL token: Initialize the token on your connected SVM chain.</p> <pre><code>spl-token create-token\n</code></pre> </li> <li> <p>Create a token account: Generate an account to hold the token.</p> <pre><code>spl-token create-account INSERT_TOKEN_ADDRESS\n</code></pre> </li> <li> <p>Mint tokens: Send 1000 tokens to the created account.</p> <pre><code>spl-token mint INSERT_TOKEN_ADDRESS 1000\n</code></pre> </li> </ol> <p>Note</p> <p>NTT versions <code>&gt;=v2.0.0+solana</code> support SPL tokens with transfer hooks.</p> Create and Deploy a Sui Token <p>This section walks you through setting up a wallet, deploying a Sui Coin contract, and minting tokens on testnet.</p> <ol> <li> <p>Clone the repository: Use the example NTT token repository to deploy a Sui Coin contract on testnet.</p> <pre><code>git clone https://github.com/wormhole-foundation/example-ntt-token-sui.git\ncd example-ntt-token-sui\n</code></pre> </li> <li> <p>Set up a new wallet on testnet: Before building and deploying your token, you'll need to create a new wallet on the Sui testnet and fund it with test tokens.</p> <ol> <li> <p>Create a new testnet environment: Configure your Sui client for testnet.</p> <pre><code>sui client new-env --alias testnet --rpc https://fullnode.testnet.sui.io:443\n</code></pre> </li> <li> <p>Generate a new address: Create a new Ed25519 address for your wallet.</p> <pre><code>sui client new-address ed25519\n</code></pre> </li> <li> <p>Switch to the new address: The above command will output a new address. Copy this address and switch to it.</p> <pre><code>sui client switch --address YOUR_ADDRESS_STEP2\n</code></pre> </li> <li> <p>Fund your wallet: Use the faucet to get test tokens.</p> <pre><code>sui client faucet\n</code></pre> </li> <li> <p>Verify funding: Check that your wallet has been funded.</p> <pre><code>sui client balance\n</code></pre> </li> </ol> </li> <li> <p>Build the project: Compile the Move contract.</p> <pre><code>sui move build\n</code></pre> </li> <li> <p>Deploy the token contract: Deploy to testnet.</p> <pre><code>sui client publish --gas-budget 10000000\n</code></pre> </li> <li> <p>Mint tokens: Send tokens to your address.</p> <pre><code>sui client call \\\n--package YOUR_DEPLOYED_PACKAGE_ID_STEP4 \\\n--module MODULE_NAME_STEP1 \\\n--function mint \\\n--args TREASURYCAP_ID_STEP4 AMOUNT_WITH_DECIMALS RECIPIENT_ADDRESS \\\n--gas-budget 10000000\n</code></pre> </li> </ol> <p>Note</p> <p>This token uses 9 decimals by default. All minting values must be specified with that in mind (1 token = 10^9).</p>"},{"location":"products/token-transfers/native-token-transfers/get-started/#install-ntt-cli","title":"Install NTT CLI","text":"<p>The NTT CLI is recommended to deploy and manage your cross-chain token configuration.</p> <ol> <li> <p>Run the installation command in your terminal:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/wormhole-foundation/native-token-transfers/main/cli/install.sh | bash\n</code></pre> </li> <li> <p>Verify the NTT CLI is installed:</p> <pre><code>ntt --version\n</code></pre> </li> </ol> Command not found? <p>If the <code>ntt</code> command is not recognized after installation, ensure that Bun is installed and that its binary directory is included in your shell\u2019s PATH.</p> <p>Append this line to your shell config (e.g., <code>~/.zshrc</code> or <code>~/.bashrc</code>):</p> <pre><code>echo 'export PATH=\"$HOME/.bun/bin:$PATH\"' &gt;&gt; ~/.zshrc\n</code></pre> <p>Then, restart your terminal or run <code>source ~/.zshrc</code>.</p>"},{"location":"products/token-transfers/native-token-transfers/get-started/#initialize-a-new-ntt-project","title":"Initialize a New NTT Project","text":"<ol> <li> <p>Once the CLI is installed, scaffold a new project by running:</p> <pre><code>ntt new my-ntt-project\ncd my-ntt-project\n</code></pre> </li> <li> <p>Initialize a new <code>deployment.json</code> file specifying the network:</p> MainnetTestnet <pre><code>ntt init Mainnet\n</code></pre> <pre><code>ntt init Testnet\n</code></pre> <p>After initialization, the <code>deployment.json</code> file contains your NTT configuration and starts with the selected network.</p> MainnetTestnet <pre><code>{\n    \"network\": \"Mainnet\",\n    \"chains\": {}\n}\n</code></pre> <pre><code>{\n    \"network\": \"Testnet\",\n    \"chains\": {}\n}\n</code></pre> </li> </ol> <p>In the deployment steps, you will add your supported chains, their token addresses, deployment modes, and any custom settings.</p>"},{"location":"products/token-transfers/native-token-transfers/get-started/#next-steps","title":"Next Steps","text":"<p>You have scaffolded your NTT project and initialized the configuration file. Next, follow the appropriate guide below to configure your supported chains and deploy NTT contracts:</p> <ul> <li>Deploy to EVM: Deploy NTT on EVM-compatible chains.</li> <li>Deploy to SVM: Deploy NTT on SVM-compatible chains.</li> <li>Deploy to Sui: Deploy NTT on Sui.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/overview/","title":"Native Token Transfers Overview","text":""},{"location":"products/token-transfers/native-token-transfers/overview/#native-token-transfers-overview","title":"Native Token Transfers Overview","text":"<p>Native Token Transfers (NTT) provides an adaptable framework for transferring your native tokens across different blockchains. Unlike traditional wrapped assets, NTT maintains your token's native properties on every chain. This ensures that you retain complete control over crucial aspects, such as metadata, ownership, upgradeability, and custom features.</p>"},{"location":"products/token-transfers/native-token-transfers/overview/#key-features","title":"Key Features","text":"<ul> <li>Control and customization: Ensure ownership and configurable access controls, permissions, and thresholds, preventing unauthorized calls.</li> <li>Advanced rate limiting: Set rate limits per chain and period to prevent abuse, manage network congestion, and control deployments.</li> <li>Global accountant: Ensures the amount burned and transferred on chains never exceeds the amount of tokens minted.</li> <li>No wrapped tokens: Tokens are used directly within their native ecosystem, eliminating intermediary transfer steps.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/overview/#deployment-models","title":"Deployment Models","text":"<p>NTT offers two operational modes for your existing tokens: </p> <ul> <li>Hub-and-spoke: Locks tokens on a central \"hub\" chain and mints equivalents on \"spoke\" chains, maintaining the total supply on the hub. It's ideal for integrating existing tokens onto new blockchains without altering their original contracts.</li> <li>Burn-and-mint: Burns tokens on the source chain and mints new ones on the destination, distributing the total supply across multiple chains. It's best suited for new token deployments or projects willing to upgrade existing contracts for a truly native multichain token.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/overview/#supported-token-standards","title":"Supported Token Standards","text":"<p>Native Token Transfers primarily support ERC-20 tokens, the most widely used standard for fungible assets on Ethereum and other EVM-compatible chains, including ERC-20 Burnable tokens, which can be burned on the source chain during cross-chain transfers when required. It also supports fungible SPL tokens on SVM-supported chains for secure cross-chain transfers.</p> <p>The NttManager is a contract that oversees the secure and reliable transfer of native tokens across supported blockchains. It leverages the standard IERC20 interface and OpenZeppelin\u2019s SafeERC20 library to interact with these tokens securely across chains.</p> <p>NTT does not currently support non-fungible tokens (NFTs) or multi-token standards like ERC-1155. Support is limited to ERC-20 tokens.</p>"},{"location":"products/token-transfers/native-token-transfers/overview/#deployment-process","title":"Deployment Process","text":"<p>Here's a breakdown of the key steps involved when deploying NTT:</p> <ul> <li>Prepare tokens: Ensure your ERC-20 or SPL tokens are ready.</li> <li>Choose deployment model: Choose your cross-chain token model: either burn-and-mint or hub-and-spoke.</li> <li>Choose deployment tool: Use the NTT Launchpad (for EVM chains only) or the NTT CLI.</li> <li>Initialization: Specify target chains and token details, and set up your CLI environment if using it.</li> <li>Deploy contracts: Deploy NTT Manager contracts to all selected chains, confirming transactions and covering gas fees.</li> <li>Finalize configurations: Grant minting authority, configure rate limits, establish peer manager connections (bilateral via <code>setPeer</code> / <code>set_peer</code>; local configuration, no cross-chain message), and assign administrative roles.</li> <li>Monitor and maintain: Verify deployment, monitor total supply with the Global Accountant, and adjust configurations as needed.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/overview/#use-cases","title":"Use Cases","text":"<ul> <li> <p>Cross-Chain Swaps and Liquidity Aggregation</p> <ul> <li>Native Token Transfers: Transmits native assets across chains.</li> <li>Connect: Manages user-friendly asset transfers.</li> <li>Queries: Acquires real-time prices for optimal trade execution.</li> </ul> </li> <li> <p>Borrowing and Lending Across Chains</p> <ul> <li>Native Token Transfers: Moves collateral as native assets.</li> <li>Messaging: Propagates loan requests and liquidations across chains.</li> <li>Queries: Retrieves interest rates and asset prices in real-time.</li> </ul> </li> <li> <p>Gas Abstraction</p> <ul> <li>Native Token Transfers: Facilitates native token conversion for gas payments.</li> <li>Messaging: Sends gas fee payments across chains.</li> </ul> </li> <li> <p>Cross-Chain Payment Widgets</p> <ul> <li>Native Token Transfers: Ensures direct, native asset transfers.</li> <li>Connect: Facilitates seamless payments in various tokens.</li> </ul> </li> <li> <p>Cross-Chain Staking</p> <ul> <li>Native Token Transfers: Transfers staked assets natively between networks.</li> <li>Messaging: Moves staking rewards and governance signals across chains.</li> </ul> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/overview/#next-steps","title":"Next Steps","text":"<p>Follow these steps to get started with NTT:</p> <p>Get Started with NTT</p> <p>Start your journey with Wormhole's NTT by learning to install its CLI, deploy test tokens, and set up it's initial structure for seamless token movement.</p> <p>Deploy NTT</p> <p>Use these resources to deploy NTT across supported chains: \u2192 Deploy to EVM \u2192 Deploy to EVM Chains via Launchpad \u2192 Deploy to SVM</p> <p>Customize NTT</p> <p>Configure crucial operational and security settings for NTT: \u2192 Access control \u2192 Rate limits</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/","title":"NTT Architecture","text":"<p>The Native Token Transfers (NTT) architecture within the Wormhole ecosystem offers a robust framework for secure and efficient token transfers across multiple blockchains. This architecture relies on the manager and transceiver core components, which work together to manage the complexities of cross-chain communication and token operations.</p> <p>In the following video, Wormhole Foundation DevRel Pauline Barnades walks you through NTT as a flexible framework, covering key features, deployment modes, the roles of verifiers and managers, and more:</p> Video Chapters <ul> <li>00:00: Going Multichain with Full Control</li> <li>00:46: Core Concept: A Framework, Not a Token Standard</li> <li>01:18: NTT Key Features</li> <li>01:51: Burn and Mint Deployment Model</li> <li>02:14: Hub and Spoke Deployment Model</li> <li>02:40: Understanding the Roles of the Verifiers (Transceivers)</li> <li>04:01: Understanding the Role of the NTT Managers</li> <li>04:24: Access Control: Owner vs. Pauser Roles</li> <li>05:15: Combine NTT with Other Wormhole Products</li> <li>05:59: Framework Overview &amp; Conclusion</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#system-components","title":"System Components","text":"<p>The NTT framework is composed of managers, which oversee the transfer process, and transceivers, which handle cross-chain messaging, ensuring smooth and reliable token transfers.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#managers","title":"Managers","text":"<p>Managers are responsible for handling the flow of token transfers between different blockchains and ensuring that tokens are locked or burned on the source chain before being minted or unlocked on the destination chain. The main tasks of managers include rate-limiting transactions, verifying message authenticity (message attestation), and managing the interaction between multiple transceivers, who are responsible for cross-chain communications.</p> <p>Each manager is assigned to a specific token but can operate across multiple chains. Their key responsibility is to ensure that tokens are securely locked or burned on the source chain before being minted or unlocked on the destination chain. This provides the integrity of token transfers and prevents double spending.</p> <p>A manager is responsible for:</p> <ul> <li>Handling token transfer flow: Upon a transfer request, <code>NttManager</code> either locks or burns tokens depending on the configuration, emits a <code>TransferSent</code> event, and ensures tokens can\u2019t be accessed on the source chain before leasing them on the destination chain. This process safeguards against double-spending and maintains a secure transfer.</li> <li> <p>Rate-limiting: The <code>NttManager</code> contract includes rate-limiting functionality to prevent overloading the network or flooding the target chain. The <code>NttManager</code> applies rate limits to manage transfer flow and prevent network congestion. Limits apply to both outgoing and incoming transfers.</p> <ul> <li>Outbound: Transfers exceeding the outbound limit are queued (if <code>shouldQueue</code> is true) or reverted.</li> <li>Inbound: Similar limits apply on the destination chain, delaying transfers if capacity is exceeded.</li> </ul> <p>Rate limit duration and queuing are customizable per chain, and events notify users when transfers hit the limit.</p> </li> <li> <p>Message authenticity verification: The <code>NttManager</code> ensures transfer security by verifying message authenticity through multiple attestations from transceivers. For each transfer, a threshold number of attestation signatures must be gathered from transceivers. Once verified, <code>NttManager</code> releases tokens on the destination chain, ensuring only authenticated transfers are processed.</p> </li> <li>Interaction with transceivers: <code>NttManager</code> collaborates with transceivers, forwarding transfer messages between chains and handling message verification. Transceivers route messages with transfer details to the destination chain, coordinating with <code>NttManager</code> to verify that tokens are locked or burned before releasing them on the other side. Transceivers can be customized to work with different security protocols, adding flexibility.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#transceivers","title":"Transceivers","text":"<p>Transceivers facilitate cross-chain token transfers by ensuring the accurate transmission of messages between different blockchains. They work in conjunction with managers to route token transfers from the source chain to the recipient chain. Their primary function is to ensure that messages regarding the transfer process are delivered correctly and that tokens are safely transferred across chains.</p> <p>While transceivers operate closely with Wormhole's ecosystem, they can also be configured independently of Wormhole's core system, allowing for flexibility. This adaptability enables them to be integrated with various verification backends, accommodating different security needs or platform-specific requirements.</p> <p>Transceivers are entrusted with several responsibilities:</p> <ul> <li>Message transmission: Transceivers handle the routing of transfer messages between chains. When a transfer is initiated, the transceiver sends the message (including transfer details like recipient and amount) to the destination chain\u2019s manager for verification and processing.</li> <li>Manager coordination: Transceivers work with managers to ensure tokens are locked or burned on the source chain before issuance on the destination chain, reinforcing the security of each transfer.</li> <li>Custom verification support: Transceivers can integrate with custom verification backends, allowing flexibility to adapt to different security protocols or chain requirements. This customization enables protocols to use different attestation standards as needed.</li> </ul> <p>How it works:</p> <ol> <li>The transceiver receives instructions from the manager to send messages across chains.</li> <li>It quotes delivery fees, handles cross-chain message relaying, and verifies delivery to ensure tokens are safely transferred.</li> <li>For each message, the transceiver coordinates with managers, ensuring only authorized transfers are processed on the destination chain.</li> </ol> <p></p> <p>Note</p> <p>Learn more about the architecture of Native Token Transfers message lifecycles.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#custom-transceivers","title":"Custom Transceivers","text":"<p>The NTT framework supports advanced features, such as custom transceivers for specialized message verification, which enhance security and adaptability. The architecture includes detailed processes for initiating transfers, managing rate limits, and finalizing token operations, with specific instructions and events outlined for EVM-compatible chains and SVM-compatible chains.</p> <p>NTT has the flexibility to support custom message verification in addition to Wormhole Guardian message verification. Custom verifiers are implemented as transceiver contracts and can be protocol-specific or provided by other third-party attesters. Protocols can also configure the threshold of attestations required to mark a token transfer as valid, for example, 2/2, 2/3, 3/5.</p> <p></p> <p>The verifier performs checks based on predefined criteria and issues approval for transactions that meet these requirements. This approval is incorporated into the Wormhole message, ensuring that only transactions verified by both the Wormhole Guardian Network and the additional verifier are processed. The model includes an extra verifier in the bridging process, enhancing security and providing an added assurance of transaction integrity.</p> <p>For more details, to collaborate, or to see examples of custom transceivers, contact Wormhole contributors.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#on-chain-state","title":"On-Chain State","text":"<p>The NTT contracts maintain minimal state on\u2011chain to safely route transfers, prevent replays, and manage throughput across multiple chains. This state is primarily managed by the NTT Manager, its Rate Limiter, and the Transceiver Registry:</p> <ul> <li>Message attestations: Records which transceivers have attested to each cross\u2011chain message, enforces the M\u2011of\u2011N attestation threshold, and prevents re\u2011execution of processed messages.</li> <li>Peer registrations: Maps each remote chain to its associated NTT Manager and token decimal configuration, ensuring only trusted peers can mint/unlock tokens.</li> <li>Rate limiting: Enforces inbound and outbound throughput caps and queues transfers when limits are exceeded, protecting liquidity and downstream networks.</li> <li>Transceiver registry: Maintains the list of registered and enabled transceivers, along with their bitmap index, allowing governance to add/remove messaging providers.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#lifecycle-of-a-message","title":"Lifecycle of a Message","text":"<p>The lifecycle of a message in the Wormhole ecosystem for Native Token Transfers (NTT) involves multiple steps to ensure secure and accurate cross-chain token transfers. This lifecycle can vary depending on the blockchain being used, and the following explanations focus on the EVM and SVM implementations. The key stages include initiating the transfer, handling rate limits, sending and receiving messages, and finally, minting or unlocking tokens on the destination chain.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#transfer","title":"Transfer","text":"<p>The process begins when a client initiates a transfer. For EVM, this is done using the <code>transfer</code> function, whereas in SVM, the client uses either the <code>transfer_lock</code> or <code>transfer_burn</code> instruction, depending on whether the program is in locking or burning mode. The client specifies the transfer amount, recipient chain ID, recipient address, and a flag (<code>should_queue</code> on both EVM and SVM) to decide whether the transfer should be queued if it hits the rate limit.</p> <p>In both cases:</p> <ul> <li>If the source chain is in locking mode, the tokens are locked on the source chain to be unlocked on the destination chain.</li> <li>If the source chain is in burning mode, the tokens are burned on the source chain, and new tokens are minted on the destination chain.</li> </ul> <p>Once initiated, an event (such as <code>TransferSent</code> on EVM or a corresponding log on SVM) is emitted to signal that the transfer process has started.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#rate-limit","title":"Rate Limit","text":"<p>Both EVM and SVM implement rate-limiting for transfers to prevent abuse or network overload. Rate limits apply to both the source and destination chains. If transfers exceed the current capacity, depending on whether the <code>shouldQueue</code> flag is set to true, they can be queued.</p> <ul> <li>On EVM, the transfer is added to an outbound queue if it hits the rate limit, with a delay corresponding to the configured rate limit duration. If <code>shouldQueue</code> is set to false, the transfer is reverted with an error.</li> <li>On SVM, the transfer is added to an Outbox via the <code>insert_into_outbox</code> method, and if the rate limit is hit, the transfer is queued with a <code>release_timestamp</code>. If <code>shouldQueue</code> is false, the transfer is reverted with a <code>TransferExceedsRateLimit</code> error.</li> </ul> <p>Both chains emit events or logs when transfers are rate-limited or queued.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#send","title":"Send","text":"<p>After being forwarded to the Transceiver, the message is transmitted across the chain. Transceivers are responsible for delivering the message containing the token transfer details. Depending on the Transceiver's implementation, messages may be routed through different systems, such as Wormhole relayers or other custom relaying solutions. Once the message is transmitted, an event is emitted to signal successful transmission.</p> <ul> <li>In EVM, the message is sent using the <code>sendMessage</code> function, which handles the transmission based on the Transceiver's implementation. The Transceiver may use Wormhole relayers or custom relaying solutions to forward the message.</li> <li>In SVM, the transfer message is placed in an Outbox and released via the <code>release_outbound</code> instruction. The SVM transceiver, such as the Wormhole Transceiver, may send the message using the <code>post_message</code> instruction, which Wormhole Guardians observe for verification.</li> </ul> <p>In both cases, an event or log (e.g., <code>SendTransceiverMessage</code> on EVM or a similar log on SVM) is emitted to signal that the message has been transmitted.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#receive","title":"Receive","text":"<p>Upon receiving the message on the destination chain, an off-chain relayer forwards the message to the destination Transceiver for verification. </p> <ul> <li>In EVM, the message is received by the <code>NttManager</code> on the destination chain, which verifies the message's authenticity. Depending on the M of N threshold set for the attestation process, the message may require attestations from multiple transceivers.</li> <li>In SVM, the message is received via the <code>receive_message</code> instruction in the Wormhole Transceiver program. The message is verified and stored in a <code>VerifiedTransceiverMessage</code> account, after which it is placed in an Inbox for further processing.</li> </ul> <p>In both chains, replay protection mechanisms ensure that a message cannot be executed more than once. Events or logs are emitted (e.g., <code>ReceivedMessage</code> on EVM or <code>ReceiveMessage</code> on SVM) to notify that the message has been successfully received.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/architecture/#mint-or-unlock","title":"Mint or Unlock","text":"<p>Finally, after the message is verified and attested to, the tokens can be either minted (if they were burned on the source chain) or unlocked (if they were locked). The tokens are then transferred to the recipient on the destination chain, completing the cross-chain token transfer process. </p> <ul> <li>On EVM, tokens are either minted (if burned on the source chain) or unlocked (if locked on the source chain). The <code>TransferRedeemed</code> event signals that the tokens have been successfully transferred.</li> <li>On SVM, the tokens are unlocked or minted depending on whether the program is in locking or burning mode. The <code>release_inbound_unlock</code> or <code>release_inbound_mint</code> instruction is used to complete the transfer, and a corresponding log is produced.</li> </ul> <p>In both cases, once the tokens have been released, the transfer process is complete, and the recipient receives the tokens. Events are emitted to indicate that the transfer has been fully redeemed.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/security/","title":"Security","text":""},{"location":"products/token-transfers/native-token-transfers/concepts/security/#global-accountant","title":"Global Accountant","text":"<p>The Global Accountant is a defense-in-depth security feature that checks the integrity of every token transfer. It ensures that chain balances remain isolated and more tokens cannot be burned and transferred out of a chain than were ever minted.</p> <p>This feature ensures native asset fungibility remains in 1:1 parity. At no time will assets coming from a spoke chain exceed the number of native assets sent to that spoke chain. The Guardians, with their role in enforcing accounting transparency, provide a reassuring layer of security, attesting to a Native Token Transfer (NTT) only if it passes integrity checks.</p> <p>Contact Wormhole contributors if you are interested in configuring the Global Accountant for your multichain deployment.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/security/#governance-and-upgradeability","title":"Governance and Upgradeability","text":"<p>Integrators should implement governance mechanisms to manage the addition and removal of transceivers and to upgrade contracts using proxy patterns, as demonstrated in the upgrade functions in the <code>NttManager</code> contracts. These processes can also set thresholds and rules for attestation and message approval.</p> <p>The registry component of the NTT system is crucial for maintaining a trusted list of transceivers and managing their status. Governance processes for the following actions can be submitted directly to the corresponding contract on-chain, whether it is one or multiple of the bridging contracts or one of the token contracts:</p> <ul> <li>Adding or removing a transceiver address from the registry.</li> <li>Setting the token contract address on a bridging contract.</li> <li>Setting the Wormhole Core Contract address on a bridging contract.</li> <li>Setting the registered bridging contract address on the token contract.</li> </ul> <p>This governance model ensures that the system remains secure while being adaptable to new requirements in any environment where it is deployed.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/","title":"Flow of a Transfer","text":"<p>This page outlines the full lifecycle of a Native Token Transfers (NTT) message, covering how transfers are initiated, sent, verified, and completed across supported chains. It highlights the distinct roles of the NTT Manager and Transceivers.</p> <p>NTT Managers oversee transfers, handle rate-limiting and attestations, and manage multiple transceivers per token. They ensure that tokens are locked or burned on the source chain before being minted or unlocked on the destination chain.</p> <p>Transceivers route transfers between source and destination managers, ensuring accurate message delivery and token transfers. They operate independently of Wormhole\u2019s core and can support various verification backends.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#transfer-flow","title":"Transfer Flow","text":"<p>Cross-chain token transfers using NTT follow these steps:</p> <ol> <li> <p>Initiation on the Source Chain     The transfer begins when a user calls the NTT Manager contract on the source chain:</p> <ul> <li>Burning mode: The token is burned from the user's account.</li> <li>Locking mode: If the token is native to the source chain, the token is locked in the NTT Manager contract.</li> </ul> </li> <li> <p>Outbound Rate Limiting Check     The NTT Manager checks if the transfer amount exceeds the current outbound capacity:</p> <ul> <li>Within capacity: Transfer proceeds immediately.</li> <li>Exceeds capacity with queueing: Transfer is queued for later completion after the rate limit window expires.</li> <li>Exceeds capacity without queueing: Transfer fails.</li> </ul> </li> <li> <p>Message Creation and Distribution     The NTT Manager creates an NTT message containing transfer details and forwards it to all enabled transceivers. Each transceiver packages this into its own message format.</p> </li> <li> <p>Cross-Chain Message Transmission     Each transceiver sends the message through its verification network:</p> <ul> <li>Wormhole Transceiver: Uses Wormhole's Guardian network for message attestation and optional automatic relaying.</li> <li>Custom Transceivers: Can use any verification backend (validators, multi-sig, etc.).</li> </ul> </li> <li> <p>Message Reception and Attestation     On the destination chain, transceivers receive and verify their respective messages:</p> <ul> <li>Each transceiver validates the message according to its verification method.</li> <li>Transceivers forward verified messages to the destination NTT Manager.</li> <li>The NTT Manager collects attestations from transceivers.</li> </ul> </li> <li> <p>Threshold Verification     The destination NTT Manager waits until enough transceivers have attested to the transfer (based on the configured threshold):</p> <ul> <li>Threshold met: Transfer proceeds to execution.</li> <li>Threshold not met: Transfer waits for more attestations.</li> </ul> </li> <li> <p>Inbound Rate Limiting Check     The NTT Manager checks if the incoming transfer exceeds inbound capacity:</p> <ul> <li>Within capacity: Transfer completes immediately.</li> <li>Exceeds capacity: Transfer is queued for later completion.</li> </ul> </li> <li> <p>Transfer Completion on Destination Chain     After rate limiting checks pass, the NTT Manager completes the transfer:</p> <ul> <li>Burning mode: New tokens are minted to the recipient.</li> <li>Locking mode: If tokens are native to the destination chain, they are released from the contract to the recipient.</li> </ul> </li> </ol> <p>Consider the following example: Alice wants to send 100 ALICE tokens from Ethereum to Solana using NTT in burn mode. The ALICE is burned on Ethereum's NTT Manager, transceivers attest to the transfer, and an equivalent amount of ALICE is minted on Solana. The diagram below illustrates this transfer flow.</p> <pre><code>sequenceDiagram\n    participant Alice as Alice\n    participant NttManagerEth as NTT Manager Ethereum&lt;br&gt;(Source Chain)\n    participant TransceiverEth as Transceivers Ethereum&lt;br&gt;(e.g., Wormhole)\n    participant GuardianNetwork as Guardians\n    participant TransceiverSol as Transceivers Solana&lt;br&gt;(e.g., Wormhole)\n    participant NttManagerSol as NTT Manager Solana&lt;br&gt;(Destination Chain)\n\n    Alice-&gt;&gt;NttManagerEth: Initiate ALICE transfer&lt;br&gt;(burn 100 ALICE)\n    NttManagerEth-&gt;&gt;NttManagerEth: Check outbound capacity\n    NttManagerEth-&gt;&gt;TransceiverEth: Forward NTT message&lt;br&gt;to transceivers\n    TransceiverEth-&gt;&gt;GuardianNetwork: Send message via&lt;br&gt;verification network\n    GuardianNetwork-&gt;&gt;TransceiverSol: Deliver verified&lt;br&gt;message\n    TransceiverSol-&gt;&gt;NttManagerSol: Attest to transfer\n    NttManagerSol-&gt;&gt;NttManagerSol: Check threshold &amp;&lt;br&gt; inbound capacity\n    NttManagerSol--&gt;&gt;Alice: Mint 100 ALICE on Solana (complete transfer)</code></pre> <p>Now, consider Alice wants to send her ALICE back from Solana to Ethereum. The ALICE is burned on Solana's NTT Manager, and the equivalent amount is minted on Ethereum. The diagram below illustrates this reverse transfer flow.</p> <pre><code>sequenceDiagram\n    participant Alice as Alice\n    participant NttManagerSol as NTT Manager Solana&lt;br&gt;(Source Chain)\n    participant TransceiverSol as Transceivers Solana&lt;br&gt;(e.g., Wormhole)\n    participant GuardianNetwork as Guardians\n    participant TransceiverEth as Transceivers Ethereum&lt;br&gt;(e.g., Wormhole)\n    participant NttManagerEth as NTT Manager Ethereum&lt;br&gt;(Destination Chain)\n\n    Alice-&gt;&gt;NttManagerSol: Initiate transfer&lt;br&gt;(burn 100 ALICE)\n    NttManagerSol-&gt;&gt;NttManagerSol: Check outbound capacity\n    NttManagerSol-&gt;&gt;TransceiverSol: Forward NTT message&lt;br&gt;to transceivers\n    TransceiverSol-&gt;&gt;GuardianNetwork: Send message via&lt;br&gt;verification network\n    GuardianNetwork-&gt;&gt;TransceiverEth: Deliver verified&lt;br&gt;message\n    TransceiverEth-&gt;&gt;NttManagerEth: Attest to transfer\n    NttManagerEth-&gt;&gt;NttManagerEth: Check threshold &amp;&lt;br&gt; inbound capacity\n    NttManagerEth--&gt;&gt;Alice: Mint 100 ALICE on Ethereum (complete transfer)</code></pre>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#evm-transfer-flow-details","title":"EVM Transfer Flow Details","text":""},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#transfer","title":"Transfer","text":"<p>The <code>transfer</code> function is called with details of the transfer, and the <code>TransferSent</code> event is emitted.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#rate-limiting","title":"Rate Limiting","text":"<p>If a transfer is rate limited on the source chain and the <code>shouldQueue</code> flag is enabled, it is added to an outbound queue. The transfer can be released after the configured <code>_rateLimitDuration</code> has expired via the <code>completeOutboundQueuedTransfer</code> method. The <code>OutboundTransferQueued</code> and <code>OutboundTransferRateLimited</code> events are emitted. </p> <p>If the client attempts to release the transfer from the queue before the <code>rateLimitDuration</code> expires, the contract reverts with an <code>OutboundQueuedTransferStillQueued</code> error.</p> <p>Similarly, rate limited transfers on the destination chain are added to an inbound queue. These transfers can be released from the queue via the <code>completeInboundQueuedTransfer</code> method, and the <code>InboundTransferQueued</code> event is emitted.</p> <p>If the client attempts to release the transfer from the queue before the <code>rateLimitDuration</code> expires, the contract reverts with an <code>InboundQueuedTransferStillQueued</code> error.</p> <p>To deactivate the rate limiter, set <code>_rateLimitDuration</code> to 0 and enable the <code>_skipRateLimiting</code> field in the <code>NttManager</code> constructor. Configuring this incorrectly will throw an error. If the rate limiter is deactivated, the inbound and outbound rate limits can be set to 0.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#sending-the-message","title":"Sending the Message","text":"<p>Once the <code>NttManager</code> forwards the message to the transceiver, the message is transmitted via the <code>sendMessage</code> method. The transceiver enforces the method signature, but transceivers are free to determine their implementation for transmitting messages (e.g., a message routed through the Wormhole transceiver can be sent via Wormhole relaying, a custom relayer or manually published via the core bridge).</p> <p>Once the message has been transmitted, the contract emits the <code>SendTransceiverMessage</code> event.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#receiving-the-message","title":"Receiving the Message","text":"<p>Once a message has been emitted by a transceiver on the source chain, an off-chain process (for example, a relayer) will forward the message to the corresponding transceiver on the recipient chain. The relayer interacts with the transceiver via an entry point to receive messages. For example, the relayer will call the <code>receiveWormholeMessage</code> method on the <code>WormholeTransceiver</code> contract to execute the message. The <code>ReceiveRelayedMessage</code> event is emitted during this process.</p> <p>This method should also forward the message to the <code>NttManager</code> on the destination chain. Note that the transceiver interface doesn't declare a signature for this method because receiving messages is specific to each transceiver, and a one-size-fits-all solution would be overly restrictive.</p> <p>The <code>NttManager</code> contract allows an M of N threshold for transceiver attestations to determine whether a message can be safely executed. For example, if the threshold requirement is 1, the message will be executed after a single transceiver delivers a valid attestation. If the threshold requirement is 2, the message will only be executed after two transceivers deliver valid attestations. When a transceiver attests to a message, the contract emits the <code>MessageAttestedTo</code> event.</p> <p>NTT implements replay protection, so if a given transceiver attempts to deliver a message attestation twice, the contract reverts with the <code>TransceiverAlreadyAttestedToMessage</code> error. NTT also implements replay protection against re-executing messages. This check also serves as reentrancy protection.</p> <p>If a message has already been executed, the contract ends execution early and emits the <code>MessageAlreadyExecuted</code> event instead of reverting via an error. This mitigates the possibility of race conditions from transceivers attempting to deliver the same message when the threshold is less than the total number of available transceivers (i.e., threshold &lt; totalTransceivers) and notifies the client (off-chain process) so they don't attempt redundant message delivery.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#minting-or-unlocking","title":"Minting or Unlocking","text":"<p>Once a transfer has been successfully verified, the tokens can be minted (if the mode is \"burning\") or unlocked (if the mode is \"locking\") to the recipient on the destination chain. Note that the source token decimals are bounded between <code>0</code> and <code>TRIMMED_DECIMALS</code> as enforced in the wire format. The transfer amount is untrimmed (scaled-up) if the destination chain token decimals exceed <code>TRIMMED_DECIMALS</code>. Once the appropriate number of tokens have been minted or unlocked to the recipient, the <code>TransferRedeemed</code> event is emitted.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#solana-transfer-flow-details","title":"Solana Transfer Flow Details","text":""},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#transfer_1","title":"Transfer","text":"<p>A client calls the <code>transfer_lock</code> or <code>transfer_burn</code> instruction based on whether the program is in <code>LOCKING</code> or <code>BURNING</code> mode. The program mode is set during initialization. When transferring, the client must specify the amount of the transfer, the recipient chain, the recipient address on the recipient chain, and the boolean flag <code>should_queue</code> to specify whether the transfer should be queued if it hits the outbound rate limit. If <code>should_queue</code> is set to false, the transfer reverts instead of queuing if the rate limit is hit.</p> <p>Note</p> <p>Using the wrong transfer instruction, i.e., <code>transfer_lock</code> for a program that is in <code>BURNING</code> mode, will result in an <code>InvalidMode</code> error.</p> <p>Depending on the mode and instruction, the following will be produced in the program logs:</p> <pre><code>Program log: Instruction: TransferLock\nProgram log: Instruction: TransferBurn\n</code></pre> <p>Outbound transfers are always added to an Outbox via the <code>insert_into_outbox</code> method. This method checks the transfer against the configured outbound rate limit amount to determine whether the transfer should be rate limited. An <code>OutboxItem</code> is a Solana Account that holds details of the outbound transfer. The transfer can be released from the Outbox immediately if no rate limit is hit. The transfer can be released from the Outbox immediately unless a rate limit is hit, in which case it will only be released after the delay duration associated with the rate limit has expired.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#rate-limiting_1","title":"Rate Limiting","text":"<p>During the transfer process, the program checks rate limits via the <code>consume_or_delay</code> function. The Solana rate-limiting logic is equivalent to the EVM rate-limiting logic.</p> <p>If the transfer amount fits within the current capacity:</p> <ul> <li>Reduce the current capacity.</li> <li>Refill the inbound capacity for the destination chain.</li> <li>Add the transfer to the Outbox with <code>release_timestamp</code> set to the current timestamp so it can be released immediately.</li> </ul> <p>If the transfer amount doesn't fit within the current capacity:</p> <ul> <li>If <code>shouldQueue = true</code>, add the transfer to the Outbox with <code>release_timestamp</code> set to the current timestamp plus the configured <code>RATE_LIMIT_DURATION</code>.</li> <li>If <code>shouldQueue = false</code>, revert with a <code>TransferExceedsRateLimit</code> error.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#sending-the-message_1","title":"Sending the Message","text":"<p>The caller then needs to request each transceiver to send messages via the <code>release_outbound</code> instruction. To execute this instruction, the caller needs to pass the account of the Outbox item to be released. The instruction will then verify that the transceiver is one of the specified senders for the message. Transceivers then send the messages based on the verification backend they are using.</p> <p>For example, the Wormhole transceiver sends messages by calling <code>post_message</code> on the Wormhole program, allowing Guardians to observe and verify the message.</p> <p>Note</p> <p>When <code>revert_on_delay</code> is true, the transaction will revert if the release timestamp hasn't been reached. When <code>revert_on_delay</code> is false, the transaction succeeds, but the outbound release isn't performed.</p> <p>The following will be produced in the program logs:</p> <pre><code>Program log: Instruction: ReleaseOutbound\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#receiving-the-message_1","title":"Receiving the Message","text":"<p>Similar to EVM, transceivers vary in how they receive messages since message relaying and verification methods may differ between implementations.</p> <p>The Wormhole transceiver receives a verified Wormhole message on Solana via the <code>receive_message</code> entry point instruction. Callers can use the <code>receive_wormhole_message</code> Anchor library function to execute this instruction. The instruction verifies the Wormhole Verified Action Approval (VAA) and stores it in a <code>VerifiedTransceiverMessage</code> account.</p> <p>The following will be produced in the program logs:</p> <pre><code>Program log: Instruction: ReceiveMessage\n</code></pre> <p><code>redeem</code> checks the inbound rate limit and places the message in an Inbox. Logic works similarly to the outbound rate limit mentioned previously.</p> <p>The following will be produced in the program logs:</p> <pre><code>Program log: Instruction: Redeem\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#mint-or-unlock","title":"Mint or Unlock","text":"<p>The inbound transfer is released, and the tokens are unlocked or minted to the recipient through either <code>release_inbound_mint</code> if the mode is <code>BURNING</code>, or <code>release_inbound_unlock</code> if the mode is <code>LOCKING</code>. Similar to transfer, using the wrong transfer instruction (such as <code>release_inbound_mint</code> for a program that is in locking mode) will result in an <code>InvalidMode</code> error.</p> <p>Note</p> <p>When <code>revert_on_delay</code> is true, the transaction will revert if the release timestamp hasn't been reached. When <code>revert_on_delay</code> is false, the transaction succeeds, but the minting/unlocking isn't performed.</p> <p>Depending on the mode and instruction, the following will be produced in the program logs:</p> <pre><code>Program log: Instruction: ReleaseInboundMint\nProgram log: Instruction: ReleaseInboundUnlock\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#rate-limiting_2","title":"Rate Limiting","text":"<p>A transfer can be rate limited on both the source and destination chains. </p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#outbound-rate-limiting-source-chain","title":"Outbound Rate Limiting (Source Chain)","text":"<ul> <li>Limits the amount that can be sent from a chain within a time window.</li> <li>Queue enabled: Transfers exceeding capacity are queued for later completion.</li> <li>Queue disabled: Transfers exceeding capacity fail immediately.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#inbound-rate-limiting-destination-chain","title":"Inbound Rate Limiting (Destination Chain)","text":"<ul> <li>Limits the amount that can be received on a chain within a time window.</li> <li>Transfers exceeding capacity are automatically queued for later completion.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#cancel-flows","title":"Cancel-Flows","text":"<ul> <li>Outbound transfers refill inbound capacity on the source chain.</li> <li>Inbound transfers refill outbound capacity on the destination chain.</li> <li>Prevents capacity exhaustion from frequent bidirectional transfers.</li> </ul> Rate Limit Type Exceeds Capacity Queue Setting Result Outbound Yes Enabled Transfer queued on source chain Outbound Yes Disabled Transfer fails Inbound Yes N/A Transfer queued on destination chain"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#queued-transfer-management","title":"Queued Transfer Management","text":"<p>When transfers are rate limited, NTT provides management functions.</p>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#outbound-queued-transfers","title":"Outbound Queued Transfers","text":"<ul> <li>Complete: After the rate limit window expires, the user can complete the queued transfer.</li> <li>Cancel: The user can cancel their queued transfer and receive tokens back.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/concepts/transfer-flow/#inbound-queued-transfers","title":"Inbound Queued Transfers","text":"<ul> <li>Complete: After the rate limit window expires, anyone can complete the queued transfer.</li> <li>Automatic: Some implementations may auto-complete queued transfers.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/configuration/access-control/","title":"Access Control","text":""},{"location":"products/token-transfers/native-token-transfers/configuration/access-control/#owner-and-pauser-roles","title":"Owner and Pauser Roles","text":"<p>Pausing the Native Token Transfers (NTT) Manager contract will disallow initiating new token transfers. While the contract is paused, in-flight transfers can still be redeemed (subject to rate limits if configured).</p> <p>NTT can be paused on a particular chain by updating the <code>paused</code> parameter on the deployment to <code>true</code> via the NTT CLI, then performing <code>ntt push</code> to sync the local configuration with the on-chain deployment.</p> <ul> <li>Owner: Full control over NTT contracts, can perform administrative functions. Has the ability to un-pause contracts if they have been paused.</li> <li>Pauser: Can pause NTT contracts to halt token transfers temporarily. This role is crucial for responding quickly to adverse events without a prolonged governance process. Cannot un-pause contracts.</li> </ul> <p>You may verify the current owner, pauser, and paused status of the NTT Manager contract on the <code>deployment.json</code> file in your NTT project directory.</p> <pre><code>{\n    \"network\": \"Testnet\",\n    \"chains\": {\n        \"Sepolia\": {\n            \"version\": \"1.1.0\",\n            \"mode\": \"burning\",\n            \"paused\": true, // set to true to pause the contract\n            \"owner\": \"0x0088DFAC40029f266e0FF62B82E47A07467A0345\",\n            \"manager\": \"0x5592809cf5352a882Ad5E9d435C6B7355B716357\",\n            //...\n            \"pauser\": \"0x0088DFAC40029f266e0FF62B82E47A07467A0345\"\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>While the <code>Pauser</code> can pause contracts, the ability to un-pause contracts is callable only by the <code>Owner</code>.</p> <p>The <code>Owner</code> and the <code>Pauser</code> addresses can each pause the contract. Since the contract <code>Owner</code> address is typically a multisig or a more complex DAO governance contract, and pausing the contract only affects the availability of token transfers, protocols can choose to set the <code>Pauser</code> address to be a different address. Creating a separate <code>Pauser</code> helps protocols respond quickly to potential risks without going through a drawn-out process.</p> <p>Consider separating <code>Owner</code> and <code>Pauser</code> roles for your multichain deployment. <code>Owner</code> and <code>Pauser</code> roles are defined directly on the <code>NttManager</code> contract.</p>"},{"location":"products/token-transfers/native-token-transfers/configuration/rate-limiting/","title":"Rate Limiting","text":"<p>The Native Token Transfer (NTT) framework provides configurable per-chain rate limits for sending and receiving token transfers. Integrators can manage these limits via their own governance processes to quickly adapt to on-chain activity.</p> <p>If a transfer is rate-limited on the source chain and queueing is enabled via <code>shouldQueue = true</code>, the transfer is placed into an outbound queue and can be released after the rate limit expires.</p> <p>You can configure the following limits on every chain where NTT is deployed directly using the manager:</p> <ul> <li>Sending limit: A single outbound limit for sending tokens from the chain.</li> <li>Per-chain receiving limits: The maximum receiving limit, which can be configured on a per-chain basis. For example, allowing 100 tokens to be received from Ethereum but only 50 tokens to be received from Arbitrum.</li> </ul> <p>Rate limits are replenished every second over a fixed duration. While the default duration is 24 hours, the value is configurable at contract creation. Rate-limited transfers on the destination chain are added to an inbound queue with a similar release delay.</p>"},{"location":"products/token-transfers/native-token-transfers/configuration/rate-limiting/#update-rate-limits","title":"Update Rate Limits","text":"<p>To configure or update the sending and receiving rate limits, follow these steps:</p> <ol> <li> <p>Locate the deployment file: Open the <code>deployment.json</code> file in your NTT project directory. This file contains the configuration for your deployed contracts.</p> </li> <li> <p>Modify the limits section: For each chain, locate the limits field and update the outbound and inbound values as needed.</p> <pre><code>\"limits\": {\n    \"outbound\": \"1000.000000000000000000\",\n    \"inbound\": {\n        \"Ethereum\": \"100.000000000000000000\",\n        \"Arbitrum\": \"50.000000000000000000\"\n    }\n}\n</code></pre> <ul> <li><code>outbound</code>: Sets the maximum tokens allowed to leave the chain.</li> <li><code>inbound</code>: Configures per-chain receiving limits for tokens arriving from specific chains.</li> </ul> </li> <li> <p>Push the configuration: Use the NTT CLI to synchronize the updated configuration with the blockchain.</p> <pre><code>ntt push\n</code></pre> </li> <li> <p>Verify the changes: After pushing, confirm the new rate limits by checking the deployment status.</p> <pre><code>ntt status\n</code></pre> </li> </ol> <code>deployment.json</code> example <pre><code>{\n    \"network\": \"Testnet\",\n    \"chains\": {\n        \"Sepolia\": {\n            \"version\": \"1.1.0\",\n            \"mode\": \"burning\",\n            \"paused\": false,\n            \"owner\": \"0x0088DFAC40029f266e0FF62B82E47A07467A0345\",\n            \"manager\": \"0x5592809cf5352a882Ad5E9d435C6B7355B716357\",\n            \"token\": \"0x5CF5D6f366eEa7123BeECec1B7c44B2493569995\",\n            \"transceivers\": {\n                \"threshold\": 1,\n                \"wormhole\": {\n                    \"address\": \"0x91D4E9629545129D427Fd416860696a9659AD6a1\",\n                    \"pauser\": \"0x0088DFAC40029f266e0FF62B82E47A07467A0345\"\n                }\n            },\n            \"limits\": {\n                \"outbound\": \"184467440737.095516150000000000\",\n                \"inbound\": {\n                    \"ArbitrumSepolia\": \"500.000000000000000000\"\n                }\n            },\n            \"pauser\": \"0x0088DFAC40029f266e0FF62B82E47A07467A0345\"\n        }\n    }\n}\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/configuration/rate-limiting/#queuing-mechanism","title":"Queuing Mechanism","text":"<p>When a transfer exceeds the rate limit, it is held in a queue and can be released after the set rate limit duration has expired. The sending and receiving queuing behavior is as follows:</p> <ul> <li>Sending: If an outbound transfer violates rate limits, users can either revert and try again later or queue their transfer. Users must return after the queue duration has expired to complete sending their transfer.</li> <li>Receiving: If an inbound transfer violates rate limits, it is in a queue. Users or relayers must return after the queue duration has expired to complete receiving their transfer on the destination chain.</li> </ul> <p>Queuing is configured dynamically during each transfer by passing the <code>shouldQueue</code> parameter to the <code>transfer</code> function in the <code>NttManager</code> contract.</p>"},{"location":"products/token-transfers/native-token-transfers/configuration/rate-limiting/#cancel-flows","title":"Cancel Flows","text":"<p>If users bridge frequently between a given source chain and destination chain, the capacity could be exhausted quickly. Loss of capacity can leave other users rate-limited, potentially delaying their transfers.  The outbound transfer cancels the inbound rate limit on the source chain to avoid unintentional delays. This allows for refilling the inbound rate limit by an amount equal to the outbound transfer amount and vice-versa, with the inbound transfer canceling the outbound rate limit on the destination chain and refilling the outbound rate limit with an amount.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/","title":"Deploy NTT to EVM Chains","text":"<p>Native Token Transfers (NTT) enable seamless multichain transfers of ERC-20 tokens on supported EVM-compatible chains using Wormhole's messaging protocol. Instead of creating wrapped tokens, NTT allows native assets to move across chains while maintaining their original properties.</p> <p>This guide walks you through deploying NTT on EVM chains, including setting up dependencies, configuring token compatibility, and using the NTT CLI to deploy in hub-and-spoke or burn-and-mint mode.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#prerequisites","title":"Prerequisites","text":"<p>Before deploying NTT on EVM chains, ensure you have the following prerequisites:</p> <ul> <li>Node.js and npm installed.</li> <li>Bun installed.</li> <li>A wallet private key with tokens on supported chains.</li> <li>ERC-20 tokens already deployed on the source and destination chains.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#overview-of-the-deployment-process","title":"Overview of the Deployment Process","text":"<p>Deploying NTT on EVM chains follows a structured process:</p> <ol> <li> <p>Choose your token setup: Use an existing ERC-20 token or deploy a new one.</p> Deploy an ERC-20 Token on EVM <p>Use the example NTT token repository to deploy a basic ERC-20 token contract on testnet.</p> <ol> <li> <p>Install Foundry: Install the Forge CLI.</p> </li> <li> <p>Clone the repository: Fetch the example contract repository.</p> <pre><code>git clone https://github.com/wormhole-foundation/example-ntt-token-evm.git\ncd example-ntt-token\n</code></pre> </li> <li> <p>Deploy the token contract: Deploy to testnet with your preferred name, symbol, minter, and owner addresses.</p> <pre><code>forge create --broadcast \\\n    --rpc-url INSERT_RPC_URL \\\n    --private-key INSERT_YOUR_PRIVATE_KEY \\\n    src/PeerToken.sol:PeerToken \\\n    --constructor-args \"INSERT_TOKEN_NAME\" \"INSERT_TOKEN_SYMBOL\" INSERT_MINTER_ADDRESS INSERT_OWNER_ADDRESS\n</code></pre> </li> <li> <p>Mint tokens: Send tokens to your address.</p> <pre><code>cast send INSERT_TOKEN_ADDRESS \\\n    \"mint(address,uint256)\" \\\n    INSERT_RECIPIENT_ADDRESS \\\n    INSERT_AMOUNT_IN_WEI \\\n    --private-key INSERT_YOUR_PRIVATE_KEY \\\n    --rpc-url INSERT_RPC_URL\n</code></pre> </li> </ol> <p>Note</p> <p>This token uses 18 decimals by default. All minting values must be specified in <code>wei</code> (1 token = 10^18).</p> </li> <li> <p>Choose your deployment model: Choose a deployment model. The NTT framework supports two deployment models: burn-and-mint and hub-and-spoke.</p> Burn-and-Mint <p>Tokens must implement the following non-standard ERC-20 functions:</p> <ul> <li><code>burn(uint256 amount)</code></li> <li><code>mint(address account, uint256 amount)</code></li> </ul> <p>You\u2019ll also need to set mint authority to the relevant <code>NttManager</code> contract.</p> <p>These functions aren't part of the standard ERC-20 interface. Refer to the <code>INttToken</code> interface for examples of the mentioned functions, as well as optional errors and events.</p> <code>INttToken</code> Interface <pre><code>// SPDX-License-Identifier: Apache 2\npragma solidity &gt;=0.8.8 &lt;0.9.0;\n\ninterface INttToken {\n    /// @notice Error when the caller is not the minter.\n    /// @dev Selector 0x5fb5729e.\n    /// @param caller The caller of the function.\n    error CallerNotMinter(address caller);\n\n    /// @notice Error when the minter is the zero address.\n    /// @dev Selector 0x04a208c7.\n    error InvalidMinterZeroAddress();\n\n    /// @notice Error when insufficient balance to burn the amount.\n    /// @dev Selector 0xcf479181.\n    /// @param balance The balance of the account.\n    /// @param amount The amount to burn.\n    error InsufficientBalance(uint256 balance, uint256 amount);\n\n    /// @notice The minter has been changed.\n    /// @dev Topic0\n    ///      0x0b5e7be615a67a819aff3f47c967d1535cead1b98db60fafdcbf22dcaa8fa5a9.\n    /// @param newMinter The new minter.\n    event NewMinter(address previousMinter, address newMinter);\n\n    // NOTE: the `mint` method is not present in the standard ERC20 interface.\n    function mint(address account, uint256 amount) external;\n\n    // NOTE: the `setMinter` method is not present in the standard ERC20 interface.\n    function setMinter(address newMinter) external;\n\n    // NOTE: NttTokens in `burn` mode require the `burn` method to be present.\n    //       This method is not present in the standard ERC20 interface, but is\n    //       found in the `ERC20Burnable` interface.\n    function burn(uint256 amount) external;\n}\n</code></pre> Hub-and-Spoke <p>Tokens only need to be ERC-20 compliant. The hub chain serves as the source of truth for supply consistency, while only spoke chains need to support minting and burning. For example, if Ethereum is the hub and Polygon is a spoke:</p> <ul> <li>Tokens are locked on Ethereum.</li> <li>Tokens are minted or burned on Polygon.</li> </ul> <p>This setup maintains a consistent total supply across all chains.</p> <p>Example deployment scripts for both models are available in the <code>example-ntt-token</code> GitHub repository.</p> </li> <li> <p>Configure your chains: Use the NTT CLI to add EVM chains and configure deployment parameters.</p> </li> <li>Set Mint Authority: Set the NTT Manager as a minter for your tokens on the relevant chains.<ul> <li>For burn-and-mint mode, set the NTT Manager as a minter on all chains. </li> <li>For hub-and-spoke, set the NTT Manager as a minter only on spoke chains.</li> </ul> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#set-up-ntt","title":"Set Up NTT","text":"<p>Before deploying NTT contracts on EVM chains, you need to scaffold a project and initialize your deployment configuration.</p> <p>Note</p> <p>If you already have an NTT deployment to another chain (like Solana), you can skip the <code>ntt new</code> and <code>ntt init</code> commands. Simply navigate to your existing NTT project directory and proceed directly to the Deploy and Configure NTT section.</p> <p>The NTT CLI manages deployments, configures settings, and interacts with the NTT system. Follow these steps to set up NTT using the CLI tool:</p> Install the NTT CLI and Scaffold a New Project <ol> <li> <p>Install the NTT CLI:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/wormhole-foundation/native-token-transfers/main/cli/install.sh | bash\n</code></pre> <p>Verify installation:</p> <pre><code>ntt --version\n</code></pre> </li> <li> <p>Initialize a new NTT project:</p> <pre><code>ntt new my-ntt-project\ncd my-ntt-project\n</code></pre> </li> <li> <p>Create the deployment config using the following command. This will generate a <code>deployment.json</code> file where your settings are stored:</p> MainnetTestnet <pre><code>ntt init Mainnet\n</code></pre> <pre><code>ntt init Testnet\n</code></pre> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#deploy-and-configure-ntt","title":"Deploy and Configure NTT","text":"<p>Once you've set up NTT, proceed with adding your EVM chains and deploying contracts.</p> <ol> <li> <p>Environment Setup: Ensure you have set up your environment correctly, open your terminal, and run the <code>export</code> commands:</p> <pre><code>export ETH_PRIVATE_KEY=INSERT_PRIVATE_KEY\nexport SEPOLIA_SCAN_API_KEY=INSERT_ETHERSCAN_SEPOLIA_API_KEY\nexport ARBITRUMSEPOLIA_SCAN_API_KEY=INSERT_ARBISCAN_SEPOLIA_API_KEY\n</code></pre> </li> <li> <p>Deploy NTT to EVM: Add each chain you'll be deploying to using the <code>ntt add-chain</code> command. The following example demonstrates configuring NTT in burn-and-mint mode on Ethereum Sepolia and Arbitrum Sepolia:</p> <pre><code># Add each chain\n# The contracts will be automatically verified using the scanner API keys above\nntt add-chain Sepolia --latest --mode burning --token INSERT_YOUR_TOKEN_ADDRESS\nntt add-chain ArbitrumSepolia --latest --mode burning --token INSERT_YOUR_TOKEN_ADDRESS\n</code></pre> <p>The <code>ntt add-chain</code> command takes the following parameters:</p> <ul> <li>Name of each chain.</li> <li>Version of NTT to deploy (use <code>--latest</code> for the latest contract versions).</li> <li>Mode - either <code>burning</code> or <code>locking</code>.</li> <li>Your token contract address.</li> </ul> <p>While not recommended, you can pass the <code>-skip-verify</code> flag to the <code>ntt add-chain</code> command if you want to skip contract verification.</p> </li> <li> <p>Verify deployment status: After deployment, check if your <code>deployment.json</code> file matches the on-chain configuration using the following command:</p> <pre><code>ntt status\n</code></pre> <p>If needed, sync your local configuration with the on-chain configuration:</p> <pre><code>ntt pull\n</code></pre> </li> <li> <p>Configure rate limits: Set up inbound and outbound rate limits. By default, limits are set to 0 and must be updated before deployment. For EVM chains, values must be set using 18 decimals.</p> <p>Open your <code>deployment.json</code> file and adjust the values based on your use case:</p> <pre><code>\"inbound\": {\n    \"Arbitrum\": \"1000.000000000000000000\" // inbound limit from Arbitrum to Ethereum\n}\n\"outbound\": {\n    \"Ethereum\": \"1000.000000000000000000\" // outbound limit from Ethereum to Arbitrum\n}\n</code></pre> <p>This configuration ensures your rate limits align with the token\u2019s precision on each chain, preventing mismatches that could block or miscalculate transfers. Before setting these values, confirm your token\u2019s decimals on each chain by checking the token contract on the relevant block explorer.</p> </li> <li> <p>Push the final deployment: Once rate limits are set, sync the on-chain configuration with local changes made to your <code>deployment.json</code> file.</p> <pre><code>ntt push \n</code></pre> </li> </ol> <p>After you deploy the NTT contracts, ensure that the deployment is properly configured and your local representation is consistent with the actual on-chain state by running <code>ntt status</code> and following the instructions shown on the screen.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#set-mint-authority","title":"Set Mint Authority","text":"<p>The final step in the deployment process is to set the NTT Manager as a minter of your token on all chains you have deployed to in <code>burning</code> mode. When performing a hub-and-spoke deployment, it is only necessary to set the NTT Manager as a minter of the token on each spoke chain.</p> <p>Note</p> <p>The required NTT Manager address can be found in the <code>deployment.json</code> file.</p> <ul> <li> <p>If you followed the <code>INttToken</code> interface, you can execute the <code>setMinter(address newMinter)</code> function.     <pre><code>cast send $TOKEN_ADDRESS \"setMinter(address)\" $NTT_MANAGER_ADDRESS --private-key $ETH_PRIVATE_KEY --rpc-url $YOUR_RPC_URL  \n</code></pre></p> </li> <li> <p>If you have a custom process to manage token minters, you should now follow that process to add the corresponding NTT Manager as a minter.</p> </li> </ul> <p>By default, NTT transfers to EVM blockchains support automatic relaying via the Wormhole relayer, which doesn't require the user to perform a transaction on the destination chain to complete the transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#ntt-manager-deployment-parameters","title":"NTT Manager Deployment Parameters","text":"<p>This table compares the configuration parameters available when deploying the NTT Manager using the CLI versus those available during a manual deployment with a Forge script. It highlights which options are configurable via each method, whether values are auto-detected or hardcoded, and includes additional comments to help guide deployment decisions.</p> Parameter Forge Script CLI Both Comments <code>token</code> Input <code>--token &lt;address&gt;</code> Yes <code>mode</code> Input <code>--mode &lt;locking/burning&gt;</code> Yes Key decision: hub-and-spoke or mint-and-burn <code>wormhole</code> Input Auto-detected via SDK/<code>ChainContext</code> Similar <code>wormholeRelayer</code> Input Auto-detected via on-chain query/SDK Similar <code>specialRelayer</code> Input Not exposed No Take into consideration if using custom relaying. Not recommended <code>decimals</code> Input, overridable Auto-detected via token contract, not overridable Similar <code>wormholeChainId</code> Queried from Wormhole contract <code>--chain</code> (network param, mapped internally) Yes <code>rateLimitDuration</code> Hardcoded (<code>86400</code>) Hardcoded (<code>86400</code>) Yes Rate limit duration. A day is normal but worth deciding <code>shouldSkipRatelimiter</code> Hardcoded (<code>false</code>) Hardcoded (<code>false</code>) Yes If rate limit should be disabled (when the manager supports it) <code>consistencyLevel</code> Hardcoded (<code>202</code>) Hardcoded (<code>202</code>) Yes <code>202</code> (finalized) is the standard \u2014 lower is not recommended <code>gasLimit</code> Hardcoded (<code>500000</code>) Hardcoded (<code>500000</code>) Yes <code>outboundLimit</code> Computed Auto-detected/Hardcoded Similar Relative to rate limit"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-evm/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li> <p> Test Your Deployment</p> <p>Follow the NTT Post Deployment Guide for integration examples and testing instructions.</p> <p>  Test Your NTT deployment</p> </li> <li> <p> Deploy NTT to SVM Chains</p> <p>Follow the guide to deploy and configure Wormhole's Native Token Transfers (NTT) for SVM chains.</p> <p>  Deploy NTT to SVM Chains</p> </li> <li> <p> View FAQs</p> <p>Find answers to common questions about NTT.</p> <p>  View FAQs</p> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/","title":"Deploy NTT to SVM Chains","text":"<p>Native Token Transfers (NTT) enable seamless multichain transfers of SPL tokens on SVM chains using Wormhole's messaging protocol. Instead of creating wrapped tokens, NTT allows native assets to move across chains while maintaining their original properties.</p> <p>This guide walks you through deploying NTT on SVM chains, including setting up dependencies, configuring token compatibility, and using the NTT CLI to deploy in hub-and-spoke or burn-and-mint mode. By the end, a fully deployed NTT will be set up, allowing your token to transfer between SVM chains.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#prerequisites","title":"Prerequisites","text":"<p>Before deploying NTT on SVM chains, ensure you have the following:</p> <ul> <li>Rust installed.</li> <li> <p>The correct versions of the Solana CLI and Anchor installed, depending on your NTT version:</p> v3v2/v1 Dependency Version Solana <code>v1.18.26</code> Anchor <code>v0.29.0</code> Dependency Version Solana <code>v1.18.10</code> Anchor <code>v0.29.0</code> </li> </ul> <p>Use the Solana and Anchor versions listed above to avoid compatibility issues while following this guide.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#overview-of-the-deployment-process","title":"Overview of the Deployment Process","text":"<p>Deploying NTT with the CLI on SVM chains follows a structured process:</p> <ol> <li> <p>Choose your token setup:</p> <ul> <li>Use an existing SPL token: If your token is already deployed on a supported SVM chain, you can skip token creation and move directly to the Set Up NTT section.</li> <li> <p>Create a new SPL token: If you don't already have an SPL token deployed, you'll need to deploy and configure it on a supported SVM chain before integrating with Wormhole's NTT.</p> Create and Mint an SPL Token <p>This section walks you through generating a Solana wallet, deploying an SPL token, creating a token account, and minting tokens.</p> <ol> <li> <p>Generate a key pair: Run the following command to create a new wallet compatible with supported SVM chains.</p> <pre><code>solana-keygen grind --starts-with w:1 --ignore-case\n</code></pre> </li> <li> <p>Set CLI keypair configuration: Configure the Solana CLI to use the generated key pair.</p> <pre><code>solana config set --keypair INSERT_PATH_TO_KEYPAIR_JSON\n</code></pre> </li> <li> <p>Select an RPC URL: Configure the CLI to use the appropriate network using one of the following commands.</p> MainnetTestnet (Solana's Devnet)Fogo Testnet <pre><code>solana config set -um\n</code></pre> <pre><code>solana config set -ud\n</code></pre> <pre><code>solana config set --url INSERT_FOGO_TESTNET_RPC_URL\n</code></pre> <p>Note</p> <p>Solana's official testnet cluster is not supported for token creation or deployment with NTT. You must use the Solana devnet instead.</p> </li> <li> <p>Fund your wallet: Ensure your wallet has enough native tokens to cover transaction fees.</p> <ul> <li> <p>On Solana Devnet, you can request an airdrop:</p> <pre><code>solana airdrop 2\nsolana balance\n</code></pre> </li> </ul> </li> <li> <p>Install SPL Token CLI: Install or update the required CLI tool.</p> <pre><code>cargo install spl-token-cli\n</code></pre> </li> <li> <p>Create a new SPL token: Initialize the token on your connected SVM chain.</p> <pre><code>spl-token create-token\n</code></pre> </li> <li> <p>Create a token account: Generate an account to hold the token.</p> <pre><code>spl-token create-account INSERT_TOKEN_ADDRESS\n</code></pre> </li> <li> <p>Mint tokens: Send 1000 tokens to the created account.</p> <pre><code>spl-token mint INSERT_TOKEN_ADDRESS 1000\n</code></pre> </li> </ol> <p>Note</p> <p>NTT versions <code>&gt;=v2.0.0+solana</code> support SPL tokens with transfer hooks.</p> </li> </ul> </li> <li> <p>Choose your deployment model:</p> <ul> <li>Hub-and-spoke: Tokens are locked on a hub chain and minted on destination spoke chains. Since the token supply remains controlled by the hub chain, no changes to the minting authority are required.</li> <li>Burn-and-mint: Tokens are burned on the source chain and minted on the destination chain. This requires transferring the SPL token's minting authority to the Program Derived Address (PDA) controlled by the NTT program.</li> </ul> </li> <li> <p>Deploy and configure NTT: Use the NTT CLI to initialize and deploy the NTT program, specifying your SPL token and deployment mode.</p> </li> </ol> <p></p> <p>Following this process, your token will fully integrate with NTT, enabling seamless transfers between SVM chains and other chains.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#set-up-ntt","title":"Set Up NTT","text":"<p>To integrate your token with NTT on a SVM chain, you must initialize the deployment and configure its parameters. This process sets up the required contracts and may generate key pairs if they don't exist. These key pairs are used to sign transactions and authorize actions within the NTT deployment.</p> <p>Note</p> <p>If you already have an NTT deployment to another chain (like Ethereum), you can skip the <code>ntt new</code> and <code>ntt init</code> commands. Simply navigate to your existing NTT project directory and proceed directly to the Generate an NTT Program Key Pair section.</p> <p>The NTT CLI manages deployments, configures settings, and interacts with the NTT system. Follow these steps to set up NTT using the CLI tool:</p> Install the NTT CLI and Scaffold a New Project <ol> <li> <p>Install the NTT CLI:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/wormhole-foundation/native-token-transfers/main/cli/install.sh | bash\n</code></pre> <p>Verify installation:</p> <pre><code>ntt --version\n</code></pre> </li> <li> <p>Initialize a new NTT project:</p> <pre><code>ntt new my-ntt-project\ncd my-ntt-project\n</code></pre> </li> <li> <p>Create the deployment config using the following command. This will generate a <code>deployment.json</code> file where your settings are stored:</p> MainnetTestnet <pre><code>ntt init Mainnet\n</code></pre> <pre><code>ntt init Testnet\n</code></pre> </li> </ol> <p>Note</p> <p>When deploying NTT to Solana in <code>Testnet</code> mode, you must use Devnet tokens. Solana's official testnet cluster is not supported for token creation or deployment in NTT.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#generate-an-ntt-program-key-pair","title":"Generate an NTT Program Key Pair","text":"<p>Create a unique key pair for the NTT program:</p> <pre><code>solana-keygen grind --starts-with ntt:1 --ignore-case\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#set-mint-authority","title":"Set Mint Authority","text":"<p>If you use burn-and-mint mode, follow these steps to enable the NTT program to mint tokens on a SVM chain. This involves deriving the PDA as the token authority and updating the SPL token's minting permissions.</p> <p>For hub-and-spoke and a SVM chain as the hubchain skip this section and proceed to Deploy and Configure NTT, otherwise follow the burn-and-mint instructions below for the SVM chain as a spoke.</p> <p>Before updating the mint authority, you must create metadata for your SPL token. You can visit this repository to see an example of how to create metadata for your SPL token.</p> <p>Options to set the mint authority for your SPL token:</p> <p>For undeployed programs:</p> <ul> <li> <p>Set to token authority PDA: <pre><code>ntt set-mint-authority --chain INSERT_SVM_CHAIN --token INSERT_TOKEN_ADDRESS --manager INSERT_NTT_PROGRAM_ADDRESS --payer INSERT_KEYPAIR_JSON\n</code></pre></p> </li> <li> <p>Set to SPL Multisig:</p> <ol> <li> <p>Create valid SPL Multisig:</p> <pre><code>ntt solana create-spl-multisig INSERT_MINTER_PUBKEY_1 INSERT_MINTER_PUBKEY_2 ... --token INSERT_TOKEN_ADDRESS --manager INSERT_NTT_PROGRAM_ADDRESS --payer INSERT_KEYPAIR_JSON\n</code></pre> </li> <li> <p>Set to created SPL Multisig: <pre><code>ntt set-mint-authority --chain INSERT_SVM_CHAIN --token INSERT_TOKEN_ADDRESS --manager INSERT_NTT_PROGRAM_ADDRESS --multisig INSERT_MULTISIG_ADDRESS --payer INSERT_KEYPAIR_JSON\n</code></pre></p> </li> </ol> </li> </ul> <p>For deployed programs:</p> <ul> <li>Set to token authority PDA:</li> </ul> <pre><code>ntt set-mint-authority --chain INSERT_SVM_CHAIN --payer INSERT_KEYPAIR_JSON\n</code></pre> <p>Note</p> <p>Check out this utility script for transferring token mint authority out of NTT.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#deploy-and-configure-ntt","title":"Deploy and Configure NTT","text":"<p>Warning</p> <p>If deploying to Solana mainnet, you must use a custom RPC. See how to set it up in your project using an <code>overrides.json</code> file. For optimal performance, consider using a staked RPC connection from either Triton or Helius.</p> <p>After setting up your deployment, finalize the configuration and deploy the NTT program on the SVM chain by following these steps:</p> <ol> <li> <p>Deploy NTT to the SVM chain: Run the appropriate command based on your deployment mode.</p> Burn-and-MintHub-and-Spoke <pre><code>ntt add-chain INSERT_SVM_CHAIN --latest --mode burning --token INSERT_TOKEN_ADDRESS --payer INSERT_YOUR_KEYPAIR_JSON --program-key INSERT_YOUR_NTT_PROGRAM_KEYPAIR_JSON\n</code></pre> <pre><code>ntt add-chain INSERT_SVM_CHAIN --latest --mode locking --token INSERT_TOKEN_ADDRESS --payer INSERT_YOUR_KEYPAIR_JSON --program-key INSERT_YOUR_NTT_PROGRAM_KEYPAIR_JSON\n</code></pre> <p>You can optionally add <code>--solana-priority-fee</code> to the script to increase the priority fee in microlamports. The default is <code>50000</code>.</p> </li> <li> <p>Verify deployment status: After deployment, check if your <code>deployment.json</code> file matches the on-chain configuration using the following command.</p> <pre><code>ntt status\n</code></pre> <p>If needed, sync your local configuration with the on-chain state:</p> <pre><code>ntt pull\n</code></pre> </li> <li> <p>Configure inbound and outbound rate limits: By default, the inbound and outbound limits are set to <code>0</code> and must be updated before deployment. For EVM chains, values must be set using 18 decimals, while SVM chains use nine decimals.</p> <p>Open your <code>deployment.json</code> file and adjust the values based on your use case:  </p> <pre><code>\"inbound\": {\n    \"Sepolia\": \"1000.000000000\" // inbound limit from Sepolia to Solana\n},\n\"outbound\": {\n    \"Sepolia\": \"1000.000000000\" // outbound limit from Solana to Sepolia\n}\n</code></pre> </li> <li> <p>Push the final deployment: Once rate limits are set, push the deployment to the SVM chain using the specified key pair to cover gas fees.</p> <pre><code>ntt push --payer INSERT_YOUR_KEYPAIR_JSON\n</code></pre> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#recovering-rent-for-failed-svm-deployments","title":"Recovering Rent for Failed SVM Deployments","text":"<p>Failed SVM deployments don't result in loss of tokens. Instead, the native tokens may be locked in deployment buffer accounts that persist after interruptions. To recover these funds, refer to the Solana program deployment guide for instructions on identifying and closing these buffer accounts.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-solana/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li> <p> Deploy NTT on EVM Chains </p> <p>After deploying NTT on SVM chains, deploy and integrate it on EVM chains to enable seamless multichain transfers.  </p> <p>  Deploy NTT on EVM Chains</p> </li> <li> <p> Test Your Deployment</p> <p>Follow the NTT Post Deployment Guide for integration examples and testing instructions.</p> <p>  Test Your NTT deployment</p> </li> <li> <p> Add NTT to Your dApp</p> <p>Configure Wormhole Connect, a plug-and-play bridging UI, to enable multichain transfers for your token.</p> <p>  Use Connect to Integrate NTT</p> </li> <li> <p> View FAQs</p> <p>Find answers to common questions about NTT.</p> <p>  View FAQs</p> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/","title":"Deploy NTT to Sui","text":"<p>Native Token Transfers (NTT) enable seamless multichain transfers of Sui tokens using Wormhole's messaging protocol. Instead of creating wrapped tokens, NTT allows native assets to move across chains while maintaining their original properties.</p> <p>This guide walks you through deploying NTT on Sui, including setting up dependencies, configuring token compatibility, and using the NTT CLI to deploy in hub-and-spoke or burn-and-mint mode.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/#prerequisites","title":"Prerequisites","text":"<p>Before deploying NTT on Sui, ensure you have the following prerequisites:</p> <ul> <li>Sui Client CLI installed.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/#overview-of-the-deployment-process","title":"Overview of the Deployment Process","text":"<p>Deploying NTT on the Sui network follows a structured process:</p> <ol> <li> <p>Choose your token setup:</p> <ul> <li>Use an existing Sui token: If your token is already deployed on the Sui network, you can skip token creation and move directly to the Set Up NTT section.</li> <li> <p>Create a new Sui token: If you don't already have a Sui token deployed, you'll need to deploy and configure it on the Sui network before integrating with Wormhole's NTT.</p> Create and Deploy a Sui Token <p>This section walks you through setting up a wallet, deploying a Sui Coin contract, and minting tokens on testnet.</p> <ol> <li> <p>Clone the repository: Use the example NTT token repository to deploy a Sui Coin contract on testnet.</p> <pre><code>git clone https://github.com/wormhole-foundation/example-ntt-token-sui.git\ncd example-ntt-token-sui\n</code></pre> </li> <li> <p>Set up a new wallet on testnet: Before building and deploying your token, you'll need to create a new wallet on the Sui testnet and fund it with test tokens.</p> <ol> <li> <p>Create a new testnet environment: Configure your Sui client for testnet.</p> <pre><code>sui client new-env --alias testnet --rpc https://fullnode.testnet.sui.io:443\n</code></pre> </li> <li> <p>Generate a new address: Create a new Ed25519 address for your wallet.</p> <pre><code>sui client new-address ed25519\n</code></pre> </li> <li> <p>Switch to the new address: The above command will output a new address. Copy this address and switch to it.</p> <pre><code>sui client switch --address YOUR_ADDRESS_STEP2\n</code></pre> </li> <li> <p>Fund your wallet: Use the faucet to get test tokens.</p> <pre><code>sui client faucet\n</code></pre> </li> <li> <p>Verify funding: Check that your wallet has been funded.</p> <pre><code>sui client balance\n</code></pre> </li> </ol> </li> <li> <p>Build the project: Compile the Move contract.</p> <pre><code>sui move build\n</code></pre> </li> <li> <p>Deploy the token contract: Deploy to testnet.</p> <pre><code>sui client publish --gas-budget 10000000\n</code></pre> </li> <li> <p>Mint tokens: Send tokens to your address.</p> <pre><code>sui client call \\\n--package YOUR_DEPLOYED_PACKAGE_ID_STEP4 \\\n--module MODULE_NAME_STEP1 \\\n--function mint \\\n--args TREASURYCAP_ID_STEP4 AMOUNT_WITH_DECIMALS RECIPIENT_ADDRESS \\\n--gas-budget 10000000\n</code></pre> </li> </ol> <p>Note</p> <p>This token uses 9 decimals by default. All minting values must be specified with that in mind (1 token = 10^9).</p> </li> </ul> </li> <li> <p>Choose your deployment model:</p> <ul> <li>Hub-and-spoke: Tokens are locked on a hub chain and minted on destination spoke chains. Since the token supply remains controlled by the hub chain, no changes to the minting authority are required.</li> <li>Burn-and-mint: Tokens are burned on the source chain and minted on the destination chain. This requires transferring the Sui Treasury cap object to the NTT manager.</li> </ul> </li> <li> <p>Deploy and configure NTT: Use the NTT CLI to initialize and deploy the NTT program, specifying your Sui token and deployment mode.</p> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/#set-up-ntt","title":"Set Up NTT","text":"<p>Before deploying NTT contracts on Sui, you need to scaffold a project and initialize your deployment configuration.</p> <p>Note</p> <p>If you already have an NTT deployment to another chain (like Solana), you can skip the <code>ntt new</code> and <code>ntt init</code> commands. Simply navigate to your existing NTT project directory and proceed directly to the Deploy and Configure NTT section.</p> <p>The NTT CLI manages deployments, configures settings, and interacts with the NTT system. Follow these steps to set up NTT using the CLI tool:</p> Install the NTT CLI and Scaffold a New Project <ol> <li> <p>Install the NTT CLI:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/wormhole-foundation/native-token-transfers/main/cli/install.sh | bash\n</code></pre> <p>Verify installation:</p> <pre><code>ntt --version\n</code></pre> </li> <li> <p>Initialize a new NTT project:</p> <pre><code>ntt new my-ntt-project\ncd my-ntt-project\n</code></pre> </li> <li> <p>Create the deployment config using the following command. This will generate a <code>deployment.json</code> file where your settings are stored:</p> MainnetTestnet <pre><code>ntt init Mainnet\n</code></pre> <pre><code>ntt init Testnet\n</code></pre> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/#deploy-and-configure-ntt","title":"Deploy and Configure NTT","text":"<p>Once you've set up NTT, proceed with deploying the contracts.</p> <ol> <li> <p>Environment Setup: Ensure you have set up your environment correctly, open your terminal, and run the <code>export</code> commands:</p> <p><pre><code>sui keytool export --key-identity goofy\n</code></pre> Note: Replace <code>goofy</code> with your actual key alias. This command exports the private key in the format required by the NTT add-chain command.</p> <pre><code>export SUI_PRIVATE_KEY=INSERT_PRIVATE_KEY\n</code></pre> <p>After setting up your deployment, finalize the configuration and deploy the NTT program onto the Sui network by following the steps below.</p> </li> <li> <p>Deploy NTT to Sui: Run the appropriate command based on your deployment mode.</p> <p>Note</p> <p>The <code>--token</code> parameter requires the full Sui coin type in the format <code>0xADDRESS::module::struct</code>.  For example, <code>0x2::sui::SUI</code> for the native SUI token, or <code>0x1234567890abcdef::my_module::MyToken</code> for a custom token.</p> <p>Warning</p> <p>In burning mode, the NTT CLI moves the treasury-cap object during the add-chain command to the NTT manager, enabling the NTT manager to mint tokens.  Important: Once the treasury-cap object is moved to the NTT manager, you will no longer be able to modify the token's metadata (such as name, symbol, or icon).</p> Burn-and-MintHub-and-Spoke <pre><code>ntt add-chain Sui --latest --mode burning --token INSERT_FULL_COIN_TYPE --sui-treasury-cap YOUR_TREASURY_CAP_ID \n</code></pre> <pre><code>ntt add-chain Sui --latest --mode locking --token INSERT_FULL_COIN_TYPE\n</code></pre> </li> <li> <p>Verify deployment status: After deployment, check if your <code>deployment.json</code> file matches the on-chain configuration using the following command.</p> <pre><code>ntt status\n</code></pre> <p>If needed, sync your local configuration with the on-chain state:</p> <pre><code>ntt pull\n</code></pre> </li> <li> <p>Configure inbound and outbound rate limits: By default, the inbound and outbound limits are set to <code>0</code> and must be updated before deployment. </p> <p>Open your <code>deployment.json</code> file and adjust the values based on your use case:  </p> <pre><code>\"inbound\": {\n    \"Sepolia\": \"1000.000000000\" // inbound limit from Sepolia to Sui\n},\n\"outbound\": {\n    \"Sepolia\": \"1000.000000000\" // outbound limit from Sui to Sepolia\n}\n</code></pre> </li> <li> <p>Push the final deployment: Once rate limits are set, sync the on-chain configuration with local changes made to your <code>deployment.json</code> file.</p> <pre><code>ntt push\n</code></pre> </li> </ol> <p>After you deploy the NTT contracts, ensure that the deployment is properly configured and your local representation is consistent with the actual on-chain state by running <code>ntt status</code> and following the instructions shown on the screen.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/deploy-to-sui/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li> <p> Test Your Deployment</p> <p>Follow the NTT Post Deployment Guide for integration examples and testing instructions.</p> <p>  Test Your NTT deployment</p> </li> <li> <p> Deploy NTT to SVM Chains</p> <p>Follow the guide to deploy and configure Wormhole's Native Token Transfers (NTT) for SVM chains.</p> <p>  Deploy NTT to SVM Chains</p> </li> <li> <p> View FAQs</p> <p>Find answers to common questions about NTT.</p> <p>  View FAQs</p> </li> <li> <p> Deploy NTT to EVM Chains</p> <p>Follow the guide to deploy and configure Wormhole's Native Token Transfers (NTT) for EVM chains.</p> <p>  Deploy NTT to EVM Chains</p> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/","title":"Deploy NTT with Launchpad","text":"<p>The Native Token Transfers (NTT) Launchpad is a Wormhole-managed UI application that provides a step-by-step interface for deploying NTT across multiple blockchains.</p> <p>Instead of manually deploying contracts on each chain, configuring relayers, and managing cross-chain communication, you can quickly launch or expand tokens with just a few clicks. </p> <p>The Launchpad automates deployment, reducing complexity and saving time.</p> <p>This guide covers:</p> <ul> <li>Launching a new cross-chain token.</li> <li>Expanding an existing token for NTT.</li> <li>Managing tokens via the dashboard and settings.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#prerequisites","title":"Prerequisites","text":"<ul> <li>An EVM-compatible wallet (e.g., MetaMask, Phantom, etc.).</li> <li>Minimum ETH (or equivalent) for gas fees per deployment.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#supported-blockchains","title":"Supported Blockchains","text":"<p>The NTT Launchpad currently supports deployments on the following mainnet chains:</p> <ul> <li>Ethereum</li> <li>Arbitrum One</li> <li>Base</li> <li>Berachain</li> <li>Blast</li> <li>BNB Smart Chain</li> <li>Ink</li> <li>Optimism Mainnet</li> <li>Polygon</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#choose-your-path","title":"Choose Your Path","text":"<p>Once ready, choose an option to proceed:</p> <ul> <li>Launch a Cross-Chain Token: Deploy a brand-new token that is NTT-ready from day one, enabling seamless transfers across multiple blockchains.</li> <li>Expand Your Existing Token: If you already have a token deployed on different chains, integrate it with NTT to enable NTT without modifying its original contract.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#launch-a-cross-chain-token","title":"Launch a Cross-Chain Token","text":"<p>Deploy a new NTT-compatible token that can be transferred across multiple chains. This process sets up your token on a home network and deploys it to additional blockchains. Follow the below steps to get started:</p> <ol> <li> <p>Open the NTT Launchpad, connect your wallet, and click Get Started.</p> <p></p> </li> <li> <p>Select Launch a Cross-Chain Token.</p> <p></p> </li> <li> <p>Set the token details:</p> <ol> <li>Select the home network from the dropdown menu.</li> <li>Enter the name for the token.</li> <li>Enter the symbol of the token. </li> <li>Provide the initial supply.</li> <li>To the token details, click Next.</li> </ol> <p></p> </li> <li> <p>Select the deployment chains:</p> <ol> <li>The home network where your token will be deployed will be populated (e.g., Optimism).</li> <li>Choose any additional chains to deploy your token to (e.g., Base).</li> <li>To continue, click Next.</li> </ol> <p></p> </li> <li> <p>To deploy on the first chain (Optimism), click on Deploy; if prompted, switch your wallet to the correct network and confirm the transaction.</p> <p></p> </li> <li> <p>Once deployed, you can view the transaction in a block explorer and add the token to your wallet.</p> <p></p> </li> <li> <p>Repeat the previous step to deploy the token on the second chain (Base). The supply of tokens on Base will be zero since the tokens were all minted on Optimism in the previous step.</p> </li> <li> <p>Once both deployments are completed, proceed to the Dashboard to manage your token.</p> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#expand-your-existing-token","title":"Expand Your Existing Token","text":"<p>Expand an existing token to support NTT across multiple chains. This process integrates your deployed token with NTT without modifying its original contract. Follow the steps below to get started:</p> <ol> <li> <p>Open the NTT Launchpad, connect your wallet, and click Get Started.</p> <p></p> </li> <li> <p>Select Expand Your Existing Token.</p> <p></p> </li> <li> <p>Enter the token details:</p> <ol> <li>Choose the home network where your token is already deployed (e.g., Optimism).</li> <li>Choose any additional chains to deploy your token to (e.g., Base).</li> <li>To continue, click Next.</li> </ol> <p></p> </li> <li> <p>Select the chains to deploy your token to:</p> <ol> <li>The home network where your token is already deployed will be populated (e.g., Optimism).</li> <li>Choose any additional chains to deploy your token to (e.g., Base).</li> <li>Click Next.</li> </ol> <p></p> </li> <li> <p>To deploy on the first chain (Optimism), click on Deploy; if prompted, switch your wallet to the correct network and confirm the transaction.</p> <p></p> </li> <li> <p>Once deployed, you can view the transaction in a block explorer and add the token to your wallet.</p> <p></p> </li> <li> <p>Repeat the previous step to deploy the token on the second chain (Base). The supply of tokens on Base will be zero since the tokens were all minted on Optimism in the previous step.</p> </li> <li> <p>Now that your token has been deployed on multiple chains click Dashboard to review its details.</p> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#explore-the-launchpad-dashboard","title":"Explore the Launchpad Dashboard","text":"<p>To access the Dashboard from the Launchpad home page, click on Manage Deployment. Here, you can view deployment status, monitor supply across chains, and configure transfer settings.</p> <p></p> <p>The dashboard provides a high-level view of your token across all deployed chains, including:</p> <ul> <li>Token addresses for each chain.</li> <li>Supply distribution visualization.</li> <li>List of deployed chains, including inbound and outbound transfer limits, which can be modified in Settings.</li> </ul> <p></p>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#settings","title":"Settings","text":"<p>The Settings page allows you to configure security parameters, role management, and transfer limits for your deployed token. You can switch between chains to manage these settings independently for each deployment.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#chain-management","title":"Chain Management","text":"<p>Use the drop-down menu at the top to select the chain you want to configure. The available options correspond to the chains where your token has already been deployed. Once selected, the page displays token details specific to that chain.</p> <p>From this section, you can also:</p> <ul> <li>Pause the token: Temporarily turn off transfers on the selected chain.</li> <li>Deploy to a new chain: Expand your token by deploying it to an additional chain.</li> </ul> <p></p>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#role-management","title":"Role Management","text":"<p>This section displays key roles involved in token governance. You can view and modify these roles by selecting a new address and confirming the update.</p> <ul> <li>Manager\u2019s Owner: The owner through the <code>NTTOwner</code> proxy.</li> <li>Pauser: The address authorized to pause transfers.</li> </ul> <p></p>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#security-threshold","title":"Security Threshold","text":"<p>Determine and update how transceivers interact with the token. Transceivers route NTT transfers between blockchains, ensuring tokens are correctly sent and received across networks.</p> <p>A higher transceiver threshold increases security by requiring more approvals before processing a transfer, but it may also slow down transactions. A lower threshold allows faster transfers but reduces redundancy in message verification.  </p> <ul> <li>Registered Transceivers: Displays the number of registered transceivers and their addresses.</li> <li>Transceivers Threshold: A configurable value that must be less than or equal to the number of transceivers.</li> </ul> <p></p>"},{"location":"products/token-transfers/native-token-transfers/guides/evm-launchpad/#peer-chains-limits","title":"Peer Chains Limits","text":"<p>Define the transfer restrictions for each connected network. You can adjust:</p> <ul> <li>Sending Limits: The maximum amount of tokens that can be sent from the home chain.</li> <li>Receiving Limits: The maximum amount of tokens that can be received for each of the supported peer chains.</li> </ul> <p>Enter a new value to adjust limits and click Update. The changes will take effect immediately.</p> <p></p>"},{"location":"products/token-transfers/native-token-transfers/guides/post-deployment/","title":"NTT Post-Deployment Steps","text":"<p>To offer the best user experience and ensure the most robust deployment, Wormhole contributors recommend the following after you have deployed Native Token Transfers (NTT):</p> <ul> <li>Implement a robust testing plan for your multichain token before launching.</li> <li>Ensure comprehensive, documented security measures are followed for custody of contract ownership, control of keys, and access control roles. Check the NTT configuration for more details on ownership and rate limits.</li> <li>Consider a streamlined, customizable frontend such as Connect for an optimized user experience.</li> <li>Alternatively, the Wormhole TypeScript SDK allows for a direct integration into your infrastructure.</li> <li>Ensure ecosystem actors such as block explorers, automated security tools (such as BlockAid and Blowfish), and wallets (such as MetaMask, Backpack, and Phantom) are aware of your multichain deployment and that it is labeled appropriately.</li> <li>Monitor and maintain your multichain deployment.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/post-deployment/#manual-relaying-for-svm-transfers","title":"Manual Relaying for SVM Transfers","text":"<p>By default, NTT transfers to SVM chains require manual relaying, meaning that after initiating a cross-chain transfer, the recipient must submit an on-chain transaction to claim the tokens.</p> <p>This step ensures that tokens are properly minted or unlocked on the SVM chain and prevents unauthorized claims.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/post-deployment/#post-deployment-settings","title":"Post-Deployment Settings","text":"<p>The following table outlines post-deployment settings available on the NTT Manager contract. These allow you to update roles, pause activity, and adjust transfer limits\u2014useful for upgrades, incident response, or protocol tuning after initial deployment.</p> Setting Effect <code>pause</code> Pauses the manager. <code>unpause</code> Unpauses the manager. <code>setOwner</code> Changes the manager owner. <code>setPauser</code> Changes the pauser role. <code>setOutboundLimit</code> Sets outbound transfer limit. <code>setInboundLimit</code> Sets inbound transfer limit (per chain). <code>setTransceiverPauser</code> Changes pauser for a transceiver."},{"location":"products/token-transfers/native-token-transfers/guides/post-deployment/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li> <p> Transfer Ownership</p> <p>Learn how to move ownership of your NTT deployment to a new owner address on EVM, Solana, and Sui with step-by-step instructions.</p> <p>  Follow the Transfer Ownership guide</p> </li> <li> <p> Wormhole NTT Connect Demo</p> <p>Check out an example project that uses a Next.js TypeScript application and integrates it with Connect, a customizable widget for cross-chain asset transfers.</p> <p>  Explore the NTT Connect demo</p> </li> <li> <p> Wormhole NTT TypeScript SDK Demo</p> <p>Reference an example project that uses the Wormhole TypeScript SDK to facilitate token transfers between different blockchain networks after deploying the NTT framework.</p> <p>  Explore the NTT TypeScript SDK demo</p> </li> <li> <p> Query NTT Token and Transfer Data</p> <p>Learn how to explore NTT by querying token metadata and transfer activity using the Wormholescan API in a TypeScript project.</p> <p>  Try the NTT Token and Transfers Guide</p> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/guides/transfer-ownership/","title":"Transfer Ownership","text":"<p>After deploying Native Token Transfers (NTT), you may need to move ownership to a new owner address (e.g., a multisig). This page outlines the process for transferring ownership on EVM, Solana, and Sui.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/transfer-ownership/#evm","title":"EVM","text":"<p>The NTT CLI supports transferring ownership on EVM chains. To transfer ownership on the EVM chains, you can do the following:</p> <ol> <li> <p>Set the private key used to sign the transaction.</p> <pre><code>export ETH_PRIVATE_KEY=INSERT_EVM_PRIVATE_KEY\n</code></pre> </li> <li> <p>Run the <code>ntt transfer-ownership</code> command, specifying the chain and destination address.</p> <pre><code>ntt transfer-ownership INSERT_CHAIN --destination INSERT_DESTINATION_ADDRESS\n</code></pre> <p>You\u2019ll see a confirmation prompt. Type <code>y</code> to proceed.</p> </li> </ol> <p>If successful, you will see the following output:</p> export ETH_PRIVATE_KEY=INSERT_EVM_PRIVATE_KEY ntt transfer-ownership ArbitrumSepolia --destination 0xc96CE2a... Transferring ownership on ArbitrumSepolia (Testnet) Manager address: 0x00a97bE... New owner: 0xc96CE2a... Current owner: 0x0088DFA... \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f CRITICAL WARNING \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f This ownership transfer is IRREVERSIBLE! Please TRIPLE-CHECK that the destination address is correct: 0xc96CE2a... Are you absolutely certain you want to transfer ownership to 0xc96CE2a...? [y/N]y Transaction hash: 0x57da478... Waiting for 1 confirmation... Verifying ownership transfer... \u2705 Ownership transferred successfully to 0xc96CE2a..."},{"location":"products/token-transfers/native-token-transfers/guides/transfer-ownership/#solana","title":"Solana","text":"<p>Transferring ownership of Wormhole's NTT to a multisig on Solana is a two-step process for safety. This ensures that ownership is not transferred to an address that cannot claim it. Refer to the <code>transfer_ownership</code> method in the NTT Manager Contract to initiate the transfer.</p> <ol> <li>Initiate transfer: Use the <code>transfer_ownership</code> method on the NTT Manager contract to set the new owner (the multisig).</li> <li>Claim ownership: The multisig must then claim ownership via the <code>claim_ownership</code> instruction. If not claimed, the current owner can cancel the transfer.</li> <li>Single-step transfer (Riskier): You can also use the <code>transfer_ownership_one_step_unchecked</code> method to transfer ownership in a single step, but if the new owner cannot sign, the contract may become locked. Be cautious and ensure the new owner is a Program Derived Address (PDA).</li> </ol> <p>For a practical demonstration of transferring ownership of Wormhole's NTT to a multisig on Solana, visit the\u00a0GitHub demo, which provides scripts and guidance for managing an NTT program using Squads' multisig functionality, including procedures for ownership transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/guides/transfer-ownership/#sui","title":"Sui","text":"<p>The Sui CLI supports transferring ownership by moving the NTT Manager\u2019s <code>AdminCap</code> and <code>UpgradeCap</code> to your multisig. You can transfer ownership as follows:</p> <ol> <li> <p>Find out the <code>AdminCap</code> and <code>UpgradeCap</code> for your NTT manager.</p> <pre><code>sui client object INSERT_SUI_NTT_MANAGER_ADDRESS --json 2&gt;/dev/null | jq -r '\"AdminCap ID: \\(.content.fields.admin_cap_id)\\nUpgradeCap ID: \\(.content.fields.upgrade_cap_id)\"'\n</code></pre> </li> <li> <p>Transfer <code>AdminCap</code> object over to a multisig.</p> <pre><code>sui client transfer --to INSERT_MULTISIG_ADDRESS --object-id INSERT_ADMIN_CAP_ID_STEP1\n</code></pre> </li> <li> <p>Transfer <code>UpgradeCap</code> object over to a multisig.</p> <pre><code>sui client transfer --to INSERT_MULTISIG_ADDRESS --object-id INSERT_UPGRADE_CAP_ID_STEP1\n</code></pre> </li> <li> <p>Check the new owner of the <code>AdminCap</code> object.</p> <pre><code>sui client object INSERT_ADMIN_CAP_ID_STEP1 --json \\\n    | jq -r '.owner'\n</code></pre> </li> </ol>"},{"location":"products/token-transfers/native-token-transfers/guides/troubleshoot/","title":"Troubleshoot Your NTT Deployment","text":"<p>If you encounter issues during the NTT deployment process, check the following common points:</p> <ul> <li>Solana and Anchor versions: Ensure you are using the expected versions of Solana and Anchor as outlined in the deployment page.<ul> <li>Solana <code>v1.18.26</code></li> <li>Anchor <code>v0.29.0</code></li> </ul> </li> <li>Token compliance on EVM: Verify that your token is an ERC20 token on the EVM chain.</li> <li>Mint authority transfer:<ul> <li>For burn or spoke tokens on SVM chains: Ensure the token mint authority was transferred as described in the set SPL Token Mint Authority section.</li> <li>For EVM tokens: Confirm the token minter was set to the NTT Manager. Refer to the set Token Minter to NTT Manager section for details.</li> </ul> </li> <li>Decimal configuration: Run <code>ntt pull</code> to correctly configure the decimals in your <code>deployment.json</code> file. More details in the configure NTT section.</li> <li>Rate limit configuration: Increase your rate limits to a value greater than zero. A rate limit of zero can cause transactions to get stuck. Learn more on how to configure rate limits section.</li> <li> <p>Docker environment based on Ubuntu 20.04 with all dependencies required for Wormhole NTT CLI development: Run <code>docker compose up -d</code> to start the container in your terminal from the directory containing the <code>docker-compose.yml</code> file.</p> Dockerfile <pre><code>    FROM ubuntu:20.04\n    # Set environment variables to prevent interactive prompts during installation\n    ENV DEBIAN_FRONTEND=noninteractive\n\n    # Update and install necessary dependencies\n    RUN apt-get update &amp;&amp; apt-get install -y \\\n        curl \\\n        wget \\\n        git \\\n        build-essential \\\n        libssl-dev \\\n        libudev-dev \\\n        pkg-config \\\n        python3 \\\n        python3-pip \\\n        software-properties-common \\\n        ca-certificates \\\n        unzip \\\n        clang \\\n        cmake \\\n        protobuf-compiler \\\n        &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n    # Install Rust\n    RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n    ENV PATH=\"/root/.cargo/bin:$PATH\"\n\n    # Install Solana CLI (v1.18.26)\n    RUN sh -c \"$(curl -sSfL https://release.solana.com/v1.18.26/install)\"\n    ENV PATH=\"/root/.local/share/solana/install/active_release/bin:$PATH\"\n\n    # Install Anchor using avm\n    RUN cargo install --git https://github.com/coral-xyz/anchor avm --locked --force \\\n        &amp;&amp; avm install 0.29.0 \\\n        &amp;&amp; avm use 0.29.0\n    ENV PATH=\"/root/.avm/bin:$PATH\"\n\n\n    ENV NVM_DIR=/root/.nvm\n    RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash \\\n        &amp;&amp; . \"$NVM_DIR/nvm.sh\" \\\n        &amp;&amp; nvm install 22 \\\n        &amp;&amp; nvm use 22 \\\n        &amp;&amp; nvm alias default 22\n    ENV PATH=\"$NVM_DIR/versions/node/v22.12.0/bin:$PATH\"\n\n    # Install Bun\n    RUN curl -fsSL https://bun.sh/install | bash\n    ENV PATH=\"/root/.bun/bin:$PATH\"\n\n    # Install Foundry\n    RUN curl -L https://foundry.paradigm.xyz | bash\n    ENV PATH=\"/root/.foundry/bin:${PATH}\"\n    RUN /bin/bash -c \"source /root/.bashrc &amp;&amp; foundryup\"\n\n    # Install Wormhole NTT CLI\n    RUN curl -fsSL https://raw.githubusercontent.com/wormhole-foundation/native-token-transfers/main/cli/install.sh | bash\n\n    # Add a default working directory\n    WORKDIR /app\n\n    # Expose port for development if needed\n    EXPOSE 8899\n\n    # Entry point for the container\n    CMD [\"bash\"]\n</code></pre> docker-compose.yml <pre><code>    services:\n        portal-ntt:\n            build:\n                context: .\n                dockerfile: Dockerfile\n            platform: linux/amd64\n            volumes:\n                - ./src:/app\n            working_dir: /app\n            tty: true\n</code></pre> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/","title":"NTT CLI Commands","text":"<p>The NTT Command-Line Interface (CLI) is a powerful tool for managing native token transfers across multiple blockchain networks within the Wormhole ecosystem. This page provides a comprehensive list of available commands, their descriptions, and examples to help you interact with and configure the NTT system effectively. Whether initializing deployments, updating configurations, or working with specific chains, the NTT CLI simplifies these operations through its intuitive commands.</p> <p>If you haven't installed the NTT CLI yet, follow the NTT Installation instructions to set it up before proceeding.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/#table-of-commands","title":"Table of Commands","text":"<p>The following table lists the available NTT CLI commands, descriptions, and examples.</p> <p>To explore detailed information about any NTT CLI command, including its options and examples, you can append <code>--help</code> to the command. This will display a comprehensive guide for the specific command.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/#general-commands","title":"General Commands","text":"Command Description Example <code>ntt update</code> Update the NTT CLI. <code>ntt update</code> <code>ntt new &lt;path&gt;</code> Create a new NTT project. <code>ntt new my-ntt-project</code> <code>ntt add-chain &lt;chain&gt;</code> Add a chain to the deployment file. <code>ntt add-chain Ethereum --token 0x1234... --mode burning --latest</code> <code>ntt upgrade &lt;chain&gt;</code> Upgrade the contract on a specific chain. <code>ntt upgrade Solana --ver 1.1.0</code> <code>ntt clone &lt;network&gt; &lt;chain&gt; &lt;address&gt;</code> Initialize a deployment file from an existing contract. <code>ntt clone Mainnet Solana Sol5678...</code> <code>ntt init &lt;network&gt;</code> Initialize a deployment file. <code>ntt init devnet</code> <code>ntt pull</code> Pull the remote configuration. <code>ntt pull</code> <code>ntt push</code> Push the local configuration. <code>ntt push</code> <code>ntt status</code> Check the status of the deployment. <code>ntt status</code> <code>ntt set-mint-authority</code> Set token mint authority to token authority (or valid SPL Multisig if <code>--multisig</code> flag is provided). <code>ntt set-mint-authority --chain Solana --token Sol1234... --manager Sol3456... --payer &lt;SOLANA_KEYPAIR_PATH&gt;</code> <code>ntt transfer-ownership &lt;chain&gt;</code> Transfer NTT manager ownership to a new wallet (EVM chains only). <code>ntt transfer-ownership Ethereum --destination 0x1234...</code>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/#configuration-commands","title":"Configuration Commands","text":"Command Description Example <code>ntt config set-chain &lt;chain&gt; &lt;key&gt; &lt;value&gt;</code> Set a configuration value for a chain. <code>ntt config set-chain Ethereum scan_api_key</code> <code>ntt config unset-chain &lt;chain&gt; &lt;key&gt;</code> Unset a configuration value for a chain. <code>ntt config unset-chain Ethereum scan_api_key</code> <code>ntt config get-chain &lt;chain&gt; &lt;key&gt;</code> Get a configuration value for a chain. <code>ntt config get-chain Ethereum scan_api_key</code>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/#solana-commands","title":"Solana Commands","text":"Command Description Example <code>ntt solana key-base58 &lt;keypair&gt;</code> Print private key in base58. <code>ntt solana key-base58 /path/to/keypair.json</code> <code>ntt solana token-authority &lt;programId&gt;</code> Print the token authority address for a given program ID. <code>ntt solana token-authority Sol1234...</code> <code>ntt solana ata &lt;mint&gt; &lt;owner&gt; &lt;tokenProgram&gt;</code> Print the token authority address for a given program ID. <code>ntt solana ata Mint123... Owner123... token22</code>"},{"location":"products/token-transfers/native-token-transfers/reference/cli-commands/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li> <p> Configure NTT</p> <p>Find information on configuring NTT, including guidance on setting Owner and Pauser access control roles and management of rate-limiting.</p> <p>  Configure your NTT deployment</p> </li> <li> <p> NTT FAQs</p> <p>Frequently asked questions about Wormhole Native Token Transfers, including cross-chain lending, SDK usage, custom RPCs, and integration challenges.</p> <p>  Check out the FAQs</p> </li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerConvergeEVM WebsiteCreditCoinEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerFogoSVM Website Block ExplorerHyperEVM EVM Website Developer DocsInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPlumeEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/","title":"NTT Manager Contract Reference (EVM)","text":"<p>The NttManager contract is responsible for managing the token and associated transceivers. It enables cross-chain token transfers, peer registration, rate limiting, and message attestation for the NTT protocol.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#structure-overview","title":"Structure Overview","text":"<p>The NTT Manager system is built using a layered inheritance structure composed of multiple base contracts and interfaces.</p> <pre><code>NttManager.sol\n\u251c\u2500\u2500 INttManager.sol\n\u251c\u2500\u2500 RateLimiter.sol\n\u2502   \u251c\u2500\u2500 IRateLimiter.sol\n\u2502   \u2514\u2500\u2500 IRateLimiterEvents.sol\n\u2514\u2500\u2500 ManagerBase.sol\n    \u251c\u2500\u2500 IManagerBase.sol\n    \u251c\u2500\u2500 TransceiverRegistry.sol\n    \u251c\u2500\u2500 PausableOwnable.sol\n    \u251c\u2500\u2500 ReentrancyGuardUpgradeable.sol\n    \u2514\u2500\u2500 Implementation.sol\n</code></pre> <p>Key Components:</p> <ul> <li><code>NttManager.sol</code>: The main contract that combines all functionality for token transfers with rate limiting.</li> <li><code>ManagerBase.sol</code>: Provides core management functionality including message handling, threshold management, and transceiver coordination.</li> <li><code>RateLimiter.sol</code>: Adds rate limiting capabilities with queuing mechanisms for both inbound and outbound transfers.</li> <li><code>TransceiverRegistry.sol</code>: Manages the registration, enabling, and disabling of transceivers.</li> <li><code>PausableOwnable.sol</code>: Provides ownership and emergency pause functionality.</li> <li><code>ReentrancyGuardUpgradeable.sol</code>: Protects against reentrancy attacks in an upgradeable context.</li> <li><code>Implementation.sol</code>: Handles proxy implementation logic for upgradeable contracts.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#state-variables","title":"State Variables","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#core-identification","title":"Core Identification","text":"<ul> <li><code>token</code> address: Address of the token that this NTT Manager is tied to.</li> <li><code>mode</code> Mode: Mode of the NTT Manager (LOCKING=0 or BURNING=1).</li> <li><code>chainId</code> uint16: Wormhole chain ID that the NTT Manager is deployed on.</li> <li><code>NTT_MANAGER_VERSION</code> string: The version string of the NttManager contract implementation.</li> <li><code>rateLimitDuration</code> uint64: Duration (in seconds) until limits fully replenish.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#cross-chain-peers-and-governance-thresholds","title":"Cross-chain Peers and Governance Thresholds","text":"<ul> <li><code>peers</code> mapping(uint16 \u21d2 NttManagerPeer): Mapping of peer chain IDs to their peer NTT Manager address and token decimals.</li> <li><code>messageAttestations</code> mapping(bytes32 \u21d2 AttestationInfo): Tracks whether a message has been executed and the bitmap of transceivers that have attested to it.</li> <li><code>THRESHOLD_SLOT</code> uint8: Number of attestation approvals required for message execution.</li> <li><code>MESSAGE_SEQUENCE_SLOT</code> uint64: Monotonic sequence number for outgoing messages.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#rate-limiting-and-queues","title":"Rate Limiting and Queues","text":"<ul> <li><code>rateLimitDuration</code> uint64: Duration (in seconds) until limits fully replenish.</li> <li><code>outboundLimitParams</code> RateLimitParams: Parameters controlling outbound transfer rate limits, including capacity and last transaction timestamp.</li> <li><code>inboundLimitParams</code> mapping(uint16 \u21d2 RateLimitParams): Parameters controlling inbound transfer rate limits per peer chain.</li> <li><code>outboundQueue</code> mapping(uint64 \u21d2 OutboundQueuedTransfer): Queue of outbound transfers when rate limits are exceeded, keyed by sequence number.</li> <li><code>inboundQueue</code> mapping(bytes32 \u21d2 InboundQueuedTransfer): Queue of inbound transfers when rate limits are exceeded, keyed by message digest.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#events","title":"Events","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#inboundtransferlimitupdated","title":"InboundTransferLimitUpdated","text":"<p>Emitted when the inbound transfer limit is updated. (Defined in RateLimiter.sol)</p> <pre><code>event InboundTransferLimitUpdated(\n    uint16 chainId,\n    uint256 oldLimit,\n    uint256 newLimit\n)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID for which the limit was updated.</p> <p><code>oldLimit</code> uint256</p> <p>The previous inbound limit.</p> <p><code>newLimit</code> uint256</p> <p>The new inbound limit.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#inboundtransferqueued","title":"InboundTransferQueued","text":"<p>Emitted when an inbound transfer is queued due to rate limiting. (Defined in RateLimiter.sol)</p> <pre><code>event InboundTransferQueued(bytes32 digest)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the queued transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#messagealreadyexecuted","title":"MessageAlreadyExecuted","text":"<p>Emitted when a message has already been executed to notify client against retries. (Defined in ManagerBase.sol)</p> <pre><code>event MessageAlreadyExecuted(\n    bytes32 indexed sourceNttManager,\n    bytes32 indexed digest\n)\n</code></pre> Parameters <p><code>sourceNttManager</code> bytes32</p> <p>The address of the source NttManager.</p> <p><code>digest</code> bytes32</p> <p>The keccak-256 hash of the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#messageattestedto","title":"MessageAttestedTo","text":"<p>Emitted when a message has been attested to by a transceiver. (Defined in ManagerBase.sol)</p> <pre><code>event MessageAttestedTo(bytes32 digest, address transceiver, uint8 index)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the message.</p> <p><code>transceiver</code> address</p> <p>The address of the transceiver that attested to the message.</p> <p><code>index</code> uint8</p> <p>The index of the transceiver in the registry.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#notpaused","title":"NotPaused","text":"<p>Emitted when the contract is unpaused. (Defined in PausableUpgradeable.sol)</p> <pre><code>event NotPaused(bool notPaused)\n</code></pre> Parameters <p><code>notPaused</code> bool</p> <p>Whether the contract is not paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundtransfercancelled","title":"OutboundTransferCancelled","text":"<p>Emitted when an outbound transfer has been cancelled. (Defined in NttManager.sol)</p> <pre><code>event OutboundTransferCancelled(uint256 sequence, address recipient, uint256 amount)\n</code></pre> Parameters <p><code>sequence</code> uint256</p> <p>The sequence number being cancelled.</p> <p><code>recipient</code> address</p> <p>The canceller and recipient of the funds.</p> <p><code>amount</code> uint256</p> <p>The amount of the transfer being cancelled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundtransferlimitupdated","title":"OutboundTransferLimitUpdated","text":"<p>Emitted when the outbound transfer limit is updated. (Defined in RateLimiter.sol)</p> <pre><code>event OutboundTransferLimitUpdated(uint256 oldLimit, uint256 newLimit)\n</code></pre> Parameters <p><code>oldLimit</code> uint256</p> <p>The previous outbound limit.</p> <p><code>newLimit</code> uint256</p> <p>The new outbound limit.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundtransferqueued","title":"OutboundTransferQueued","text":"<p>Emitted when an outbound transfer is queued due to rate limiting. (Defined in RateLimiter.sol)</p> <pre><code>event OutboundTransferQueued(uint64 sequence)\n</code></pre> Parameters <p><code>sequence</code> uint64</p> <p>The sequence number of the queued transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundtransferratelimited","title":"OutboundTransferRateLimited","text":"<p>Emitted when an outbound transfer is rate limited. (Defined in RateLimiter.sol)</p> <pre><code>event OutboundTransferRateLimited(\n    address sender,\n    uint64 sequence,\n    uint256 amount,\n    uint256 currentCapacity\n)\n</code></pre> Parameters <p><code>sender</code> address</p> <p>The address that initiated the transfer.</p> <p><code>sequence</code> uint64</p> <p>The sequence number of the transfer.</p> <p><code>amount</code> uint256</p> <p>The amount being transferred.</p> <p><code>currentCapacity</code> uint256</p> <p>The current available capacity.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ownershiptransferred","title":"OwnershipTransferred","text":"<p>Emitted when ownership of the contract is transferred. (Defined in OwnableUpgradeable.sol)</p> <pre><code>event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)\n</code></pre> Parameters <p><code>previousOwner</code> address</p> <p>The previous owner's address.</p> <p><code>newOwner</code> address</p> <p>The new owner's address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#paused","title":"Paused","text":"<p>Emitted when the contract is paused. (Defined in PausableUpgradeable.sol)</p> <pre><code>event Paused(bool paused)\n</code></pre> Parameters <p><code>paused</code> bool</p> <p>Whether the contract is paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#pausertransferred","title":"PauserTransferred","text":"<p>Emitted when pauser capability is transferred. (Defined in PausableUpgradeable.sol)</p> <pre><code>event PauserTransferred(address indexed oldPauser, address indexed newPauser)\n</code></pre> Parameters <p><code>oldPauser</code> address</p> <p>The previous pauser's address.</p> <p><code>newPauser</code> address</p> <p>The new pauser's address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#peerupdated","title":"PeerUpdated","text":"<p>Emitted when the peer contract is updated. (Defined in NttManager.sol)</p> <pre><code>event PeerUpdated(\n    uint16 indexed chainId_,\n    bytes32 oldPeerContract,\n    uint8 oldPeerDecimals,\n    bytes32 peerContract,\n    uint8 peerDecimals\n)\n</code></pre> Parameters <p><code>chainId_</code> uint16</p> <p>The chain ID of the peer contract.</p> <p><code>oldPeerContract</code> bytes32</p> <p>The old peer contract address.</p> <p><code>oldPeerDecimals</code> uint8</p> <p>The old peer contract decimals.</p> <p><code>peerContract</code> bytes32</p> <p>The new peer contract address.</p> <p><code>peerDecimals</code> uint8</p> <p>The new peer contract decimals.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#thresholdchanged","title":"ThresholdChanged","text":"<p>Emitted when the threshold required for transceivers is changed. (Defined in ManagerBase.sol)</p> <pre><code>event ThresholdChanged(uint8 oldThreshold, uint8 threshold)\n</code></pre> Parameters <p><code>oldThreshold</code> uint8</p> <p>The old threshold.</p> <p><code>threshold</code> uint8</p> <p>The new threshold.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transceiveradded","title":"TransceiverAdded","text":"<p>Emitted when a transceiver is added to the NttManager. (Defined in ManagerBase.sol)</p> <pre><code>event TransceiverAdded(address transceiver, uint256 transceiversNum, uint8 threshold)\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The address of the transceiver.</p> <p><code>transceiversNum</code> uint256</p> <p>The current number of transceivers.</p> <p><code>threshold</code> uint8</p> <p>The current threshold of transceivers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transceiverremoved","title":"TransceiverRemoved","text":"<p>Emitted when a transceiver is removed from the NttManager. (Defined in ManagerBase.sol)</p> <pre><code>event TransceiverRemoved(address transceiver, uint8 threshold)\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The address of the transceiver.</p> <p><code>threshold</code> uint8</p> <p>The current threshold of transceivers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transferredeemed","title":"TransferRedeemed","text":"<p>Emitted when a transfer has been redeemed (either minted or unlocked on the recipient chain). (Defined in NttManager.sol)</p> <pre><code>event TransferRedeemed(bytes32 indexed digest)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transfersent","title":"TransferSent","text":"<p>Emitted when a message is sent from the NttManager. (Defined in NttManager.sol)</p> <pre><code>event TransferSent(\n    bytes32 indexed recipient,\n    bytes32 indexed refundAddress,\n    uint256 amount,\n    uint256 fee,\n    uint16 recipientChain,\n    uint64 msgSequence\n)\n</code></pre> Parameters <p><code>recipient</code> bytes32</p> <p>The recipient of the message.</p> <p><code>refundAddress</code> bytes32</p> <p>The address on the destination chain to which the refund of unused gas will be paid.</p> <p><code>amount</code> uint256</p> <p>The amount transferred.</p> <p><code>fee</code> uint256</p> <p>The amount of ether sent along with the tx to cover the delivery fee.</p> <p><code>recipientChain</code> uint16</p> <p>The chain ID of the recipient.</p> <p><code>msgSequence</code> uint64</p> <p>The unique sequence ID of the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transfersent-digest-version","title":"TransferSent (Digest Version)","text":"<p>Emitted when a message is sent from the NttManager (digest version). (Defined in NttManager.sol)</p> <pre><code>event TransferSent(bytes32 indexed digest)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#functions","title":"Functions","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#attestationreceived","title":"attestationReceived","text":"<p>Called by transceivers when the attestation is received. (Defined in NttManager.sol)</p> <pre><code>function attestationReceived(\n    uint16 sourceChainId,\n    bytes32 sourceNttManagerAddress,\n    TransceiverStructs.NttManagerMessage memory payload\n) external\n</code></pre> Parameters <p><code>sourceChainId</code> uint16</p> <p>The chain ID of the source.</p> <p><code>sourceNttManagerAddress</code> bytes32</p> <p>The address of the source NttManager.</p> <p><code>payload</code> TransceiverStructs.NttManagerMessage</p> <p>The message payload containing transfer details.</p> <code>NttManagerMessage</code> struct <p><code>id</code> bytes32</p> <p>Unique message identifier (incrementally assigned on EVM chains).</p> <p><code>sender</code> bytes32</p> <p>Original message sender address.</p> <p><code>payload</code> bytes</p> <p>Payload that corresponds to the transfer type.</p> <p>Emits: <code>MessageAlreadyExecuted</code> (if the message was already executed), <code>OutboundTransferCancelled</code> or <code>TransferRedeemed</code> (if the message execution succeeds), <code>TransferSent</code> (if the message execution succeeds)</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#canceloutboundqueuedtransfer","title":"cancelOutboundQueuedTransfer","text":"<p>Cancel an outbound transfer that's been queued due to rate limiting. (Defined in NttManager.sol)</p> <pre><code>function cancelOutboundQueuedTransfer(uint64 messageSequence) external\n</code></pre> Parameters <p><code>messageSequence</code> uint64</p> <p>The sequence number of the queued transfer to cancel.</p> <p>Emits: <code>OutboundTransferCancelled</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#completeinboundqueuedtransfer","title":"completeInboundQueuedTransfer","text":"<p>Complete an inbound transfer that's been queued due to rate limiting. (Defined in NttManager.sol)</p> <pre><code>function completeInboundQueuedTransfer(bytes32 digest) external\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the queued transfer.</p> <p>Emits: <code>TransferRedeemed</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#completeoutboundqueuedtransfer","title":"completeOutboundQueuedTransfer","text":"<p>Complete an outbound transfer that's been queued due to rate limiting. (Defined in NttManager.sol)</p> <pre><code>function completeOutboundQueuedTransfer(uint64 messageSequence) external payable returns (uint64)\n</code></pre> Parameters <p><code>messageSequence</code> uint64</p> <p>The sequence number of the queued transfer.</p> Returns <p><code>sequence</code> uint64</p> <p>The sequence number of the completed transfer.</p> <p>Emits: <code>TransferSent</code> (two variants)</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#executemsg","title":"executeMsg","text":"<p>Execute a message when the threshold is met. (Defined in NttManager.sol)</p> <pre><code>function executeMsg(\n    uint16 sourceChainId,\n    bytes32 sourceNttManagerAddress,\n    TransceiverStructs.NttManagerMessage memory message\n) external\n</code></pre> Parameters <p><code>sourceChainId</code> uint16</p> <p>The chain ID of the source.</p> <p><code>sourceNttManagerAddress</code> bytes32</p> <p>The address of the source NttManager.</p> <p><code>message</code> TransceiverStructs.NttManagerMessage</p> <p>The message to execute containing transfer details.</p> <code>NttManagerMessage</code> struct <p><code>id</code> bytes32</p> <p>Unique message identifier (incrementally assigned on EVM chains).</p> <p><code>sender</code> bytes32</p> <p>Original message sender address.</p> <p><code>payload</code> bytes</p> <p>Payload that corresponds to the transfer type.</p> <p>Emits: <code>MessageAlreadyExecuted</code> (if already executed), <code>OutboundTransferCancelled</code>, or <code>TransferRedeemed</code> (depending on the transfer type)</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getcurrentinboundcapacity","title":"getCurrentInboundCapacity","text":"<p>Returns the currently remaining inbound capacity from a chain. (Defined in RateLimiter.sol)</p> <pre><code>function getCurrentInboundCapacity(uint16 chainId) external view returns (uint256)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to check capacity for.</p> Returns <p><code>capacity</code> uint256</p> <p>The current available inbound capacity from the specified chain.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getcurrentoutboundcapacity","title":"getCurrentOutboundCapacity","text":"<p>Returns the currently remaining outbound capacity. (Defined in RateLimiter.sol)</p> <pre><code>function getCurrentOutboundCapacity() public view returns (uint256)\n</code></pre> Returns <p><code>capacity</code> uint256</p> <p>The current available outbound capacity.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getinboundlimitparams","title":"getInboundLimitParams","text":"<p>Returns the inbound rate limit parameters for a chain. (Defined in RateLimiter.sol)</p> <pre><code>function getInboundLimitParams(uint16 chainId_) external view returns (RateLimitParams memory)\n</code></pre> Parameters <p><code>chainId_</code> uint16</p> <p>The chain ID to get parameters for.</p> Returns <p><code>params</code> RateLimitParams struct</p> <p>The inbound rate limit parameters for the specified chain.</p> <code>RateLimitParams</code> struct <p><code>limit</code> TrimmedAmount</p> <p>Current rate limit value.</p> <p><code>currentCapacity</code> TrimmedAmount</p> <p>The current capacity left.</p> <p><code>lastTxTimestamp</code> uint64</p> <p>Timestamp of when capacity was previously consumed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getinboundqueuedtransfer","title":"getInboundQueuedTransfer","text":"<p>Returns queued transfer details for inbound queue. (Defined in RateLimiter.sol)</p> <pre><code>function getInboundQueuedTransfer(bytes32 digest) external view returns (InboundQueuedTransfer memory)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the queued transfer.</p> Returns <p><code>transfer</code> InboundQueuedTransfer struct</p> <p>The queued transfer details.</p> <code>InboundQueuedTransfer</code> struct <p><code>amount</code> TrimmedAmount</p> <p>The trimmed amount of the transfer.</p> <p><code>txTimestamp</code> uint64</p> <p>The timestamp of the transfer.</p> <p><code>recipient</code> address</p> <p>The recipient of the transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getmode","title":"getMode","text":"<p>Returns the mode (locking or burning) of the NttManager. (Defined in ManagerBase.sol)</p> <pre><code>function getMode() public view returns (uint8)\n</code></pre> Returns <p><code>mode</code> uint8</p> <p>The mode of the NttManager (0 for LOCKING, 1 for BURNING).</p> <code>Mode</code> enum values <p><code>LOCKING</code> 0</p> <p>Tokens are locked on the source chain and unlocked on the destination chain.</p> <p><code>BURNING</code> 1</p> <p>Tokens are burned on the source chain and minted on the destination chain.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getmigratesimmutables","title":"getMigratesImmutables","text":"<p>Returns whether the contract migrates immutables. (Defined in Implementation.sol)</p> <pre><code>function getMigratesImmutables() external view returns (bool)\n</code></pre> Returns <p><code>migrates</code> bool</p> <p>Whether the contract migrates immutables.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getoutboundlimitparams","title":"getOutboundLimitParams","text":"<p>Returns the outbound rate limit parameters. (Defined in RateLimiter.sol)</p> <pre><code>function getOutboundLimitParams() public pure virtual returns (RateLimitParams memory)\n</code></pre> Returns <p><code>params</code> RateLimitParams struct</p> <p>The outbound rate limit parameters.</p> <code>RateLimitParams</code> struct <p><code>limit</code> TrimmedAmount</p> <p>Current rate limit value.</p> <p><code>currentCapacity</code> TrimmedAmount</p> <p>The current capacity left.</p> <p><code>lastTxTimestamp</code> uint64</p> <p>Timestamp of when capacity was previously consumed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getoutboundqueuedtransfer","title":"getOutboundQueuedTransfer","text":"<p>Returns queued transfer details for outbound queue. (Defined in RateLimiter.sol)</p> <pre><code>function getOutboundQueuedTransfer(uint64 queueSequence) external view returns (OutboundQueuedTransfer memory)\n</code></pre> Parameters <p><code>queueSequence</code> uint64</p> <p>The sequence number of the queued transfer.</p> Returns <p><code>transfer</code> OutboundQueuedTransfer struct</p> <p>The queued transfer details.</p> <code>OutboundQueuedTransfer</code> struct <p><code>recipient</code> bytes32</p> <p>The recipient of the transfer.</p> <p><code>refundAddress</code> bytes32</p> <p>The refund address for unused gas.</p> <p><code>amount</code> TrimmedAmount</p> <p>The amount of the transfer, trimmed.</p> <p><code>txTimestamp</code> uint64</p> <p>The timestamp of the transfer.</p> <p><code>recipientChain</code> uint16</p> <p>The chain of the recipient.</p> <p><code>sender</code> address</p> <p>The sender of the transfer.</p> <p><code>transceiverInstructions</code> bytes</p> <p>Additional instructions for the recipient chain.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getpeer","title":"getPeer","text":"<p>Returns peer information for a given chain ID. (Defined in NttManager.sol)</p> <pre><code>function getPeer(uint16 chainId_) external view returns (NttManagerPeer memory)\n</code></pre> Parameters <p><code>chainId_</code> uint16</p> <p>The chain ID of the peer.</p> Returns <p><code>peer</code> NttManagerPeer struct</p> <p>The peer information for the given chain ID.</p> <code>NttManagerPeer</code> struct <p><code>peerAddress</code> bytes32</p> <p>The address of the peer contract on the remote chain.</p> <p><code>tokenDecimals</code> uint8</p> <p>The number of decimals for the peer token.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#getthreshold","title":"getThreshold","text":"<p>Returns the number of transceivers that must attest to a message. (Defined in ManagerBase.sol)</p> <pre><code>function getThreshold() external view returns (uint8)\n</code></pre> Returns <p><code>threshold</code> uint8</p> <p>The number of attestations required for a message to be considered valid.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#gettransceiverinfo","title":"getTransceiverInfo","text":"<p>Returns the info for all enabled transceivers. (Defined in TransceiverRegistry.sol)</p> <pre><code>function getTransceiverInfo() external view returns (TransceiverInfo[] memory)\n</code></pre> Returns <p><code>info</code> TransceiverInfo[] memory</p> <p>An array of transceiver information structs.</p> <code>TransceiverInfo</code> struct <p><code>registered</code> bool</p> <p>Whether this transceiver is registered.</p> <p><code>enabled</code> bool</p> <p>Whether this transceiver is enabled.</p> <p><code>index</code> uint8</p> <p>Index of the transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#gettransceivers","title":"getTransceivers","text":"<p>Returns the enabled Transceiver contracts. (Defined in TransceiverRegistry.sol)</p> <pre><code>function getTransceivers() external pure returns (address[] memory result)\n</code></pre> Returns <p><code>result</code> address[] memory</p> <p>An array of enabled transceiver addresses.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#initialize","title":"initialize","text":"<p>Initializes the contract. (Defined in Implementation.sol)</p> <pre><code>function initialize() external payable\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ismessageapproved","title":"isMessageApproved","text":"<p>Checks if a message has been approved with at least the minimum threshold of attestations from distinct endpoints. (Defined in ManagerBase.sol)</p> <pre><code>function isMessageApproved(bytes32 digest) external view returns (bool)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The keccak-256 hash of the message.</p> Returns <p><code>approved</code> bool</p> <p>Whether the message has been approved.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ismessageexecuted","title":"isMessageExecuted","text":"<p>Checks if a message has been executed. (Defined in ManagerBase.sol)</p> <pre><code>function isMessageExecuted(bytes32 digest) external view returns (bool)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The keccak-256 hash of the message.</p> Returns <p><code>executed</code> bool</p> <p>Whether the message has been executed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ispaused","title":"isPaused","text":"<p>Returns true if the contract is paused, and false otherwise. (Defined in PausableUpgradeable.sol)</p> <pre><code>function isPaused() external view returns (bool)\n</code></pre> Returns <p><code>paused</code> bool</p> <p>Whether the contract is paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#messageattestations","title":"messageAttestations","text":"<p>Returns the number of attestations for a given message. (Defined in ManagerBase.sol)</p> <pre><code>function messageAttestations(bytes32 digest) external view returns (uint8)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The keccak-256 hash of the message.</p> Returns <p><code>count</code> uint8</p> <p>The number of attestations for the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#migrate","title":"migrate","text":"<p>Migrates the contract state to a new implementation. (Defined in Implementation.sol)</p> <pre><code>function migrate() external\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#nextmessagesequence","title":"nextMessageSequence","text":"<p>Returns the next message sequence. (Defined in ManagerBase.sol)</p> <pre><code>function nextMessageSequence() external view returns (uint64)\n</code></pre> Returns <p><code>sequence</code> uint64</p> <p>The next message sequence number.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#owner","title":"owner","text":"<p>Returns the address of the current owner. (Defined in OwnableUpgradeable.sol)</p> <pre><code>function owner() external view returns (address)\n</code></pre> Returns <p><code>owner</code> address</p> <p>The address of the current owner.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#pause","title":"pause","text":"<p>Pauses the manager. (Defined in ManagerBase.sol)</p> <pre><code>function pause() external\n</code></pre> <p>Emits: <code>Paused</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#pauser","title":"pauser","text":"<p>Returns the current pauser account address. (Defined in PausableUpgradeable.sol)</p> <pre><code>function pauser() external view returns (address)\n</code></pre> Returns <p><code>pauser</code> address</p> <p>The address of the current pauser.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#quotedeliveryprice","title":"quoteDeliveryPrice","text":"<p>Fetches the delivery price for a given recipient chain transfer. (Defined in ManagerBase.sol)</p> <pre><code>function quoteDeliveryPrice(\n    uint16 recipientChain, \n    bytes memory transceiverInstructions\n) public view returns (uint256[] memory, uint256)\n</code></pre> Parameters <p><code>recipientChain</code> uint16</p> <p>The chain ID of the recipient.</p> <p><code>transceiverInstructions</code> bytes</p> <p>The transceiver-specific instructions for the transfer.</p> Returns <p><code>deliveryQuotes</code> uint256[] memory</p> <p>An array of delivery quotes from each transceiver.</p> <p><code>totalPrice</code> uint256</p> <p>The total price for delivery across all transceivers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#removetransceiver","title":"removeTransceiver","text":"<p>Removes/disables a transceiver address in the registry of a given chain. (Defined in ManagerBase.sol)</p> <pre><code>function removeTransceiver(address transceiver) external\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The address of the transceiver contract to remove.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#setinboundlimit","title":"setInboundLimit","text":"<p>Set the inbound transfer limit for a specific chain. (Defined in NttManager.sol)</p> <pre><code>function setInboundLimit(uint256 limit, uint16 chainId_) external\n</code></pre> Parameters <p><code>limit</code> uint256</p> <p>The new inbound transfer limit.</p> <p><code>chainId_</code> uint16</p> <p>The chain ID to set the limit for.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#setoutboundlimit","title":"setOutboundLimit","text":"<p>Set the outbound transfer limit. (Defined in NttManager.sol)</p> <pre><code>function setOutboundLimit(uint256 limit) external\n</code></pre> Parameters <p><code>limit</code> uint256</p> <p>The new outbound transfer limit.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#setpeer","title":"setPeer","text":"<p>Set peer contract information for a specific chain; this is local manager configuration (no cross-chain message) and must be called on both chains. If either side is unset or mismatched, inbound verification or amount trimming fails (<code>InvalidPeer</code>, <code>InvalidPeerDecimals</code>). (Defined in NttManager.sol)</p> <p>Example</p> <ul> <li>On Chain A: Register Chain B as a peer with B\u2019s manager address (<code>peerContract</code>), B\u2019s token decimals (<code>decimals</code>), and the inbound limit from B \u2192 A (<code>inboundLimit</code>).</li> <li>On Chain B: Register Chain A the same way (A\u2019s manager, A\u2019s token decimals, inbound limit from A \u2192 B).</li> </ul> <pre><code>function setPeer(\n    uint16 peerChainId,\n    bytes32 peerContract,\n    uint8 decimals,\n    uint256 inboundLimit\n) external\n</code></pre> Parameters <p><code>peerChainId</code> uint16</p> <p>The chain ID of the peer.</p> <p><code>peerContract</code> bytes32</p> <p>The address of the peer contract.</p> <p><code>decimals</code> uint8</p> <p>The number of decimals for the peer token.</p> <p><code>inboundLimit</code> uint256</p> <p>The inbound transfer limit for this peer.</p> <p>Emits: <code>PeerUpdated</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#setthreshold","title":"setThreshold","text":"<p>Sets the threshold for the number of attestations required for a message to be considered valid. (Defined in ManagerBase.sol)</p> <pre><code>function setThreshold(uint8 threshold) external\n</code></pre> Parameters <p><code>threshold</code> uint8</p> <p>The number of attestations required.</p> <p>Emits: <code>ThresholdChanged</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#settransceiver","title":"setTransceiver","text":"<p>Sets the transceiver for the given chain. (Defined in ManagerBase.sol)</p> <pre><code>function setTransceiver(address transceiver) external\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The address of the transceiver contract.</p> <p>Emits: <code>TransceiverAdded</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#tokendecimals","title":"tokenDecimals","text":"<p>Returns the number of decimals for the token. (Defined in NttManager.sol)</p> <pre><code>function tokenDecimals() external view returns (uint8)\n</code></pre> Returns <p><code>decimals</code> uint8</p> <p>The number of decimals for the token.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transceiverattestedtomessage","title":"transceiverAttestedToMessage","text":"<p>Returns if the transceiver has attested to the message. (Defined in ManagerBase.sol)</p> <pre><code>function transceiverAttestedToMessage(bytes32 digest, uint8 index) external view returns (bool)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The keccak-256 hash of the message.</p> <p><code>index</code> uint8</p> <p>The index of the transceiver.</p> Returns <p><code>attested</code> bool</p> <p>Whether the transceiver has attested to the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transfer-basic","title":"transfer (basic)","text":"<p>Transfer tokens (simple version). (Defined in NttManager.sol)</p> <pre><code>function transfer(\n    uint256 amount, \n    uint16 recipientChain, \n    bytes32 recipient\n) external payable returns (uint64)\n</code></pre> Parameters <p><code>amount</code> uint256</p> <p>The amount of tokens to transfer.</p> <p><code>recipientChain</code> uint16</p> <p>The chain ID of the recipient.</p> <p><code>recipient</code> bytes32</p> <p>The recipient address on the destination chain.</p> Returns <p><code>sequence</code> uint64</p> <p>The sequence number of the transfer.</p> <p>Emits: <code>OutboundTransferRateLimited</code> (if rate limited), <code>TransferSent</code> (two variants, if successful)</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transfer-advanced","title":"transfer (advanced)","text":"<p>Transfer tokens (full version with additional parameters). (Defined in NttManager.sol)</p> <pre><code>function transfer(\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    bytes32 refundAddress,\n    bool shouldQueue,\n    bytes memory transceiverInstructions\n) external payable returns (uint64)\n</code></pre> Parameters <p><code>amount</code> uint256</p> <p>The amount of tokens to transfer.</p> <p><code>recipientChain</code> uint16</p> <p>The chain ID of the recipient.</p> <p><code>recipient</code> bytes32</p> <p>The recipient address on the destination chain.</p> <p><code>refundAddress</code> bytes32</p> <p>The address to refund unused gas to.</p> <p><code>shouldQueue</code> bool</p> <p>Whether to queue the transfer if rate limited.</p> <p><code>transceiverInstructions</code> bytes</p> <p>Additional instructions for transceivers.</p> Returns <p><code>sequence</code> uint64</p> <p>The sequence number of the transfer.</p> <p>Emits: <code>OutboundTransferRateLimited</code> (if rate limited), <code>TransferSent</code> (two variants, if successful)</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transferownership","title":"transferOwnership","text":"<p>Transfer ownership of the Manager and all Transceiver contracts. (Defined in ManagerBase.sol)</p> <pre><code>function transferOwnership(address newOwner) external\n</code></pre> Parameters <p><code>newOwner</code> address</p> <p>The address of the new owner.</p> <p>Emits: <code>OwnershipTransferred</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transferpausercapability","title":"transferPauserCapability","text":"<p>Transfers the ability to pause to a new account. (Defined in PausableOwnable.sol)</p> <pre><code>function transferPauserCapability(address newPauser) external\n</code></pre> Parameters <p><code>newPauser</code> address</p> <p>The address of the new pauser.</p> <p>Emits: <code>PauserTransferred</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#upgrade","title":"upgrade","text":"<p>Upgrades to a new manager implementation. (Defined in ManagerBase.sol)</p> <pre><code>function upgrade(address newImplementation) external\n</code></pre> Parameters <p><code>newImplementation</code> address</p> <p>The address of the new implementation contract.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#unpause","title":"unpause","text":"<p>Unpauses the manager. (Defined in ManagerBase.sol)</p> <pre><code>function unpause() external\n</code></pre> <p>Emits: <code>NotPaused</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#errors","title":"Errors","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#burnamountdifferentthanbalancediff","title":"BurnAmountDifferentThanBalanceDiff","text":"<p>Error when the burn amount differs from the balance difference. (Defined in NttManager.sol)</p> <pre><code>error BurnAmountDifferentThanBalanceDiff(uint256 burnAmount, uint256 balanceDiff);\n</code></pre> Parameters <p><code>burnAmount</code> uint256</p> <p>The amount that was burned.</p> <p><code>balanceDiff</code> uint256</p> <p>The actual balance difference.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#callernottransceiver","title":"CallerNotTransceiver","text":"<p>Error when the caller is not the transceiver. (Defined in TransceiverRegistry.sol)</p> <pre><code>error CallerNotTransceiver(address caller);\n</code></pre> Parameters <p><code>caller</code> address</p> <p>The address that is not a transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#cancellernotsender","title":"CancellerNotSender","text":"<p>Error when someone other than the original sender tries to cancel a queued outbound transfer. (Defined in NttManager.sol)</p> <pre><code>error CancellerNotSender(address canceller, address sender);\n</code></pre> Parameters <p><code>canceller</code> address</p> <p>The address attempting to cancel.</p> <p><code>sender</code> address</p> <p>The original sender's address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#capacitycannotexceedlimit","title":"CapacityCannotExceedLimit","text":"<p>The new capacity cannot exceed the limit. (Defined in RateLimiter.sol)</p> <pre><code>error CapacityCannotExceedLimit(TrimmedAmount newCurrentCapacity, TrimmedAmount newLimit);\n</code></pre> Parameters <p><code>newCurrentCapacity</code> TrimmedAmount</p> <p>The new current capacity value.</p> <code>TrimmedAmount</code> type <p><code>amount</code> uint64</p> <p>The amount value (64 bits).</p> <p><code>decimals</code> uint8</p> <p>The number of decimals (8 bits).</p> <p><code>newLimit</code> TrimmedAmount</p> <p>The new limit value.</p> <code>TrimmedAmount</code> type <p><code>amount</code> uint64</p> <p>The amount value (64 bits).</p> <p><code>decimals</code> uint8</p> <p>The number of decimals (8 bits).</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#deliverypaymenttoolow","title":"DeliveryPaymentTooLow","text":"<p>Payment for a transfer is too low. (Defined in ManagerBase.sol)</p> <pre><code>error DeliveryPaymentTooLow(uint256 requiredPayment, uint256 providedPayment);\n</code></pre> Parameters <p><code>requiredPayment</code> uint256</p> <p>The required payment amount.</p> <p><code>providedPayment</code> uint256</p> <p>The payment amount that was provided.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#disabledtransceiver","title":"DisabledTransceiver","text":"<p>Error when the transceiver is disabled. (Defined in TransceiverRegistry.sol)</p> <pre><code>error DisabledTransceiver(address transceiver);\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The disabled transceiver address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#inboundqueuedtransfernotfound","title":"InboundQueuedTransferNotFound","text":"<p>The inbound transfer is no longer queued. (Defined in RateLimiter.sol)</p> <pre><code>error InboundQueuedTransferNotFound(bytes32 digest);\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the queued transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#inboundqueuedtransferstillqueued","title":"InboundQueuedTransferStillQueued","text":"<p>The transfer is still queued. (Defined in RateLimiter.sol)</p> <pre><code>error InboundQueuedTransferStillQueued(bytes32 digest, uint256 transferTimestamp);\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the queued transfer.</p> <p><code>transferTimestamp</code> uint256</p> <p>The timestamp of the transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidinitialization","title":"InvalidInitialization","text":"<p>Error when the contract is in an invalid initialization state. (Defined in Initializable.sol)</p> <pre><code>error InvalidInitialization();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidmode","title":"InvalidMode","text":"<p>The mode is invalid (neither LOCKING nor BURNING). (Defined in NttManager.sol)</p> <pre><code>error InvalidMode(uint8 mode);\n</code></pre> Parameters <p><code>mode</code> uint8</p> <p>The invalid mode value.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpauser","title":"InvalidPauser","text":"<p>Error when the pauser is not a valid pauser account. (Defined in PausableUpgradeable.sol)</p> <pre><code>error InvalidPauser(address account);\n</code></pre> Parameters <p><code>account</code> address</p> <p>The invalid pauser account address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpeer","title":"InvalidPeer","text":"<p>The peer for the chain does not match the configuration. (Defined in NttManager.sol)</p> <pre><code>error InvalidPeer(uint16 chainId, bytes32 peerAddress);\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID of the peer.</p> <p><code>peerAddress</code> bytes32</p> <p>The peer address that doesn't match.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpeerchainidzero","title":"InvalidPeerChainIdZero","text":"<p>The peer chain ID cannot be zero. (Defined in NttManager.sol)</p> <pre><code>error InvalidPeerChainIdZero();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpeerdecimals","title":"InvalidPeerDecimals","text":"<p>The peer cannot have zero decimals. (Defined in NttManager.sol)</p> <pre><code>error InvalidPeerDecimals();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpeersamechainid","title":"InvalidPeerSameChainId","text":"<p>The peer cannot be on the same chain. (Defined in NttManager.sol)</p> <pre><code>error InvalidPeerSameChainId();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidpeerzeroaddress","title":"InvalidPeerZeroAddress","text":"<p>The peer cannot be the zero address. (Defined in NttManager.sol)</p> <pre><code>error InvalidPeerZeroAddress();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidrecipient","title":"InvalidRecipient","text":"<p>Error when the recipient is invalid. (Defined in NttManager.sol)</p> <pre><code>error InvalidRecipient();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidrefundaddress","title":"InvalidRefundAddress","text":"<p>Error when the refund address is invalid. (Defined in NttManager.sol)</p> <pre><code>error InvalidRefundAddress();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidtargetchain","title":"InvalidTargetChain","text":"<p>Error when trying to execute a message on an unintended target chain. (Defined in NttManager.sol)</p> <pre><code>error InvalidTargetChain(uint16 targetChain, uint16 thisChain);\n</code></pre> Parameters <p><code>targetChain</code> uint16</p> <p>The target chain ID from the message.</p> <p><code>thisChain</code> uint16</p> <p>The current chain ID.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#invalidtransceiverzeroaddress","title":"InvalidTransceiverZeroAddress","text":"<p>Error when the transceiver is the zero address. (Defined in TransceiverRegistry.sol)</p> <pre><code>error InvalidTransceiverZeroAddress();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#messagenotapproved","title":"MessageNotApproved","text":"<p>Error when the message is not approved. (Defined in ManagerBase.sol)</p> <pre><code>error MessageNotApproved(bytes32 msgHash);\n</code></pre> Parameters <p><code>msgHash</code> bytes32</p> <p>The hash of the message that is not approved.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#noenabledtransceivers","title":"NoEnabledTransceivers","text":"<p>There are no transceivers enabled with the Manager. (Defined in ManagerBase.sol)</p> <pre><code>error NoEnabledTransceivers();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#nonregisteredtransceiver","title":"NonRegisteredTransceiver","text":"<p>Error when attempting to remove a transceiver that is not registered. (Defined in TransceiverRegistry.sol)</p> <pre><code>error NonRegisteredTransceiver(address transceiver);\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The non-registered transceiver address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#notenoughcapacity","title":"NotEnoughCapacity","text":"<p>Not enough capacity to send the transfer. (Defined in RateLimiter.sol)</p> <pre><code>error NotEnoughCapacity(uint256 currentCapacity, uint256 amount);\n</code></pre> Parameters <p><code>currentCapacity</code> uint256</p> <p>The current available capacity.</p> <p><code>amount</code> uint256</p> <p>The requested transfer amount.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#notinitializing","title":"NotInitializing","text":"<p>Error when a function can only be called during initialization. (Defined in Initializable.sol)</p> <pre><code>error NotInitializing();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#notmigrating","title":"NotMigrating","text":"<p>Error when a function can only be called during migration. (Defined in Implementation.sol)</p> <pre><code>error NotMigrating();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#notimplemented","title":"NotImplemented","text":"<p>Feature is not implemented. (Defined in INttManager.sol)</p> <pre><code>error NotImplemented();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#onlydelegatecall","title":"OnlyDelegateCall","text":"<p>Error when a function can only be called via delegate call. (Defined in Implementation.sol)</p> <pre><code>error OnlyDelegateCall();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ownableinvalidowner","title":"OwnableInvalidOwner","text":"<p>Error when the owner is not a valid owner account. (Defined in OwnableUpgradeable.sol)</p> <pre><code>error OwnableInvalidOwner(address owner);\n</code></pre> Parameters <p><code>owner</code> address</p> <p>The invalid owner address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#ownableunauthorizedaccount","title":"OwnableUnauthorizedAccount","text":"<p>Error when the caller account is not authorized to perform an operation. (Defined in OwnableUpgradeable.sol)</p> <pre><code>error OwnableUnauthorizedAccount(address account);\n</code></pre> Parameters <p><code>account</code> address</p> <p>The unauthorized account address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundqueuedtransfernotfound","title":"OutboundQueuedTransferNotFound","text":"<p>Outbound transfer is no longer queued. (Defined in RateLimiter.sol)</p> <pre><code>error OutboundQueuedTransferNotFound(uint64 queueSequence);\n</code></pre> Parameters <p><code>queueSequence</code> uint64</p> <p>The sequence number of the queued transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#outboundqueuedtransferstillqueued","title":"OutboundQueuedTransferStillQueued","text":"<p>Cannot complete the outbound transfer. The transfer is still queued. (Defined in RateLimiter.sol)</p> <pre><code>error OutboundQueuedTransferStillQueued(uint64 queueSequence, uint256 transferTimestamp);\n</code></pre> Parameters <p><code>queueSequence</code> uint64</p> <p>The sequence number of the queued transfer.</p> <p><code>transferTimestamp</code> uint256</p> <p>The timestamp of the transfer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#peernotregistered","title":"PeerNotRegistered","text":"<p>Error when the manager doesn't have a peer registered for the destination chain. (Defined in ManagerBase.sol)</p> <pre><code>error PeerNotRegistered(uint16 chainId);\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID for which no peer is registered.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#refundfailed","title":"RefundFailed","text":"<p>Error when the refund to the sender fails. (Defined in ManagerBase.sol)</p> <pre><code>error RefundFailed(uint256 refundAmount);\n</code></pre> Parameters <p><code>refundAmount</code> uint256</p> <p>The amount that failed to be refunded.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#requirecontractisnotpaused","title":"RequireContractIsNotPaused","text":"<p>Error when a function requires the contract to not be paused. (Defined in PausableUpgradeable.sol)</p> <pre><code>error RequireContractIsNotPaused();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#requirecontractispaused","title":"RequireContractIsPaused","text":"<p>Error when a function requires the contract to be paused. (Defined in PausableUpgradeable.sol)</p> <pre><code>error RequireContractIsPaused();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#retrievedincorrectregisteredtransceivers","title":"RetrievedIncorrectRegisteredTransceivers","text":"<p>Retrieved an incorrect number of registered transceivers. (Defined in ManagerBase.sol)</p> <pre><code>error RetrievedIncorrectRegisteredTransceivers(uint256 retrieved, uint256 registered);\n</code></pre> Parameters <p><code>retrieved</code> uint256</p> <p>The number of transceivers retrieved.</p> <p><code>registered</code> uint256</p> <p>The number of transceivers that should be registered.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#staticcallfailed","title":"StaticcallFailed","text":"<p>Staticcall reverted. (Defined in NttManager.sol)</p> <pre><code>error StaticcallFailed();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#thresholdtoohigh","title":"ThresholdTooHigh","text":"<p>The threshold for transceiver attestations is too high. (Defined in ManagerBase.sol)</p> <pre><code>error ThresholdTooHigh(uint256 threshold, uint256 transceivers);\n</code></pre> Parameters <p><code>threshold</code> uint256</p> <p>The requested threshold value.</p> <p><code>transceivers</code> uint256</p> <p>The number of available transceivers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#toomanytransceivers","title":"TooManyTransceivers","text":"<p>Error when the number of registered transceivers exceeds 64. (Defined in TransceiverRegistry.sol)</p> <pre><code>error TooManyTransceivers();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transceiveralreadyattestedtomessage","title":"TransceiverAlreadyAttestedToMessage","text":"<p>Error when the transceiver already attested to the message. (Defined in ManagerBase.sol)</p> <pre><code>error TransceiverAlreadyAttestedToMessage(bytes32 nttManagerMessageHash);\n</code></pre> Parameters <p><code>nttManagerMessageHash</code> bytes32</p> <p>The hash of the NTT Manager message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transceiveralreadyenabled","title":"TransceiverAlreadyEnabled","text":"<p>Error when attempting to enable a transceiver that is already enabled. (Defined in TransceiverRegistry.sol)</p> <pre><code>error TransceiverAlreadyEnabled(address transceiver);\n</code></pre> Parameters <p><code>transceiver</code> address</p> <p>The already enabled transceiver address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transferamounthasdust","title":"TransferAmountHasDust","text":"<p>The transfer has some dust. (Defined in NttManager.sol)</p> <pre><code>error TransferAmountHasDust(uint256 amount, uint256 dust);\n</code></pre> Parameters <p><code>amount</code> uint256</p> <p>The transfer amount.</p> <p><code>dust</code> uint256</p> <p>The dust amount.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#undefinedratelimiting","title":"UndefinedRateLimiting","text":"<p>If the rate limiting behavior isn't explicitly defined in the constructor. (Defined in IRateLimiter.sol)</p> <pre><code>error UndefinedRateLimiting();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#unexpecteddeployer","title":"UnexpectedDeployer","text":"<p>The caller is not the deployer. (Defined in NttManager.sol)</p> <pre><code>error UnexpectedDeployer(address expectedOwner, address owner);\n</code></pre> Parameters <p><code>expectedOwner</code> address</p> <p>The expected owner address.</p> <p><code>owner</code> address</p> <p>The actual owner address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#unexpectedmsgvalue","title":"UnexpectedMsgValue","text":"<p>An unexpected msg.value was passed with the call. (Defined in NttManager.sol)</p> <pre><code>error UnexpectedMsgValue();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#zeroamount","title":"ZeroAmount","text":"<p>Error when the transfer amount is zero. (Defined in NttManager.sol)</p> <pre><code>error ZeroAmount();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#zerothreshold","title":"ZeroThreshold","text":"<p>The number of thresholds should not be zero. (Defined in ManagerBase.sol)</p> <pre><code>error ZeroThreshold();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#transferalreadycompleted","title":"TransferAlreadyCompleted","text":"<p>Thrown when trying to complete an inbound transfer that was already processed. (Defined in NttManager.sol)</p> <pre><code>error TransferAlreadyCompleted(bytes32 digest);\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the transfer message that has already been completed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/evm/#unexpectedrecipientnttmanageraddress","title":"UnexpectedRecipientNttManagerAddress","text":"<p>Thrown when the recipient NTT Manager address in the message does not match this contract. (Defined in NttManager.sol)</p> <pre><code>error UnexpectedRecipientNttManagerAddress(bytes32 recipientNttManagerAddress);\n</code></pre> Parameters <p><code>recipientNttManagerAddress</code> bytes32</p> <p>The unexpected NTT Manager address from the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/","title":"NTT Manager Program Reference (Solana)","text":"<p>The NTT Manager program is responsible for managing the token and associated transceivers on Solana. It enables cross-chain token transfers, peer registration, rate limiting, and message attestation for the NTT protocol.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#structure-overview","title":"Structure Overview","text":"<p>The NTT Manager system on Solana is implemented as a single Anchor program. The program provides comprehensive token transfer management capabilities, supports both burning and locking modes, integrates with Solana's Token Program (including Token-2022), and provides rate limiting and security features.</p> <pre><code>NTT Manager Program\n\u251c\u2500\u2500 Core Instructions\n\u251c\u2500\u2500 Administrative Instructions\n\u251c\u2500\u2500 Rate Limiting\n\u251c\u2500\u2500 Transceiver Management\n\u251c\u2500\u2500 Peer Management\n\u2514\u2500\u2500 Wormhole Integration\n</code></pre> <p>Key Components:</p> <ul> <li>NttManager Program: The primary Solana program that coordinates token transfers, transceiver interactions, and peer communication for the NTT protocol.</li> <li>Core Instructions: Handles token transfer instructions like transfer, redeem, and release.</li> <li>Administrative Instructions: Manages ownership, configuration updates, and emergency pause functionality.</li> <li>Rate Limiting: Implements configurable inbound and outbound transfer limits with time-based capacity replenishment.</li> <li>Transceiver Management: Maintains a registry of enabled transceivers and allows dynamic registration/deregistration.</li> <li>Peer Management: Manages authorized cross-chain peers.</li> <li>Wormhole Integration: Built-in transceiver that connects the program to Wormhole's messaging layer.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#state-accounts","title":"State Accounts","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#core-configuration","title":"Core Configuration","text":"<ul> <li><code>Config</code> account (PDA: 'config'): Primary program configuration: owner/pending_owner, managed <code>mint</code>, <code>token_program</code> (SPL Token or Token-2022), mode (burn vs. lock), chain_id, <code>next_transceiver_id</code>, attestation <code>threshold</code>, <code>enabled_transceivers</code> bitmap, <code>paused</code>, and <code>custody</code> (lock mode).</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#cross-chain-peers-and-governance-thresholds","title":"Cross-chain Peers and Governance Thresholds","text":"<ul> <li><code>NttManagerPeer</code> account (PDA: 'peer'): Per-chain peer manager metadata\u2014<code>address</code> (wormhole-formatted) and <code>token_decimals</code>. Stored in a PDA seeded by chain id.</li> <li><code>ValidatedTransceiverMessage</code> account (PDA: 'transceiver_message'): Validated inbound transceiver message container (<code>from_chain</code>, <code>message</code>), with helpers for discriminator checks and parsing.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#rate-limiting-and-queues","title":"Rate Limiting and Queues","text":"<ul> <li><code>InboxRateLimit</code> account (PDA: 'inbox_rate_limit'): Inbound rate-limit state (per peer chain), wrapping <code>RateLimitState</code> (<code>limit</code>, <code>capacity_at_last_tx</code>, <code>last_tx_timestamp</code>).</li> <li><code>OutboxRateLimit</code> account (PDA: 'outbox_rate_limit'): Global outbound rate-limit state, wrapping <code>RateLimitState</code> (<code>limit</code>, <code>capacity_at_last_tx</code>, <code>last_tx_timestamp</code>).</li> <li><code>InboxItem</code> account (PDA: 'inbox_item'): Per-inbound message item with <code>amount</code>, <code>recipient_address</code>, <code>votes</code> (bitmap), and <code>release_status</code> state machine (<code>NotApproved</code> \u2192 <code>ReleaseAfter(ts)</code> \u2192 <code>Released</code>).</li> <li><code>OutboxItem</code> account (PDA: 'outbox_item'): Per-outbound transfer item tracking delivery/release state (<code>amount</code>, <code>sender</code>, <code>recipient</code> fields and release metadata).</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#authority-and-admin-flow","title":"Authority and Admin Flow","text":"<ul> <li><code>PendingTokenAuthority</code> account (PDA: 'pending_token_authority'): Tracks pending mint authority transitions and the <code>rent_payer</code>.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#pdas","title":"PDAs","text":"<ul> <li><code>TOKEN_AUTHORITY</code> PDA (seed: 'token_authority'): Program-derived token authority used by the burn/lock flows. (PDA seed constant in <code>lib.rs</code>.)</li> <li><code>SESSION_AUTHORITY</code> PDA (seed: 'session_authority'): Per-transfer session authority used by <code>transfer_*</code> instructions (user approves this PDA to spend, then it burns/locks). (Seed constant and rationale in <code>lib.rs</code> comments.)</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#instructions","title":"Instructions","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#accept_token_authority","title":"accept_token_authority","text":"<p>Accepts token authority from a pending token authority transfer. (Defined in NTT Manager)</p> <pre><code>pub fn accept_token_authority(ctx: Context&lt;AcceptTokenAuthority&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>token_authority</code> Signer</p> <p>The new token authority accepting the transfer.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#accept_token_authority_from_multisig","title":"accept_token_authority_from_multisig","text":"<p>Accepts token authority from a multisig pending token authority transfer. (Defined in NTT Manager)</p> <pre><code>pub fn accept_token_authority_from_multisig(\n    ctx: Context&lt;AcceptTokenAuthorityFromMultisig&gt;\n) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>multisig</code> Account&lt;Multisig&gt;</p> <p>The multisig account acting as the new token authority.</p> <p><code>transaction</code> Account&lt;Transaction&gt;</p> <p>The multisig transaction account.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#broadcast_wormhole_id","title":"broadcast_wormhole_id","text":"<p>Broadcasts the NTT Manager ID via Wormhole. (Defined in example-native-token-transfers)</p> <pre><code>pub fn broadcast_wormhole_id(ctx: Context&lt;BroadcastId&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for transaction fees.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>wormhole_bridge</code> mut Account&lt;BridgeData&gt;</p> <p>The Wormhole bridge data account.</p> <p><code>wormhole_message</code> mut Signer</p> <p>The Wormhole message account.</p> <p><code>wormhole_emitter</code> Account&lt;EmitterData&gt;</p> <p>The Wormhole emitter account.</p> <p><code>wormhole_sequence</code> mut Account&lt;SequenceData&gt;</p> <p>The Wormhole sequence account.</p> <p><code>wormhole_fee_collector</code> mut Account&lt;FeeCollectorData&gt;</p> <p>The Wormhole fee collector account.</p> <p><code>clock</code> Sysvar&lt;Clock&gt;</p> <p>The clock sysvar.</p> <p><code>rent</code> Sysvar&lt;Rent&gt;</p> <p>The rent sysvar.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p> <p><code>wormhole_program</code> Program&lt;WormholeCoreBridge&gt;</p> <p>The Wormhole core bridge program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#broadcast_wormhole_peer","title":"broadcast_wormhole_peer","text":"<p>Broadcasts peer information via Wormhole. (Defined in example-native-token-transfers)</p> <pre><code>pub fn broadcast_wormhole_peer(\n    ctx: Context&lt;BroadcastPeer&gt;,\n    args: BroadcastPeerArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> BroadcastPeerArgs</p> <p>The broadcast peer arguments.</p> <code>BroadcastPeerArgs</code> type <p><code>chain_id</code> ChainId</p> <p>The chain ID to broadcast peer information for.</p> Accounts <p>Similar to <code>broadcast_wormhole_id</code> with additional peer-specific accounts.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#claim_ownership","title":"claim_ownership","text":"<p>Claims ownership of the NTT Manager after a transfer has been initiated. (Defined in example-native-token-transfers)</p> <pre><code>pub fn claim_ownership(ctx: Context&lt;ClaimOwnership&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>new_owner</code> Signer</p> <p>The new owner claiming ownership.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#claim_token_authority","title":"claim_token_authority","text":"<p>Claims token authority after a transfer has been initiated. (Defined in example-native-token-transfers)</p> <pre><code>pub fn claim_token_authority(ctx: Context&lt;ClaimTokenAuthority&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>token_authority</code> Signer</p> <p>The new token authority claiming authority.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#claim_token_authority_to_multisig","title":"claim_token_authority_to_multisig","text":"<p>Claims token authority to a multisig account. (Defined in example-native-token-transfers)</p> <pre><code>pub fn claim_token_authority_to_multisig(\n    ctx: Context&lt;ClaimTokenAuthorityToMultisig&gt;\n) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>multisig</code> Account&lt;Multisig&gt;</p> <p>The multisig account claiming token authority.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#deregister_transceiver","title":"deregister_transceiver","text":"<p>Removes a transceiver from the enabled set. (Defined in example-native-token-transfers)</p> <pre><code>pub fn deregister_transceiver(ctx: Context&lt;DeregisterTransceiver&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>registered_transceiver</code> mut Account&lt;RegisteredTransceiver&gt;</p> <p>The registered transceiver account to deregister.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#initialize","title":"initialize","text":"<p>Initializes the NTT Manager program with configuration parameters. (Defined in example-native-token-transfers)</p> <pre><code>pub fn initialize(ctx: Context&lt;Initialize&gt;, args: InitializeArgs) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> InitializeArgs</p> <p>The initialization arguments.</p> <code>InitializeArgs</code> type <p><code>chain_id</code> u16</p> <p>The chain ID for this deployment.</p> <p><code>limit</code> u64</p> <p>The initial rate limit for transfers.</p> <p><code>mode</code> Mode</p> <p>The mode (Burning or Locking) for token handling.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for initialization.</p> <p><code>deployer</code> Signer</p> <p>The program deployer (must be upgrade authority).</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account to initialize.</p> <p><code>mint</code> InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>rate_limit</code> mut Account&lt;OutboxRateLimit&gt;</p> <p>The outbound rate limit account.</p> <p><code>token_authority</code> UncheckedAccount</p> <p>The token authority account.</p> <p><code>custody</code> mut InterfaceAccount&lt;TokenAccount&gt;</p> <p>The custody account (for locking mode).</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p> <p><code>associated_token_program</code> Program&lt;AssociatedToken&gt;</p> <p>The associated token program.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#initialize_lut","title":"initialize_lut","text":"<p>Initializes a lookup table for the program. (Defined in example-native-token-transfers)</p> <pre><code>pub fn initialize_lut(ctx: Context&lt;InitializeLUT&gt;, recent_slot: u64) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>recent_slot</code> u64</p> <p>A recent slot number for lookup table initialization.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for lookup table creation.</p> <p><code>lut</code> mut UncheckedAccount</p> <p>The lookup table account to initialize.</p> <p><code>lut_authority</code> UncheckedAccount</p> <p>The lookup table authority.</p> <p><code>address_lookup_table_program</code> Program&lt;AddressLookupTableProgram&gt;</p> <p>The address lookup table program.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#mark_outbox_item_as_released","title":"mark_outbox_item_as_released","text":"<p>Marks an outbox item as released by a specific transceiver. (Defined in example-native-token-transfers)</p> <pre><code>pub fn mark_outbox_item_as_released(ctx: Context&lt;MarkOutboxItemAsReleased&gt;) -&gt; Result&lt;bool&gt;\n</code></pre> Returns <p><code>released</code> bool</p> <p>Whether the item was successfully marked as released.</p> Accounts <p><code>transceiver</code> Signer</p> <p>The transceiver marking the item as released.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>outbox_item</code> mut Account&lt;OutboxItem&gt;</p> <p>The outbox item to mark as released.</p> <p><code>registered_transceiver</code> Account&lt;RegisteredTransceiver&gt;</p> <p>The registered transceiver account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#receive_wormhole_message","title":"receive_wormhole_message","text":"<p>Receives and processes a message from Wormhole. (Defined in example-native-token-transfers)</p> <pre><code>pub fn receive_wormhole_message(ctx: Context&lt;ReceiveMessage&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for message processing.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>peer</code> Account&lt;NttManagerPeer&gt;</p> <p>The peer account for the sending chain.</p> <p><code>inbox_item</code> mut Account&lt;InboxItem&gt;</p> <p>The inbox item account to create.</p> <p><code>inbox_rate_limit</code> mut Account&lt;InboxRateLimit&gt;</p> <p>The inbound rate limit account.</p> <p><code>vaa</code> Account&lt;PostedVaa&lt;TransceiverMessage&gt;&gt;</p> <p>The verified VAA containing the message.</p> <p><code>transceiver_message</code> mut UncheckedAccount</p> <p>The transceiver message account.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#redeem","title":"redeem","text":"<p>Redeems a transfer by consuming a verified message. (Defined in example-native-token-transfers)</p> <pre><code>pub fn redeem(ctx: Context&lt;Redeem&gt;, args: RedeemArgs) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> RedeemArgs</p> <p>The redeem arguments (currently empty struct).</p> Accounts <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>transceiver_message</code> Account&lt;ValidatedTransceiverMessage&lt;NativeTokenTransfer&gt;&gt;</p> <p>The validated transceiver message.</p> <p><code>inbox_item</code> mut Account&lt;InboxItem&gt;</p> <p>The inbox item being redeemed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#register_transceiver","title":"register_transceiver","text":"<p>Registers a new transceiver with the NTT Manager. (Defined in example-native-token-transfers)</p> <pre><code>pub fn register_transceiver(ctx: Context&lt;RegisterTransceiver&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for registration.</p> <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>registered_transceiver</code> mut Account&lt;RegisteredTransceiver&gt;</p> <p>The registered transceiver account to create.</p> <p><code>transceiver</code> UncheckedAccount</p> <p>The transceiver program to register.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#release_inbound_mint","title":"release_inbound_mint","text":"<p>Releases an inbound transfer by minting tokens to the recipient. (Defined in example-native-token-transfers)</p> <pre><code>pub fn release_inbound_mint(\n    ctx: Context&lt;ReleaseInboundMint&gt;,\n    args: ReleaseInboundArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> ReleaseInboundArgs</p> <p>The release arguments.</p> <code>ReleaseInboundArgs</code> type <p><code>revert_on_delay</code> bool</p> <p>Whether to revert if the transfer is still in delay.</p> Accounts <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>inbox_item</code> mut Account&lt;InboxItem&gt;</p> <p>The inbox item to release.</p> <p><code>inbox_rate_limit</code> mut Account&lt;InboxRateLimit&gt;</p> <p>The inbound rate limit account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>recipient_token</code> mut InterfaceAccount&lt;TokenAccount&gt;</p> <p>The recipient's token account.</p> <p><code>token_authority</code> UncheckedAccount</p> <p>The token authority account.</p> <p><code>custody</code> mut InterfaceAccount&lt;TokenAccount&gt;</p> <p>The custody account.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#release_inbound_unlock","title":"release_inbound_unlock","text":"<p>Releases an inbound transfer by unlocking tokens from custody. (Defined in example-native-token-transfers)</p> <pre><code>pub fn release_inbound_unlock(\n    ctx: Context&lt;ReleaseInboundUnlock&gt;,\n    args: ReleaseInboundArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> ReleaseInboundArgs</p> <p>The release arguments.</p> <code>ReleaseInboundArgs</code> type <p><code>revert_on_delay</code> bool</p> <p>Whether to revert if the transfer is still in delay.</p> Accounts <p>Similar to <code>release_inbound_mint</code> but unlocks tokens from custody instead of minting.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#release_wormhole_outbound","title":"release_wormhole_outbound","text":"<p>Releases an outbound transfer via Wormhole. (Defined in example-native-token-transfers)</p> <pre><code>pub fn release_wormhole_outbound(\n    ctx: Context&lt;ReleaseOutbound&gt;,\n    args: ReleaseOutboundArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> ReleaseOutboundArgs</p> <p>The release outbound arguments.</p> <code>ReleaseOutboundArgs</code> type <p><code>revert_on_delay</code> bool</p> <p>If <code>true</code>, revert when the rate limiter would delay release; if <code>false</code>, return early without error.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The fee payer.</p> <p><code>config</code> NotPausedConfig</p> <p>Wrapper enforcing the Manager is not paused; derefs to <code>Account&lt;Config&gt;</code>.</p> <p><code>outbox_item</code> mut Account&lt;OutboxItem&gt;</p> <p>The outbound item to release; must not already be marked released by this transceiver.</p> <p><code>transceiver</code> Account&lt;RegisteredTransceiver&gt;</p> <p>Must match this program ID and be enabled in <code>config</code>.</p> <p><code>wormhole_message</code> mut UncheckedAccount</p> <p>PDA seeded as <code>[b\"message\", outbox_item.key()]</code>; initialized/written by Wormhole Core.</p> <p><code>emitter</code> UncheckedAccount</p> <p>PDA seeded as <code>[b\"emitter\"]</code>; used as the Wormhole emitter.</p> <p><code>wormhole</code> WormholeAccounts</p> <p>Bundle of Wormhole Core accounts:</p> <ul> <li><code>bridge: Account&lt;wormhole::BridgeData&gt;</code></li> <li><code>fee_collector: UncheckedAccount</code></li> <li><code>sequence: UncheckedAccount</code></li> <li><code>program: Program&lt;wormhole::program::Wormhole&gt;</code></li> <li><code>system_program: Program&lt;System&gt;</code></li> <li><code>clock: Sysvar&lt;Clock&gt;</code></li> <li><code>rent: Sysvar&lt;Rent&gt;</code></li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#revert_token_authority","title":"revert_token_authority","text":"<p>Reverts a pending token authority change. (Defined in example-native-token-transfers)</p> <pre><code>pub fn revert_token_authority(ctx: Context&lt;RevertTokenAuthority&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_inbound_limit","title":"set_inbound_limit","text":"<p>Sets the inbound transfer rate limit. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_inbound_limit(\n    ctx: Context&lt;SetInboundLimit&gt;,\n    args: SetInboundLimitArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> SetInboundLimitArgs</p> <p>The inbound limit arguments.</p> <code>SetInboundLimitArgs</code> type <p><code>limit</code> u64</p> <p>The new inbound rate limit.</p> <p><code>chain_id</code> ChainId</p> <p>The chain ID to set the limit for.</p> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>rate_limit</code> mut Account&lt;InboxRateLimit&gt;</p> <p>The inbound rate limit account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_outbound_limit","title":"set_outbound_limit","text":"<p>Sets the outbound transfer rate limit. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_outbound_limit(\n    ctx: Context&lt;SetOutboundLimit&gt;,\n    args: SetOutboundLimitArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> SetOutboundLimitArgs</p> <p>The outbound limit arguments.</p> <code>SetOutboundLimitArgs</code> type <p><code>limit</code> u64</p> <p>The new outbound rate limit.</p> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>rate_limit</code> mut Account&lt;OutboxRateLimit&gt;</p> <p>The outbound rate limit account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_paused","title":"set_paused","text":"<p>Sets the pause state of the program. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_paused(ctx: Context&lt;SetPaused&gt;, pause: bool) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>pause</code> bool</p> <p>Whether to pause or unpause the program.</p> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_peer","title":"set_peer","text":"<p>Sets a peer NTT Manager on another chain; this is local program configuration (no cross-chain message) and must be executed on both chains. If either side is unset or mismatched, messages from that peer will fail verification on receive. (Defined in example-native-token-transfers)</p> <p>Example</p> <ul> <li>On Chain A: Register Chain B with B\u2019s manager address (address); this creates/updates the peer account (PDA \"peer\") and the inbound rate-limit account for B.</li> <li>On Chain B: Register Chain A the same way.</li> </ul> <pre><code>pub fn set_peer(ctx: Context&lt;SetPeer&gt;, args: SetPeerArgs) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> SetPeerArgs</p> <p>The peer arguments.</p> <code>SetPeerArgs</code> type <p><code>chain_id</code> ChainId</p> <p>The chain ID of the peer.</p> <p><code>address</code> [u8; 32]</p> <p>The address of the peer NTT Manager.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for peer registration.</p> <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>peer</code> mut Account&lt;NttManagerPeer&gt;</p> <p>The peer account to create or update.</p> <p><code>inbox_rate_limit</code> mut Account&lt;InboxRateLimit&gt;</p> <p>The inbound rate limit account for the peer.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_threshold","title":"set_threshold","text":"<p>Sets the threshold number of transceivers required for message approval. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_threshold(ctx: Context&lt;SetThreshold&gt;, threshold: u8) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>threshold</code> u8</p> <p>The new threshold value.</p> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_token_authority","title":"set_token_authority","text":"<p>Sets the token authority using a checked transfer process. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_token_authority(ctx: Context&lt;SetTokenAuthorityChecked&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>new_token_authority</code> UncheckedAccount</p> <p>The new token authority account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_token_authority_one_step_unchecked","title":"set_token_authority_one_step_unchecked","text":"<p>Sets the token authority in a single step without checks. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_token_authority_one_step_unchecked(\n    ctx: Context&lt;SetTokenAuthorityUnchecked&gt;\n) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>new_token_authority</code> UncheckedAccount</p> <p>The new token authority account.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#set_wormhole_peer","title":"set_wormhole_peer","text":"<p>Sets a Wormhole transceiver peer on another chain. (Defined in example-native-token-transfers)</p> <pre><code>pub fn set_wormhole_peer(\n    ctx: Context&lt;SetTransceiverPeer&gt;,\n    args: SetTransceiverPeerArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> SetTransceiverPeerArgs</p> <p>The transceiver peer arguments.</p> <code>SetTransceiverPeerArgs</code> type <p><code>chain_id</code> ChainId</p> <p>The chain ID of the peer.</p> <p><code>address</code> [u8; 32]</p> <p>The address of the peer transceiver.</p> Accounts <p><code>owner</code> Signer</p> <p>The program owner.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>peer</code> mut Account&lt;WormholeTransceiverPeer&gt;</p> <p>The Wormhole transceiver peer account.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfer_burn","title":"transfer_burn","text":"<p>Initiates an outbound transfer by burning tokens. (Defined in example-native-token-transfers)</p> <pre><code>pub fn transfer_burn(\n    ctx: Context&lt;TransferBurn&gt;,\n    args: TransferArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> TransferArgs</p> <p>The transfer arguments.</p> <code>TransferArgs</code> type <p><code>amount</code> u64</p> <p>The amount of tokens to transfer.</p> <p><code>recipient_chain</code> ChainId</p> <p>The recipient chain ID.</p> <p><code>recipient_address</code> [u8; 32]</p> <p>The recipient address on the target chain.</p> <p><code>should_queue</code> bool</p> <p>Whether to queue the transfer if rate limited.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for the transfer.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>from</code> mut InterfaceAccount&lt;TokenAccount&gt;</p> <p>The sender's token account.</p> <p><code>mint</code> mut InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>outbox_item</code> mut Account&lt;OutboxItem&gt;</p> <p>The outbox item account to create.</p> <p><code>outbox_rate_limit</code> mut Account&lt;OutboxRateLimit&gt;</p> <p>The outbound rate limit account.</p> <p><code>session_authority</code> UncheckedAccount</p> <p>The session authority for the transfer.</p> <p><code>token_authority</code> UncheckedAccount</p> <p>The token authority account.</p> <p><code>token_program</code> Interface&lt;TokenInterface&gt;</p> <p>The token program interface.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfer_lock","title":"transfer_lock","text":"<p>Initiates an outbound transfer by locking tokens in custody. (Defined in example-native-token-transfers)</p> <pre><code>pub fn transfer_lock(\n    ctx: Context&lt;TransferLock&gt;,\n    args: TransferArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> TransferArgs</p> <p>The transfer arguments.</p> <code>TransferArgs</code> type <p><code>amount</code> u64</p> <p>The amount of tokens to transfer.</p> <p><code>recipient_chain</code> ChainId</p> <p>The recipient chain ID.</p> <p><code>recipient_address</code> [u8; 32]</p> <p>The recipient address on the target chain.</p> <p><code>should_queue</code> bool</p> <p>Whether to queue the transfer if rate limited.</p> Accounts <p>Similar to <code>transfer_burn</code> but locks tokens in custody instead of burning.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfer_ownership","title":"transfer_ownership","text":"<p>Initiates a two-step ownership transfer process. (Defined in example-native-token-transfers)</p> <pre><code>pub fn transfer_ownership(ctx: Context&lt;TransferOwnership&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The current program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>new_owner</code> UncheckedAccount</p> <p>The proposed new owner.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfer_ownership_one_step_unchecked","title":"transfer_ownership_one_step_unchecked","text":"<p>Transfers ownership in a single step without verification. (Defined in example-native-token-transfers)</p> <pre><code>pub fn transfer_ownership_one_step_unchecked(ctx: Context&lt;TransferOwnership&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>owner</code> Signer</p> <p>The current program owner.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The program configuration account.</p> <p><code>new_owner</code> UncheckedAccount</p> <p>The new owner.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#version","title":"version","text":"<p>Returns the program version string. (Defined in example-native-token-transfers)</p> <pre><code>pub fn version(_ctx: Context&lt;Version&gt;) -&gt; Result&lt;String&gt;\n</code></pre> Returns <p><code>version</code> String</p> <p>The version string (\"3.0.0\").</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#data-structures","title":"Data Structures","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#config","title":"Config","text":"<p>The main program configuration account. (Defined in config.rs)</p> <pre><code>pub struct Config {\n    pub bump: u8,\n    pub owner: Pubkey,\n    pub pending_owner: Option&lt;Pubkey&gt;,\n    pub mint: Pubkey,\n    pub token_program: Pubkey,\n    pub mode: Mode,\n    pub chain_id: ChainId,\n    pub next_transceiver_id: u8,\n    pub threshold: u8,\n    pub enabled_transceivers: Bitmap,\n    pub paused: bool,\n    pub custody: Pubkey,\n}\n</code></pre> Fields <p><code>bump</code> u8</p> <p>The canonical bump for the config account.</p> <p><code>owner</code> Pubkey</p> <p>The owner of the program.</p> <p><code>pending_owner</code> Option&lt;Pubkey&gt;</p> <p>The pending owner (before claiming ownership).</p> <p><code>mint</code> Pubkey</p> <p>The mint address of the token managed by this program.</p> <p><code>token_program</code> Pubkey</p> <p>The address of the token program (Token or Token-2022).</p> <p><code>mode</code> Mode</p> <p>The mode that this program is running in (Burning or Locking).</p> <p><code>chain_id</code> ChainId</p> <p>The chain ID of the chain that this program is running on.</p> <p><code>next_transceiver_id</code> u8</p> <p>The next transceiver ID to use when registering a transceiver.</p> <p><code>threshold</code> u8</p> <p>The number of transceivers that must attest to a transfer.</p> <p><code>enabled_transceivers</code> Bitmap</p> <p>Bitmap of enabled transceivers.</p> <p><code>paused</code> bool</p> <p>Whether the program is paused.</p> <p><code>custody</code> Pubkey</p> <p>The custody account that holds tokens in locking mode.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#mode","title":"Mode","text":"<p>The operating mode of the NTT Manager. (Defined in ntt-messages)</p> <pre><code>pub enum Mode {\n    Locking,\n    Burning,\n}\n</code></pre> Variants <p><code>Locking</code></p> <p>Tokens are locked in custody and unlocked on release.</p> <p><code>Burning</code></p> <p>Tokens are burned on transfer and minted on release.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#chainid","title":"ChainId","text":"<p>A Wormhole chain identifier. (Defined in ntt-messages)</p> <pre><code>pub struct ChainId {\n    pub id: u16,\n}\n</code></pre> Fields <p><code>id</code> u16</p> <p>The numeric chain ID.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#errors","title":"Errors","text":""},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#badamountafterburn","title":"BadAmountAfterBurn","text":"<p>Error when the amount after burning doesn't match expected. (Defined in error.rs)</p> <pre><code>BadAmountAfterBurn\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#badamountaftertransfer","title":"BadAmountAfterTransfer","text":"<p>Error when the amount after transfer doesn't match expected. (Defined in error.rs)</p> <pre><code>BadAmountAfterTransfer\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#bitmapindexoutofbounds","title":"BitmapIndexOutOfBounds","text":"<p>Error when bitmap index is out of bounds. (Defined in error.rs)</p> <pre><code>BitmapIndexOutOfBounds\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#cantreleaseyet","title":"CantReleaseYet","text":"<p>Error when trying to release a transfer that is still in delay. (Defined in error.rs)</p> <pre><code>CantReleaseYet\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#disabledtransceiver","title":"DisabledTransceiver","text":"<p>Error when attempting to use a disabled transceiver. (Defined in error.rs)</p> <pre><code>DisabledTransceiver\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#incorrectrentpayer","title":"IncorrectRentPayer","text":"<p>Error when the rent payer is incorrect. (Defined in error.rs)</p> <pre><code>IncorrectRentPayer\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidchainid","title":"InvalidChainId","text":"<p>Error when an invalid chain ID is provided. (Defined in error.rs)</p> <pre><code>InvalidChainId\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invaliddeployer","title":"InvalidDeployer","text":"<p>Error when the deployer is not authorized. (Defined in error.rs)</p> <pre><code>InvalidDeployer\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidmintauthority","title":"InvalidMintAuthority","text":"<p>Error when the mint authority is invalid. (Defined in error.rs)</p> <pre><code>InvalidMintAuthority\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidmode","title":"InvalidMode","text":"<p>Error when an invalid mode is specified. (Defined in error.rs)</p> <pre><code>InvalidMode\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidmultisig","title":"InvalidMultisig","text":"<p>Error when a multisig account is invalid. (Defined in error.rs)</p> <pre><code>InvalidMultisig\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidnttmanagerpeer","title":"InvalidNttManagerPeer","text":"<p>Error when the NTT Manager peer is invalid. (Defined in error.rs)</p> <pre><code>InvalidNttManagerPeer\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidpendingowner","title":"InvalidPendingOwner","text":"<p>Error when the pending owner is invalid. (Defined in error.rs)</p> <pre><code>InvalidPendingOwner\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidpendingtokenauthority","title":"InvalidPendingTokenAuthority","text":"<p>Error when the pending token authority is invalid. (Defined in error.rs)</p> <pre><code>InvalidPendingTokenAuthority\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidrecipientaddress","title":"InvalidRecipientAddress","text":"<p>Error when the recipient address is invalid. (Defined in error.rs)</p> <pre><code>InvalidRecipientAddress\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidtransceiverpeer","title":"InvalidTransceiverPeer","text":"<p>Error when the transceiver peer is invalid. (Defined in error.rs)</p> <pre><code>InvalidTransceiverPeer\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#invalidtransceiverprogram","title":"InvalidTransceiverProgram","text":"<p>Error when the transceiver program is invalid. (Defined in error.rs)</p> <pre><code>InvalidTransceiverProgram\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#messagealreadysent","title":"MessageAlreadySent","text":"<p>Error when attempting to send a message that has already been sent. (Defined in error.rs)</p> <pre><code>MessageAlreadySent\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#noregisteredtransceivers","title":"NoRegisteredTransceivers","text":"<p>Error when no transceivers are registered. (Defined in error.rs)</p> <pre><code>NoRegisteredTransceivers\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#notpaused","title":"NotPaused","text":"<p>Error when expecting the program to be paused but it's not. (Defined in error.rs)</p> <pre><code>NotPaused\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#overflowexponent","title":"OverflowExponent","text":"<p>Error when there's an overflow in exponent calculation. (Defined in error.rs)</p> <pre><code>OverflowExponent\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#overflowscaledamount","title":"OverflowScaledAmount","text":"<p>Error when there's an overflow in scaled amount calculation. (Defined in error.rs)</p> <pre><code>OverflowScaledAmount\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#paused","title":"Paused","text":"<p>Error when the program is paused and operation is not allowed. (Defined in error.rs)</p> <pre><code>Paused\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#thresholdtoohigh","title":"ThresholdTooHigh","text":"<p>Error when the threshold is set too high. (Defined in error.rs)</p> <pre><code>ThresholdTooHigh\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transferalreadyredeemed","title":"TransferAlreadyRedeemed","text":"<p>Error when attempting to redeem a transfer that has already been redeemed. (Defined in error.rs)</p> <pre><code>TransferAlreadyRedeemed\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfercannotberedeemed","title":"TransferCannotBeRedeemed","text":"<p>Error when a transfer cannot be redeemed. (Defined in error.rs)</p> <pre><code>TransferCannotBeRedeemed\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transferexceedsratelimit","title":"TransferExceedsRateLimit","text":"<p>Error when a transfer exceeds the rate limit. (Defined in error.rs)</p> <pre><code>TransferExceedsRateLimit\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#transfernotapproved","title":"TransferNotApproved","text":"<p>Error when a transfer has not been approved by enough transceivers. (Defined in error.rs)</p> <pre><code>TransferNotApproved\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/manager/solana/#zerothreshold","title":"ZeroThreshold","text":"<p>Error when the threshold is set to zero. (Defined in error.rs)</p> <pre><code>ZeroThreshold\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/","title":"Transceivers Contracts Reference (EVM)","text":"<p>The NTT Transceiver contracts are responsible for sending and receiving messages between chains as part of the NTT protocol. They support multiple verification methods and operate alongside the NTT Manager to enable cross-chain token transfers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#structure-overview","title":"Structure Overview","text":"<p>The NTT Transceiver system is built using a layered inheritance structure with the base <code>Transceiver</code> contract providing common functionality and specific implementations like <code>WormholeTransceiver</code> adding protocol-specific features.</p> <pre><code>WormholeTransceiver.sol\n\u251c\u2500\u2500 IWormholeTransceiver.sol\n\u251c\u2500\u2500 IWormholeReceiver.sol\n\u2514\u2500\u2500 WormholeTransceiverState.sol\n    \u251c\u2500\u2500 IWormholeTransceiverState.sol\n    \u2514\u2500\u2500 Transceiver.sol\n        \u251c\u2500\u2500 ITransceiver.sol\n        \u251c\u2500\u2500 PausableOwnable.sol\n        \u251c\u2500\u2500 ReentrancyGuardUpgradeable.sol\n        \u2514\u2500\u2500 Implementation.sol\n</code></pre> <p>Key Components:</p> <ul> <li><code>Transceiver.sol</code>: Base abstract contract providing common transceiver functionality including message transmission, ownership management, and upgrade capabilities.</li> <li><code>WormholeTransceiver.sol</code>: Concrete implementation for Wormhole protocol, handling message verification through Wormhole Core and supporting multiple delivery methods (standard relaying, custom relaying, manual).</li> <li><code>WormholeTransceiverState.sol</code>: State management contract for Wormhole-specific storage including peer registration, relaying configuration, and VAA consumption tracking.</li> <li><code>PausableOwnable.sol</code>: Provides ownership and emergency pause functionality.</li> <li><code>ReentrancyGuardUpgradeable.sol</code>: Protects against reentrancy attacks in an upgradeable context.</li> <li><code>Implementation.sol</code>: Handles proxy implementation logic for upgradeable contracts.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#state-variables","title":"State Variables","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#core-identification","title":"Core Identification","text":"<ul> <li><code>nttManager</code> address: Immutable address of the NTT Manager that this transceiver is tied to.</li> <li><code>nttManagerToken</code> address: Immutable address of the token associated with the NTT deployment.</li> <li><code>deployer</code> address: Immutable address of the contract deployer.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#version","title":"Version","text":"<ul> <li><code>WORMHOLE_TRANSCEIVER_VERSION</code> string: Version string of the WormholeTransceiver implementation.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#messaging-and-relaying-configuration","title":"Messaging and Relaying Configuration","text":"<ul> <li><code>consistencyLevel</code> uint8: Immutable Wormhole consistency level for message finality.</li> <li><code>wormhole</code> IWormhole: Immutable reference to the Wormhole Core bridge contract.</li> <li><code>wormholeRelayer</code> IWormholeRelayer: Immutable reference to the Wormhole Relayer contract.</li> <li><code>specialRelayer</code> ISpecialRelayer: Immutable reference to a custom relayer contract.</li> <li><code>gasLimit</code> uint256: Immutable gas limit for cross-chain message delivery.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#peer-configuration-and-replay-protection","title":"Peer Configuration and Replay Protection","text":"<ul> <li><code>WORMHOLE_CONSUMED_VAAS_SLOT</code> mapping(bytes32 \u21d2 bool): Tracks consumed VAA hashes for replay protection. Exposed via isVAAConsumed.</li> <li><code>WORMHOLE_PEERS_SLOT</code> mapping(uint16 \u21d2 bytes32): Wormhole chain ID \u2192 peer transceiver address. Exposed via getWormholePeer.</li> <li><code>WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT</code> mapping(uint16 \u21d2 BooleanFlag): Per-chain flag for enabling standard relaying. Exposed via isWormholeRelayingEnabled.</li> <li><code>SPECIAL_RELAYING_ENABLED_CHAINS_SLOT</code> mapping(uint16 \u21d2 BooleanFlag): Per-chain flag for enabling special relaying. Exposed via isSpecialRelayingEnabled.</li> <li><code>WORMHOLE_EVM_CHAIN_IDS</code> mapping(uint16 \u21d2 BooleanFlag): Per-chain EVM-compatibility flag used to choose the relaying path. Exposed via isWormholeEvmChain.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#events","title":"Events","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#notpaused","title":"NotPaused","text":"<p>Emitted when the contract is unpaused. (Defined in PausableUpgradeable.sol)</p> <pre><code>event NotPaused(bool notPaused)\n</code></pre> Parameters <p><code>notPaused</code> bool</p> <p>Whether the contract is not paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#ownershiptransferred","title":"OwnershipTransferred","text":"<p>Emitted when ownership is transferred. (Defined in OwnableUpgradeable.sol)</p> <pre><code>event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)\n</code></pre> Parameters <p><code>previousOwner</code> address</p> <p>The address of the previous owner.</p> <p><code>newOwner</code> address</p> <p>The address of the new owner.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#paused","title":"Paused","text":"<p>Emitted when the contract is paused. (Defined in PausableUpgradeable.sol)</p> <pre><code>event Paused(bool paused)\n</code></pre> Parameters <p><code>paused</code> bool</p> <p>Whether the contract is paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#pausertransferred","title":"PauserTransferred","text":"<p>Emitted when the pauser capability is transferred. (Defined in PausableUpgradeable.sol)</p> <pre><code>event PauserTransferred(address indexed oldPauser, address indexed newPauser)\n</code></pre> Parameters <p><code>oldPauser</code> address</p> <p>The address of the previous pauser.</p> <p><code>newPauser</code> address</p> <p>The address of the new pauser.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#receivedmessage","title":"ReceivedMessage","text":"<p>Emitted when a message is received. (Defined in IWormholeTransceiver.sol)</p> <pre><code>event ReceivedMessage(\n    bytes32 digest,\n    uint16 emitterChainId,\n    bytes32 emitterAddress,\n    uint64 sequence\n)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the message.</p> <p><code>emitterChainId</code> uint16</p> <p>The chain ID of the emitter.</p> <p><code>emitterAddress</code> bytes32</p> <p>The address of the emitter.</p> <p><code>sequence</code> uint64</p> <p>The sequence of the message.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#receivedrelayedmessage","title":"ReceivedRelayedMessage","text":"<p>Emitted when a relayed message is received. (Defined in IWormholeTransceiver.sol)</p> <pre><code>event ReceivedRelayedMessage(\n    bytes32 digest,\n    uint16 emitterChainId,\n    bytes32 emitterAddress\n)\n</code></pre> Parameters <p><code>digest</code> bytes32</p> <p>The digest of the message.</p> <p><code>emitterChainId</code> uint16</p> <p>The chain ID of the emitter.</p> <p><code>emitterAddress</code> bytes32</p> <p>The address of the emitter.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#relayinginfo","title":"RelayingInfo","text":"<p>Emitted when a message is sent from the transceiver. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>event RelayingInfo(\n    uint8 relayingType,\n    bytes32 refundAddress,\n    uint256 deliveryPayment\n)\n</code></pre> Parameters <p><code>relayingType</code> uint8</p> <p>The type of relaying.</p> <p><code>refundAddress</code> bytes32</p> <p>The refund address for unused gas.</p> <p><code>deliveryPayment</code> uint256</p> <p>The amount of ether sent along with the tx to cover the delivery fee.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#sendtransceivermessage","title":"SendTransceiverMessage","text":"<p>Emitted when a message is sent from the transceiver. (Defined in IWormholeTransceiver.sol)</p> <pre><code>event SendTransceiverMessage(\n    uint16 recipientChain,\n    TransceiverStructs.TransceiverMessage message\n)\n</code></pre> Parameters <p><code>recipientChain</code> uint16</p> <p>The chain ID of the recipient.</p> <p><code>message</code> TransceiverStructs.TransceiverMessage</p> <p>The message.</p> <code>TransceiverMessage</code> type <p><code>sourceNttManagerAddress</code> bytes32</p> <p>The address of the source NTT Manager.</p> <p><code>recipientNttManagerAddress</code> bytes32</p> <p>The address of the recipient NTT Manager.</p> <p><code>nttManagerPayload</code> bytes</p> <p>The NTT Manager payload.</p> <p><code>transceiverPayload</code> bytes</p> <p>The transceiver-specific payload.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setisspecialrelayingenabled","title":"SetIsSpecialRelayingEnabled","text":"<p>Emitted when special relaying is enabled for the given chain. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>event SetIsSpecialRelayingEnabled(uint16 chainId, bool isRelayingEnabled)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to set.</p> <p><code>isRelayingEnabled</code> bool</p> <p>A boolean indicating whether special relaying is enabled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setiswormholeevmchain","title":"SetIsWormholeEvmChain","text":"<p>Emitted when the EVM-compatibility flag is set for a chain. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>event SetIsWormholeEvmChain(uint16 chainId, bool isEvm)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to set.</p> <p><code>isEvm</code> bool</p> <p>A boolean indicating whether relaying is enabled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setiswormholerelayingenabled","title":"SetIsWormholeRelayingEnabled","text":"<p>Emitted when relaying is enabled for the given chain. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>event SetIsWormholeRelayingEnabled(uint16 chainId, bool isRelayingEnabled)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to set.</p> <p><code>isRelayingEnabled</code> bool</p> <p>A boolean indicating whether relaying is enabled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setwormholepeer","title":"SetWormholePeer","text":"<p>Emitted when a peer transceiver is set. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>event SetWormholePeer(uint16 chainId, bytes32 peerContract)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID of the peer.</p> <p><code>peerContract</code> bytes32</p> <p>The address of the peer contract.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#functions","title":"Functions","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#encodewormholetransceiverinstruction","title":"encodeWormholeTransceiverInstruction","text":"<p>Encodes the <code>WormholeTransceiverInstruction</code> into a byte array. (Defined in WormholeTransceiver.sol)</p> <pre><code>function encodeWormholeTransceiverInstruction(\n    WormholeTransceiverInstruction memory instruction\n) public pure returns (bytes memory)\n</code></pre> Parameters <p><code>instruction</code> WormholeTransceiverInstruction</p> <p>The <code>WormholeTransceiverInstruction</code> to encode.</p> <code>WormholeTransceiverInstruction</code> type <p><code>shouldSkipRelayerSend</code> bool</p> <p>Whether to skip delivery via the relayer.</p> Returns <p><code>encoded</code> bytes</p> <p>The encoded instruction.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#getmigratesimmutables","title":"getMigratesImmutables","text":"<p>Returns whether the contract migrates immutables during upgrades. (Defined in Implementation.sol)</p> <pre><code>function getMigratesImmutables() public view returns (bool)\n</code></pre> Returns <p><code>migratesImmutables</code> bool</p> <p>Whether the contract migrates immutables.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#getnttmanagerowner","title":"getNttManagerOwner","text":"<p>Returns the owner address of the NTT Manager that this transceiver is related to. (Defined in Transceiver.sol)</p> <pre><code>function getNttManagerOwner() public view returns (address)\n</code></pre> Returns <p><code>owner</code> address</p> <p>The owner address of the NTT Manager.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#getnttmanagertoken","title":"getNttManagerToken","text":"<p>Returns the address of the token associated with this NTT deployment. (Defined in Transceiver.sol)</p> <pre><code>function getNttManagerToken() public view virtual returns (address)\n</code></pre> Returns <p><code>token</code> address</p> <p>The address of the token.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#gettransceivertype","title":"getTransceiverType","text":"<p>Returns the string type of the transceiver. (Defined in WormholeTransceiver.sol)</p> <pre><code>function getTransceiverType() external pure returns (string memory)\n</code></pre> Returns <p><code>transceiverType</code> string</p> <p>The type of the transceiver (e.g., \"wormhole\").</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#getwormholepeer","title":"getWormholePeer","text":"<p>Returns the peer contract address for a given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function getWormholePeer(uint16 chainId) public view returns (bytes32)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to query.</p> Returns <p><code>peerContract</code> bytes32</p> <p>The address of the peer contract on the given chain.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#initialize","title":"initialize","text":"<p>Initializes the contract implementation. Only callable through a delegate call. (Defined in Implementation.sol)</p> <pre><code>function initialize() external payable\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#ispaused","title":"isPaused","text":"<p>Returns whether the contract is currently paused. (Defined in PausableUpgradeable.sol)</p> <pre><code>function isPaused() public view returns (bool)\n</code></pre> Returns <p><code>paused</code> bool</p> <p>Whether the contract is paused.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#isspecialrelayingenabled","title":"isSpecialRelayingEnabled","text":"<p>Returns whether special relaying is enabled for a given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function isSpecialRelayingEnabled(uint16 chainId) public view returns (bool)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to query.</p> Returns <p><code>isEnabled</code> bool</p> <p>Whether special relaying is enabled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#isvaaconsumed","title":"isVAAConsumed","text":"<p>Returns whether a VAA has been consumed. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function isVAAConsumed(bytes32 hash) public view returns (bool)\n</code></pre> Parameters <p><code>hash</code> bytes32</p> <p>The hash of the VAA.</p> Returns <p><code>consumed</code> bool</p> <p>Whether the VAA has been consumed.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#iswormholeevmchain","title":"isWormholeEvmChain","text":"<p>Returns whether a chain is EVM compatible. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function isWormholeEvmChain(uint16 chainId) public view returns (bool)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to query.</p> Returns <p><code>isEvm</code> bool</p> <p>Whether the chain is EVM compatible.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#iswormholerelayingenabled","title":"isWormholeRelayingEnabled","text":"<p>Returns whether relaying is enabled for a given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function isWormholeRelayingEnabled(uint16 chainId) public view returns (bool)\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID to query.</p> Returns <p><code>isEnabled</code> bool</p> <p>Whether relaying is enabled.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#migrate","title":"migrate","text":"<p>Migrates the contract to a new implementation. Only callable during upgrades through a delegate call. (Defined in Implementation.sol)</p> <pre><code>function migrate() external\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#parsewormholetransceiverinstruction","title":"parseWormholeTransceiverInstruction","text":"<p>Parses the encoded instruction and returns the instruction struct. (Defined in WormholeTransceiver.sol)</p> <pre><code>function parseWormholeTransceiverInstruction(\n    bytes memory encoded\n) public pure returns (WormholeTransceiverInstruction memory instruction)\n</code></pre> Parameters <p><code>encoded</code> bytes</p> <p>The encoded instruction.</p> Returns <p><code>instruction</code> WormholeTransceiverInstruction</p> <p>The parsed <code>WormholeTransceiverInstruction</code>.</p> <code>WormholeTransceiverInstruction</code> type <p><code>shouldSkipRelayerSend</code> bool</p> <p>Whether to skip delivery via the relayer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#quotedeliveryprice","title":"quoteDeliveryPrice","text":"<p>Fetches the delivery price for a given recipient chain transfer. (Defined in Transceiver.sol)</p> <pre><code>function quoteDeliveryPrice(\n    uint16 recipientChain,\n    TransceiverStructs.TransceiverInstruction memory instruction\n) external view returns (uint256)\n</code></pre> Parameters <p><code>recipientChain</code> uint16</p> <p>The Wormhole chain ID of the target chain.</p> <p><code>instruction</code> TransceiverStructs.TransceiverInstruction</p> <p>An additional Instruction provided by the Transceiver to be executed on the recipient chain.</p> <code>TransceiverInstruction</code> type <p><code>index</code> uint8</p> <p>The index of the transceiver.</p> <p><code>payload</code> bytes</p> <p>The instruction payload.</p> Returns <p><code>deliveryPrice</code> uint256</p> <p>The cost of delivering a message to the recipient chain, in this chain's native token.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#owner","title":"owner","text":"<p>Returns the address of the current owner. (Defined in OwnableUpgradeable.sol)</p> <pre><code>function owner() public view returns (address)\n</code></pre> Returns <p><code>owner</code> address</p> <p>The address of the current owner.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#pauser","title":"pauser","text":"<p>Returns the address of the current pauser. (Defined in PausableUpgradeable.sol)</p> <pre><code>function pauser() public view returns (address)\n</code></pre> Returns <p><code>pauser</code> address</p> <p>The address of the current pauser.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#receivemessage","title":"receiveMessage","text":"<p>Receives an attested message from the verification layer. (Defined in WormholeTransceiver.sol)</p> <pre><code>function receiveMessage(bytes memory encodedMessage) external\n</code></pre> Parameters <p><code>encodedMessage</code> bytes</p> <p>The attested message.</p> <p>Emits: <code>ReceivedMessage</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#receivewormholemessages","title":"receiveWormholeMessages","text":"<p>Receives and processes Wormhole messages via the relayer. Only callable by the relayer. (Defined in WormholeTransceiver.sol)</p> <pre><code>function receiveWormholeMessages(\n    bytes memory payload,\n    bytes[] memory additionalMessages,\n    bytes32 sourceAddress,\n    uint16 sourceChain,\n    bytes32 deliveryHash\n) external payable\n</code></pre> Parameters <p><code>payload</code> bytes</p> <p>The message payload.</p> <p><code>additionalMessages</code> bytes[]</p> <p>Additional messages array.</p> <p><code>sourceAddress</code> bytes32</p> <p>The source address of the message.</p> <p><code>sourceChain</code> uint16</p> <p>The source chain ID.</p> <p><code>deliveryHash</code> bytes32</p> <p>The delivery hash.</p> <p>Emits: <code>ReceivedRelayedMessage</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#sendmessage","title":"sendMessage","text":"<p>Sends a message to another chain. (Defined in Transceiver.sol)</p> <pre><code>function sendMessage(\n    uint16 recipientChain,\n    TransceiverStructs.TransceiverInstruction memory instruction,\n    bytes memory nttManagerMessage,\n    bytes32 recipientNttManagerAddress,\n    bytes32 refundAddress\n) external payable\n</code></pre> Parameters <p><code>recipientChain</code> uint16</p> <p>The Wormhole chain ID of the recipient.</p> <p><code>instruction</code> TransceiverStructs.TransceiverInstruction</p> <p>An additional Instruction provided by the Transceiver to be executed on the recipient chain.</p> <code>TransceiverInstruction</code> type <p><code>index</code> uint8</p> <p>The index of the transceiver.</p> <p><code>payload</code> bytes</p> <p>The instruction payload.</p> <p><code>nttManagerMessage</code> bytes</p> <p>A message to be sent to the nttManager on the recipient chain.</p> <p><code>recipientNttManagerAddress</code> bytes32</p> <p>The Wormhole formatted address of the peer NTT Manager on the recipient chain.</p> <p><code>refundAddress</code> bytes32</p> <p>The Wormhole formatted address of the refund recipient.</p> <p>Emits: <code>SendTransceiverMessage</code>, <code>RelayingInfo</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setisspecialrelayingenabled_1","title":"setIsSpecialRelayingEnabled","text":"<p>Sets whether special relaying is enabled for the given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function setIsSpecialRelayingEnabled(uint16 chainId, bool isRelayingEnabled) external\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The Wormhole chain ID to set.</p> <p><code>isRelayingEnabled</code> bool</p> <p>A boolean indicating whether special relaying is enabled.</p> <p>Emits: <code>SetIsSpecialRelayingEnabled</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setiswormholeevmchain_1","title":"setIsWormholeEvmChain","text":"<p>Sets whether the chain is EVM compatible. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function setIsWormholeEvmChain(uint16 chainId, bool isEvm) external\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The Wormhole chain ID to set.</p> <p><code>isEvm</code> bool</p> <p>A boolean indicating whether the chain is an EVM chain.</p> <p>Emits: <code>SetIsWormholeEvmChain</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setiswormholerelayingenabled_1","title":"setIsWormholeRelayingEnabled","text":"<p>Sets whether Wormhole relaying is enabled for the given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function setIsWormholeRelayingEnabled(uint16 chainId, bool isRelayingEnabled) external\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The Wormhole chain ID to set.</p> <p><code>isRelayingEnabled</code> bool</p> <p>A boolean indicating whether relaying is enabled.</p> <p>Emits: <code>SetIsWormholeRelayingEnabled</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#setwormholepeer_1","title":"setWormholePeer","text":"<p>Sets the Wormhole peer contract for the given chain. (Defined in WormholeTransceiverState.sol)</p> <pre><code>function setWormholePeer(uint16 chainId, bytes32 peerContract) external payable\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The Wormhole chain ID of the peer to set.</p> <p><code>peerContract</code> bytes32</p> <p>The address of the peer contract on the given chain.</p> <p>Emits: <code>SetWormholePeer</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#transferownership","title":"transferOwnership","text":"<p>Transfers ownership of the contract to a new account. Can only be called by the current owner. (Defined in OwnableUpgradeable.sol)</p> <pre><code>function transferOwnership(address newOwner) public\n</code></pre> Parameters <p><code>newOwner</code> address</p> <p>The address of the new owner.</p> <p>Emits: <code>OwnershipTransferred</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#transferpausercapability","title":"transferPauserCapability","text":"<p>Transfers the ability to pause to a new account. (Defined in PausableOwnable.sol)</p> <pre><code>function transferPauserCapability(address newPauser) public\n</code></pre> Parameters <p><code>newPauser</code> address</p> <p>The address of the new pauser.</p> <p>Emits: <code>PauserTransferred</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#transfertransceiverownership","title":"transferTransceiverOwnership","text":"<p>Transfers the ownership of the transceiver to a new address. (Defined in Transceiver.sol)</p> <pre><code>function transferTransceiverOwnership(address newOwner) external\n</code></pre> Parameters <p><code>newOwner</code> address</p> <p>The address of the new owner.</p> <p>Emits: <code>OwnershipTransferred</code></p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#upgrade","title":"upgrade","text":"<p>Upgrades the transceiver to a new implementation. (Defined in Transceiver.sol)</p> <pre><code>function upgrade(address newImplementation) external\n</code></pre> Parameters <p><code>newImplementation</code> address</p> <p>The address of the new implementation contract.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#errors","title":"Errors","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#callernotnttmanager","title":"CallerNotNttManager","text":"<p>The caller is not the NttManager. (Defined in ITransceiver.sol)</p> <pre><code>error CallerNotNttManager(address caller);\n</code></pre> Parameters <p><code>caller</code> address</p> <p>The address of the caller.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#callernotrelayer","title":"CallerNotRelayer","text":"<p>The caller is not the relayer. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error CallerNotRelayer(address caller);\n</code></pre> Parameters <p><code>caller</code> address</p> <p>The caller.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#cannotrenouncetransceiverownership","title":"CannotRenounceTransceiverOwnership","text":"<p>Error when trying renounce transceiver ownership. (Defined in ITransceiver.sol)</p> <pre><code>error CannotRenounceTransceiverOwnership(address currentOwner);\n</code></pre> Parameters <p><code>currentOwner</code> address</p> <p>The current owner of the transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#cannottransfertransceiverownership","title":"CannotTransferTransceiverOwnership","text":"<p>Error when trying to transfer transceiver ownership. (Defined in ITransceiver.sol)</p> <pre><code>error CannotTransferTransceiverOwnership(address currentOwner, address newOwner);\n</code></pre> Parameters <p><code>currentOwner</code> address</p> <p>The current owner of the transceiver.</p> <p><code>newOwner</code> address</p> <p>The new owner of the transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidpauser","title":"InvalidPauser","text":"<p>The pauser is not a valid pauser account. (Defined in PausableUpgradeable.sol)</p> <pre><code>error InvalidPauser(address account);\n</code></pre> Parameters <p><code>account</code> address</p> <p>The invalid pauser account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidrelayingconfig","title":"InvalidRelayingConfig","text":"<p>Error when the relaying configuration is invalid. (Defined in IWormholeTransceiver.sol)</p> <pre><code>error InvalidRelayingConfig(uint16 chainId);\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID that is invalid.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidvaa","title":"InvalidVaa","text":"<p>Error if the VAA is invalid. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error InvalidVaa(string reason);\n</code></pre> Parameters <p><code>reason</code> string</p> <p>The reason the VAA is invalid.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidwormholechainidzero","title":"InvalidWormholeChainIdZero","text":"<p>The chain ID cannot be zero. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error InvalidWormholeChainIdZero();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidwormholepeer","title":"InvalidWormholePeer","text":"<p>Error when the peer transceiver is invalid. (Defined in IWormholeTransceiver.sol)</p> <pre><code>error InvalidWormholePeer(uint16 chainId, bytes32 peerAddress);\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID of the peer.</p> <p><code>peerAddress</code> bytes32</p> <p>The address of the invalid peer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidwormholepeerzeroaddress","title":"InvalidWormholePeerZeroAddress","text":"<p>Error the peer contract cannot be the zero address. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error InvalidWormholePeerZeroAddress();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#notmigrating","title":"NotMigrating","text":"<p>The contract is not currently migrating. (Defined in Implementation.sol)</p> <pre><code>error NotMigrating();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#onlydelegatecall","title":"OnlyDelegateCall","text":"<p>Function can only be called through delegate call. (Defined in Implementation.sol)</p> <pre><code>error OnlyDelegateCall();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#ownableinvalidowner","title":"OwnableInvalidOwner","text":"<p>The owner is not a valid owner account. (Defined in OwnableUpgradeable.sol)</p> <pre><code>error OwnableInvalidOwner(address owner);\n</code></pre> Parameters <p><code>owner</code> address</p> <p>The invalid owner address.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#ownableunauthorizedaccount","title":"OwnableUnauthorizedAccount","text":"<p>The caller account is not authorized to perform an operation. (Defined in OwnableUpgradeable.sol)</p> <pre><code>error OwnableUnauthorizedAccount(address account);\n</code></pre> Parameters <p><code>account</code> address</p> <p>The unauthorized account.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#requirecontractisnotpaused","title":"RequireContractIsNotPaused","text":"<p>Contract is not paused, functionality is unblocked. (Defined in PausableUpgradeable.sol)</p> <pre><code>error RequireContractIsNotPaused();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#requirecontractispaused","title":"RequireContractIsPaused","text":"<p>Contract state is paused, blocking functionality. (Defined in PausableUpgradeable.sol)</p> <pre><code>error RequireContractIsPaused();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#peeralreadyset","title":"PeerAlreadySet","text":"<p>Error if the peer has already been set. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error PeerAlreadySet(uint16 chainId, bytes32 peerAddress);\n</code></pre> Parameters <p><code>chainId</code> uint16</p> <p>The chain ID of the peer.</p> <p><code>peerAddress</code> bytes32</p> <p>The address of the peer.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#unexpectedadditionalmessages","title":"UnexpectedAdditionalMessages","text":"<p>Additional messages are not allowed. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error UnexpectedAdditionalMessages();\n</code></pre>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#transferalreadycompleted","title":"TransferAlreadyCompleted","text":"<p>The transfer has already been completed. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error TransferAlreadyCompleted(bytes32 digest);\n</code></pre> Parameters <p><code>digest</code> bytes32 </p> <p>The digest of the completed transfer message.  </p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#unexpectedrecipientnttmanageraddress","title":"UnexpectedRecipientNttManagerAddress","text":"<p>The recipient NTT Manager address in the message does not match this transceiver\u2019s NTT Manager. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error UnexpectedRecipientNttManagerAddress(bytes32 recipientNttManagerAddress);\n</code></pre> Parameters <p><code>recipientNttManagerAddress</code> bytes32 </p> <p>The unexpected NTT Manager address from the message.  </p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/evm/#invalidfork","title":"InvalidFork","text":"<p>The current EVM chain ID does not match the stored chain ID, indicating a possible fork. (Defined in IWormholeTransceiverState.sol)</p> <pre><code>error InvalidFork(uint256 expectedChainId, uint256 actualChainId);\n</code></pre> Parameters <p><code>expectedChainId</code> uint256 </p> <p>The chain ID stored at deployment.  </p> <p><code>actualChainId</code> uint256 </p> <p>The chain ID returned by the current network.  </p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/","title":"Transceivers Program Reference (Solana)","text":"<p>The NTT Transceiver program is responsible for sending and receiving messages between chains as part of the NTT protocol on Solana. It supports multiple verification methods and operates alongside the NTT Manager program to enable cross-chain token transfers.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#structure-overview","title":"Structure Overview","text":"<p>The NTT Transceiver system on Solana is implemented as a standalone Anchor program that provides Wormhole-based message verification and relay capabilities. The transceiver acts as a bridge between the NTT Manager and the Wormhole protocol, handling cross-chain message transmission and verification.</p> <pre><code>NTT Transceiver Program\n\u251c\u2500\u2500 Wormhole Integration\n\u2502   \u251c\u2500\u2500 Message Transmission\n\u2502   \u251c\u2500\u2500 Message Reception &amp; Verification  \n\u2502   \u251c\u2500\u2500 Peer Management\n\u2502   \u2514\u2500\u2500 Broadcasting Capabilities\n\u251c\u2500\u2500 Admin Functions\n\u2514\u2500\u2500 Message Processing\n</code></pre> <p>Key Components:</p> <ul> <li>NTT Transceiver Program: Transmits, receives, and verifies NTT messages between chains, integrating with the Wormhole messaging layer.</li> <li>Wormhole Integration: Enables native message transmission, reception, and verification using the Wormhole protocol.</li> <li>Administrative Functions: Provides interfaces for setting up peer configurations and managing broadcast behavior.</li> <li>Message Processing: Automatically processes inbound and outbound messages and forwards valid messages to the NTT Manager.</li> </ul>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#state-accounts","title":"State Accounts","text":"<p><code>TransceiverPeer</code> account (PDA: 'transceiver_peer'): Per-chain peer entry for the Wormhole transceiver path; stores the peer transceiver <code>address</code> (wormhole-formatted <code>[u8; 32]</code>) and <code>bump</code>.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#instructions","title":"Instructions","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#broadcast_wormhole_id","title":"broadcast_wormhole_id","text":"<p>Broadcasts the transceiver ID via Wormhole to announce presence on the network. (Defined in ntt-transceiver)</p> <pre><code>pub fn broadcast_wormhole_id(ctx: Context&lt;BroadcastId&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for the broadcast transaction.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The NTT Manager configuration account.</p> <p><code>mint</code> InterfaceAccount&lt;Mint&gt;</p> <p>The mint account for the managed token.</p> <p><code>wormhole_bridge</code> mut Account&lt;BridgeData&gt;</p> <p>The Wormhole bridge data account.</p> <p><code>wormhole_message</code> mut Signer</p> <p>The Wormhole message account to create.</p> <p><code>wormhole_emitter</code> Account&lt;EmitterData&gt;</p> <p>The Wormhole emitter account.</p> <p><code>wormhole_sequence</code> mut Account&lt;SequenceData&gt;</p> <p>The Wormhole sequence tracking account.</p> <p><code>wormhole_fee_collector</code> mut Account&lt;FeeCollectorData&gt;</p> <p>The Wormhole fee collector account.</p> <p><code>clock</code> Sysvar&lt;Clock&gt;</p> <p>The clock sysvar.</p> <p><code>rent</code> Sysvar&lt;Rent&gt;</p> <p>The rent sysvar.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p> <p><code>ntt_program</code> Program&lt;NttProgram&gt;</p> <p>The NTT Manager program.</p> <p><code>wormhole_program</code> Program&lt;WormholeProgram&gt;</p> <p>The Wormhole core bridge program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#broadcast_wormhole_peer","title":"broadcast_wormhole_peer","text":"<p>Broadcasts peer transceiver information via Wormhole. (Defined in ntt-transceiver)</p> <pre><code>pub fn broadcast_wormhole_peer(\n    ctx: Context&lt;BroadcastPeer&gt;,\n    args: BroadcastPeerArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> BroadcastPeerArgs</p> <p>The broadcast peer arguments.</p> <code>BroadcastPeerArgs</code> type <p><code>chain_id</code> ChainId</p> <p>The chain ID to broadcast peer information for.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for the broadcast transaction.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The NTT Manager configuration account.</p> <p><code>peer</code> Account&lt;TransceiverPeer&gt;</p> <p>The peer transceiver account containing peer information.</p> <p><code>wormhole_bridge</code> mut Account&lt;BridgeData&gt;</p> <p>The Wormhole bridge data account.</p> <p><code>wormhole_message</code> mut Signer</p> <p>The Wormhole message account to create.</p> <p><code>wormhole_emitter</code> Account&lt;EmitterData&gt;</p> <p>The Wormhole emitter account.</p> <p><code>wormhole_sequence</code> mut Account&lt;SequenceData&gt;</p> <p>The Wormhole sequence tracking account.</p> <p><code>wormhole_fee_collector</code> mut Account&lt;FeeCollectorData&gt;</p> <p>The Wormhole fee collector account.</p> <p><code>clock</code> Sysvar&lt;Clock&gt;</p> <p>The clock sysvar.</p> <p><code>rent</code> Sysvar&lt;Rent&gt;</p> <p>The rent sysvar.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p> <p><code>ntt_program</code> Program&lt;NttProgram&gt;</p> <p>The NTT Manager program.</p> <p><code>wormhole_program</code> Program&lt;WormholeProgram&gt;</p> <p>The Wormhole core bridge program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#receive_wormhole_message","title":"receive_wormhole_message","text":"<p>Receives and processes an inbound message from Wormhole. (Defined in ntt-transceiver)</p> <pre><code>pub fn receive_wormhole_message(ctx: Context&lt;ReceiveMessage&gt;) -&gt; Result&lt;()&gt;\n</code></pre> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for message processing.</p> <p><code>config</code> mut Account&lt;Config&gt;</p> <p>The NTT Manager configuration account.</p> <p><code>peer</code> Account&lt;TransceiverPeer&gt;</p> <p>The peer transceiver account for verification.</p> <p><code>vaa</code> Account&lt;PostedVaa&lt;TransceiverMessage&gt;&gt;</p> <p>The verified VAA (Verifiable Action Approval) containing the message.</p> <p><code>transceiver_message</code> mut UncheckedAccount</p> <p>The transceiver message account to create.</p> <p><code>ntt_program</code> Program&lt;NttProgram&gt;</p> <p>The NTT Manager program.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#release_wormhole_outbound","title":"release_wormhole_outbound","text":"<p>Releases an outbound message via Wormhole. (Defined in ntt-transceiver)</p> <pre><code>pub fn release_wormhole_outbound(\n    ctx: Context&lt;ReleaseOutbound&gt;,\n    args: ReleaseOutboundArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> ReleaseOutboundArgs</p> <p>The release outbound arguments.</p> <code>ReleaseOutboundArgs</code> type <p><code>recipient_chain</code> ChainId</p> <p>The chain ID of the recipient chain.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for the release transaction.</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The NTT Manager configuration account.</p> <p><code>outbox_item</code> mut Account&lt;OutboxItem&gt;</p> <p>The outbox item to be released.</p> <p><code>registered_transceiver</code> Account&lt;RegisteredTransceiver&gt;</p> <p>The registered transceiver account.</p> <p><code>transceiver_message</code> mut UncheckedAccount</p> <p>The transceiver message account to create.</p> <p><code>wormhole_bridge</code> mut Account&lt;BridgeData&gt;</p> <p>The Wormhole bridge data account.</p> <p><code>wormhole_message</code> mut Signer</p> <p>The Wormhole message account to create.</p> <p><code>wormhole_emitter</code> Account&lt;EmitterData&gt;</p> <p>The Wormhole emitter account.</p> <p><code>wormhole_sequence</code> mut Account&lt;SequenceData&gt;</p> <p>The Wormhole sequence tracking account.</p> <p><code>wormhole_fee_collector</code> mut Account&lt;FeeCollectorData&gt;</p> <p>The Wormhole fee collector account.</p> <p><code>clock</code> Sysvar&lt;Clock&gt;</p> <p>The clock sysvar.</p> <p><code>rent</code> Sysvar&lt;Rent&gt;</p> <p>The rent sysvar.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p> <p><code>ntt_program</code> Program&lt;NttProgram&gt;</p> <p>The NTT Manager program.</p> <p><code>wormhole_program</code> Program&lt;WormholeProgram&gt;</p> <p>The Wormhole core bridge program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#set_wormhole_peer","title":"set_wormhole_peer","text":"<p>Sets or updates a peer transceiver on another chain. (Defined in ntt-transceiver)</p> <pre><code>pub fn set_wormhole_peer(\n    ctx: Context&lt;SetTransceiverPeer&gt;,\n    args: SetTransceiverPeerArgs\n) -&gt; Result&lt;()&gt;\n</code></pre> Parameters <p><code>args</code> SetTransceiverPeerArgs</p> <p>The transceiver peer arguments.</p> <code>SetTransceiverPeerArgs</code> type <p><code>chain_id</code> ChainId</p> <p>The chain ID of the peer.</p> <p><code>address</code> [u8; 32]</p> <p>The address of the peer transceiver.</p> Accounts <p><code>payer</code> mut Signer</p> <p>The account paying for peer configuration.</p> <p><code>owner</code> Signer</p> <p>The owner of the NTT Manager (must authorize peer changes).</p> <p><code>config</code> Account&lt;Config&gt;</p> <p>The NTT Manager configuration account.</p> <p><code>peer</code> mut Account&lt;TransceiverPeer&gt;</p> <p>The peer account to create or update.</p> <p><code>system_program</code> Program&lt;System&gt;</p> <p>The system program.</p> <p><code>ntt_program</code> Program&lt;NttProgram&gt;</p> <p>The NTT Manager program.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#transceiver_type","title":"transceiver_type","text":"<p>Returns the type identifier for this transceiver. (Defined in ntt-transceiver)</p> <pre><code>pub fn transceiver_type(_ctx: Context&lt;TransceiverType&gt;) -&gt; Result&lt;String&gt;\n</code></pre> Returns <p><code>transceiver_type</code> String</p> <p>The transceiver type identifier (\"wormhole\").</p> Accounts <p>No accounts required (empty context).</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#data-structures","title":"Data Structures","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#transceiverpeer","title":"TransceiverPeer","text":"<p>Stores information about a peer transceiver on another chain. (Defined in peer.rs)</p> <pre><code>pub struct TransceiverPeer {\n    pub bump: u8,\n    pub address: [u8; 32],\n}\n</code></pre> Fields <p>bump u8</p> <p>The canonical bump for the peer account.</p> <p><code>address</code> [u8; 32]</p> <p>The wormhole-formatted address of the peer transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#transceivermessage","title":"TransceiverMessage","text":"<p>The message format used for cross-chain communication. (Defined in messages.rs)</p> <pre><code>pub struct TransceiverMessage&lt;P&gt; {\n    pub source_ntt_manager: [u8; 32],\n    pub recipient_ntt_manager: [u8; 32],\n    pub ntt_manager_payload: P,\n    pub transceiver_payload: Vec&lt;u8&gt;,\n}\n</code></pre> Fields <p><code>source_ntt_manager</code> [u8; 32]</p> <p>The address of the source NTT Manager.</p> <p><code>recipient_ntt_manager</code> [u8; 32]</p> <p>The address of the recipient NTT Manager.</p> <p><code>ntt_manager_payload</code> P</p> <p>The payload specific to the NTT Manager.</p> <p><code>transceiver_payload</code> Vec&lt;u8&gt;</p> <p>Additional payload specific to the transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#chainid","title":"ChainId","text":"<p>A Wormhole chain identifier. (Defined in ntt-messages)</p> <pre><code>pub struct ChainId {\n    pub id: u16,\n}\n</code></pre> Fields <p><code>id</code> u16</p> <p>The numeric chain ID.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#broadcastpeerargs","title":"BroadcastPeerArgs","text":"<p>Arguments for broadcasting peer information. (Defined in broadcast_peer.rs)</p> <pre><code>pub struct BroadcastPeerArgs {\n    pub chain_id: ChainId,\n}\n</code></pre> Fields <p><code>chain_id</code> ChainId</p> <p>The chain ID to broadcast peer information for.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#releaseoutboundargs","title":"ReleaseOutboundArgs","text":"<p>Arguments for releasing outbound messages. (Defined in release_outbound.rs)</p> <pre><code>pub struct ReleaseOutboundArgs {\n    pub recipient_chain: ChainId,\n}\n</code></pre> Fields <p><code>recipient_chain</code> ChainId</p> <p>The chain ID of the recipient chain.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#settransceiverpeerargs","title":"SetTransceiverPeerArgs","text":"<p>Arguments for setting transceiver peers. (Defined in admin.rs)</p> <pre><code>pub struct SetTransceiverPeerArgs {\n    pub chain_id: ChainId,\n    pub address: [u8; 32],\n}\n</code></pre> Fields <p><code>chain_id</code> ChainId</p> <p>The chain ID of the peer.</p> <p><code>address</code> [u8; 32]</p> <p>The address of the peer transceiver.</p>"},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#constants","title":"Constants","text":""},{"location":"products/token-transfers/native-token-transfers/reference/transceivers/solana/#transceiver_type_1","title":"TRANSCEIVER_TYPE","text":"<p>The type identifier for this transceiver implementation. (Defined in lib.rs)</p> <pre><code>pub const TRANSCEIVER_TYPE: &amp;str = \"wormhole\";\n</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/faqs/","title":"Wrapped Token Transfers (WTT) FAQs","text":""},{"location":"products/token-transfers/wrapped-token-transfers/faqs/#can-ownership-of-wrapped-tokens-be-transferred-from-the-wtt","title":"Can ownership of wrapped tokens be transferred from the WTT?","text":"<p>No. Ownership of wrapped token contracts cannot be transferred, because WTT deploys and retains control of these contracts and tokens.</p> <ul> <li>On EVM chains: When you attest a token, WTT deploys a new ERC-20 contract as a beacon proxy. The upgrade authority for these contracts is the WTT contract itself.</li> <li>On Solana: The WTT deploys a new SPL token, where the upgrade authority is a Program Derived Address (PDA) controlled by the WTT contract.</li> </ul> <p>The logic behind deploying these token contracts involves submitting an attestation VAA, which allows WTT to verify and deploy the wrapped token contract on the destination chain.</p> <p>Relevant contracts:</p> <ul> <li>Ethereum ERC-20</li> <li>Solana SPL</li> <li>Attestation VAA and Token Contract Deployment Logic</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/faqs/#how-do-i-update-the-metadata-of-a-wrapped-token","title":"How do I update the metadata of a wrapped token?","text":"<p>Wrapped tokens are deployed and controlled by the WTT program under Guardian authority. You cannot update their metadata directly. Instead, you must coordinate with the respective block explorer teams to request and apply metadata changes.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/faqs/#how-do-i-calculate-the-current-gas-costs-for-ethereum-mainnet-vaa-verification","title":"How do I calculate the current gas costs for Ethereum Mainnet VAA verification?","text":"<p>You can refer to the core-bridge repository for guidance on how to calculate the current gas costs associated with verifying VAAs on Ethereum Mainnet. This repository provides up-to-date references and examples to help you gauge costs accurately.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/faqs/#how-can-i-update-my-wrapped-token-image-on-solscan","title":"How can I update my wrapped token image on Solscan?","text":"<p>Updating the metadata (such as the token image, name, or symbol) of a wrapped token on Solscan requires contacting the Solscan team directly. Wormhole cannot make these updates for you because the wrapped token contracts are owned and controlled by the WTT program, not individual developers or projects.</p> <p>To request an update, contact Solscan via support@solscan.io or their contact form.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/get-started/","title":"Get Started with WTT","text":""},{"location":"products/token-transfers/wrapped-token-transfers/get-started/#introduction","title":"Introduction","text":"<p>Wormhole's Wrapped Token Transfers (WTT) enables seamless multichain token transfers by locking tokens on a source chain and minting equivalent wrapped tokens on a destination chain. This mechanism preserves token properties such as name, symbol, and decimal precision across chains.</p> <p>In this guide, you will use the Wormhole TypeScript SDK to perform two types of transfers. </p> <ul> <li>Manual transfer: Where you control each step.</li> <li>Automatic transfer: Where a relayer finalizes the transfer for you.</li> </ul> <p>These examples will help you understand how WTT works across EVM and non-EVM chains.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>Node.js and npm.</li> <li>Wallets funded with tokens on two supported chains.</li> </ul> <p>This guide uses a Solana wallet with devnet SOL and an EVM wallet with Sepolia ETH for the manual transfer example, and Avalanche Fuji and Celo Alfajores wallets funded with testnet tokens for the automatic transfer. You can adapt the examples to match your preferred chains.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/get-started/#configure-your-token-transfer-environment","title":"Configure Your Token Transfer Environment","text":"<ol> <li> <p>Create a new directory and initialize a Node.js project:</p> <pre><code>mkdir wh-wtt\ncd wh-wtt\nnpm init -y\n</code></pre> </li> <li> <p>Install the required dependencies:</p> <pre><code>npm install @wormhole-foundation/sdk\nnpm install -D tsx typescript\n</code></pre> </li> <li> <p>Create a <code>transfer.ts</code> file to handle the multichain transfer logic, and a <code>helper.ts</code> file to manage wallet signers and token utilities:</p> <pre><code>touch transfer.ts helper.ts\n</code></pre> </li> <li> <p>Set up secure access to your wallets. This guide assumes you are loading your <code>SOL_PRIVATE_KEY</code> and <code>EVM_PRIVATE_KEY</code> from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/get-started/#perform-a-token-transfer","title":"Perform a Token Transfer","text":"<p>This section shows how to run manual and automatic token transfers using a shared project structure. You will define helper utilities once and reuse them across both flows.</p> <p>In the manual transfer, you initiate a transfer on Solana, wait for Guardian signatures, and redeem the tokens on Sepolia, giving you complete control over each step. In the automatic transfer, the relayer handles attestation and redemption, simplifying the process between EVM chains.</p> <ol> <li> <p>Open <code>helper.ts</code> and define utility functions to load private keys, instantiate signers for Solana and EVM chains, and retrieve token decimals as needed:</p> helper.ts<pre><code>import {\n  ChainAddress,\n  ChainContext,\n  Network,\n  Signer,\n  Wormhole,\n  Chain,\n  isTokenId,\n  TokenId,\n} from '@wormhole-foundation/sdk';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport evm from '@wormhole-foundation/sdk/evm';\n\n/**\n * Returns a signer for the given chain using locally scoped credentials.\n * The required values (EVM_PRIVATE_KEY, SOL_PRIVATE_KEY, SUI_MNEMONIC) must\n * be loaded securely beforehand, for example via a keystore, secrets\n * manager, or environment variables (not recommended).\n */\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer;\n  const platform = chain.platform.utils()._platform;\n\n  switch (platform) {\n    case 'Evm':\n      signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), EVM_PRIVATE_KEY!);\n      break;\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), SOL_PRIVATE_KEY!);\n      break;\n    case 'Sui':\n      signer = await (\n        await sui()\n      ).getSigner(await chain.getRpc(), SUI_MNEMONIC!);\n      break;\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  return {\n    chain,\n    signer: signer as Signer&lt;N, C&gt;,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n\n/**\n * Get the number of decimals for the token on the source chain.\n * This helps convert a user-friendly amount (e.g., '1') into raw units.\n */\nexport async function getTokenDecimals&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  token: TokenId,\n  chain: ChainContext&lt;N, any&gt;\n): Promise&lt;number&gt; {\n  return isTokenId(token)\n    ? Number(await wh.getDecimals(token.chain, token.address))\n    : chain.config.nativeTokenDecimals;\n}\n</code></pre> </li> <li> <p>In <code>transfer.ts</code>, choose your transfer mode by selecting the route you pass to the <code>tokenTransfer()</code> object: </p> <ul> <li><code>TokenBridge</code> for manual transfers.</li> <li><code>AutomaticTokenBridge</code> for automatic transfers.</li> </ul> Manual TransferAutomatic Transfer transfer.ts<pre><code>import { wormhole, amount, Wormhole } from '@wormhole-foundation/sdk';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport { getSigner, getTokenDecimals } from './helper';\n\n(async function () {\n  // Initialize Wormhole SDK for Solana and Sepolia on Testnet\n  const wh = await wormhole('Testnet', [solana, sui, evm]);\n\n  // Define the source and destination chains\n  const sendChain = wh.getChain('Solana');\n  const rcvChain = wh.getChain('Sepolia');\n\n  // Load signers and addresses from helpers\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Define the token and amount to transfer\n  const tokenId = Wormhole.tokenId('Solana', 'native');\n  const amt = '0.1';\n\n  // Convert to raw units based on token decimals\n  const decimals = await getTokenDecimals(wh, tokenId, sendChain);\n  const transferAmount = amount.units(amount.parse(amt, decimals));\n\n  // Construct the transfer object\n  const xfer = await wh.tokenTransfer(\n    tokenId,\n    transferAmount,\n    source.address,\n    destination.address,\n    'TokenBridge',\n    undefined\n  );\n\n  // Initiate the transfer from Solana\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  // Wait for the signed attestation from the Guardian network\n  console.log('Fetching Attestation');\n  const timeout = 5 * 60 * 1000; // 5 minutes\n  await xfer.fetchAttestation(timeout);\n\n  // Redeem the tokens on Sepolia\n  console.log('Completing Transfer');\n  const destTxids = await xfer.completeTransfer(destination.signer);\n  console.log(`Completed Transfer: `, destTxids);\n\n  process.exit(0);\n})();\n</code></pre> transfer.ts<pre><code>import { wormhole, amount, Wormhole } from '@wormhole-foundation/sdk';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport { getSigner, getTokenDecimals } from './helper';\n\n(async function () {\n  // Initialize Wormhole SDK for Avalanche and Celo on Testnet\n  const wh = await wormhole('Testnet', [solana, sui, evm]);\n\n  // Define the source and destination chains\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Celo');\n\n  // Load signers and addresses from helpers\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Define the token and amount to transfer\n  const tokenId = Wormhole.tokenId('Avalanche', 'native');\n  const amt = '0.2';\n\n  // Convert to raw units based on token decimals\n  const decimals = await getTokenDecimals(wh, tokenId, sendChain);\n  const transferAmount = amount.units(amount.parse(amt, decimals));\n\n  // Set to false to require manual approval steps\n  const nativeGas = amount.units(amount.parse('0.0', 6));\n\n  // Construct the transfer object\n  const xfer = await wh.tokenTransfer(\n    tokenId,\n    transferAmount,\n    source.address,\n    destination.address,\n    'AutomaticTokenBridge',\n    nativeGas\n  );\n\n  // Initiate the transfer from Avalanche Fuji\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(source.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  process.exit(0);\n})();\n</code></pre> </li> <li> <p>Execute the script to initiate and complete the transfer:</p> <pre><code>npx tsx transfer.ts\n</code></pre> <p>If successful, the expected output should be similar to this:</p> <p> npx tsx transfer.ts Starting Transfer Started Transfer:  ['36UwBBh6HH6wt3VBbNNawMd1ijCk28YgFePrBWfE3vGQFHtbMjY5626nqHubmyQWGNh2ZrN1vHKRrSQDNC3gkZgB'] Getting Attestation Retrying Wormholescan:GetVaaBytes, attempt 0/900 Retrying Wormholescan:GetVaaBytes, attempt 1/900 Retrying Wormholescan:GetVaaBytes, attempt 2/900  Completing Transfer Completed Transfer:  [ '53Nt4mp2KRTk2HFyvUcmP9b6cRXjVAN3wCksoBey9WmT' ] </p> </li> </ol> <p>To verify the transaction and view its details, copy the transaction hash from the output and paste it into Wormholescan.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/get-started/#next-steps","title":"Next Steps","text":"<p>Now that you've completed a manual multichain token transfer, explore these guides to continue building:</p> <ul> <li>Complete Token Transfer Workflow: Build a reusable application that supports multiple chain combinations and transfer modes (manual and automatic).</li> <li>Create Multichain Tokens: Learn how to issue tokens that work across chains.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/overview/","title":"Wrapped Token Transfers (WTT) Overview","text":""},{"location":"products/token-transfers/wrapped-token-transfers/overview/#wrapped-token-transfers-overview","title":"Wrapped Token Transfers Overview","text":"<p>Wrapped Token Transfers (WTT) is a Wormhole module for bridging wrapped tokens across various blockchain networks. Locking assets on one network and minting corresponding wrapped tokens on another facilitates secure, efficient, and composable multichain token movement.</p> <p>This overview covers WTT's main features, general processes, and possible next steps to begin building a cross-chain application.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/overview/#key-features","title":"Key Features","text":"<p>WTT is built to solve interoperability problems in multichain token transfers. Key features include:</p> <ul> <li>Interoperability: Transfer standards-compliant tokens (e.g., ERC-20, SPL) across over 30 supported chains.</li> <li>Lock-and-mint mechanism: Mint wrapped tokens backed 1:1 by locked assets on the source chain.</li> <li>Preserved metadata: Ensure that token properties like name, symbol, and decimals persist across chains.</li> <li>Transfer with payload: Attach arbitrary data to token transfers, enabling the triggering of specific actions.</li> <li>Decentralized security: Verified by the Guardian Network, ensuring cross-chain consistency and message authenticity.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/overview/#how-it-works","title":"How It Works","text":"<p>WTT provides a reliable foundation for multichain interoperability at scale. The transfer process follows these key steps:</p> <ol> <li>Attestation: The token\u2019s metadata (e.g., symbol, name, decimals) is registered on the destination chain. This step is only required once per token.</li> <li>Locking: On the source chain, the native token is locked in a custody account.</li> <li>Message emission: The Guardian Network verifies and emits a VAA.</li> <li>Verification: The VAA is submitted and verified on the destination chain to confirm authenticity.</li> <li>Minting: A wrapped version of the token is minted (or the native token is released) to the recipient on the destination chain.</li> </ol> <p>This diagram showcases a simplified flow of Alice bridging ETH from Ethereum to her account on Solana.</p> <pre><code>sequenceDiagram\n    participant Alice\n    participant Ethereum\n    participant GuardianNetwork\n    participant Solana\n\n    Alice-&gt;&gt;Ethereum: Lock ETH in WTT contract\n    Ethereum-&gt;&gt;GuardianNetwork: Emit transfer message\n    GuardianNetwork-&gt;&gt;GuardianNetwork: Verify and sign message\n\n    GuardianNetwork-&gt;&gt;Solana: Submit signed message\n    Solana-&gt;&gt;Solana: Verify message and mint wrapped ETH (WETH)\n\n    Solana-&gt;&gt;Alice: Deliver wrapped ETH on Solana</code></pre> <p>For a more in-depth understanding of how WTT works, see the Flow of a Transfer page.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/overview/#use-cases","title":"Use Cases","text":"<p>Here are key use cases that highlight the power and versatility of WTT.</p> <ul> <li> <p>Multichain Rewards and Token Utility in Decentralized Platforms (e.g., Chingari) </p> <ul> <li>WTT: Transfer tokens between chains.</li> <li>Messaging: Facilitate the distribution and claiming processes of rewards.</li> </ul> </li> <li> <p>Tokenized Gaming Rewards</p> <ul> <li>WTT: Handle the underlying lock-and-mint logic securely.</li> <li>Connect: Provide a user-friendly way to move game tokens across chains.</li> </ul> </li> <li> <p>Multichain DeFi Arbitrage</p> <ul> <li>WTT: Enables rapid and secure movement of DeFi assets.</li> <li>Connect: Provides a UI widget to onboard users and facilitate seamless multichain swaps within DeFi aggregator platforms.</li> </ul> </li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/overview/#next-steps","title":"Next Steps","text":"<p>If you are looking for more guided practice, take a look at: </p> <ul> <li>Get Started with WTT: Perform token transfers using WTT, including manual and automatic transfers.</li> <li>Complete Token Transfer Flow: Build a cross-chain native token transfer app using Wormhole\u2019s TypeScript SDK, supporting native token transfers across EVM and non-EVM chains.</li> <li>Create Multichain Tokens: Craft a multichain token using Wormhole's Portal Bridge.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/","title":"Message and Payload Structure","text":"<p>To enable secure and flexible cross-chain token transfers, the Wrapped Token Transfers (WTT) defines a set of standardized payloads. These payloads are embedded in Verifiable Action Approvals (VAAs) and processed by bridge contracts on the source and destination chains. Each payload has a unique format and serves a specific role in the lifecycle of token bridging.</p> <p>This page provides a detailed overview of each payload type.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#transfer","title":"Transfer","text":"<p>The <code>Transfer</code> payload (ID = <code>1</code>) is the core mechanism for moving tokens across chains. It is emitted when a user locks or burns tokens on the source chain. On the destination chain, it instructs the bridge to either mint a wrapped token or release native tokens from custody.</p> <pre><code>PayloadID uint8 = 1\nAmount uint256\nTokenAddress bytes32\nTokenChain uint16\nTo bytes32\nToChain uint16\nFee uint256\n</code></pre> Parameters <p><code>PayloadID</code> uint8</p> <p>Value must be <code>1</code>, indicating a <code>Transfer</code> operation.</p> <p><code>Amount</code> uint256</p> <p>Amount being transferred, truncated to 8 decimals for consistency across all chains.</p> <p><code>TokenAddress</code> bytes32</p> <p>Address of the token. Left-zero-padded if shorter than 32 bytes.</p> <p><code>TokenChain</code> uint16</p> <p>Chain ID of the token.</p> <p><code>To</code> bytes32</p> <p>Address of the recipient. Left-zero-padded if shorter than 32 bytes.</p> <p><code>ToChain</code> uint16</p> <p>Chain ID of the recipient.</p> <p><code>Fee</code> uint256</p> <p>Amount of tokens that the user is willing to pay as relayer fee. Must be less than Amount. Optional and can be claimed by relayers who submit the VAA on the target chain.</p> <p>To keep <code>Transfer</code> messages small, they don't carry all the token's metadata. However, this means that before a token can be transferred to a new chain for the first time, the metadata needs to be bridged, and the wrapped asset needs to be created. Metadata, in this case, includes the number of decimals, which is a core requirement for instantiating a token.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#assetmeta","title":"AssetMeta","text":"<p>Before a token can be transferred to a new chain for the first time, its metadata must be attested using the <code>AssetMeta</code> payload (ID = <code>2</code>). This ensures proper decimal precision and display.</p> <pre><code>PayloadID uint8 = 2\nTokenAddress [32]uint8\nTokenChain uint16\nDecimals uint8\nSymbol [32]uint8\nName [32]uint8\n</code></pre> Parameters <p><code>PayloadID</code> uint8</p> <p>Value must be <code>2</code>, indicating an <code>AssetMeta</code> operation.</p> <p><code>TokenAddress</code> [32]uint8</p> <p>Address of the token. Left-zero-padded if shorter than 32 bytes.</p> <p><code>TokenChain</code> uint16</p> <p>Chain ID of the token.</p> <p><code>Decimals</code> uint8</p> <p>Number of decimals the token uses on its native chain (not truncated to 8 decimal places).</p> <p><code>Symbol</code> [32]uint8</p> <p>Symbol of the token, UTF-8 encoded and padded to 32 bytes.</p> <p><code>Name</code> [32]uint8</p> <p>Name of the token, UTF-8 encoded and padded to 32 bytes.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#transferwithpayload","title":"TransferWithPayload","text":"<p>The <code>TransferWithPayload</code> payload (ID = <code>3</code>) extends the standard token transfer by allowing developers to include arbitrary data. This enables interactions with destination chain smart contracts, such as triggering swaps or staking.</p> <pre><code>PayloadID uint8 = 3\nAmount uint256\nTokenAddress bytes32\nTokenChain uint16\nTo bytes32\nToChain uint16\nFromAddress bytes32\nPayload bytes\n</code></pre> Parameters <p><code>PayloadID</code> uint8</p> <p>Value must be <code>3</code>, indicating a <code>TransferWithPayload</code> operation.</p> <p><code>Amount</code> uint256</p> <p>Amount being transferred, truncated to 8 decimals.</p> <p><code>TokenAddress</code> bytes32</p> <p>Address of the token. Left-zero-padded if shorter than 32 bytes. </p> <p><code>TokenChain</code> uint16</p> <p>Chain ID of the token.</p> <p><code>To</code> bytes32</p> <p>Address of the recipient. Must be a contract capable of parsing and handling the payload. Left-zero-padded if shorter than 32 bytes.</p> <p><code>ToChain</code> uint16</p> <p>Chain ID of the recipient.</p> <p><code>FromAddress</code> bytes32</p> <p>Address of the sender on the source chain.</p> <p><code>Payload</code> bytes</p> <p>Arbitrary data passed to the recipient contract. Can be used for DeFi operations, authentication, or app-specific logic.</p> <p>Unlike <code>Transfer</code>, the <code>TransferWithPayload</code> message must be redeemed by the recipient contract since only that contract can handle the custom payload properly.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#registerchain","title":"RegisterChain","text":"<p>The <code>RegisterChain</code> governance payload (Action ID = <code>1</code>) registers a WTT emitter address for a foreign chain. This ensures the bridge only accepts messages from known peers.</p> <pre><code>Module [32]byte\nAction uint8 = 1\nChainId uint16\n\nEmitterChainID uint16\nEmitterAddress [32]uint8\n</code></pre> Parameters <p><code>Module</code> [32]byte</p> <p>Module identifier. Left-padded with <code>TokenBridge</code> for WTT.</p> <p><code>Action</code> uint8</p> <p>Value must be <code>1</code>, indicating a <code>RegisterChain</code> operation.</p> <p><code>ChainID</code> uint16</p> <p>The chain where this governance action should be applied. <code>0</code> is a valid value for all chains.</p> <p><code>EmitterChainID</code> uint16</p> <p>Chain ID of the registered emitter.</p> <p><code>EmitterAddress</code> [32]uint8</p> <p>Address of the registered emitter, left-zero-padded if shorter than 32 bytes.</p> <p>This payload can only be emitted by the Wormhole governance contract, ensuring that each chain accepts messages only from one verified bridge emitter per remote chain.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#upgradecontract","title":"UpgradeContract","text":"<p>The <code>UpgradeContract</code> governance payload (Action ID = <code>2</code>) facilitates upgrades to the WTT contract on a specific chain.</p> <pre><code>Module [32]byte\nAction uint8 = 2\nChainId uint16\n\nNewContract [32]uint8\n</code></pre> Parameters <p><code>Module</code> [32]byte</p> <p>Module identifier, left-padded with <code>TokenBridge</code> for WTT.</p> <p><code>Action</code> uint8</p> <p>Value must be <code>2</code>, indicating an <code>UpgradeContract</code> operation.</p> <p><code>ChainID</code> uint16</p> <p>The target chain where the governance action should be applied.</p> <p><code>NewContract</code> [32]uint8</p> <p>Address of the new WTT contract, left-zero-padded to 32 bytes.</p> <p>This message allows the Wormhole governance system to deploy new versions of the bridge while retaining control over interoperability and security.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/payload-structure/#summary-of-payload-structure","title":"Summary of Payload Structure","text":"Payload Type ID Purpose Who Emits It <code>Transfer</code> PayloadID <code>1</code> Moves tokens between chains by minting or releasing on the destination. WTT contract <code>AssetMeta</code> PayloadID <code>2</code> Attests token metadata (decimals, symbol, name) before first transfer. WTT contract <code>TransferWithPayload</code> PayloadID <code>3</code> Transfers tokens along with a custom payload for contract execution. WTT contract <code>RegisterChain</code> Action <code>1</code> Registers a verified WTT emitter for a foreign chain. Wormhole governance <code>UpgradeContract</code> Action <code>2</code> Upgrades the WTT contract on a specific chain. Wormhole governance"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/","title":"Flow of a WTT Transfer","text":"<p>The Wormhole Wrapped Token Transfers (WTT) enables token transfers across blockchains by combining token-specific logic with Wormhole's core messaging layer. Each supported chain runs its own WTT contract, which manages actions such as locking, burning, minting, and releasing tokens. These contracts communicate directly with Wormhole's core message-passing layer to securely transmit messages between chains.</p> <p>This guide provides a conceptual overview of WTT and its integration with the messaging layer. It outlines each step of the transfer flow and explains how different transfer types work in practice.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#transfer-flow","title":"Transfer Flow","text":"<p>Cross-chain token transfers using WTT follow these steps:</p> <ol> <li> <p>Initiation on the Source Chain</p> <p>The transfer begins when a user calls the WTT contract on the source chain:</p> <ul> <li>Wrapped tokens: The token is burned.</li> <li>Original tokens: If the token is native to the source chain, the token is locked in the contract.</li> </ul> </li> <li> <p>Transfer Message Publication</p> <p>The WTT contract invokes the Wormhole Core Contract, which emits an on-chain message event describing the transfer.</p> </li> <li> <p>Message Observation and Signing</p> <p>Guardians\u2014a decentralized network of validators\u2014monitor the source chain for these message events. A supermajority (13 out of 19) signs the event to generate a Verified Action Approval (VAA)\u2014a cryptographically signed attestation of the transfer.</p> <p>The VAA is then published to the Wormhole network.</p> </li> <li> <p>VAA Submission to the Destination Chain</p> <p>The VAA must be submitted to the WTT contract on the destination chain to complete the transfer. The WTT contract then verifies the VAA by calling the Core Contract behind the scenes. This step can be handled in two ways:</p> <ul> <li>Automatic: A relayer service detects the VAA and submits it to the WTT contract.</li> <li>Manual: The user or dApp retrieves the VAA and submits it directly to the WTT contract.</li> </ul> </li> <li> <p>Finalization of the Transfer on the Destination Chain</p> <p>After the VAA is verified on the destination chain, the WTT contract completes the transfer:</p> <ul> <li>Wrapped tokens: A wrapped representation of the original token is minted.</li> <li>Original tokens: If the token is native to the destination chain, the token is released to the recipient.</li> </ul> </li> </ol> <p>Consider this example: Alice wants to send 5 ETH from Ethereum to Solana. The ETH is locked on Ethereum\u2019s WTT, and an equivalent amount of wrapped ETH is minted on Solana. The diagram below illustrates this transfer flow.</p> <pre><code>sequenceDiagram\n    participant Alice as Alice\n    participant WTTEth as WTT Ethereum&lt;br&gt;(Source Chain)\n    participant CoreEth as Core Contract Ethereum&lt;br&gt;(Source Chain)\n    participant Guardians\n    participant WTTSol as WTT Solana&lt;br&gt;(Destination Chain)\n    participant CoreSol as Core Contract Solana&lt;br&gt;(Destination Chain)\n\n    Alice-&gt;&gt;WTTEth: Initiate ETH transfer&lt;br&gt;(lock ETH)\n    WTTEth-&gt;&gt;CoreEth: Publish transfer message\n    CoreEth--&gt;&gt;Guardians: Emit message event\n    Guardians-&gt;&gt;Guardians: Sign and publish VAA\n\n    alt Automatic VAA submission\n        Guardians-&gt;&gt;WTTSol: Relayer submits VAA\n    else Manual VAA submission\n        Alice-&gt;&gt;Guardians: Retrieve VAA\n        Alice-&gt;&gt;WTTSol: Submit VAA\n    end\n\n    WTTSol-&gt;&gt;CoreSol: Verify VAA\n    CoreSol--&gt;&gt;WTTSol: VAA verified\n    WTTSol--&gt;&gt;Alice: Mint wrapped ETH on Solana (complete transfer)</code></pre> <p>Maybe Alice wants to transfer her wrapped ETH on Solana back to native ETH on Ethereum. The wrapped ETH is burned on Solana\u2019s WTT, and the equivalent 5 ETH are released on Ethereum. The diagram below illustrates this transfer flow.</p> <pre><code>sequenceDiagram\n    participant User as Alice\n    participant WTTSrc as WTT Solana&lt;br&gt;(Source Chain)\n    participant CoreSrc as Core Contract Solana&lt;br&gt;(Source Chain)\n    participant Guardians\n    participant WTTDst as WTT Ethereum&lt;br&gt;(Destination Chain)\n    participant CoreDst as Core Contract Ethereum&lt;br&gt;(Destination Chain)\n\n    User-&gt;&gt;WTTSrc: Initiate transfer &lt;br&gt; (burn wrapped ETH)\n    WTTSrc-&gt;&gt;CoreSrc: Publish message\n    CoreSrc--&gt;&gt;Guardians: Emit message event\n    Guardians-&gt;&gt;Guardians: Sign and publish VAA\n\n    alt Automatic VAA submission\n        Guardians-&gt;&gt;WTTDst: Relayer submits VAA\n    else Manual VAA submission\n        User-&gt;&gt;Guardians: Retrieve VAA\n        User-&gt;&gt;WTTDst: User submits VAA directly\n    end\n\n    WTTDst-&gt;&gt;CoreDst: Verify VAA\n    CoreDst--&gt;&gt;WTTDst: VAA verified\n    WTTDst--&gt;&gt;User: Release native ETH on Ethereum (Complete transfer)</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#automatic-vs-manual-transfers","title":"Automatic vs. Manual Transfers","text":"<p>WTT supports two modes of transfer, depending on whether the VAA submission step is handled automatically or manually:</p> <ul> <li>Automatic: A relayer service listens for new VAAs and automatically submits them to the destination chain.</li> <li>Manual: The user (or dApp) must retrieve the VAA and manually submit it to the destination chain.</li> </ul> <p>Here's a quick breakdown of the key differences:</p> Feature Automatic Transfer Manual Transfer Who submits the VAA? Relayer User or dApp User Experience Seamless, one-step Requires manual intervention Best for End-users, simple UIs Custom dApps, advanced control Dependency Requires relayer support None"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#completing-manual-transfers","title":"Completing Manual Transfers","text":"<p>The user who initiated the transfer must complete it\u00a0within 24 hours for manual transfers. Guardian Sets are guaranteed to be valid for at least that long. If a user waits longer, the Guardian Set may have changed between initiation and redemption, causing the VAA to be rejected.</p> <p>If this occurs, follow the Replace Outdated Signatures in VAAs tutorial to update the VAA with signatures from the current Guardian Set.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#wtt-relayer-tbr","title":"WTT Relayer (TBR)","text":"<p>When completing an automatic transfer using WTT, either through Connect or programmatically via the Wormhole TypeScript SDK, the WTT Relayer (TBR) manages the interaction with the underlying WTT contracts on supported chains where the TBR is available.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#flow-of-an-automatic-transfer-via-tbr","title":"Flow of an Automatic Transfer via TBR","text":"<p>The flow of an automatic transfer using the TBR looks like this:</p> <ol> <li> <p>Initiation on the Source Chain</p> <p>The transfer begins when a user initiates a transfer on the source chain, which results in the TBR contract being called.</p> </li> <li> <p>Prepare and Forward the Transfer</p> <p>The TBR verifies the token, encodes transfer details (relayer fee, native gas request, recipient), and forwards the transfer to WTT.</p> </li> <li> <p>Core Messaging Layer Processes the Transfer </p> <p>WTT emits a message to the Core Contract. Guardians observe the message and produce a signed VAA attesting to the transfer. </p> </li> <li> <p>Off-Chain Relayer Observes the VAA</p> <p>An off-chain relayer verifies the destination chain and token registration and then prepares to complete the transfer.</p> </li> <li> <p>Relayer Computes Native Drop-Off and Submits the VAA</p> <p>The relayer queries the destination TBR for the native gas amount, includes it in the transaction, and submits the signed VAA.</p> </li> <li> <p>TBR Validates and Completes the Transfer</p> <p>The destination TBR validates the VAA by invoking the WTT contract, confirms it's from a registered TBR, verifies the token and native gas request, and then takes custody of the tokens.</p> </li> <li> <p>Asset Distribution on the Destination Chain</p> <p>The TBR sends the remaining tokens and native gas to the user, pays the off-chain relayer fee, and refunds any excess native tokens.</p> </li> </ol> <p>The following diagram illustrates the key steps in the source chain during a transfer:</p> <pre><code>sequenceDiagram\n    participant User\n    participant SourceTBR as Source Chain TBR\n    participant SourceWTT as Source Chain WTT\n    participant Messaging as Core Messaging Layer\n\n    User-&gt;&gt;SourceTBR: Initiate transfer (token, &lt;br&gt;recipient, fees, native gas)\n    SourceTBR-&gt;&gt;SourceWTT: Forward transfer (burn or lock tokens)\n    SourceWTT-&gt;&gt;Messaging: Publish transfer message</code></pre> <p>Once the core messaging layer processes the transfer, the destination chain handles completion as shown below:</p> <pre><code>sequenceDiagram\n    participant Messaging as Core Messaging Layer\n    participant Relayer as Off-chain Relayer\n    participant DestTBR as Destination Chain TBR\n    participant DestWTT as Destination Chain &lt;br&gt; WTT\n    participant DestUser as User &lt;br&gt; (Destination Chain)\n\n    Messaging-&gt;&gt;Relayer: Emit signed VAA for transfer\n    Relayer-&gt;&gt;Relayer: Verifies destination chain and token registration\n    Relayer-&gt;&gt;DestTBR: Query native gas amount\n    Relayer-&gt;&gt;DestTBR: Submit signed VAA\n    DestTBR-&gt;&gt;DestWTT: Validate VAA\n    DestTBR-&gt;&gt;DestTBR: Take custody of tokens\n    DestTBR-&gt;&gt;DestUser: Send tokens (after fees &amp; native gas)\n    DestTBR-&gt;&gt;Relayer: Pay relayer fee &amp; refund excess</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/concepts/transfer-flow/#next-steps","title":"Next Steps","text":"<p>Now that you\u2019ve seen how a transfer works, try both types yourself to experience the full process:</p> <ul> <li>Get Started with WTT</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/","title":"Token Attestation","text":"<p>This guide demonstrates token attestation for registering a token for transfer using the Wrapped Token Transfers (WTT) protocol. An attestation of the token's metadata (e.g., symbol, name, decimals) ensures consistent handling by the destination chain for ease of multichain interoperability. These steps are only required the first time a token is sent to a particular destination chain.</p> <p>Completing this guide will help you accomplish the following:</p> <ul> <li>Verify if a wrapped version of a token exists on a destination chain.</li> <li>Create and submit a token attestation to register a wrapped version of a token on a destination chain.</li> <li>Check for the wrapped version to become available on the destination chain and return the wrapped token address.</li> </ul> <p>The example will register an arbitrary ERC-20 token deployed to Moonbase Alpha for transfer to Solana, but can be adapted for any supported chains.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> <li>The contract address for the token you wish to register.</li> <li>A wallet setup with the following:<ul> <li>Private keys for your source and destination chains.</li> <li>A small amount of gas tokens on your source and destination chains.</li> </ul> </li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#set-up-your-development-environment","title":"Set Up Your Development Environment","text":"<p>Follow these steps to initialize your project, install dependencies, and prepare your developer environment for token attestation.</p> <ol> <li> <p>Create a new directory and initialize a Node.js project using the following commands:</p> <pre><code>mkdir attest-token\ncd attest-token\nnpm init -y\n</code></pre> </li> <li> <p>Install dependencies, including the Wormhole TypeScript SDK:</p> <pre><code>npm install @wormhole-foundation/sdk -D tsx typescript\n</code></pre> </li> <li> <p>Set up secure access to your wallets. This guide assumes you are loading your private key values from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> <li> <p>Create a new file named <code>helper.ts</code> to hold signer functions:</p> <pre><code>touch helper.ts\n</code></pre> </li> <li> <p>Open <code>helper.ts</code> and add the following code:</p> helper.ts<pre><code>import {\n  Chain,\n  ChainAddress,\n  ChainContext,\n  Wormhole,\n  Network,\n  Signer,\n} from '@wormhole-foundation/sdk';\nimport type { SignAndSendSigner } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\n\n/**\n * Returns a signer for the given chain using locally scoped credentials.\n * The required values (EVM_PRIVATE_KEY, SOL_PRIVATE_KEY, SUI_MNEMONIC) must\n * be loaded securely beforehand, for example via a keystore, secrets\n * manager, or environment variables (not recommended).\n */\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: SignAndSendSigner&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer&lt;any, any&gt;;\n  const platform = chain.platform.utils()._platform;\n\n  // Customize the signer by adding or removing platforms as needed. Be sure\n  // to import the necessary packages for the platforms you want to support\n  switch (platform) {\n    case 'Evm':\n      signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), EVM_PRIVATE_KEY!);\n      break;\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), SOL_PRIVATE_KEY!);\n      break;\n    case 'Sui':\n      signer = await (\n        await sui()\n      ).getSigner(await chain.getRpc(), SUI_MNEMONIC!);\n      break;\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  const typedSigner = signer as SignAndSendSigner&lt;N, C&gt;;\n\n  return {\n    chain,\n    signer: typedSigner,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n</code></pre> <p>You can view the list of supported platform constants in the Wormhole SDK GitHub repo.</p> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#check-for-a-wrapped-version-of-a-token","title":"Check for a Wrapped Version of a Token","text":"<p>If you are working with a newly created token that you know has never been transferred to the destination chain, you can continue to the Create Attestation on the Source Chain section.</p> <p>Since attestation is a one-time process, it is good practice when working with existing tokens to incorporate a check for wrapped versions into your WTT flow. Follow these steps to check for a wrapped version of a token:</p> <ol> <li> <p>Create a new file called <code>attest.ts</code> to hold the wrapped version check and attestation logic:</p> <pre><code>touch attest.ts\n</code></pre> </li> <li> <p>Open <code>attest.ts</code> and add the following code:</p> attest.ts<pre><code>import {\n  wormhole,\n  Wormhole,\n  TokenId,\n  TokenAddress,\n} from '@wormhole-foundation/sdk';\nimport { signSendWait, toNative } from '@wormhole-foundation/sdk-connect';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from './helper';\n\nasync function attestToken() {\n  // Initialize wormhole instance, define the network, platforms, and chains\n  const wh = await wormhole('Testnet', [evm, solana]);\n  const sourceChain = wh.getChain('Moonbeam');\n  const destinationChain = wh.getChain('Solana');\n\n  // Define the token to check for a wrapped version\n  const tokenId: TokenId = Wormhole.tokenId(\n    sourceChain.chain,\n    'INSERT_TOKEN_CONTRACT_ADDRESS'\n  );\n  // Check if the token is registered with the destination chain WTT (Token Bridge) contract\n  // Registered = returns the wrapped token ID\n  // Not registered = runs the attestation flow to register the token\n  let wrappedToken: TokenId;\n  try {\n    wrappedToken = await wh.getWrappedAsset(destinationChain.chain, tokenId);\n    console.log(\n      '\u2705 Token already registered on destination:',\n      wrappedToken.address\n    );\n  } catch (e) {\n    // Attestation on the source chain flow code\n    console.log(\n      '\u26a0\ufe0f Token is NOT registered on destination. Running attestation flow...'\n    );\n  }\n}\n\nattestToken().catch((e) =&gt; {\n  console.error('\u274c Error in attestToken', e);\n  process.exit(1);\n});\n</code></pre> <p>After initializing a Wormhole instance and defining the source and destination chains, this code does the following:</p> <ul> <li>Defines the token to check: Use the contract address on the source chain for this value.</li> <li>Calls <code>getWrappedAsset</code>: Part of the <code>Wormhole</code> class, the method does the following:<ul> <li>Accepts a <code>TokenId</code> representing a token on the source chain.</li> <li>Checks for a corresponding wrapped version of the destination chain's WTT contract.</li> <li>Returns the <code>TokenId</code> for the wrapped token on the destination chain if a wrapped version exists.</li> </ul> </li> </ul> </li> <li> <p>Run the script using the following command:</p> <pre><code>npx tsx attest.ts\n</code></pre> </li> <li> <p>If the token has a wrapped version registered with the destination chain WTT contract, you will see terminal output similar to the following:</p> <p> npx tsx attest.ts \u2705 Token already registered on destination: SolanaAddress {     type: 'Native',     address: PublicKey [PublicKey(2qjSAGrpT2eTb673KuGAR5s6AJfQ1X5Sg177Qzuqt7yB)] {     _bn: BN: 1b578bb9b7a04a1aab3b5b64b550d8fc4f73ab343c9cf8532d2976b77ec4a8ca     }     } </p> <p>You can safely use WTT to transfer this token to the destination chain.</p> <p>If a wrapped version isn't found on the destination chain, your terminal output will be similar to the following, and you must attest the token before transfer:</p> <p> npx tsx attest.ts \u26a0\ufe0f Token is NOT registered on destination. Running attestation flow... </p> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#create-attestation-on-the-source-chain","title":"Create Attestation on the Source Chain","text":"<p>To create the attestation transaction on the source chain, open <code>attest.ts</code> and replace the <code>// Attestation flow code</code> comment with the following code:</p> attest.ts<pre><code>    // Retrieve the WTT (Token Bridge) contract text for the source chain\n    const tb = await sourceChain.getTokenBridge();\n    // Get the signer for the source chain\n    const sourceSigner = await getSigner(sourceChain);\n    // Define the token to attest and a payer address\n    const token: TokenAddress&lt;typeof sourceChain.chain&gt; = toNative(\n      sourceChain.chain,\n      tokenId.address.toString()\n    );\n    const payer = toNative(sourceChain.chain, sourceSigner.signer.address());\n    // Create a new attestation and sign and send the transaction\n    for await (const tx of tb.createAttestation(token, payer)) {\n      const txids = await signSendWait(\n        sourceChain,\n        tb.createAttestation(token),\n        sourceSigner.signer\n      );\n      // Attestation on the destination chain flow code\n      console.log('\u2705 Attestation transaction sent:', txids);\n</code></pre> <p>This code does the following:</p> <ul> <li>Gets the source chain WTT context: This is where the transaction is sent to create the attestation.</li> <li>Defines the token to attest and the payer.</li> <li>Calls <code>createAttestation</code>: Defined in the <code>TokenBridge</code> interface, the <code>createAttestation</code> method does the following:<ul> <li>Accepts a <code>TokenAddress</code> representing the token on its native chain.</li> <li>Accepts an optional <code>payer</code> address to cover the transaction fees for the attestation transaction.</li> <li>Prepares an attestation for the token, including metadata such as address, symbol, and decimals.</li> <li>Returns an <code>AsyncGenerator</code> that yields unsigned transactions, which are then signed and sent to initiate the attestation process on the source chain.</li> </ul> </li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#submit-attestation-on-destination-chain","title":"Submit Attestation on Destination Chain","text":"<p>The attestation flow finishes with the following: </p> <ul> <li>Using the transaction ID returned from the <code>createAttestation</code> transaction on the source chain to retrieve the associated signed <code>TokenBridge:AttestMeta</code> VAA.</li> <li>Submitting the signed VAA to the destination chain to provide Guardian-backed verification of the attestation transaction on the source chain. </li> <li>The destination chain uses the attested metadata to create the wrapped version of the token and register it with its WTT contract.</li> </ul> <p>Follow these steps to complete your attestation flow logic:</p> <ol> <li> <p>Add the following code to <code>attest.ts</code>:</p> attest.ts<pre><code>      // Parse the transaction to get Wormhole message ID\n      const messages = await sourceChain.parseTransaction(txids[0].txid);\n      console.log('\u2705 Attestation messages:', messages);\n      // Set a timeout for fetching the VAA, this can take several minutes\n      // depending on the source chain network and finality\n      const timeout = 25 * 60 * 1000;\n      // Fetch the VAA for the attestation message\n      const vaa = await wh.getVaa(\n        messages[0]!,\n        'TokenBridge:AttestMeta',\n        timeout\n      );\n      if (!vaa) throw new Error('\u274c VAA not found before timeout.');\n      // Get the WTT (Token Bridge) contract text for the destination chain\n      // and submit the attestation VAA\n      const destTb = await destinationChain.getTokenBridge();\n      // Get the signer for the destination chain\n      const destinationSigner = await getSigner(destinationChain);\n      const payer = toNative(\n        destinationChain.chain,\n        destinationSigner.signer.address()\n      );\n      const destTxids = await signSendWait(\n        destinationChain,\n        destTb.submitAttestation(vaa, payer),\n        destinationSigner.signer\n      );\n      console.log('\u2705 Attestation submitted on destination:', destTxids);\n    }\n    // Poll for the wrapped token to appear on the destination chain\n    const maxAttempts = 50; // ~5 minutes with 6s interval\n    const interval = 6000;\n    let attempt = 0;\n    let registered = false;\n\n    while (attempt &lt; maxAttempts &amp;&amp; !registered) {\n      attempt++;\n      try {\n        const wrapped = await wh.getWrappedAsset(\n          destinationChain.chain,\n          tokenId\n        );\n        console.log(\n          `\u2705 Wrapped token is now available on ${destinationChain.chain}:`,\n          wrapped.address\n        );\n        registered = true;\n      } catch {\n        console.log(\n          `\u23f3 Waiting for wrapped token to register on ${destinationChain.chain}...`\n        );\n        await new Promise((res) =&gt; setTimeout(res, interval));\n      }\n    }\n    if (!registered) {\n      throw new Error(\n        `\u274c Token attestation did not complete in time on ${destinationChain.chain}`\n      );\n    }\n    console.log(\n      `\ud83d\ude80 Token attestation complete! Token registered with ${destinationChain.chain}.`\n    );\n</code></pre> </li> <li> <p>Run the script using the following command:</p> <pre><code>npx tsx attest.ts\n</code></pre> </li> <li> <p>You will see terminal output similar to the following:</p> <p> npx tsx attest.ts \u26a0\ufe0f Token is NOT registered on destination. Running attestation     flow... \u2705 Attestation transaction sent: [ { chain: 'Moonbeam', txid:     '0xbaf7429e1099cac6f39ef7e3c30e38776cfb5b6be837dcd8793374c8ee491799' }     ] \u2705 Attestation messages: [ { chain: 'Moonbeam', emitter: UniversalAddress {     address: [Uint8Array] }, sequence: 1507n } ] Retrying Wormholescan:GetVaaBytes, attempt 0/750 Retrying Wormholescan:GetVaaBytes, attempt 1/750 ..... Retrying Wormholescan:GetVaaBytes, attempt 10/750 \ud83d\udce8 Submitting attestation VAA to Solana... \u2705 Attestation submitted on destination: [ { chain: 'Solana', txid:     '3R4oF5P85jK3wKgkRs5jmE8BBLoM4wo2hWSgXXL6kA8efbj2Vj9vfuFSb53xALqYZuv3FnXDwJNuJfiKKDwpDH1r'     } ] \u2705 Wrapped token is now available on Solana: SolanaAddress { type:     'Native', address: PublicKey     [PublicKey(2qjSAGrpT2eTb673KuGAR5s6AJfQ1X5Sg177Qzuqt7yB)] { _bn: BN:     1b578bb9b7a04a1aab3b5b64b550d8fc4f73ab343c9cf8532d2976b77ec4a8ca } } \ud83d\ude80 Token attestation complete! </p> View complete script attest.ts<pre><code>import {\n  wormhole,\n  Wormhole,\n  TokenId,\n  TokenAddress,\n} from '@wormhole-foundation/sdk';\nimport { signSendWait, toNative } from '@wormhole-foundation/sdk-connect';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from './helper';\n\nasync function attestToken() {\n  // Initialize wormhole instance, define the network, platforms, and chains\n  const wh = await wormhole('Testnet', [evm, solana]);\n  const sourceChain = wh.getChain('Moonbeam');\n  const destinationChain = wh.getChain('Solana');\n\n  // Define the token to check for a wrapped version\n  const tokenId: TokenId = Wormhole.tokenId(\n    sourceChain.chain,\n    'INSERT_TOKEN_CONTRACT_ADDRESS'\n  );\n  // Check if the token is registered with the destination chain WTT (Token Bridge) contract\n  // Registered = returns the wrapped token ID\n  // Not registered = runs the attestation flow to register the token\n  let wrappedToken: TokenId;\n  try {\n    wrappedToken = await wh.getWrappedAsset(destinationChain.chain, tokenId);\n    console.log(\n      '\u2705 Token already registered on destination:',\n      wrappedToken.address\n    );\n  } catch (e) {\n    // Attestation on the source chain flow code\n    console.log(\n      '\u26a0\ufe0f Token is NOT registered on destination. Running attestation flow...'\n    );\n\n    // Retrieve the WTT (Token Bridge) contract text for the source chain\n    const tb = await sourceChain.getTokenBridge();\n    // Get the signer for the source chain\n    const sourceSigner = await getSigner(sourceChain);\n    // Define the token to attest and a payer address\n    const token: TokenAddress&lt;typeof sourceChain.chain&gt; = toNative(\n      sourceChain.chain,\n      tokenId.address.toString()\n    );\n    const payer = toNative(sourceChain.chain, sourceSigner.signer.address());\n    // Create a new attestation and sign and send the transaction\n    for await (const tx of tb.createAttestation(token, payer)) {\n      const txids = await signSendWait(\n        sourceChain,\n        tb.createAttestation(token),\n        sourceSigner.signer\n      );\n      // Attestation on the destination chain flow code\n      console.log('\u2705 Attestation transaction sent:', txids);\n\n      // Parse the transaction to get Wormhole message ID\n      const messages = await sourceChain.parseTransaction(txids[0].txid);\n      console.log('\u2705 Attestation messages:', messages);\n      // Set a timeout for fetching the VAA, this can take several minutes\n      // depending on the source chain network and finality\n      const timeout = 25 * 60 * 1000;\n      // Fetch the VAA for the attestation message\n      const vaa = await wh.getVaa(\n        messages[0]!,\n        'TokenBridge:AttestMeta',\n        timeout\n      );\n      if (!vaa) throw new Error('\u274c VAA not found before timeout.');\n      // Get the WTT (Token Bridge) contract text for the destination chain\n      // and submit the attestation VAA\n      const destTb = await destinationChain.getTokenBridge();\n      // Get the signer for the destination chain\n      const destinationSigner = await getSigner(destinationChain);\n      const payer = toNative(\n        destinationChain.chain,\n        destinationSigner.signer.address()\n      );\n      const destTxids = await signSendWait(\n        destinationChain,\n        destTb.submitAttestation(vaa, payer),\n        destinationSigner.signer\n      );\n      console.log('\u2705 Attestation submitted on destination:', destTxids);\n    }\n    // Poll for the wrapped token to appear on the destination chain\n    const maxAttempts = 50; // ~5 minutes with 6s interval\n    const interval = 6000;\n    let attempt = 0;\n    let registered = false;\n\n    while (attempt &lt; maxAttempts &amp;&amp; !registered) {\n      attempt++;\n      try {\n        const wrapped = await wh.getWrappedAsset(\n          destinationChain.chain,\n          tokenId\n        );\n        console.log(\n          `\u2705 Wrapped token is now available on ${destinationChain.chain}:`,\n          wrapped.address\n        );\n        registered = true;\n      } catch {\n        console.log(\n          `\u23f3 Waiting for wrapped token to register on ${destinationChain.chain}...`\n        );\n        await new Promise((res) =&gt; setTimeout(res, interval));\n      }\n    }\n    if (!registered) {\n      throw new Error(\n        `\u274c Token attestation did not complete in time on ${destinationChain.chain}`\n      );\n    }\n    console.log(\n      `\ud83d\ude80 Token attestation complete! Token registered with ${destinationChain.chain}.`\n    );\n  }\n}\n\nattestToken().catch((e) =&gt; {\n  console.error('\u274c Error in attestToken', e);\n  process.exit(1);\n});\n</code></pre> </li> </ol> <p>Congratulations! You've successfully created and submitted an attestation to register a token for transfer via WTT.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/attest-tokens/#next-steps","title":"Next Steps","text":"<ul> <li>Transfer Wrapped Assets: Follow this guide to incorporate token attestation and registration into an end-to-end WTT flow.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/fetch-signed-vaa/","title":"Fetch a Signed VAA","text":"<p>This guide demonstrates how to fetch a signed Verified Action Approval (VAA), first programmatically using the TypeScript SDK, then manually using the Wormholescan explorer. VAA retrieval is a key step in manual messaging and transfer flows. Knowing how to locate a relevant VAA can also help with debugging and monitoring transactions while building out your integration.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/fetch-signed-vaa/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js and npm</li> <li>TypeScript (installed globally)</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/fetch-signed-vaa/#set-up-your-developer-environment","title":"Set Up Your Developer Environment","text":"<p>Follow these steps to initialize your project, install dependencies, and prepare your developer environment:</p> <ol> <li> <p>Create a new directory and initialize a Node.js project using the following commands:</p> <pre><code>mkdir fetch-vaa\ncd fetch-vaa\nnpm init -y\n</code></pre> </li> <li> <p>Install dependencies, including the Wormhole TypeScript SDK:</p> </li> </ol> <pre><code>npm install @wormhole-foundation/sdk -D tsx typescript\n</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/fetch-signed-vaa/#fetch-vaa-via-typescript-sdk","title":"Fetch VAA via TypeScript SDK","text":"<p>Follow these steps to search for and retrieve a VAA using the TypeScript SDK:</p> <ol> <li> <p>Create a new file called <code>fetch-vaa.ts</code> using the following command:</p> <pre><code>touch fetch-vaa.ts\n</code></pre> </li> <li> <p>Open your <code>fetch-vaa.ts</code> file and add the following code:</p> fetch-vaa.ts<pre><code>import { wormhole } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport { serialize } from '@wormhole-foundation/sdk-definitions';\nimport { toChainId } from '@wormhole-foundation/sdk-base';\n\nasync function main() {\n  // Initialize the Wormhole SDK with the network and platform\n  // to match the source chain for the transaction ID\n  const wh = await wormhole('Testnet', [evm]);\n  // Source chain transaction ID for the VAA you want to fetch\n  const txid =\n    'INSERT_TRANSACTION_ID';\n  // Call getVaa to fetch the VAA associated with the transaction ID\n  // and decode returned data into a human-readable format\n  const vaa = await wh.getVaa(txid, 'Uint8Array', 60000);\n  if (!vaa) {\n    console.error('\u274c VAA not found');\n    process.exit(1);\n  }\n  const { emitterChain, emitterAddress, sequence } = vaa;\n  const chainId = toChainId(emitterChain);\n  const emitterHex = emitterAddress.toString();\n\n  const vaaBytes = serialize(vaa);\n  const vaaHex = Buffer.from(vaaBytes).toString('hex');\n\n  console.log('\u2705 VAA Info');\n  console.log(`Chain: ${chainId}`);\n  console.log(`Emitter: ${emitterHex}`);\n  console.log(`Sequence: ${sequence}`);\n  console.log('---');\n  console.log(`VAA Bytes (hex):\\n${vaaHex}`);\n  // Return the VAA object for further processing if needed\n  return vaa;\n}\n\nmain().catch(console.error);\n</code></pre> <p>This code does the following:</p> <ul> <li>Initializes a Wormhole instance with the same <code>network</code> and <code>platform</code> as the source chain transfer transaction.</li> <li>Accepts the transaction ID from the source chain transfer transaction.</li> <li>Prints the associated <code>chain</code>, <code>emitter</code>, <code>sequence</code>, and VAA bytes to the terminal.</li> <li>Returns the <code>vaa</code> object for any further processing.</li> </ul> </li> <li> <p>Run the script with the following command:</p> <pre><code>npx tsx fetch-vaa.ts\n</code></pre> </li> <li> <p>You will see terminal output similar to the following:</p> <p> npx tsx fetch-vaa.ts \u2705 VAA Info Chain: 16 Emitter: 0x000000000000000000000000bc976d4b9d57e57c3ca52e1fd136c45ff7955a96 Sequence: 1512 --- VAA Bytes (hex): 010000000001004d34d189b894acf4c16b9f456f908ca8b60aa9b2fa77cfa6ebc18f864818c21a7e18b6c4f72415f441be4d2b666c5b897d354cec0e950b935b15806d002d39670168557fb6000000000010000000000000000000000000bc976d4b9d57e57c3ca52e1fd136c45ff7955a9600000000000005e8010100000000000000000000000000000000000000000000000000000000009896800000000000000000000000009b2ff7b2b5a459853224a3317b786d8e85026660001084b1e2f8a26ddff1a55eed46add73a9b556256f2afda1072f6cfdab1dcb2d53000010000000000000000000000000000000000000000000000000000000000000000 </p> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/fetch-signed-vaa/#fetch-vaa-via-wormholescan","title":"Fetch VAA via Wormholescan","text":"<p>You can also use Wormholescan's UI to manually search for a VAA using the source transaction ID, VAA ID, or a wallet address. This type of quick search is helpful during debugging or testing of your integration. Follow these steps to fetch a VAA using Wormholescan:</p> <ol> <li> <p>On Wormholescan, use the dropdown menu in the top right corner to select either Mainnet or Testnet.</p> </li> <li> <p>Enter your transaction ID in the search bar and select \"return\" or \"enter\" to submit your search request. Alternatively, you can enter the wallet address of the transaction signer and return any transactions under that account.</p> <p></p> </li> <li> <p>Inspect the returned search results. Note that the source transaction ID, current status, transaction details, and the VAA ID are included.</p> <p></p> </li> </ol> <p>Congratulations! You've now fetched a signed VAA using both the TypeScript SDK and Wormholescan UI. These skills are valuable when developing manual transfer or messaging processes, as well as debugging and testing an integration build. </p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/","title":"Transfer Wrapped Assets","text":"<p>This guide demonstrates how to implement Wrapped Token Transfers (WTT) protocol via the TypeScript SDK. This example will transfer an arbitrary ERC-20 token from Moonbase Alpha to Solana, but can be adapted for any supported chains.</p> <p>Completing this guide will help you accomplish the following:</p> <ul> <li>Verify if a wrapped version of a token exists on a destination chain.</li> <li>Create a token attestation to register a wrapped version of a token on a destination chain.</li> <li>Transfer wrapped assets using WTT's automatic or manual transfers.</li> <li>Fetch a signed Verified Action Approval (VAA).</li> <li>Manually redeem a signed VAA to claim tokens on a destination chain.</li> </ul> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> <li>The Wormhole TypeScript SDK version 3.0 or above.</li> <li>The contract address for the ERC-20 token you wish to transfer.</li> <li>A wallet setup with the following:<ul> <li>Private keys for your source and destination chains.</li> <li>A small amount of gas tokens on your source and destination chains.</li> <li>A balance on your source chain of the ERC-20 token you want to transfer.</li> </ul> </li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/#set-up-your-token-transfer-environment","title":"Set Up Your Token Transfer Environment","text":"<p>Follow these steps to initialize your project, install dependencies, and prepare your developer environment for multichain token transfers.</p> <ol> <li> <p>Create a new directory and initialize a Node.js project using the following commands:    <pre><code>mkdir wtt-demo\ncd wtt-demo\nnpm init -y\n</code></pre></p> </li> <li> <p>Install dependencies, including the Wormhole TypeScript SDK:    <pre><code>npm install @wormhole-foundation/sdk -D tsx typescript\n</code></pre></p> </li> <li> <p>Set up secure access to your wallets. This guide assumes you are loading your private key values from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> <li> <p>Create a new file named <code>helpers.ts</code> to hold signer and decimal functions:    <pre><code>touch helpers.ts\n</code></pre></p> </li> <li> <p>Open <code>helpers.ts</code> and add the following code:     helpers.ts<pre><code>import {\n  Chain,\n  ChainAddress,\n  ChainContext,\n  isTokenId,\n  Wormhole,\n  Network,\n  Signer,\n  TokenId,\n} from '@wormhole-foundation/sdk';\nimport type { SignAndSendSigner } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\n\n/**\n * Returns a signer for the given chain using locally scoped credentials.\n * The required values (EVM_PRIVATE_KEY, SOL_PRIVATE_KEY, SUI_MNEMONIC) must\n * be loaded securely beforehand, for example via a keystore, secrets\n * manager, or environment variables (not recommended).\n */\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;,\n  gasLimit?: bigint\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: SignAndSendSigner&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer&lt;any, any&gt;;\n  const platform = chain.platform.utils()._platform;\n\n  // Customize the signer by adding or removing platforms as needed\n  // Be sure to import the necessary packages for the platforms you want to support\n  switch (platform) {\n    case 'Evm':\n      const evmSignerOptions = gasLimit ? { gasLimit } : {};\n      (signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), EVM_PRIVATE_KEY!)),\n        evmSignerOptions;\n      break;\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), SOL_PRIVATE_KEY!);\n      break;\n    case 'Sui':\n      signer = await (\n        await sui()\n      ).getSigner(await chain.getRpc(), SUI_MNEMONIC!);\n      break;\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  const typedSigner = signer as SignAndSendSigner&lt;N, C&gt;;\n\n  return {\n    chain,\n    signer: typedSigner,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n\n/**\n * Get the number of decimals for the token on the source chain.\n * This helps convert a user-friendly amount (e.g., '1') into raw units.\n */\nexport async function getTokenDecimals&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  token: TokenId,\n  chain: ChainContext&lt;N, any&gt;\n): Promise&lt;number&gt; {\n  return isTokenId(token)\n    ? Number(await wh.getDecimals(token.chain, token.address))\n    : chain.config.nativeTokenDecimals;\n}\n</code></pre></p> <p>You can view the constants for platform names in the GitHub repo for a list of supported platforms</p> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/#verify-token-registration-attestation","title":"Verify Token Registration (Attestation)","text":"<p>Tokens must be registered on the destination chain before they can be bridged. This process involves submitting an attestation with the native token metadata to the destination chain, which enables the destination chain's WTT contract to create a corresponding wrapped version with the same attributes as the native token.</p> <p>Registration via attestation is only required the first time a given token is sent to that specific destination chain. Follow these steps to check the registration status of a token:</p> <ol> <li> <p>Create a new file named <code>transfer.ts</code>:    <pre><code>touch transfer.ts\n</code></pre></p> </li> <li> <p>Open your <code>transfer.ts</code> file and add the following code:     transfer.ts<pre><code>import { wormhole, Wormhole, TokenId } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner, getTokenDecimals } from './helpers';\n\nasync function transferTokens() {\n  // Initialize wh instance\n  const wh = await wormhole('Testnet', [evm, solana]);\n  // Define sourceChain and destinationChain, get chain contexts\n  const sourceChain = wh.getChain('Moonbeam');\n  const destinationChain = wh.getChain('Solana');\n  // Load signers for both chains\n  const sourceSigner = await getSigner(sourceChain);\n  const destinationSigner = await getSigner(destinationChain);\n\n  // Define token and amount to transfer\n  const tokenId: TokenId = Wormhole.tokenId(\n    sourceChain.chain,\n    'INSERT_TOKEN_CONTRACT_ADDRESS'\n  );\n  // Replace with amount you want to transfer\n  // This is a human-readable number, e.g., 0.2 for 0.2 tokens\n  const amount = INSERT_AMOUNT;\n  // Convert to raw units based on token decimals\n  const decimals = await getTokenDecimals(wh, tokenId, sourceChain);\n  const transferAmount = BigInt(Math.floor(amount * 10 ** decimals));\n\n  // Check if the token is registered with destinationChain WTT (Token Bridge) contract\n  // Registered = returns the wrapped token ID, continues with transfer\n  // Not registered = runs the attestation flow to register the token\n  let wrappedToken: TokenId;\n  try {\n    wrappedToken = await wh.getWrappedAsset(destinationChain.chain, tokenId);\n    console.log(\n      '\u2705 Token already registered on destination:',\n      wrappedToken.address\n    );\n  } catch (e) {\n    console.log(\n      '\u26a0\ufe0f Token is NOT registered on destination. Attestation required before transfer can proceed...'\n    );\n  }\n  // Insert Initiate Transfer on Source Chain code\n}\n\ntransferTokens().catch((e) =&gt; {\n  console.error('\u274c Error in transferTokens', e);\n  process.exit(1);\n});\n</code></pre></p> <p>This code does the following:</p> <ul> <li>Initializes a <code>wormhole</code> instance and defines the source and destination chains.</li> <li>Imports the signer and decimal functions from <code>helpers.ts</code>.</li> <li>Identifies the token and amount to transfer.</li> <li>Checks to see if a wrapped version of the ERC-20 token to transfer exists on the destination chain.</li> </ul> </li> <li> <p>Run the script using the following command:</p> <pre><code>npx tsx transfer.ts\n</code></pre> <p>If the token is registered on the destination chain, the address of the existing wrapped asset is returned, and you can continue to initiate the transfer on the source chain. If the token is not registered, you will see a message similar to the following advising the attestation flow will run:</p> <p> npx tsx transfer.ts \u26a0\ufe0f Token is NOT registered on destination. Running attestation flow... </p> <p>If you see this message, follow the steps under \"Need to register a token?\" before continuing with the rest of the transfer flow code.</p> Need to register a token? <p>Token attestation is a one-time process to register a token on a destination chain. You should only follow these steps if your token registration check indicates a wrapped version does not exist on the destination chain.</p> <ol> <li> <p>Create a new file called <code>attestToken.ts</code>:     <pre><code>touch attestToken.ts\n</code></pre></p> </li> <li> <p>Open <code>attestToken.ts</code> and add the following code to create the attestation for token registration:     attestToken.ts<pre><code>import {\n  wormhole,\n  Wormhole,\n  TokenId,\n  TokenAddress,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { signSendWait, toNative } from '@wormhole-foundation/sdk-connect';\nimport { getSigner } from './helpers';\n\nasync function attestToken() {\n  // Initialize wh instance\n  const wh = await wormhole('Testnet', [evm, solana]);\n  // Define sourceChain and destinationChain, get chain contexts\n  const sourceChain = wh.getChain('Moonbeam');\n  const destinationChain = wh.getChain('Solana');\n\n  // Define gas limit for EVM chains (optional)\n  const gasLimit = BigInt(2_500_000);\n\n  // Load signers for both chains\n  const sourceSigner = await getSigner(sourceChain);\n  const destinationSigner = await getSigner(destinationChain, gasLimit);\n\n  // Retrieve the WTT (Token Bridge) context for the source chain\n  // This is where you will send the transaction to attest the token\n  const tb = await sourceChain.getTokenBridge();\n  // Define the token to attest\n  const tokenId: TokenId = Wormhole.tokenId(\n    sourceChain.chain,\n    'INSERT_TOKEN_CONTRACT_ADDRESS'\n  );\n  // Define the token to attest and a payer address\n  const token: TokenAddress&lt;typeof sourceChain.chain&gt; = toNative(\n    sourceChain.chain,\n    tokenId.address.toString()\n  );\n  const payer = toNative(sourceChain.chain, sourceSigner.signer.address());\n  // Call the `createAttestation` method to create a new attestation\n  // and sign and send the transaction\n  for await (const tx of tb.createAttestation(token, payer)) {\n    const txids = await signSendWait(\n      sourceChain,\n      tb.createAttestation(token),\n      sourceSigner.signer\n    );\n    console.log('\u2705 Attestation transaction sent:', txids);\n    // Parse the transaction to get Wormhole message ID\n    const messages = await sourceChain.parseTransaction(txids[0].txid);\n    console.log('\u2705 Attestation messages:', messages);\n    // Set a timeout for fetching the VAA, this can take several minutes\n    // depending on the source chain network and finality\n    const timeout = 25 * 60 * 1000;\n    // Fetch the VAA for the attestation message\n    const vaa = await wh.getVaa(\n      messages[0]!,\n      'TokenBridge:AttestMeta',\n      timeout\n    );\n    if (!vaa) throw new Error('\u274c VAA not found before timeout.');\n    // Get the WTT (Token Bridge) context for the source chaindestination chain\n    // and submit the attestation VAA\n    const destTb = await destinationChain.getTokenBridge();\n    const payer = toNative(\n      destinationChain.chain,\n      destinationSigner.signer.address()\n    );\n    const destTxids = await signSendWait(\n      destinationChain,\n      destTb.submitAttestation(vaa, payer),\n      destinationSigner.signer\n    );\n    console.log('\u2705 Attestation submitted on destination:', destTxids);\n  }\n  // Poll for the wrapped token to appear on the destination chain\n  // before proceeding with the transfer\n  const maxAttempts = 50; // ~5 minutes with 6s interval\n  const interval = 6000;\n  let attempt = 0;\n  let registered = false;\n\n  while (attempt &lt; maxAttempts &amp;&amp; !registered) {\n    attempt++;\n    try {\n      const wrapped = await wh.getWrappedAsset(destinationChain.chain, tokenId);\n      console.log(\n        `\u2705 Wrapped token is now available on ${destinationChain.chain}:`,\n        wrapped.address\n      );\n      registered = true;\n    } catch {\n      console.log(\n        `\u23f3 Waiting for wrapped token to register on ${destinationChain.chain}...`\n      );\n      await new Promise((res) =&gt; setTimeout(res, interval));\n    }\n  }\n\n  if (!registered) {\n    throw new Error(\n      `\u274c Token attestation did not complete in time on ${destinationChain.chain}`\n    );\n  }\n  console.log('\ud83d\ude80 Token attestation complete! Proceed with transfer...');\n}\n</code></pre></p> <p>This code does the following:</p> <ul> <li>Gets the WTT protocol for the source chain.</li> <li>Defines the token to attest for registration on the destination chain and the payer to sign for the transaction.</li> <li>Calls <code>createAttestation</code>, signs, and then sends the transaction.</li> <li>Waits for the signed VAA confirming the attestation creation.</li> <li>Sends the VAA to the destination chain to complete registration.</li> <li>Polls for the wrapped token to be available on the destination chain before continuing the transfer process.</li> </ul> </li> <li> <p>Run the script with the following command:</p> <pre><code>npx tsx attestToken.ts\n</code></pre> <p>When the attestation and registration are complete, you will see terminal output similar to the following:</p> <p> npx tsx transfer.ts \u26a0\ufe0f Token is NOT registered on destination. Running attestation flow... \u2705 Attestation transaction sent: [   {     chain: 'Moonbeam',     txid: '0x2b9878e6d8e92d8ecc96d663904312c18a827ccf0b02380074fdbc0fba7e6b68'   } ] \u2705 Attestation messages: [   {     chain: 'Moonbeam',     emitter: UniversalAddress { address: [Uint8Array] },     sequence: 1505n   } ]  Retrying Wormholescan:GetVaaBytes, attempt 0/750 Retrying Wormholescan:GetVaaBytes, attempt 1/750 .... Retrying Wormholescan:GetVaaBytes, attempt 10/750 \u2705 Attestation submitted on destination: [   {     chain: 'Solana',     txid: '3R4oF5P85jK3wKgkRs5jmE8BBLoM4wo2hWSgXXL6kA8efbj2Vj9vfuFSb53xALqYZuv3FnXDwJNuJfiKKDwpDH1r'   } ] \u2705 Wrapped token is now available on Solana: SolanaAddress {   type: 'Native',   address: PublicKey [PublicKey(2qjSAGrpT2eTb673KuGAR5s6AJfQ1X5Sg177Qzuqt7yB)] {     _bn:    } } \ud83d\ude80 Token attestation complete! Proceeding with transfer... <p>You can now go on to initiate the transfer on the source chain.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/#initiate-transfer-on-source-chain","title":"Initiate Transfer on Source Chain","text":"<p>Before initializing the token transfer, decide whether to use an automatic or manual transaction. Refer to the Automatic vs. Manual Transfers section for a comparison of both options.</p> <p>Follow these steps to add the remaining logic to initiate the token transfer on the source chain. Add the below code where the comment says <code>// Insert Initiate Transfer on Source Chain code</code> in your <code>transfer.ts</code> file:</p> <ol> <li> <p>Open your <code>transfer.ts</code> file and add the following code:</p> Manual TransferAutomatic Transfer transfer.ts<pre><code>  // Build the token transfer object\n  const xfer = await wh.tokenTransfer(\n    tokenId,\n    transferAmount,\n    sourceSigner.address,\n    destinationSigner.address,\n    'TokenBridge',\n    undefined // no payload\n  );\n  console.log('\ud83d\ude80 Built transfer object:', xfer.transfer);\n\n  // Initiate, sign, and send the token transfer\n  const srcTxs = await xfer.initiateTransfer(sourceSigner.signer);\n  console.log('\ud83d\udd17 Source chain tx sent:', srcTxs);\n\n  // For manual transfers, wait for VAA\n  console.log('\u23f3 Waiting for attestation (VAA) for manual transfer...');\n  const timeout = 10 * 60 * 1000; // 10 minutes timeout\n  const attIds = await xfer.fetchAttestation(timeout);\n  console.log('\u2705 Got attestation ID(s):', attIds);\n\n  // Complete the manual transfer on the destination chain\n  console.log('\u21aa\ufe0f Redeeming transfer on destination...');\n  const destTxs = await xfer.completeTransfer(destinationSigner.signer);\n  console.log('\ud83c\udf89 Destination tx(s) submitted:', destTxs);\n</code></pre> transfer.ts<pre><code>  // Optional native gas amount for automatic transfers only\n  const nativeGasAmount = '0.001'; // 0.001 of native gas in human-readable format\n  // Get the decimals for the source chain\n  const nativeGasDecimals = destinationChain.config.nativeTokenDecimals;\n  // Convert to raw units, otherwise set to 0n\n  const nativeGas = BigInt(Number(nativeGasAmount) * 10 ** nativeGasDecimals);\n\n  // Build the token transfer object\n  const xfer = await wh.tokenTransfer(\n    tokenId,\n    transferAmount,\n    sourceSigner.address,\n    destinationSigner.address,\n    'AutomaticTokenBridge',\n    nativeGas\n  );\n  console.log('\ud83d\ude80 Built transfer object:', xfer.transfer);\n\n  // Initiate, sign, and send the token transfer\n  const srcTxs = await xfer.initiateTransfer(sourceSigner.signer);\n  console.log('\ud83d\udd17 Source chain tx sent:', srcTxs);\n\n  // If automatic, no further action is required. The relayer completes the transfer.\n  console.log('\u2705 Automatic transfer: relayer is handling redemption.');\n\n  process.exit(0);\n</code></pre> <p>This code does the following:</p> <ul> <li>Defines the transfer as automatic or manual. For automatic transfers, both the source and destination chain must have an existing <code>TokenBridgeRelayer</code> contract, which listens for and completes transfers on your behalf. You can check the list of deployed <code>TokenBridgeRelayer</code> contracts in the Wormhole SDK repo to see if your desired chains are supported.</li> <li>Sets an optional amount for native gas drop-off. This option allows you to send a small amount of the destination chain's native token to cover gas fees. Native gas drop-off is currently only supported for automatic transfers.</li> <li>Builds the transfer object, initiates the transfer, signs the transaction, and sends it.</li> <li>If the transfer is automatic, the flow ends. Otherwise, the script waits for the signed VAA confirming the transaction on the source chain. The signed VAA is then submitted to the destination chain to claim the tokens and complete the manual transfer.</li> </ul> </li> <li> <p>Run the script with the following command:     <pre><code>npx tsx transfer.ts\n</code></pre></p> </li> <li> <p>You will see terminal output similar to the following:</p> Manual TransferAutomatic Transfer <p> npx tsx transfer.ts \u2705 Token already registered on destination: SolanaAddress {   type: 'Native',   address: PublicKey [PublicKey(2qjSAGrpT2eTb673KuGAR5s6AJfQ1X5Sg177Qzuqt7yB)] {     _bn:    } } \ud83d\ude80 Built transfer object: {   token: {     chain: 'Moonbeam',     address: EvmAddress {       type: 'Native',       address: '0x39F2f26f247CcC223393396755bfde5ecaeb0648'     }   },   amount: 200000000000000000n,   from: {     chain: 'Moonbeam',     address: EvmAddress {       type: 'Native',       address: '0xCD8Bcd9A793a7381b3C66C763c3f463f70De4e12'     }   },   to: {     chain: 'Solana',     address: SolanaAddress {       type: 'Native',       address: [PublicKey [PublicKey(21dmEFTFGBEVoUNjmrxumN6A2xFxNBQXTkK7AmMqNmqD)]]     }   },   protocol: 'TokenBridge',   payload: undefined } \ud83d\udd17 Source chain tx sent: [   '0xf318a1098a81063ac8acc9ca117eeb41ae9abfd9cb550a976721d2fa978f313a' ] \u23f3 Waiting for attestation (VAA) for manual transfer... Retrying Wormholescan:GetVaaBytes, attempt 0/30 Retrying Wormholescan:GetVaaBytes, attempt 1/30 ..... Retrying Wormholescan:GetVaaBytes, attempt 15/30 \u2705 Got attestation ID(s): [   {     chain: 'Moonbeam',     emitter: UniversalAddress { address: [Uint8Array] },     sequence: 1506n   } ] \u21aa\ufe0f Redeeming transfer on destination... \ud83c\udf89 Destination tx(s) submitted: [   '23NRfFZyKJTDLppJF4GovdegxYAuW2HeXTEFSKKNeA7V82aqTVYTkKeM8sCHCDWe7gWooLAPHARjbAheXoxbbwPk' ] <p> npx tsx transfer.ts \u2705 Token already registered on destination: SolanaAddress {   type: 'Native',   address: PublicKey [PublicKey(2qjSAGrpT2eTb673KuGAR5s6AJfQ1X5Sg177Qzuqt7yB)] {     _bn:    } } \ud83d\ude80 Built transfer object: {   token: {     chain: 'Moonbeam',     address: EvmAddress {       type: 'Native',       address: '0x39F2f26f247CcC223393396755bfde5ecaeb0648'     }   },   amount: 200000000000000000n,   from: {     chain: 'Moonbeam',     address: EvmAddress {       type: 'Native',       address: '0xCD8Bcd9A793a7381b3C66C763c3f463f70De4e12'     }   },   to: {     chain: 'Solana',     address: SolanaAddress {       type: 'Native',       address: [PublicKey [PublicKey(21dmEFTFGBEVoUNjmrxumN6A2xFxNBQXTkK7AmMqNmqD)]]     }   },   protocol: 'AutomaticTokenBridge',   nativeGas: 10000000000000000n } \ud83d\udd17 Source chain tx sent: [   '0xf318a1098a81063ac8acc9ca117eeb41ae9abfd9cb550a976721d2fa978f313a' ] \u2705 Automatic transfer: relayer is handling redemption. <p>Congratulations! You've now used WTT to transfer wrapped assets using the Wormhole TypeScript SDK. Consider the following options to build upon what you've achieved. </p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/transfer-wrapped-assets/#next-steps","title":"Next Steps","text":"<ul> <li>Portal Bridge: Visit this site to interact with Wormhole's Portal Bridge, featuring a working WTT integration.</li> <li>Interact with WTT Contracts: This guide explores the Solidity functions used in WTT contracts.</li> <li><code>TokenBridge</code> and <code>AutomaticTokenBridge</code> interfaces: View the source code defining these key interfaces and their associated namespaces.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/","title":"Interact with Wrapped Token Transfer (WTT) Contracts","text":"<p>Wormhole's Wrapped Token Transfers (WTT) enable seamless cross-chain token transfers using a lock-and-mint mechanism. The bridge locks tokens on the source chain and mints them as wrapped assets on the destination chain. Additionally, WTT supports Token Transfers with Messages, where arbitrary byte payloads can be attached to the token transfer, enabling more complex chain interactions. </p> <p>This page outlines the core contract methods needed to integrate WTT functionality into your smart contracts. To understand the theoretical workings of WTT, refer to the WTT page in the Learn section.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#prerequisites","title":"Prerequisites","text":"<p>To interact with the Wormhole WTT, you'll need the following:</p> <ul> <li>The address of the WTT contract on the chains you're working with.</li> <li>The Wormhole chain ID of the chains you're targeting for token transfers.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#how-to-interact-with-wtt-contracts","title":"How to Interact with WTT Contracts","text":"<p>The primary functions of the WTT contracts revolve around:</p> <ul> <li>Attesting a token: Registering a new token for cross-chain transfers.</li> <li>Transferring tokens: Locking and minting tokens across chains.</li> <li>Transferring tokens with a payload: Including additional data with transfers.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#attest-a-token","title":"Attest a Token","text":"<p>Suppose a token has never been transferred to the target chain before transferring it cross-chain. In that case, its metadata must be registered so WTT can recognize it and create a wrapped version if necessary.</p> <p>The attestation process doesn't require you to manually input token details, such as name, symbol, or decimals. Instead, the WTT contract retrieves these values from the token contract itself when you call the <code>attestToken()</code> method.</p> <pre><code>function attestToken(\n    address tokenAddress,\n    uint32 nonce\n) external payable returns (uint64 sequence);\n</code></pre> Parameters <p><code>tokenAddress</code> address</p> <p>The contract address of the token to be attested.</p> <p><code>nonce</code> uint32 </p> <p>An arbitrary value provided by the caller to ensure uniqueness.</p> Returns <p><code>sequence</code> uint64</p> <p>A unique identifier for the attestation transaction.</p> Example <pre><code>IWormhole wormhole = IWormhole(wormholeAddr);\nITokenBridge tokenBridge = ITokenBridge(tokenBridgeAddr);\n\nuint256 wormholeFee = wormhole.messageFee();\n\ntokenBridge.attestToken{value: wormholeFee}(\n    address(tokenImpl), // the token contract to attest\n    234                 // nonce for the transfer\n);\n</code></pre> <p>When <code>attestToken()</code> is called, the contract emits a Verifiable Action Approval (VAA) containing the token's metadata, which the Guardians sign and publish.</p> <p>You must ensure the token is ERC-20 compliant. If it does not implement the standard functions, the attestation may fail or produce incomplete metadata.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#transfer-tokens","title":"Transfer Tokens","text":"<p>Once a token is attested, a cross-chain token transfer can be initiated following the lock-and-mint mechanism. On the source chain, tokens are locked (or burned if they're already a wrapped asset), and a VAA is emitted. On the destination chain, the VAA is used to mint or release the corresponding amount of wrapped tokens.</p> <p>Call <code>transferTokens()</code> to lock/burn tokens and produce a VAA with transfer details.</p> <pre><code>function transferTokens(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint256 arbiterFee,\n    uint32 nonce\n) external payable returns (uint64 sequence);\n</code></pre> Parameters <p><code>token</code> address</p> <p>The address of the token being transferred.</p> <p><code>amount</code> uint256</p> <p>The amount of tokens to be transferred.</p> <p><code>recipientChain</code> uint16</p> <p>The Wormhole chain ID of the destination chain.</p> <p><code>recipient</code> bytes32</p> <p>The recipient's address on the destination chain.</p> <p><code>arbiterFee</code> uint256</p> <p>Optional fee to be paid to an arbiter for relaying the transfer.</p> <p><code>nonce</code> uint32</p> <p>A unique identifier for the transaction.</p> Returns <p><code>sequence</code> uint64</p> <p>A unique identifier for the transfer transaction.</p> Example <pre><code>IWormhole wormhole = IWormhole(wormholeAddr);\nITokenBridge tokenBridge = ITokenBridge(tokenBridgeAddr);\n\n// Get the fee for publishing a message\nuint256 wormholeFee = wormhole.messageFee();\n\ntokenBridge.transferTokens{value: wormholeFee}(\n    token,           // address of the ERC-20 token to transfer\n    amount,          // amount of tokens to transfer\n    recipientChain,  // Wormhole chain ID of the destination chain\n    recipient,       // recipient address on the destination chain (as bytes32)\n    arbiterFee,      // fee for relayer\n    nonce            // nonce for this transfer\n);\n</code></pre> <p>Once a transfer VAA is obtained from the Wormhole Guardian network, the final step is to redeem the tokens on the destination chain. Redemption verifies the VAA's authenticity and releases (or mints) tokens to the specified recipient. To redeem the tokens, call <code>completeTransfer()</code>.</p> <pre><code>function completeTransfer(bytes memory encodedVm) external;\n</code></pre> Parameters <p><code>encodedVm</code> bytes memory</p> <p>The signed VAA containing the transfer details.</p> <p>Note</p> <ul> <li>WTT normalizes token amounts to 8 decimals when passing them between chains. Make sure your application accounts for potential decimal truncation.</li> <li>The VAA ensures the integrity of the message. Only after the Guardians sign the VAA can it be redeemed on the destination chain.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#transfer-tokens-with-payload","title":"Transfer Tokens with Payload","text":"<p>While a standard token transfer moves tokens between chains, a transfer with a payload allows you to embed arbitrary data in the VAA. This data can be used on the destination chain to execute additional logic\u2014such as automatically depositing tokens into a DeFi protocol, initiating a swap on a DEX, or interacting with a custom smart contract.</p> <p>Call <code>transferTokensWithPayload()</code> instead of <code>transferTokens()</code> to include a custom payload (arbitrary bytes) with the token transfer.</p> <pre><code>function transferTokensWithPayload(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint32 nonce,\n    bytes memory payload\n) external payable returns (uint64 sequence);\n</code></pre> Parameters <p><code>token</code> address</p> <p>The address of the token being transferred.</p> <p><code>amount</code> uint256</p> <p>The amount of tokens to be transferred.</p> <p><code>recipientChain</code> uint16</p> <p>The Wormhole chain ID of the destination chain.</p> <p><code>recipient</code> bytes32</p> <p>The recipient's address on the destination chain.</p> <p><code>nonce</code> uint32</p> <p>A unique identifier for the transaction.</p> <p><code>payload</code> bytes memory</p> <p>Arbitrary data payload attached to the transaction.</p> Returns <p><code>sequence</code> uint64</p> <p>A unique identifier for the transfer transaction.</p> Example <pre><code>IWormhole wormhole = IWormhole(wormholeAddr);\nITokenBridge tokenBridge = ITokenBridge(tokenBridgeAddr);\n\n// Get the fee for publishing a message\nuint256 wormholeFee = wormhole.messageFee();\n\ntokenBridge.transferTokensWithPayload{value: wormholeFee}(\n    token,           // address of the ERC-20 token to transfer\n    amount,          // amount of tokens to transfer\n    recipientChain,  // Wormhole chain ID of the destination chain\n    recipient,       // recipient address on the destination chain (as bytes32)\n    nonce,           // nonce for this transfer\n    additionalPayload // additional payload data\n);\n</code></pre> <p>After initiating a transfer on the source chain, the Wormhole Guardian network observes and signs the resulting message, creating a Verifiable Action Approval (VAA). You'll need to fetch this VAA and then call <code>completeTransferWithPayload()</code>.</p> <p>Only the designated recipient contract can redeem tokens. This ensures that the intended contract securely handles the attached payload. On successful redemption, the tokens are minted (if foreign) or released (if native) to the recipient address on the destination chain. For payload transfers, the designated contract can execute the payload's logic at this time.</p> <pre><code>function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\n</code></pre> Parameters <p><code>encodedVm</code> bytes memory</p> <p>The signed VAA containing the transfer details.</p> Returns <p><code>bytes memory</code></p> <p>The extracted payload data.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#source-code-references","title":"Source Code References","text":"<p>For a deeper understanding of WTT implementation and to review the actual source code, please refer to the following links:</p> <ul> <li>WTT contract</li> <li>WTT interface</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/guides/wtt-contracts/#portal-bridge","title":"Portal Bridge","text":"<p>A practical implementation of the Wormhole WTT can be seen in Portal Bridge, which provides an easy-to-use interface for transferring tokens across multiple blockchain networks. It leverages the Wormhole infrastructure to handle cross-chain asset transfers seamlessly, offering users a convenient way to bridge their assets while ensuring security and maintaining token integrity.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/portal/faqs/","title":"FAQs","text":""},{"location":"products/token-transfers/wrapped-token-transfers/portal/faqs/#how-do-i-use-deep-linking-with-portal","title":"How do I use deep-linking with Portal?","text":"<p>You can create a direct link to pre-fill chain and asset selections on Portal Bridge using URL parameters.</p> Parameter Description <code>sourceChain</code> A source chain that will be pre-selected. <code>targetChain</code> A target chain that will be pre-selected. <code>asset</code> The asset key on the source chain (e.g., SOL, USDC, etc.). <code>targetAsset</code> The asset key on the destination chain. <p>Example:</p> <pre><code>https://portalbridge.com/?sourceChain=solana&amp;targetChain=ethereum&amp;asset=SOL&amp;targetAsset=WSOL\n</code></pre> <p>This link will open Portal with:</p> <ul> <li><code>sourceChain</code> pre-selected as <code>solana</code>.</li> <li><code>targetChain</code> pre-selected as <code>ethereum</code>.</li> <li><code>asset</code> pre-selected as <code>SOL</code>.</li> <li><code>targetAsset</code> pre-selected as <code>WSOL</code>.</li> </ul> <p>Note</p> <p>For NTT tokens, you can define just one asset if the same token exists across chains.</p> <p>Example: https://portalbridge.com/?sourceChain=ethereum&amp;targetChain=solana&amp;asset=W</p>"},{"location":"products/token-transfers/wrapped-token-transfers/portal/faqs/#what-does-the-send-to-a-wallet-address-field-do","title":"What does the \"Send to a wallet address\" field do?","text":"<p>After selecting your tokens and connecting your source wallet on Portal, you'll be prompted to connect your destination wallet. At this step, alongside wallet options like MetaMask or Phantom, you'll also see an option labeled \"Send to a wallet address\". This flexibility allows you to enter any wallet address as the recipient rather than connecting a destination wallet, enabling you to send tokens to a predefined recipient, such as a team wallet, treasury address, or cold storage wallet.</p> <p></p> <p>This field is optional. If left empty, the tokens will be sent to your connected wallet.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/portal/faqs/#why-is-the-token-that-i-deployed-using-the-wtt-ntt-framework-not-showing-up-in-the-portal-bridge-ui","title":"Why is the token that I deployed using the WTT / NTT framework not showing up in the Portal Bridge UI?","text":"<p>While deploying tokens to new chains via Wormhole is fully permissionless, these tokens do not automatically show up on the Portal UI. Wormhole Contributors maintain discretion in configuring tokens for Portal to prevent abuse. You can quickly spin up your own UI for token transfers using Wormhole Connect. See the demo repositories to get started:</p> <ul> <li>Basic Connect Demo</li> <li>NTT Connect Demo</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/reference/supported-networks/","title":"Supported Networks","text":"<p>BlockchainEnvironmentMainnetTestnetDevnetQuick LinksEthereumEVM Website Developer Docs Block ExplorerSolanaSVM Website Developer Docs Block ExplorerAlgorandAVM Website Developer Docs Block ExplorerAptosMove VM Website Developer Docs Block ExplorerArbitrumEVM Website Developer Docs Block ExplorerAvalancheEVM Website Developer Docs Block ExplorerBaseEVM Website Developer Docs Block ExplorerBerachainEVM Website Developer Docs Block ExplorerBNB Smart ChainEVM Website Developer Docs Block ExplorerCeloEVM Website Developer Docs Block ExplorerFantomEVM Website Developer Docs Block ExplorerFogoSVM Website Block ExplorerHyperEVM EVM Website Developer DocsInjectiveCosmWasm Website Developer Docs Block ExplorerInkEVM Website Developer Docs Block ExplorerKaiaEVM Website Developer Docs Block ExplorerLineaEVM Website Developer Docs Block ExplorerMantleEVM Website Developer Docs Block ExplorerMezoEVM Website Developer Docs Block ExplorerMonadEVM Website Developer Docs Block ExplorerMoonbeamEVM Website Developer Docs Block ExplorerNEARNEAR VM Website Developer Docs Block ExplorerOptimismEVM Website Developer Docs Block ExplorerPolygonEVM Website Developer Docs Block ExplorerScrollEVM Website Developer Docs Block ExplorerSeiCosmWasm Website Developer Docs Block ExplorerSeievmEVM Website Developer Docs Block ExplorerSuiSui Move VM Website Developer Docs Block ExplorerUnichainEVM Website Developer Docs Block ExplorerWorld ChainEVM Website Developer Docs Block ExplorerX LayerEVM Website Developer Docs Block ExplorerXRPL-EVMEVM Website Developer Docs Block Explorer</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/","title":"Create Multichain Tokens","text":"<p>Blockchain ecosystems are becoming increasingly interconnected, with assets often needing to exist across multiple networks to maximize their utility and reach. For example, tokens created on one chain may want to expand to others to tap into broader audiences and liquidity pools.</p> <p>This guide explains how to create a multichain token\u2014a token that seamlessly bridges across blockchains using the Wormhole protocol. The process is designed to be user-friendly. With just a few steps, your token can become multichain, enabling it to be traded or used on various networks.</p> <p>By the end of this tutorial, you'll learn:</p> <ul> <li>How to register your token for bridging.</li> <li>How to create a wrapped version of your token.</li> <li>How to ensure its visibility on blockchain explorers.</li> </ul> <p>Let\u2019s begin with a straightforward, step-by-step process for creating a multichain token and expanding its reach.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#register-the-token-on-the-source-chain","title":"Register the Token on the Source Chain","text":"<p>The first step in creating a multichain token is registering your token on its source chain. This ensures the token is prepared for bridging across blockchains. Follow these steps:</p> <ol> <li>Open the Portal Bridge.</li> <li>Select the blockchain where your token is currently deployed (source chain).</li> <li>Connect your wallet by following the on-screen instructions.</li> <li>Locate the Asset field and paste the token contract address.</li> <li>Click Next to proceed.</li> </ol> <p></p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#register-the-token-on-the-target-chain","title":"Register the Token on the Target Chain","text":"<p>After registering your token on the source chain, the next step is to select the target chain\u2014the blockchain where you want the wrapped version of your token to exist. This step connects your token to its destination network.</p> <ol> <li>Choose the blockchain where you want the token to be bridged (target chain).</li> <li>Connect your wallet to the target chain.</li> <li>Click Next to finalize the registration process.</li> </ol> <p></p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#send-an-attestation","title":"Send an Attestation","text":"<p>Attestation is a key step in the process. It verifies your token\u2019s metadata, ensuring it is correctly recognized on the target chain\u2019s blockchain explorer (e.g., Etherscan).</p> <ol> <li>Click Attest to initiate the attestation process.</li> <li>Approve the transaction in your wallet when prompted.</li> </ol> <p></p> <p>Note</p> <ul> <li>Attestation is crucial for token metadata to appear correctly on blockchain explorers like Etherscan, allowing users to identify and trust your token.</li> <li>Ensure you have sufficient funds to cover transaction fees on the target chain.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#create-a-wrapped-token","title":"Create a Wrapped Token","text":"<p>The final step is to create the wrapped token on the target chain. This token represents the original asset and enables its use within the target blockchain.</p> <ol> <li>Click Create to generate the wrapped token.</li> <li>Approve the transaction in your wallet when prompted.</li> </ol> <p></p> <p>Upon successful creation, you will see a confirmation screen displaying key details such as the source chain, target chain, and transaction status. This helps verify that the process was completed correctly. Refer to the image below as an example:</p> <p></p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#additional-steps-and-recommendations","title":"Additional Steps and Recommendations","text":"<p>After creating your multichain token, there are a few optional but highly recommended steps to ensure the best experience for users interacting with your token.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#add-your-token-to-the-wormhole-metadata-list-legacy","title":"Add Your Token to the Wormhole Metadata List (Legacy)","text":"<p>For legacy compatibility in the Advanced Tools section of Portal Bridge, you can request updates to your token metadata. Follow these steps:</p> <ol> <li>Join the Wormhole Discord server.</li> <li>Submit a request for metadata updates in the appropriate support channel.</li> </ol> <p>Note</p> <p>These updates only apply to the Advanced Tools section of Portal Bridge and will not update how your token appears in other Wormhole-powered apps or on blockchain explorers like Etherscan.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#update-metadata-on-blockchain-explorers","title":"Update Metadata on Blockchain Explorers","text":"<p>It is recommended that you update your token\u2019s metadata on blockchain explorers such as Etherscan. This includes adding details like the token logo, price, and contract verification.</p> <ol> <li>Create an account on the relevant scanner and go to the token update section (or the relevant scanner that you would like to update metadata on).</li> <li>Copy and paste the wrapped contract address in the Token Update Application Form.</li> <li>Before proceeding to the next step, you will need to verify as the contract address owner on Etherscan\u2019s address verification tool.</li> <li>Follow the directions to verify contract address ownership via MetaMask by reviewing the guide on verifying address ownership.</li> <li>Given that Wormhole may be the contract owner, use the manual verification process by reaching out through the Etherscan contact form. The team will provide support as needed.</li> <li>Once the step above is completed, follow the instructions to update token information.</li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/multichain-token/#conclusion","title":"Conclusion","text":"<p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/","title":"Complete Token Transfer Workflow","text":"<p> Source code on GitHub</p> <p>This tutorial guides you through building a cross-chain token transfer application using the Wormhole TypeScript SDK and its Wrapped Token Transfers (WTT) protocol. The WTT protocol enables secure and efficient cross-chain asset transfers across different blockchain networks, allowing users to move tokens seamlessly.</p> <p>By leveraging Wormhole\u2019s WTT, this guide shows you how to build an application that supports multiple transfer types:</p> <ul> <li>EVM to EVM (e.g., Ethereum to Avalanche)</li> <li>EVM to non-EVM chains (e.g., Ethereum to Solana)</li> <li>Non-EVM to EVM chains (e.g., Sui to Avalanche)</li> <li>Non-EVM to non-EVM chains (e.g., Solana to Sui)</li> </ul> <p>Existing solutions for cross-chain transfers can be complex and inefficient, requiring multiple steps and transaction fees. However, the WTT protocol from Wormhole simplifies the process by handling the underlying attestation, transaction validation, and message passing across blockchains.</p> <p>At the end of this guide, you\u2019ll have a fully functional setup for transferring assets across chains using Wormhole\u2019s WTT protocol.</p> <p>If your goal is to transfer native USDC between chains that support CCTP, we recommend using the CCTP protocol. WTT is intended for other assets or for USDC on chains where CCTP is not available.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p> <p> </p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Node.js and npm installed on your machine.</li> <li>TypeScript installed globally.</li> <li>Native tokens (testnet or mainnet) in Solana and Sui wallets.</li> <li>A wallet with a private key, funded with native tokens (testnet or mainnet) for gas fees.</li> </ul>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#supported-chains","title":"Supported Chains","text":"<p>The Wormhole SDK supports a wide range of EVM and non-EVM chains, allowing you to facilitate cross-chain transfers efficiently. You can find a complete list of supported chains on the Supported Networks page, which includes every network where WTT is supported, across both mainnet and testnet.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#project-setup","title":"Project Setup","text":"<p>In this section, we\u2019ll guide you through initializing the project, installing dependencies, and preparing your environment for cross-chain transfers.</p> <ol> <li> <p>Initialize the project: Start by creating a new directory for your project and initializing it with <code>npm</code>, which will create the <code>package.json</code> file for your project.</p> <pre><code>mkdir native-transfers\ncd native-transfers\nnpm init -y\n</code></pre> </li> <li> <p>Install dependencies: Install the required dependencies.</p> <pre><code>npm install @wormhole-foundation/sdk tsx\n</code></pre> </li> <li> <p>Set up secure access to your wallets: This guide assumes you are loading your <code>SOL_PRIVATE_KEY</code>, <code>EVM_PRIVATE_KEY</code> and <code>SUI_MNEMONIC</code> from a secure keystore of your choice, such as a secrets manager or a CLI-based tool like <code>cast wallet</code>.</p> <p>Warning</p> <p>If you use a <code>.env</code> file during development, add it to your <code>.gitignore</code> to exclude it from version control. Never commit private keys or mnemonics to your repository.</p> </li> <li> <p>Create a <code>helpers.ts</code> file: To simplify the interaction between chains, create a file to store utility functions for fetching your private key, setting up signers for different chains, and managing transaction relays.</p> <ol> <li> <p>Create the helpers file.</p> <pre><code>mkdir -p src/helpers\ntouch src/helpers/helpers.ts\n</code></pre> </li> <li> <p>Open the <code>helpers.ts</code> file and add the following code.</p> <pre><code>import {\n  ChainAddress,\n  ChainContext,\n  Network,\n  Signer,\n  Wormhole,\n  Chain,\n  TokenId,\n  isTokenId,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport aptos from '@wormhole-foundation/sdk/aptos';\nimport { config } from 'dotenv';\nconfig();\n\nexport interface SignerStuff&lt;N extends Network, C extends Chain&gt; {\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}\n\n// Signer setup function for different blockchain platforms\nexport async function getSigner&lt;N extends Network, C extends Chain&gt;(\n  chain: ChainContext&lt;N, C&gt;,\n  gasLimit?: bigint\n): Promise&lt;{\n  chain: ChainContext&lt;N, C&gt;;\n  signer: Signer&lt;N, C&gt;;\n  address: ChainAddress&lt;C&gt;;\n}&gt; {\n  let signer: Signer;\n  const platform = chain.platform.utils()._platform;\n\n  switch (platform) {\n    case 'Solana':\n      signer = await (\n        await solana()\n      ).getSigner(await chain.getRpc(), 'SOL_PRIVATE_KEY');\n      break;\n    case 'Evm':\n      const evmSignerOptions = gasLimit ? { gasLimit } : {};\n      signer = await (\n        await evm()\n      ).getSigner(await chain.getRpc(), 'ETH_PRIVATE_KEY', evmSignerOptions);\n      break;\n    case 'Sui':\n      signer = await (\n        await sui()\n      ).getSigner(await chain.getRpc(), 'SUI_MNEMONIC');\n      break;\n    case 'Aptos':\n      signer = await (\n        await aptos()\n      ).getSigner(await chain.getRpc(), 'APTOS_PRIVATE_KEY');\n      break;\n    default:\n      throw new Error('Unsupported platform: ' + platform);\n  }\n\n  return {\n    chain,\n    signer: signer as Signer&lt;N, C&gt;,\n    address: Wormhole.chainAddress(chain.chain, signer.address()),\n  };\n}\n\nexport async function getTokenDecimals&lt;\n  N extends 'Mainnet' | 'Testnet' | 'Devnet'\n&gt;(\n  wh: Wormhole&lt;N&gt;,\n  token: TokenId,\n  sendChain: ChainContext&lt;N, any&gt;\n): Promise&lt;number&gt; {\n  return isTokenId(token)\n    ? Number(await wh.getDecimals(token.chain, token.address))\n    : sendChain.config.nativeTokenDecimals;\n}\n</code></pre> <ul> <li><code>getSigner</code>: Based on the chain you're working with (EVM, Solana, Sui, etc.), this function retrieves a signer for that specific platform. The signer is responsible for signing transactions and interacting with the blockchain. It securely uses the private key stored in your <code>.env</code> file.</li> <li><code>getTokenDecimals</code>: Fetches the number of decimals for a token on a specific chain. It helps handle token amounts accurately during transfers.</li> </ul> </li> </ol> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#check-and-create-wrapped-tokens","title":"Check and Create Wrapped Tokens","text":"<p>Before tokens are transferred across chains, it should be checked whether a wrapped version exists on the destination chain. If not, an attestation must be generated to wrap it so it can be sent and received on that chain.</p> <p>In this section, you'll create a script that automates this process by checking whether Arbitrum Sepolia has a wrapped version on Base Sepolia and registering it if needed.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#configure-the-wrapped-token-script","title":"Configure the Wrapped Token Script","text":"<ol> <li> <p>Create the <code>create-wrapped.ts</code> file: Set up the script file that will handle checking and wrapping tokens in the <code>src</code> directory.</p> <pre><code>mkdir -p src/scripts\ntouch src/scripts/create-wrapped.ts\n</code></pre> </li> <li> <p>Open <code>create-wrapped.ts</code> and import the required modules: Import the necessary SDK modules to interact with Wormhole, EVM, Solana, and Sui chains, as well as helper functions for signing and sending transactions.</p> <pre><code>import { Wormhole, signSendWait, wormhole } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport { inspect } from 'util';\nimport { getSigner } from '../helpers/helpers';\n</code></pre> </li> <li> <p>Initialize the Wormhole SDK: Initialize the <code>wormhole</code> function for the <code>Testnet</code> environment and specify the platforms (EVM, Solana, and Sui) to support.</p> <pre><code>(async function () {\n  const wh = await wormhole('Testnet', [evm, solana, sui]);\n</code></pre> <p>Note</p> <p>You can replace <code>'Testnet'</code> with <code>'Mainnet'</code> if you want to perform transfers on mainnet.</p> </li> <li> <p>Configure transfer parameters: Specify Arbitrum Sepolia as the source chain and Base Sepolia as the destination, retrieve the token ID from the source chain for transfer, and set the gas limit (optional).</p> <pre><code>  const srcChain = wh.getChain('ArbitrumSepolia');\n  const destChain = wh.getChain('BaseSepolia');\n  const token = await srcChain.getNativeWrappedTokenId();\n  const gasLimit = BigInt(2_500_000);\n</code></pre> </li> <li> <p>Set up the destination chain signer: The signer authorizes transactions, such as submitting the attestation.</p> <pre><code>  const { signer: destSigner } = await getSigner(destChain, gasLimit);\n</code></pre> </li> <li> <p>Check if the token is wrapped on the destination chain: Verify if the token already exists as a wrapped asset before creating an attestation.</p> <pre><code>  const tbDest = await destChain.getTokenBridge();\n\n  try {\n    const wrapped = await tbDest.getWrappedAsset(token);\n    console.log(\n      `Token already wrapped on ${destChain.chain}. Skipping attestation.`\n    );\n    return { chain: destChain.chain, address: wrapped };\n  } catch (e) {\n    console.log(\n      `No wrapped token found on ${destChain.chain}. Proceeding with attestation.`\n    );\n  }\n</code></pre> <p>If the token is already wrapped, the script exits, and you may proceed to the next section. Otherwise, an attestation must be generated.</p> </li> <li> <p>Set up the source chain signer: The signer creates and submits the attestation transaction.</p> <pre><code>  const { signer: origSigner } = await getSigner(srcChain);\n</code></pre> </li> <li> <p>Create an attestation transaction: Generate and send an attestation for the token on the source chain to register it on the destination chain, then save the transaction ID to verify the attestation in the next step.</p> <pre><code>  const tbOrig = await srcChain.getTokenBridge();\n  const attestTxns = tbOrig.createAttestation(\n    token.address,\n    Wormhole.parseAddress(origSigner.chain(), origSigner.address())\n  );\n\n  const txids = await signSendWait(srcChain, attestTxns, origSigner);\n  console.log('txids: ', inspect(txids, { depth: null }));\n  const txid = txids[0]!.txid;\n  console.log('Created attestation (save this): ', txid);\n</code></pre> </li> <li> <p>Retrieve the signed VAA: Once the attestation transaction is confirmed, use <code>parseTransaction(txid)</code> to extract Wormhole messages, then retrieve the signed VAA from the messages. The timeout defines how long to wait for the VAA before failure.</p> <pre><code>  const msgs = await srcChain.parseTransaction(txid);\n  console.log('Parsed Messages:', msgs);\n\n  const timeout = 25 * 60 * 1000;\n  const vaa = await wh.getVaa(msgs[0]!, 'TokenBridge:AttestMeta', timeout);\n  if (!vaa) {\n    throw new Error(\n      'VAA not found after retries exhausted. Try extending the timeout.'\n    );\n  }\n</code></pre> </li> <li> <p>Submit the attestation on the destination chain: Submit the signed VAA using <code>submitAttestation(vaa, recipient)</code> to create the wrapped token on the destination chain, then send the transaction and await confirmation.</p> <pre><code>  const subAttestation = tbDest.submitAttestation(\n    vaa,\n    Wormhole.parseAddress(destSigner.chain(), destSigner.address())\n  );\n\n  const tsx = await signSendWait(destChain, subAttestation, destSigner);\n</code></pre> </li> <li> <p>Wait for the wrapped asset to be available: Poll until the wrapped token is available on the destination chain.</p> <pre><code>  async function waitForIt() {\n    do {\n      try {\n        const wrapped = await tbDest.getWrappedAsset(token);\n        return { chain: destChain.chain, address: wrapped };\n      } catch (e) {\n        console.error('Wrapped asset not found yet. Retrying...');\n      }\n      console.log('Waiting before checking again...');\n      await new Promise((r) =&gt; setTimeout(r, 2000));\n    } while (true);\n  }\n\n  console.log('Wrapped Asset: ', await waitForIt());\n})().catch((e) =&gt; console.error(e));\n</code></pre> <p>If the token is not found, it logs a message and retries after a short delay. Once the wrapped asset is detected, its address is returned.</p> </li> </ol> Complete script <pre><code>import { Wormhole, signSendWait, wormhole } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport { inspect } from 'util';\nimport { getSigner } from '../helpers/helpers';\n\n(async function () {\n  const wh = await wormhole('Testnet', [evm, solana, sui]);\n\n  // Define the source and destination chains\n  const srcChain = wh.getChain('ArbitrumSepolia');\n  const destChain = wh.getChain('BaseSepolia');\n  const token = await srcChain.getNativeWrappedTokenId();\n  const gasLimit = BigInt(2_500_000);\n\n  // Destination chain signer setup\n  const { signer: destSigner } = await getSigner(destChain, gasLimit);\n  const tbDest = await destChain.getTokenBridge();\n\n  try {\n    const wrapped = await tbDest.getWrappedAsset(token);\n    console.log(\n      `Token already wrapped on ${destChain.chain}. Skipping attestation.`\n    );\n    return { chain: destChain.chain, address: wrapped };\n  } catch (e) {\n    console.log(\n      `No wrapped token found on ${destChain.chain}. Proceeding with attestation.`\n    );\n  }\n\n  // Source chain signer setup\n  const { signer: origSigner } = await getSigner(srcChain);\n\n  // Create an attestation transaction on the source chain\n  const tbOrig = await srcChain.getTokenBridge();\n  const attestTxns = tbOrig.createAttestation(\n    token.address,\n    Wormhole.parseAddress(origSigner.chain(), origSigner.address())\n  );\n\n  const txids = await signSendWait(srcChain, attestTxns, origSigner);\n  console.log('txids: ', inspect(txids, { depth: null }));\n  const txid = txids[0]!.txid;\n  console.log('Created attestation (save this): ', txid);\n\n  // Retrieve the Wormhole message ID from the attestation transaction\n  const msgs = await srcChain.parseTransaction(txid);\n  console.log('Parsed Messages:', msgs);\n\n  const timeout = 25 * 60 * 1000;\n  const vaa = await wh.getVaa(msgs[0]!, 'TokenBridge:AttestMeta', timeout);\n  if (!vaa) {\n    throw new Error(\n      'VAA not found after retries exhausted. Try extending the timeout.'\n    );\n  }\n\n  console.log('Token Address: ', vaa.payload.token.address);\n\n  // Submit the attestation on the destination chain\n  console.log('Attesting asset on destination chain...');\n\n  const subAttestation = tbDest.submitAttestation(\n    vaa,\n    Wormhole.parseAddress(destSigner.chain(), destSigner.address())\n  );\n\n  const tsx = await signSendWait(destChain, subAttestation, destSigner);\n  console.log('Transaction hash: ', tsx);\n\n  // Poll for the wrapped asset until it's available\n  async function waitForIt() {\n    do {\n      try {\n        const wrapped = await tbDest.getWrappedAsset(token);\n        return { chain: destChain.chain, address: wrapped };\n      } catch (e) {\n        console.error('Wrapped asset not found yet. Retrying...');\n      }\n      console.log('Waiting before checking again...');\n      await new Promise((r) =&gt; setTimeout(r, 2000));\n    } while (true);\n  }\n\n  console.log('Wrapped Asset: ', await waitForIt());\n})().catch((e) =&gt; console.error(e));\n</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#run-the-wrapped-token-creation","title":"Run the Wrapped Token Creation","text":"<p>Once the script is ready, execute it with:</p> <pre><code>npx tsx src/scripts/create-wrapped.ts\n</code></pre> <p>If the token is already wrapped, the script exits. Otherwise, it generates an attestation and submits it. Once complete, you\u2019re ready to transfer tokens across chains.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#token-transfers","title":"Token Transfers","text":"<p>In this section, you'll create a script to transfer native tokens across chains using Wormhole's WTT protocol. The script will handle the transfer of Sui native tokens to Solana, demonstrating the seamless cross-chain transfer capabilities of the Wormhole SDK. Since both chains are non-EVM compatible, you'll need to manually handle the attestation and finalization steps.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#configure-transfer-details","title":"Configure Transfer Details","text":"<p>Before initiating a cross-chain transfer, you must set up the chain context and signers for both the source and destination chains.</p> <ol> <li> <p>Create the <code>native-transfer.ts</code> file in the <code>src</code> directory to hold your script for transferring native tokens across chains.</p> <pre><code>touch src/scripts/native-transfer.ts\n</code></pre> </li> <li> <p>Open the <code>native-transfer.ts</code> file and begin by importing the necessary modules from the SDK and helper files.</p> <pre><code>import {\n  Chain,\n  Network,\n  Wormhole,\n  amount,\n  wormhole,\n  TokenId,\n  TokenTransfer,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport { SignerStuff, getSigner, getTokenDecimals } from '../helpers/helpers';\n</code></pre> </li> <li> <p>Initialize the Wormhole SDK: Initialize the <code>wormhole</code> function for the <code>Testnet</code> environment and specify the platforms (EVM, Solana, and Sui) to support.</p> <pre><code>(async function () {\n  const wh = await wormhole('Testnet', [evm, solana, sui]);\n</code></pre> </li> <li> <p>Set up source and destination chains: Specify the source chain (Sui) and the destination chain (Solana) using the <code>getChain</code> method. This allows us to define where to send the native tokens and where to receive them.</p> <pre><code>  const sendChain = wh.getChain('Sui');\n  const rcvChain = wh.getChain('Solana');\n</code></pre> </li> <li> <p>Configure the signers: Use the <code>getSigner</code> function to retrieve the signers responsible for signing transactions on the respective chains. This ensures that transactions are correctly authorized on both the source and destination chains.</p> <pre><code>  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n</code></pre> </li> <li> <p>Define the token to transfer: Specify the native token on the source chain (Sui in this example) by creating a <code>TokenId</code> object.</p> <pre><code>  const token = Wormhole.tokenId(sendChain.chain, 'native');\n</code></pre> </li> <li> <p>Define the transfer amount: The amount of native tokens to transfer is specified. In this case, we're transferring 1 unit.</p> <pre><code>  const amt = '1';\n</code></pre> </li> <li> <p>Set transfer mode: Specify manual or automatic transfer using <code>route</code>. Set <code>route  = 'TokenBridge'</code> for manual transfers, where you will handle the attestation and finalization steps yourself. To use automatic relaying on EVM chains, set <code>route = 'AutomaticTokenBridge'</code>.</p> <pre><code>  const route = 'TokenBridge';\n</code></pre> <p>Note</p> <p>Automatic transfers are only supported for EVM chains. For non-EVM chains, such as Solana and Sui, you must manually handle the attestation and finalization steps.</p> </li> <li> <p>Define decimals: Fetch the number of decimals for the token on the source chain (Sui) using the <code>getTokenDecimals</code> function.</p> <pre><code>  const decimals = await getTokenDecimals(wh, token, sendChain);\n</code></pre> </li> <li> <p>Perform the token transfer and exit the process: Initiate the transfer by calling the <code>tokenTransfer</code> function, which we\u2019ll define in the next step. This function takes an object containing all required details for executing the transfer, including the <code>source</code> and <code>destination</code> chains, <code>token</code>, <code>mode</code>, and transfer <code>amount</code>.</p> <pre><code>  const xfer = await tokenTransfer(wh, {\n    token,\n    amount: amount.units(amount.parse(amt, decimals)),\n    source,\n    destination,\n    route,\n  });\n</code></pre> <p>Finally, we use <code>process.exit(0);</code> to close the script once the transfer completes.</p> <pre><code>  process.exit(0);\n})();\n</code></pre> </li> </ol>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#token-transfer-logic","title":"Token Transfer Logic","text":"<p>This section defines the <code>tokenTransfer</code> function, which manages the core steps for executing cross-chain transfers. This function will handle initiating the transfer on the source chain, retrieving the attestation, and completing the transfer on the destination chain.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#defining-the-token-transfer-function","title":"Defining the Token Transfer Function","text":"<p>The <code>tokenTransfer</code> function initiates and manages the transfer process, handling all necessary steps to move tokens across chains with the Wormhole SDK. This function uses types from the SDK and our <code>helpers.ts</code> file to ensure chain compatibility.</p> <pre><code>async function tokenTransfer&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  route: {\n    token: TokenId;\n    amount: bigint;\n    source: SignerStuff&lt;N, Chain&gt;;\n    destination: SignerStuff&lt;N, Chain&gt;;\n    route: string;\n    payload?: Uint8Array;\n  }\n) {\n  // Token Transfer Logic\n}\n</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#steps-to-transfer-tokens","title":"Steps to Transfer Tokens","text":"<p>The <code>tokenTransfer</code> function comprises several key steps to facilitate cross-chain transfers. Let\u2019s break down each step:</p> <ol> <li> <p>Initialize the transfer object: The <code>tokenTransfer</code> function begins by creating a <code>TokenTransfer</code> object, <code>xfer</code>, which tracks the state of the transfer process and provides access to relevant methods for each transfer step.</p> <pre><code>  const xfer = await wh.tokenTransfer(\n    route.token,\n    route.amount,\n    route.source.address,\n    route.destination.address,\n    route.route,\n    route.payload\n  );\n</code></pre> </li> <li> <p>Estimate transfer fees and validate amount: We obtain a fee quote for the transfer before proceeding. This step is significant in automatic mode (<code>automatic = true</code>), where the quote will include additional fees for relaying.</p> <pre><code>  const quote = await TokenTransfer.quoteTransfer(\n    wh,\n    route.source.chain,\n    route.destination.chain,\n    xfer.transfer\n  );\n\n  if (xfer.transfer.route === 'AutomaticTokenBridge' &amp;&amp; quote.destinationToken.amount &lt; 0)\n    throw 'The amount requested is too low to cover the fee and any native gas requested.';\n</code></pre> </li> <li> <p>Submit the transaction to the source chain: Initiate the transfer on the source chain by submitting the transaction using <code>route.source.signer</code>, starting the token transfer process.</p> <pre><code>  const srcTxids = await xfer.initiateTransfer(route.source.signer);\n  console.log(`Source Trasaction ID: ${srcTxids[0]}`);\n</code></pre> <ul> <li><code>srcTxids</code>: The resulting transaction IDs are printed to the console. These IDs can be used to track the transfer\u2019s progress on the source chain and Wormhole network.</li> </ul> How Cross-Chain Transfers Work in the Background <p>When <code>xfer.initiateTransfer(route.source.signer)</code> is called, it initiates the transfer on the source chain. Here\u2019s what happens in the background:</p> <ul> <li>Token lock or burn: Tokens are either locked in a smart contract or burned on the source chain, representing the transfer amount.</li> <li>VAA creation: Wormhole\u2019s network of Guardians generates a Verifiable Action Approval (VAA)\u2014a signed proof of the transaction, which ensures it\u2019s recognized across chains.</li> <li>Tracking the transfer: The returned transaction IDs allow you to track the transfer's progress both on the source chain and within Wormhole\u2019s network.</li> <li>Redemption on destination: Once detected, the VAA is used to release or mint the corresponding token amount on the destination chain, completing the transfer.</li> </ul> <p>This process ensures a secure and verifiable transfer across chains, from locking tokens on the source chain to redeeming them on the destination chain.</p> </li> <li> <p>Wait for the attestation: Retrieve the Wormhole attestation (VAA), which serves as cryptographic proof of the transfer. In manual mode, you must wait for the VAA before redeeming the transfer on the destination chain.</p> <pre><code>  await xfer.fetchAttestation(60_000);\n</code></pre> </li> <li> <p>Complete the transfer on the destination chain: Redeem the VAA on the destination chain to finalize the transfer.</p> <pre><code>  const destTxids = await xfer.completeTransfer(route.destination.signer);\n  console.log(`Completed Transfer: `, destTxids);\n</code></pre> </li> </ol> Complete script <pre><code>import {\n  Chain,\n  Network,\n  Wormhole,\n  amount,\n  wormhole,\n  TokenId,\n  TokenTransfer,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\nimport { SignerStuff, getSigner, getTokenDecimals } from '../helpers/helpers';\n\n(async function () {\n  const wh = await wormhole('Testnet', [evm, solana, sui]);\n\n  // Set up source and destination chains\n  const sendChain = wh.getChain('Sui');\n  const rcvChain = wh.getChain('Solana');\n\n  // Get signer from local key but anything that implements\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Shortcut to allow transferring native gas token\n  const token = Wormhole.tokenId(sendChain.chain, 'native');\n\n  // Define the amount of tokens to transfer\n  const amt = '1';\n\n  // Set route for manual transfers\n  const route = 'TokenBridge';\n\n  // Used to normalize the amount to account for the tokens decimals\n  const decimals = await getTokenDecimals(wh, token, sendChain);\n\n  // Perform the token transfer if no recovery transaction ID is provided\n  const xfer = await tokenTransfer(wh, {\n    token,\n    amount: amount.units(amount.parse(amt, decimals)),\n    source,\n    destination,\n    route,\n  });\n\n  process.exit(0);\n})();\n\nasync function tokenTransfer&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  route: {\n    token: TokenId;\n    amount: bigint;\n    source: SignerStuff&lt;N, Chain&gt;;\n    destination: SignerStuff&lt;N, Chain&gt;;\n    route: string;\n    payload?: Uint8Array;\n  }\n) {\n  // Token Transfer Logic\n  // Create a TokenTransfer object to track the state of the transfer over time\n  const xfer = await wh.tokenTransfer(\n    route.token,\n    route.amount,\n    route.source.address,\n    route.destination.address,\n    route.route,\n    route.payload\n  );\n\n  const quote = await TokenTransfer.quoteTransfer(\n    wh,\n    route.source.chain,\n    route.destination.chain,\n    xfer.transfer\n  );\n\n  if (xfer.transfer.route === 'AutomaticTokenBridge' &amp;&amp; quote.destinationToken.amount &lt; 0)\n    throw 'The amount requested is too low to cover the fee and any native gas requested.';\n\n  // Submit the transactions to the source chain, passing a signer to sign any txns\n  console.log('Starting transfer');\n  const srcTxids = await xfer.initiateTransfer(route.source.signer);\n  console.log(`Source Trasaction ID: ${srcTxids[0]}`);\n  console.log(`Wormhole Trasaction ID: ${srcTxids[1] ?? srcTxids[0]}`);\n\n  // Wait for the VAA to be signed and ready (not required for auto transfer)\n  console.log('Getting Attestation');\n  await xfer.fetchAttestation(60_000);\n\n  // Redeem the VAA on the dest chain\n  console.log('Completing Transfer');\n  const destTxids = await xfer.completeTransfer(route.destination.signer);\n  console.log(`Completed Transfer: `, destTxids);\n}\n</code></pre>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#run-the-native-token-transfer","title":"Run the Native Token Transfer","text":"<p>Now that you\u2019ve set up the project and defined the transfer logic, you can execute the script to transfer native tokens from the Sui chain to Solana. You can use <code>tsx</code> to run the TypeScript file directly:</p> <pre><code>npx tsx src/scripts/native-transfer.ts\n</code></pre> <p>This initiates the native token transfer from the source chain (Sui) and completes it on the destination chain (Solana).</p> <p>You can monitor the status of the transaction on the Wormhole explorer.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#resources","title":"Resources","text":"<p>If you'd like to explore the complete project or need a reference while following this tutorial, you can find the complete codebase in Wormhole's demo GitHub repository. The repository includes all the example scripts and configurations needed to perform native token cross-chain transfers, including manual, automatic, and partial transfers using the Wormhole SDK.</p>"},{"location":"products/token-transfers/wrapped-token-transfers/tutorials/transfer-workflow/#conclusion","title":"Conclusion","text":"<p>You've successfully built a cross-chain token transfer application using Wormhole's TypeScript SDK and the WTT protocol. This guide walks you through the setup, configuration, and transfer logic required to move native tokens across non-EVM chains, such as Sui and Solana.</p> <p>The same transfer logic will apply if you\u2019d like to extend this application to different chain combinations, including EVM-compatible chains.</p> <p>Looking for more? Check out the Wormhole Tutorial Demo repository for additional examples.</p>"},{"location":"protocol/architecture/","title":"Architecture","text":"<p>Wormhole has several noteworthy components. Before discussing each component in depth, this page will provide an overview of how the major pieces fit together.</p> <p></p> <p>The preceding diagram outlines the end-to-end flow of multichain communication through Wormhole's architecture, which is described as follows:</p> <ol> <li>Source chain: A source contract emits a message by interacting with the Wormhole Core Contract on the source chain, which publishes the message in the blockchain's transaction logs.</li> <li>Guardian Network: Guardians validate these messages and sign them to produce Verifiable Action Approvals (VAAs).</li> <li>Relayers: Off-chain relayers or applications fetch the VAA and relay it to the target chain.</li> <li> <p>Target chain: On the target chain, the message is consumed by the appropriate contract. This contract interacts with the Wormhole Core Contract to verify the VAA and execute the intended multichain operation.</p> <p>The flow from the relayer to the target chain involves an entry point contract, which could vary based on the use case:</p> <ul> <li>In some applications, the target contract acts as the entry point and performs verification via the Core Contract.</li> <li>In products like Wrapped Token Transfers (WTT), the WTT contract itself interacts with the Core Contract.</li> </ul> </li> </ol>"},{"location":"protocol/architecture/#on-chain-components","title":"On-Chain Components","text":"<ul> <li>Emitter: A contract that calls the publish message method on the Core Contract. To identify the message, the Core Contract will write an event to the transaction logs with details about the emitter and sequence number. This may be your cross-chain dApp or an existing ecosystem protocol.</li> <li>Wormhole Core Contract: Primary contract, this is the contract which the Guardians observe and which fundamentally allows for multichain communication.</li> <li>Transaction logs: Blockchain-specific logs that allow the Guardians to observe messages emitted by the Core Contract.</li> </ul>"},{"location":"protocol/architecture/#off-chain-components","title":"Off-Chain Components","text":"<ul> <li>Guardian Network: Validators that exist in their own P2P network. Guardians observe and validate the messages emitted by the Core Contract on each supported chain to produce VAAs (signed messages).</li> <li>Guardian: One of 19 validators in the Guardian Network that contributes to the VAA multisig.</li> <li>Spy: A daemon that subscribes to messages published within the Guardian Network. A Spy can observe and forward network traffic, which helps scale up VAA distribution.</li> <li>API: A REST server to retrieve details for a VAA or the Guardian Network.</li> <li>VAAs: Verifiable Action Approvals (VAAs) are the signed attestation of an observed message from the Wormhole Core Contract.</li> <li>Relayer: Any off-chain process that relays a VAA to the target chain.<ul> <li>Wormhole relayers: A decentralized relayer network that delivers messages that are requested on-chain via the Wormhole relayer contract.</li> <li>Custom relayers: Relayers that only handle VAAs for a specific protocol or multichain application. They can execute custom logic off-chain, reducing gas costs and increasing multichain compatibility. Currently, multichain application developers are responsible for developing and hosting custom relayers.</li> </ul> </li> </ul>"},{"location":"protocol/architecture/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Core Contracts</p> <p>Discover Wormhole's Core Contracts, enabling multichain communication with message sending, receiving, and multicast features for efficient synchronization.</p> <p>  Explore Core Contracts</p> </li> <li> <p> Core Messaging</p> <p>Follow the guides in this section to work directly with the building blocks of Wormhole messaging, Wormhole-deployed relayers and Core Contracts, to send, receive, validate, and track multichain messages.</p> <p>  Build with Core Messaging</p> </li> </ul>"},{"location":"protocol/ecosystem/","title":"The Wormhole Ecosystem","text":"<p>Wormhole is a cross-chain messaging protocol connecting decentralized applications across multiple blockchains. It offers a suite of interoperability tools, each addressing different multichain challenges, and allows developers to mix and match these products as needed.</p> <p>Whether you\u2019re looking for a simple UI-based bridging experience, a native token transfer flow without wrapped assets, real-time cross-chain data queries, or an advanced settlement layer for complex asset movements, Wormhole has a product designed for that purpose. Every solution integrates with Wormhole\u2019s core messaging network, ensuring each module can operate independently or in combination with others.</p> <p>This page will guide you through the structural layout of these tools\u2014how they fit together, can be used independently, and can be layered to build robust, multichain applications.</p>"},{"location":"protocol/ecosystem/#ecosystem-overview","title":"Ecosystem Overview","text":"<p>The diagram shows a high-level view of Wormhole\u2019s modular stack, illustrating how different tools are grouped into four layers:</p> <ul> <li>Application and user-facing products: The top layer includes user-centric solutions such as Connect (a simple bridging interface) and the NTT Launchpad (for streamlined native asset deployments).</li> <li>Asset and data transfer layer: Below it sits the core bridging and data solutions\u2014NTT, WTT, Queries, Settlement, and MultiGov\u2014that handle the movement of tokens, real-time data fetching, advanced cross-chain settlements, and cross-chain governance.</li> <li>Integration layer: The TypeScript SDK and WormholeScan API provide developer-friendly libraries and APIs to integrate cross-chain capabilities into applications.</li> <li>Foundation layer: At the base, the Wormhole messaging system and the core contracts secure the entire network, providing essential verification and cross-chain message delivery.</li> </ul> <p></p>"},{"location":"protocol/ecosystem/#bringing-it-all-together-interoperability-in-action","title":"Bringing It All Together: Interoperability in Action","text":"<p>Wormhole\u2019s modularity makes it easy to adopt just the pieces you need. If you want to quickly add bridging to a dApp, use Connect at the top layer while relying on the Foundation Layer behind the scenes. Or if your app needs to send raw messages between chains, integrate the Messaging layer directly via the Integration Layer (TypeScript or Solidity SDK). You can even layer on additional features\u2014like real-time data calls from Queries or more flexible bridging flows with Native Token Transfers.</p> <p>Ultimately, these components aren\u2019t siloed but designed to be combined. You could, for instance, fetch a balance from one chain using Queries and then perform an on-chain swap on another chain using Settlement. Regardless of your approach, each Wormhole product is powered by the same Guardian-secured messaging backbone, ensuring all cross-chain interactions remain reliable and secure.</p>"},{"location":"protocol/ecosystem/#next-steps","title":"Next Steps","text":"<p>Unsure which bridging solution you need? Visit the Product Comparison page to quickly match your requirements with the right Wormhole tool.</p>"},{"location":"protocol/introduction/","title":"Introduction to Wormhole","text":"<p>In the rapidly evolving landscape of blockchain technology, interoperability between different blockchains remains a significant challenge. Developers often face hurdles in creating applications that can seamlessly operate across multiple blockchains, limiting innovation and the potential of decentralized ecosystems.</p> <p>Wormhole addresses this problem by providing a generic message-passing protocol that enables secure and efficient communication between blockchains. By allowing data and asset transfers across various blockchain networks, Wormhole breaks down the walls that traditionally separate these ecosystems.</p> <p>Wormhole is distinguished by its focus on robust security, scalability, and transparency. The protocol is supported by a decentralized network of validators that ensure the integrity of every cross-chain transaction. This, combined with Wormhole\u2019s proven performance in real-world applications, gives developers a dependable platform to create and scale multichain applications confidently.</p> <p></p> <p>Note</p> <p>The above is an oversimplified illustration of the protocol; details about the architecture and components are available on the architecture page.</p> <p>Wormhole allows developers to leverage the strengths of multiple blockchain ecosystems without being confined to one. This means applications can benefit from the unique features of various networks\u2014such as Solana's high throughput, Ethereum's security, and Cosmos's interoperability while maintaining a unified, efficient user experience.</p> <p>This page introduces the key concepts and components necessary to understand how Wormhole enables fast, secure, and scalable cross-chain communication.</p>"},{"location":"protocol/introduction/#what-problems-does-wormhole-solve","title":"What Problems Does Wormhole Solve?","text":"<p>Interoperability is a critical challenge in the rapidly evolving blockchain landscape. Individual blockchains are often isolated, limiting the potential for integrated applications operating across multiple ecosystems. Wormhole solves this problem by enabling seamless communication between blockchains, allowing developers to create multichain applications that can leverage the unique features of each network.</p> <p>Critical problems Wormhole addresses include:</p> <ul> <li>Blockchain isolation: Wormhole connects disparate blockchains, enabling the transfer of assets, data, and governance actions across networks.</li> <li>Cross-chain complexity: By abstracting the complexities of cross-chain communication, Wormhole makes it easier for developers to build and deploy cross-chain applications.</li> <li>Security and decentralization: Wormhole prioritizes security through a decentralized Guardian network that validates and signs messages, ensuring the integrity of cross-chain interactions.</li> </ul>"},{"location":"protocol/introduction/#what-does-wormhole-offer","title":"What Does Wormhole Offer?","text":"<p>Wormhole provides a suite of tools and protocols that support a wide range of use cases:</p> <ul> <li>Cross-chain messaging: Securely transfer arbitrary data between blockchains, enabling the development of cross-chain decentralized applications.</li> <li>Asset transfers: Facilitate the movement of tokens across supported chains with ease, powered by protocols built on Wormhole like Portal.</li> <li>Developer tools: Leverage Wormhole\u2019s TypeScript SDK, Wormholescan, and the Wormholescan API and documentation to build and deploy cross-chain applications quickly and efficiently.</li> </ul>"},{"location":"protocol/introduction/#what-isnt-wormhole","title":"What Isn't Wormhole?","text":"<ul> <li>Wormhole is not a blockchain: It acts as a communication layer that connects different blockchains, enabling them to interact without being a blockchain itself.</li> <li>Wormhole is not a token bridge: While it facilitates token transfers, Wormhole also supports a wide range of cross-chain applications, making it much more versatile than a typical bridge.</li> </ul>"},{"location":"protocol/introduction/#use-cases-of-wormhole","title":"Use Cases of Wormhole","text":"<p>Consider the following examples of potential applications enabled by Wormhole:</p> <ul> <li>Cross-chain exchange: Using Wormhole Connect, developers can build exchanges that allow deposits from any Wormhole-connected chain, significantly increasing liquidity access.</li> <li>Cross-chain governance: Projects with communities spread across multiple blockchains can use Wormhole to relay votes from each chain to a designated governance chain, enabling unified decision-making through combined proposals.</li> <li>Cross-chain game: Games can be developed on a performant network like Solana, with rewards issued on another network, such as Ethereum.</li> </ul>"},{"location":"protocol/introduction/#explore","title":"Explore","text":"<p>Discover more about the Wormhole ecosystem, components, and protocols:</p> <ul> <li>Architecture: Explore the components of the protocol.</li> <li>Protocol Specifications: Learn about the protocols built on top of Wormhole.</li> </ul>"},{"location":"protocol/introduction/#demos","title":"Demos","text":"<p>Demos offer more realistic implementations than tutorials:</p> <ul> <li>Wormhole Scaffolding: Quickly set up a project with the Scaffolding repository.</li> <li>Demo Tutorials: Explore various demos that showcase Wormhole's capabilities across different blockchains.</li> </ul> <p>Note</p> <p>Wormhole Integration Complete?</p> <p>Let us know so we can list your project in our ecosystem directory and introduce you to our global, multichain community!</p> <p>Reach out now!</p>"},{"location":"protocol/introduction/#supported-networks-by-product","title":"Supported Networks by Product","text":"<p>Wormhole supports a growing number of blockchains. Check out the Supported Networks by Product page to see which networks are supported for each Wormhole product.</p>"},{"location":"protocol/security/","title":"Security","text":""},{"location":"protocol/security/#core-security-assumptions","title":"Core Security Assumptions","text":"<p>At its core, Wormhole is secured by a network of Guardian nodes that validate and sign messages. If a super majority (e.g., 13 out of 19) of Guardians sign the same message, it can be considered valid. A smart contract on the target chain will verify the signatures and format of the message before approving any transaction.</p> <ul> <li>Wormhole's core security primitive is its signed messages (signed VAAs).</li> <li>The Guardian network is currently secured by a collection of 19 of the world's top validator companies.</li> <li>Guardians produce signed state attestations (signed VAAs) when requested by a Core Contract integrator.</li> <li>Every Guardian runs full nodes (rather than light nodes) of every blockchain in the Wormhole network, so if a blockchain suffers a consensus attack or hard fork, the blockchain will disconnect from the network rather than potentially produce invalid signed VAAs.</li> <li>Any Signed VAA can be verified as authentic by the Core Contract of any other chain.</li> <li>Relayers are considered untrusted in the Wormhole ecosystem.</li> </ul> <p>In summary:</p> <ul> <li>Core integrators aren't exposed to risk from chains and contracts they don't integrate with.</li> <li>By default, you only trust Wormhole's signing process and the core contracts of the chains you're on.</li> <li>You can expand your contract and chain dependencies as you see fit.</li> </ul> <p>Core assumptions aside, many other factors impact the real-world security of decentralized platforms. Here is more information on additional measures that have been put in place to ensure the security of Wormhole.</p>"},{"location":"protocol/security/#guardian-network","title":"Guardian Network","text":"<p>Wormhole is an evolving platform. While the Guardian set currently comprises 19 validators, this is a limitation of current blockchain technology.</p>"},{"location":"protocol/security/#governance","title":"Governance","text":"<p>Governance is the process through which contract upgrades happen. Guardians manually vote on governance proposals that originate inside the Guardian Network and are then submitted to ecosystem contracts.</p> <p>This means that governance actions are held to the same security standard as the rest of the system. A two-thirds supermajority of the Guardians is required to pass any governance action.</p> <p>Governance messages can target any of the various wormhole modules, including the core contracts and all currently deployed Wrapped Token Transfers (WTT) contracts. When a Guardian signs such a message, its signature implies a vote on the action in question. Once more than two-thirds of the Guardians have signed, the message and governance action are considered valid.</p> <p>All governance actions and contract upgrades have been managed via Wormhole's on-chain governance system.</p> <p>Via governance, the Guardians can:</p> <ul> <li>Change the current Guardian set.</li> <li>Expand the Guardian set.</li> <li>Upgrade ecosystem contract implementations.</li> </ul> <p>The governance system is fully open source in the core repository. See the Open Source section for contract source.</p>"},{"location":"protocol/security/#monitoring","title":"Monitoring","text":"<p>A key element of Wormhole's defense-in-depth strategy is that each Guardian is a highly competent validator company with its own in-house processes for running, monitoring, and securing blockchain operations. This heterogeneous approach to monitoring increases the likelihood that fraudulent activity is detected and reduces the number of single failure points in the system.</p> <p>Guardians are not just running Wormhole validators; they're running validators for every blockchain inside of Wormhole as well, which allows them to perform monitoring holistically across decentralized computing rather than just at a few single points.</p> <p>Guardians monitor:</p> <ul> <li>Block production and consensus of each blockchain: If a blockchain's consensus is violated, it will be disconnected from the network until the Guardians resolve the issue.</li> <li>Smart contract level data: Via processes like the Governor, Guardians constantly monitor the circulating supply and token movements across all supported blockchains.</li> <li>Guardian level activity: The Guardian Network functions as an autonomous decentralized computing network, ensuring independent security measures across its validators.</li> </ul>"},{"location":"protocol/security/#asset-layer-protections","title":"Asset Layer Protections","text":"<p>One key strength of the Wormhole ecosystem is the Guardians\u2019 ability to validate and protect the integrity of assets across multiple blockchains.</p> <p>To enforce the Wormhole Asset Layer\u2019s core protections, the Global Accountant tracks the total circulating supply of all Wormhole assets across all chains, preventing any blockchain from bridging assets that could violate the supply invariant.</p> <p>In addition to the Global Accountant, Guardians may only sign transfers that do not violate the requirements of the Governor. The Governor tracks inflows and outflows of all blockchains and delays suspicious transfers that may indicate an exploit.</p>"},{"location":"protocol/security/#open-source","title":"Open Source","text":"<p>Wormhole builds in the open and is always open source.</p> <ul> <li>Wormhole core repository</li> <li>Wormhole Foundation GitHub organization</li> <li>Wormhole contract deployments</li> </ul>"},{"location":"protocol/security/#audits","title":"Audits","text":"<p>Wormhole has been heavily audited, with 29 third-party audits completed and more started. Audits have been performed by the following firms:</p> <ul> <li>Trail of Bits</li> <li>Neodyme</li> <li>Kudelski</li> <li>OtterSec</li> <li>Certik</li> <li>Hacken</li> <li>Zellic</li> <li>Coinspect</li> <li>Halborn</li> <li>Cantina</li> </ul> <p>All audits and final reports can be found in security page of the GitHub Repo.</p>"},{"location":"protocol/security/#bug-bounties","title":"Bug Bounties","text":"<p>Wormhole has one of the largest bug bounty programs in software development and has repeatedly shown commitment to engaging with the white hat community.</p> <p>Wormhole runs a bug bounty program through Immunefi program, with a top payout of 5 million dollars.</p> <p>If you are interested in contributing to Wormhole security, please look at this section for Getting Started as a White Hat, and follow the Wormhole Contributor Guidelines.</p> <p>For more information about submitting to the bug bounty programs, refer to the Wormhole Immunefi page.</p>"},{"location":"protocol/security/#learn-more","title":"Learn More","text":"<p>The SECURITY.md from the official repository has the latest security policies and updates.</p>"},{"location":"protocol/infrastructure/core-contracts/","title":"Core Contracts","text":"<p>The Wormhole Core Contract is deployed across each supported blockchain network. This contract is a fundamental component of the Wormhole interoperability protocol and acts as the foundational layer enabling secure and efficient multichain messaging. All multichain applications either interact directly with the Core Contract or with another contract that does.</p> <p>This page summarizes the key functions of the Core Contract and outlines how the Core Contract works.</p>"},{"location":"protocol/infrastructure/core-contracts/#key-functions","title":"Key Functions","text":"<p>Key functions of the Wormhole Core Contract include the following:</p> <ul> <li>Multichain messaging: Standardizes and secures the format of messages to facilitate consistent communication for message transfer between Wormhole-connected blockchain networks, allowing developers to leverage the unique features of each network.</li> <li>Verification and validation: Verifies and validates all VAAs received on the target chain by confirming the Guardian signature to ensure the message is legitimate and has not been manipulated or altered.</li> <li>Guardian Network coordination: Coordinates with Wormhole's Guardian Network to facilitate secure, trustless communication across chains and ensure that only validated interactions are processed to enhance the protocol's overall security and reliability.</li> <li>Event emission for monitoring: Emits events for every multichain message processed, allowing for network activity monitoring like tracking message statuses, debugging, and applications that can react to multichain events in real time.</li> </ul>"},{"location":"protocol/infrastructure/core-contracts/#how-the-core-contract-works","title":"How the Core Contract Works","text":"<p>The Wormhole Core Contract is central in facilitating secure and efficient multichain transactions. It enables communication between different blockchain networks by packaging transaction data into standardized messages, verifying their authenticity, and ensuring they are executed correctly on the destination chain.</p> <p>The following describes the role of the Wormhole Core Contract in message transfers:</p> <ol> <li>Message submission: When a user initiates a multichain transaction, the Wormhole Core Contract on the source chain packages the transaction data into a standardized message payload and submits it to the Guardian Network for verification.</li> <li>Guardian verification: The Guardians independently observe and sign the message. Once enough Guardians have signed the message, the collection of signatures is combined with the message and metadata to produce a VAA.</li> <li>Message reception and execution: On the target chain, the Wormhole Core Contract receives the verified message, checks the Guardians' signatures, and executes the corresponding actions like minting tokens, updating states, or calling specific smart contract functions.</li> </ol> <p>For a closer look at how messages flow between chains and all of the components involved, you can refer to the Architecture Overview page.</p>"},{"location":"protocol/infrastructure/core-contracts/#message-submission","title":"Message Submission","text":"<p>You can send multichain messages by calling a function against the source chain Core Contract, which then publishes the message. Message publishing strategies can differ by chain; however, generally, the Core Contract posts the following items to the blockchain logs:</p> <ul> <li><code>emitterAddress</code>: The contract which made the call to publish the message.</li> <li><code>sequenceNumber</code>: A unique number that increments for every message for a given emitter (and implicitly chain).</li> <li><code>consistencyLevel</code>: The level of finality to reach before the Guardians will observe and attest the emitted event. This is a defense against reorgs and rollbacks since a transaction, once considered \"final,\"  is guaranteed not to have the state changes it caused rolled back. Since different chains use different consensus mechanisms, each one has different finality assumptions, so this value is treated differently on a chain-by-chain basis. See the options for finality for each chain in the Wormhole Finality reference page.</li> </ul> <p>There are no fees to publish a message except when publishing on Solana, but this is subject to change in the future.</p>"},{"location":"protocol/infrastructure/core-contracts/#message-reception","title":"Message Reception","text":"<p>When you receive a multichain message on the target chain Core Contract, you generally must parse and verify the components of a VAA. Receiving and verifying a VAA ensures that the Guardian Network properly attests to the message and maintains the integrity and authenticity of the data transmitted between chains.</p>"},{"location":"protocol/infrastructure/core-contracts/#multicast","title":"Multicast","text":"<p>Multicast refers to simultaneously broadcasting a single message or transaction across different blockchains with no destination address or chain for the sending and receiving functions. VAAs attest that \"this contract on this chain said this thing.\" Therefore, VAAs are multicast by default and will be verified as authentic on any chain where they are used.</p> <p>This multicast-by-default model makes it easy to synchronize state across the entire ecosystem. A blockchain can make its data available to every chain in a single action with low latency, which reduces the complexity of the n^2 problems encountered by routing data to many blockchains.</p> <p>This doesn't mean an application\u00a0cannot\u00a0specify a destination address or chain. For example, the Wrapped Token Transfers (WTT) and Wormhole relayer contracts require that some destination details be passed and verified on the destination chain.</p> <p>Because the VAA creation is separate from relaying, the multicast model does not incur an additional cost when a single chain is targeted. If the data isn't needed on a certain blockchain, don't relay it there, and it won't cost anything.</p>"},{"location":"protocol/infrastructure/core-contracts/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Verified Action Approvals (VAA)</p> <p>Learn about Verified Action Approvals (VAAs) in Wormhole, their structure, validation, and their role in multichain communication.</p> <p>  Learn About VAAs</p> </li> <li> <p> Get Started with Core Contracts</p> <p>This guide walks through the key methods of the Core Contracts, providing you with the knowledge needed to integrate them into your multichain contracts.</p> <p>  Build with Core Contracts</p> </li> </ul>"},{"location":"protocol/infrastructure/guardians/","title":"Guardians","text":"<p>Wormhole relies on a set of 19 distributed nodes that monitor the state on several blockchains. In Wormhole, these nodes are referred to as Guardians. The current Guardian set can be seen in the Dashboard.</p> <p>Guardians fulfill their role in the messaging protocol as follows: </p> <ol> <li>Each Guardian observes messages and signs the corresponding payloads in isolation from the other Guardians.</li> <li>Guardians combine their independent signatures to form a multisig.</li> <li>This multisig represents proof that a majority of the Wormhole network has observed and agreed upon a state.</li> </ol> <p>Wormhole refers to these multisigs as Verifiable Action Approvals (VAAs).</p>"},{"location":"protocol/infrastructure/guardians/#guardian-network","title":"Guardian Network","text":"<p>The Guardian Network functions as Wormhole's decentralized oracle, ensuring secure, cross-chain interoperability. Learning about this critical element of the Wormhole ecosystem will help you better understand the protocol. </p> <p>The Guardian Network is designed to help Wormhole deliver on five key principles:</p> <ul> <li>Decentralization: Control of the network is distributed across many parties.</li> <li>Modularity: Independent components (e.g., oracle, relayer, applications) ensure flexibility and upgradeability.</li> <li>Chain agnosticism: Supports EVM, Solana, and other blockchains without relying on a single network.</li> <li>Scalability: Can handle large transaction volumes and high-value transfers.</li> <li>Upgradeable: Can change the implementation of its existing modules without breaking integrators to adapt to changes in decentralized computing.</li> </ul> <p>The following sections explore each principle in detail. </p>"},{"location":"protocol/infrastructure/guardians/#decentralization","title":"Decentralization","text":"<p>Decentralization remains the core concern for interoperability protocols. Earlier solutions were fully centralized, and even newer models often rely on a single entity or just one or two actors, creating low thresholds for collusion or failure.</p> <p>Two common approaches to decentralization have notable limitations:</p> <ul> <li>Proof-of-Stake (PoS): While PoS is often seen as a go-to model for decentralization, it's not well-suited for a network that verifies many blockchains and doesn't run its own smart contracts. Its security in this context is unproven, and it introduces complexities that make other design goals harder to achieve.</li> <li>Zero-Knowledge Proofs (ZKPs): ZKPs offer a trustless and decentralized approach, but the technology is still early-stage. On-chain verification is often too computationally expensive\u2014especially on less capable chains\u2014so a multisig-based fallback is still required for practical deployment.</li> </ul> <p>In the current De-Fi landscape, most major blockchains are secured by a small group of validator companies. Only a limited number of companies worldwide have the expertise and capital to run high-performance validators.</p> <p>If a protocol could unite many of these top validator companies into a purpose-built consensus mechanism designed for interoperability, it would likely offer better performance and security than a token-incentivized network. The key question is: how many of them could Wormhole realistically involve?</p> <p>To answer that, consider these key constraints and design decisions:</p> <ul> <li>Threshold signatures allow flexibility, but: With threshold signatures, in theory, any number of validators could participate. However, threshold signatures are not yet widely supported across blockchains. Verifying them is expensive and complex, especially in a chain-agnostic system.</li> <li>t-Schnorr multisig is more practical: Wormhole uses t-Schnorr multisig, which is broadly supported and relatively inexpensive to verify. However, verification costs scale linearly with the number of signers, so the size of the validator set needs to be carefully chosen.</li> <li>19 validators is the optimal tradeoff: A set of 19 participants presents a practical compromise between decentralization and efficiency. With a two-thirds consensus threshold, only 13 signatures must be verified on-chain\u2014keeping gas costs reasonable while ensuring strong security.</li> <li>Security through reputation, not tokens: Wormhole relies on a network of established validator companies instead of token-based incentives. These 19 Guardians are among the most trusted operators in the industry\u2014real entities with a track record, not anonymous participants.</li> </ul> <p>This forms the foundation for a purpose-built Proof-of-Authority (PoA) consensus model, where each Guardian has an equal stake. As threshold signatures gain broader support, the set can expand. Once ZKPs become widely viable, the network can evolve into a fully trustless system.</p>"},{"location":"protocol/infrastructure/guardians/#modularity","title":"Modularity","text":"<p>Wormhole is designed with simple components that are very good at a single function. Separating security and consensus (Guardians) from message delivery (relayers) allows for the flexibility to change or upgrade one component without disrupting the others.</p>"},{"location":"protocol/infrastructure/guardians/#chain-agnosticism","title":"Chain Agnosticism","text":"<p>Today, Wormhole supports a broader range of ecosystems than any other interoperability protocol because it uses simple tech (t-schnorr signatures), an adaptable, heterogeneous relayer model, and a robust validator network. Wormhole can expand to new ecosystems as quickly as a Core Contract can be developed for the smart contract runtime.</p>"},{"location":"protocol/infrastructure/guardians/#scalability","title":"Scalability","text":"<p>Wormhole scales well, as demonstrated by its ability to handle substantial total value locked (TVL) and transaction volume even during tumultuous events.</p> <p>Every Guardian must run a full node for every blockchain in the ecosystem. This requirement can be computationally heavy to set up; however, once all the full nodes are running, the Guardian Network's actual computation needs become lightweight. </p> <p>Performance is generally limited by the speed of the underlying blockchains, not the Guardian Network itself.</p>"},{"location":"protocol/infrastructure/guardians/#upgradeable","title":"Upgradeable","text":"<p>Wormhole is designed to adapt and evolve in the following ways:</p> <ul> <li>Guardian Set expansion: Future updates may introduce threshold signatures to allow for more Guardians in the set.</li> <li>ZKP integration: As Zero-Knowledge Proofs become more widely supported, the network can transition to a fully trustless model.</li> </ul> <p>These principles combine to create a clear pathway towards a fully trustless interoperability layer that spans decentralized computing.</p>"},{"location":"protocol/infrastructure/guardians/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Relayers</p> <p>Discover the role of relayers in the Wormhole network, including client-side, custom, and Wormhole-deployed types, for secure cross-chain communication.</p> <p>  Learn About Relayers</p> </li> <li> <p> Query Guardian Data</p> <p>Learn how to use Wormhole Queries to add real-time access to Guardian-attested on-chain data via a REST endpoint to your dApp, enabling secure cross-chain interactions and verifications.</p> <p>  Build with Queries</p> </li> </ul>"},{"location":"protocol/infrastructure/relayer/","title":"Relayers","text":"<p>This page provides a comprehensive guide to relayers within the Wormhole network, describing their role, types, and benefits in facilitating multichain processes.</p> <p>Relaying refers to the process of delivering a cross-chain message, specifically a Verified Action Approval (VAA), from its source chain to the destination chain. In a multichain application, after a message is emitted on the source chain and signed by Wormhole\u2019s Guardians, it must be carried over to the target chain\u2019s contract \u2013 this is the relayer's responsibility. </p> <p>Relayers do not need to be trusted; the security of Wormhole messages stems from the Guardian Network signatures on the VAA, which cannot be tampered with by relayers. In other words, a relayer cannot alter the content or outcome of a message \u2013 it can only affect when the message gets delivered (availability). This trust-minimized design means developers and users don\u2019t have to trust a relayer service to preserve integrity, only to be online to forward the message.</p>"},{"location":"protocol/infrastructure/relayer/#fundamentals","title":"Fundamentals","text":"<p>This section highlights the crucial principles underpinning the operation and handling of relayers within the Wormhole network.</p> <p>Relayers are fundamentally trustless entities within the network, meaning while they don't require your trust to operate, you also shouldn't trust them implicitly. They function as delivery mechanisms, transporting VAAs from their source to their destination.</p> <ul> <li>Anyone can relay a message: Guardians broadcast signed VAAs publicly, so any entity can retrieve a VAA and submit it to the destination chain\u2019s contracts. The signatures provide universal verifiability; any Wormhole contract or client can check the Guardian signatures. These properties ensure that relaying can be permissionless and trustless. If one relayer is down, any other party (even the user) could take the VAA and deliver it. No relayer can forge or modify the message without invalidating the signatures.</li> <li>Security is in the VAA: The Wormhole Guardians\u2019 signatures authenticate the message. A relayer might provide additional info or off-chain data, but contracts should not rely on anything that isn\u2019t from a verified VAA or on-chain source. This ensures that even though relayers operate off-chain, they cannot compromise the application\u2019s logic or funds. In summary, Wormhole relayers can\u2019t compromise security, only availability \u2013 if a relayer misbehaves, the worst outcome is a delayed or missed delivery, not a falsified message.</li> <li>User experience vs. infrastructure: Relayers exist to improve user experience by automating cross-chain steps that would otherwise be manual. However, using relayers introduces considerations around fees and infrastructure. Developers must either rely on an external relayer service or run their own. Wormhole\u2019s design offers flexibility: developers can choose an entirely client-side (no relayer) approach or opt for either Wormhole-provided relayer networks or custom relayers that developers build themselves. Each approach has its benefits and trade-offs in terms of complexity, cost, and control, as we explore next.</li> </ul>"},{"location":"protocol/infrastructure/relayer/#manual-vs-automated-relaying","title":"Manual vs. Automated Relaying","text":"<p>When integrating Wormhole messaging, developers must choose between manual (client-side) relaying and automated relaying. The distinction lies in the entity responsible for delivering the VAA to the target chain.</p> <ul> <li>Manual relaying (client-side): This approach puts the burden on the user or their client (e.g., a dApp or wallet) to carry out all cross-chain steps. After an action on chain A produces a VAA, the user must manually fetch that VAA (typically via a Wormhole API or explorer) and then submit it in a transaction on chain B. No specialized backend is needed. The relayer role is handled directly by the user via their wallet or web browser. The advantage lies in the simplicity of architecture (no extra services to run) and no additional fees beyond the target chain\u2019s transaction fees. However, this approach provides a limited user experience beyond basic demos, as it requires users to sign multiple transactions and maintain funds on each chain involved. This process can be cumbersome and error-prone, as the additional step may be unclear and lead to drop-offs. In summary, manual relaying is suitable for testing and MVPs, but it's not ideal for production-grade applications.</li> <li> <p>Automated relaying: In this approach, the cross-chain delivery is handled automatically by a relayer service or network, rather than the end-user. From the user\u2019s perspective, the message is delivered to the target chain without requiring manual intervention. Automated relaying significantly improves the user experience by allowing an asset transfer to be initiated with a single action, after which the funds are delivered to the destination chain. There are two ways to achieve automated relaying:</p> <ul> <li>Build a relayer service (custom backend): Run an off-chain service that listens for VAAs and forwards them. This approach provides full control (e.g., gas optimization, batch transactions, retry handling), but requires building and maintaining backend infrastructure.  </li> <li>Use a relayer network provided by Wormhole: Leverage Wormhole\u2019s decentralized relayer service, which requires minimal integration and no infrastructure to run. Developers can request delivery of messages through on-chain calls, while an untrusted external delivery provider handles execution. This removes the need to run a service, at the cost of service fees, and shifts the complexity away from the user, resulting in a smoother experience.</li> </ul> </li> </ul> <p>Choosing between manual and automated relaying often comes down to the specific needs of the product. If the integrator prioritizes convenience, automated relaying (via either a Wormhole service or a custom service) provides a superior experience.</p> Aspect Manual Relaying (Client-Side) Automated Relaying VAA Delivery User or client application Relayer service or network (custom or Wormhole) Infrastructure None required Either a backend service or Wormhole\u2019s relayer network User Experience Multiple signatures, funds on each chain, extra manual step One-click transfers, message delivered automatically Cost Model Only target chain transaction fees Service fees + destination chain gas Reliability Depends on user completing all steps Relayer handles retries and execution Best Suited For Testing, MVPs, demos Production-grade applications prioritizing UX"},{"location":"protocol/infrastructure/relayer/#wormhole-relayers","title":"Wormhole Relayers","text":"<p>To simplify the adoption of automated relaying, Wormhole provides its relayer infrastructure and APIs for developers to utilize. Wormhole Relayers is an umbrella term for Wormhole\u2019s suite of relayer solutions, which currently includes the messaging executor framework and the standard relayer (currently being phased out), as well as the option of building custom relayers using Wormhole\u2019s tooling. All of these approaches adhere to Wormhole\u2019s core principle of trustless delivery \u2013 not trusting the Wormhole relayer operators any more than any blockchain infrastructure. Below is an overview of each option and its role in cross-chain dApp development.</p> <p>Wormhole currently supports three types of relayers:  </p> <ul> <li>Executor: A permissionless, next-generation framework that enables anyone to act as a relayer, with support for multichain delivery and custom pricing through a request\u2013quote model.  </li> <li>Standard relayer: A Wormhole-operated network available out of the box for EVM chains, providing simple integration without backend infrastructure.  </li> <li>Custom relayer: An application-run service tailored to specific needs, offering maximum flexibility and optimization at the cost of higher operational overhead.  </li> </ul> Aspect Executor. Standard Relayer. Custom Relayer. Who Runs It Permissionless network of providers Wormhole contributor\u2013run nodes Application team Chain Support Multichain, including non-EVM EVM only Any Wormhole-supported chain Integration Executor contracts with request\u2013quote model On-chain functions Custom backend service Infrastructure None (on-chain only) None (on-chain only) Full backend required, 24/7 availability User Experience Seamless, broader chain support Seamless, EVM only App-specific optimizations possible Trade-offs Early rollout, limited initial availability EVM-only, no off-chain logic High DevOps cost, must stay secure"},{"location":"protocol/infrastructure/relayer/#executor","title":"Executor","text":"<p>The Executor is Wormhole\u2019s next-generation cross-chain execution framework, designed to extend relaying functionality beyond EVM chains and add greater flexibility to how deliveries are processed. The Executor system enables anyone to act as a relayer (often referred to as an execution provider) in a permissionless network, introducing a request-and-quote model for delivering messages. The Executor architecture still relies on the core Wormhole guarantees (VAAs for security, Guardian verification), but it changes how the relaying service is accessed and who can fulfill it.</p> <p>In the Executor model, Wormhole deploys a lightweight Executor Contract on every supported chain. This contract is stateless and permissionless, meaning it isn\u2019t owned by any relayer, and anyone can interact with it. When an application wants to request a cross-chain message delivery via the Executor, it will call this contract on the source chain, providing the details of the target chain, target address, and a fee quote signed by a chosen executor provider. The Executor contract essentially records an Execution Request (and escrows the payment, including a small fee), which off-chain executor nodes are listening for (via events). An available executor node that corresponds to the provided quote will then take the VAA and execute the message on the destination chain, similar to how the standard relayer would \u2014 for example, calling the target contract with the message payload. Because the execution network is open, different providers can offer quotes (pricing) for delivering a message, and developers or users can choose competitively. This fosters a decentralized marketplace of relayers, rather than a single service.</p> <pre><code>sequenceDiagram\n    participant App as Application\n    participant ExContract as Executor Contract (Source Chain)\n    participant ExecNode as Executor Node (Off-chain)\n    participant Dest as Target Contract (Destination Chain)\n\n    App-&gt;&gt;ExContract: Submit Execution Request&lt;br/&gt;(target chain, target address, fee quote)\n    ExContract-&gt;&gt;ExecNode: Emit event with request + escrowed fee\n    ExecNode--&gt;&gt;ExecNode: Listen for events&lt;br/&gt;Match signed quote\n    ExecNode-&gt;&gt;Dest: Deliver VAA + execute message payload\n    Dest--&gt;&gt;App: Target contract logic executed</code></pre> <p>For developers, integrating the Executor framework can be as straightforward as using the standard relayer, with the added benefit of supporting non-EVM chains and custom pricing logic. It\u2019s described as a permissionless, extensible, and low-overhead cross-chain execution framework. The extensibility means the system is built to accommodate various message types and future features, and permissionless means integrators are not tied to a single provider \u2013 it is possible to run an executor node if desired, or rely on community-run services. The Executor is part of Wormhole\u2019s effort to make relaying truly multichain. For example, delivering messages to Solana or other ecosystems where an EVM-style relayer contract is insufficient will be possible through this framework.</p> <p>The Messaging Executor is a recent addition, and its availability might initially be limited to specific chains as it rolls out. It works alongside the Wormhole core messaging contract, complementing the existing relayer system. As the Executor network grows, developers get the advantage of broader chain support without having to custom-build their relayers for those environments. Just like the standard relayer, the Executor remains trust-minimized \u2013 an execution provider cannot violate the security of the message, and their signed quote simply helps ensure they are paid for the service.</p> <p>For more technical details, see the open-source example Executor implementation. It explains how quotes, requests, and the off-chain API function within the Executor system.</p>"},{"location":"protocol/infrastructure/relayer/#standard-relayer","title":"Standard Relayer","text":"<p>The standard relayer refers to the Wormhole-operated relayer network available out of the box for EVM chains. This decentralized network of relayer nodes, run by Wormhole Contributors, automatically picks up eligible messages and delivers them to the destination chain. Importantly, integrators do not need to operate any backend infrastructure: interaction happens entirely through on-chain contracts. On the source chain, a contract calls the Wormhole relayer contract\u2019s send function (e.g., <code>sendPayloadToEvm</code>) to request delivery, specifying the target chain and paying the associated fee. Then the relayer network transports the VAA and calls the target contract on the destination chain to pass along the message data. The target contract must implement a standard interface (such as <code>IWormholeReceiver</code>) to handle the incoming message.</p> <p>Using the standard relayer provides two main benefits: ease of integration and no infrastructure to maintain. Developers do not need to run servers or monitor the Guardian network; everything is handled by the relayer service. This lowers operational costs and complexity for cross-chain messaging. Sending a cross-chain message becomes almost as simple as emitting an event or calling a function, and receiving it is comparable to handling a callback. Because relayers cannot alter VAAs, the security model remains trust-minimized: Wormhole\u2019s Guardian signatures provide full verification, and the relayer only affects availability.</p> <p>Trade-offs</p> <ul> <li>All computation must be performed on-chain; no off-chain logic supported.  </li> <li>Cannot handle advanced workflows such as conditional logic, multi-step processes, or gas-heavy computations.  </li> <li>Limited to EVM-compatible blockchains (no support for Solana, Sui, etc.).  </li> <li>Requires fees to cover destination chain gas and a service charge, paid on the source chain.  </li> </ul> <p>Note</p> <p>Wormhole provides other relaying options for specific use cases, such as Native Token Transfers (NTT).</p>"},{"location":"protocol/infrastructure/relayer/#custom-relayer","title":"Custom Relayer","text":"<p>For projects with special requirements or the need for complete control, custom relaying is an option. This involves building and running a relayer service tailored to the application. A custom relayer typically runs as a backend service that listens for specific VAAs from the Wormhole network (often via a Spy) and then submits transactions to the destination chain when relevant messages are observed. Because Wormhole VAAs are public and trustless, anyone can run a relayer \u2014 an integrator could even operate a private relayer that only handles their own protocol\u2019s messages.</p> <p>The primary motivation for choosing this route is flexibility and optimization; another reason may be specific chains where a Wormhole relayer is still not available. With an off-chain component, developers can:  </p> <ul> <li>Apply conditional logic like aggregating multiple messages and relaying them in a single transaction (batching).  </li> <li>Trigger delivery logic (e.g., timing, price feeds, external signals) before delivery.  </li> <li>Perform computations off-chain to reduce on-chain gas costs.  </li> <li>Design custom incentive structures (e.g., funded by a protocol treasury or user-paid fees).  </li> <li>Enhance the user experience with optimizations specific to an app.</li> </ul> <p>Trade-offs</p> <ul> <li>Must run 24/7 with dedicated infrastructure (servers or cloud functions).  </li> <li>Requires ongoing DevOps and monitoring to ensure availability.  </li> <li>More complex development: integrators must handle Wormhole messages securely and always verify VAAs.  </li> <li>May need to manage cross-chain fee payments.  </li> <li>Provides maximum flexibility, but with higher operational responsibility.  </li> </ul> <p>To simplify development, Wormhole provides the Relayer Engine, a tool that abstracts boilerplate tasks such as listening to Guardians, parsing messages, and handling retries. Developers can then focus on application-specific logic, such as filtering relevant VAAs, forwarding to multiple chains, or applying off-chain checks.</p>"},{"location":"protocol/infrastructure/relayer/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Spy</p> <p>Discover Wormhole's Spy daemon, which subscribes to gossiped messages in the Guardian Network, including VAAs and Observations, with setup instructions. </p> <p>  Learn More About the Spy</p> </li> <li> <p> Build with Wormhole Relayers</p> <p>Learn how to use Wormhole-deployed relayer configurations for seamless cross-chain messaging between contracts on different EVM blockchains without off-chain deployments.   </p> <p>  Get Started with Wormhole Relayers</p> </li> <li> <p> Run a Custom Relayer</p> <p>Learn how to build and configure your own off-chain custom relaying solution to relay Wormhole messages for your applications using the Relayer Engine.</p> <p>  Get Started with Custom Relayers</p> </li> </ul>"},{"location":"protocol/infrastructure/spy/","title":"Spy","text":"<p>In Wormhole's ecosystem, the Spy is a daemon, a continuously running background process that monitors messages within the Guardian Network. Unlike Guardians, a Spy doesn't perform validation; instead, it serves as an interface for observing the network's message traffic, enabling applications and users to access live data transmitted over Wormhole.</p> <p>The primary purpose of a Spy is to subscribe to the gossiped messages across the Guardian Network, tracking key message types that allow integrators and applications to monitor real-time network activity without directly engaging in consensus operations.</p> <p>This page provides a comprehensive guide to where the Spy fits within the Wormhole network, describing the key features and role in facilitating multichain processes.</p>"},{"location":"protocol/infrastructure/spy/#key-features","title":"Key Features","text":"<ul> <li>Real-time monitoring of Wormhole messages: The Spy allows users to observe Wormhole messages as they are published across supported chains in near real-time.</li> <li>Filterable and observable message streams: Users can filter message streams by chain, emitter, and other criteria, making it easier to track specific contracts or categories of interest.</li> <li>Integration-friendly event streaming: The Spy exposes gRPC and WebSocket interfaces, making it easy to integrate message observation into custom tooling, dashboards, or indexing services.</li> <li>Support for multiple message protocols: It can observe messages from different Wormhole messaging protocols (WTT, CCTP, NTT, etc.), providing broad coverage of cross-chain activity.</li> <li>Lightweight and infrastructure-ready: The Spy is designed to run as part of indexing or backend services, not requiring validator-level infrastructure.</li> </ul>"},{"location":"protocol/infrastructure/spy/#integrator-use-case","title":"Integrator Use Case","text":"<p>The Spy provides a valuable mechanism for integrators to observe real-time network activity in the Guardian Network without directly engaging in validation or consensus. By running a Spy, integrators can track multichain events and message flows \u2014 such as VAAs, observations, and Guardian heartbeats \u2014 to monitor network activity essential to their applications.</p> <p>This monitoring capability is especially beneficial for applications that need immediate insights into multichain data events. Integrators can run a Spy to ensure their applications are promptly informed of message approvals, observations, or Guardian liveness signals, supporting timely and responsive app behavior without additional overhead on network resources.</p>"},{"location":"protocol/infrastructure/spy/#observable-message-categories","title":"Observable Message Categories","text":"<p>A Spy can access the following categories of messages shared over the gossip protocol:</p> <ul> <li> <p>Verifiable Action Approvals (VAAs): Packets of multichain data.</p> <ul> <li>The Spy can detect whether a VAA has been approved by the Guardian Network, making it a valuable tool for applications needing real-time multichain verification.</li> </ul> </li> <li> <p>Observations: Emitted by Wormhole's core contracts, observations are picked up by the Guardians and relayed across the network.</p> <ul> <li>A Spy allow users to monitor these messages, adding transparency and insight into blockchain events.</li> </ul> </li> <li> <p>Guardian heartbeats: Heartbeat messages represent Guardian node status.</p> <ul> <li>By monitoring heartbeats, a Spy can signal the liveness and connectivity of Guardians in the network.</li> </ul> </li> </ul>"},{"location":"protocol/infrastructure/spy/#additional-resources","title":"Additional Resources","text":"<ul> <li> <p> Spy Source Code</p> <p>To see the source code for the Go implementation of the Spy, visit the <code>wormhole</code> repository on GitHub.</p> <p>  View the Source Code</p> </li> <li> <p> Alternative Implementation</p> <p>Visit the <code>beacon</code> repository on GitHub to learn more about Beacon, an alternative highly available, reduced-latency version of the Wormhole Spy.</p> <p>  Get Started with Pyth Beacon</p> </li> <li> <p> Discover Wormhole Queries</p> <p>For an alternative option to on-demand access to Guardian-attested multichain data, see the Wormhole Queries page. Queries provide a simple, REST endpoint style developer experience. </p> <p>  Explore Queries</p> </li> </ul>"},{"location":"protocol/infrastructure/spy/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Run a Spy</p> <p>Learn how to run the needed infrastructure to spin up a Spy daemon locally and subscribe to a stream of Verifiable Action Approvals (VAAs).</p> <p>  Spin Up a Spy</p> </li> <li> <p> Use Queries</p> <p>For access to real-time network data without infrastructure overhead, follow this guide and use Wormhole Query to construct a query, make a request, and verify the response.</p> <p>  Get Started with Queries</p> </li> </ul>"},{"location":"protocol/infrastructure/vaas/","title":"Verified Action Approvals","text":"<p>Verified Action Approvals (VAAs) are Wormhole's core messaging primitive. They are packets of cross-chain data emitted whenever a cross-chain application contract interacts with the Core Contract.</p> <p>Guardians validate messages emitted by contracts before sending them to the target chain. Once a majority of Guardians agree the message is valid, they sign a keccak256 hash of the message body. </p> <p>The message is wrapped up in a structure called a VAA, which combines the message with the Guardian signatures to form a proof. </p> <p>VAAs are uniquely indexed by the (<code>emitter_chain</code>, <code>emitter_address</code>, <code>sequence</code>) tuple. To obtain a VAA, one can query the Wormholescan API with this information.</p> <p>The <code>sequence</code> field depends on the final ordering of blocks on the emitter chain. When a lower consistency level is chosen (i.e., not waiting for finality), there is a chance that chain reorganizations could lead to multiple, different VAAs appearing for what looks like the \u201csame\u201d message on the user side. </p> <p>The tuple (<code>emitter_chain</code>, <code>emitter_address</code>, <code>sequence</code>) can only be considered unique if the chain does not undergo a reorg and the block containing the message has effectively reached finality. However, there is always a small chance of an extended reorg that could invalidate or alter a previously emitted sequence number.</p>"},{"location":"protocol/infrastructure/vaas/#vaa-format","title":"VAA Format","text":"<p>The basic VAA consists of header and body components described as follows:</p> <ul> <li> <p>Header: Holds metadata about the current VAA, the Guardian set that is currently active, and the list of signatures gathered so far.</p> <ul> <li><code>version</code> byte: The VAA Version.</li> <li><code>guardian_set_index</code> u32: Indicates which Guardian set is signing.</li> <li><code>len_signatures</code> u8: The number of signatures stored.</li> <li><code>signatures</code> []signature: The collection of Guardian signatures.</li> </ul> <p>Where each <code>signature</code> is:</p> <ul> <li><code>index</code> u8: The index of this Guardian in the Guardian set.</li> <li><code>signature</code> [65]byte: The ECDSA signature.</li> </ul> </li> <li> <p>Body: deterministically derived from an on-chain message. Any two Guardians processing the same message must derive the same resulting body to maintain a one-to-one relationship between VAAs and messages to avoid double-processing messages.</p> <ul> <li><code>timestamp</code> u32: The timestamp of the block this message was published in.</li> <li><code>nonce</code> u32.</li> <li><code>emitter_chain</code> u16: The id of the chain that emitted the message.</li> <li><code>emitter_address</code> [32]byte: The contract address (Wormhole formatted) that called the Core Contract.</li> <li><code>sequence</code> u64: The auto-incrementing integer that represents the number of messages published by this emitter.</li> <li><code>consistency_level</code> u8: The consistency level (finality) required by this emitter.</li> <li><code>payload</code> []byte: Arbitrary bytes containing the data to be acted on.</li> </ul> </li> </ul> <p>The deterministic nature of the body is only strictly true once the chain's state is finalized. If a reorg occurs, and a transaction that previously appeared in block X is replaced by block Y, Guardians observing different forks may generate different VAAs for what the emitter contract believes is the same message. This scenario is less likely once a block is sufficiently buried, but it can still happen if you choose a faster (less finalized) consistency level</p> <p>The body contains relevant information for entities, such as contracts or other systems, that process or utilize VAAs. When a function like <code>parseAndVerifyVAA</code> is called, the body is returned, allowing verification of the <code>emitterAddress</code> to determine if the VAA originated from a trusted contract.</p> <p>Because VAAs have no destination, they are effectively multicast. Any Core Contract on any chain in the network will verify VAAs as authentic. If a VAA has a specific destination, relayers are responsible for appropriately completing that delivery.</p>"},{"location":"protocol/infrastructure/vaas/#consistency-and-finality","title":"Consistency and Finality","text":"<p>The consistency level determines whether Guardians wait for a chain's final commitment state or issue a VAA sooner under less-final conditions. This choice is especially relevant for blockchains without instant finality, where the risk of reorganization remains until a block is deeply confirmed. </p> <p>Guardian watchers are specialized processes that monitor each blockchain in real-time. They enforce the selected consistency level by deciding whether enough commitment has been reached before signing and emitting a VAA. Some chains allow only one commitment level (effectively final), while others let integrators pick between near-final or fully finalized states. Choosing a faster option speeds up VAA production but increases reorg risk. A more conservative option takes longer but reduces the likelihood of rollback.</p>"},{"location":"protocol/infrastructure/vaas/#signatures","title":"Signatures","text":"<p>The body of the VAA is hashed twice with <code>keccak256</code> to produce the signed digest message.</p> <pre><code>// hash the bytes of the body twice\ndigest = keccak256(keccak256(body))\n// sign the result \nsignature = ecdsa_sign(digest, key)\n</code></pre> <p>Hash vs. double hash</p> <p>Different implementations of the ECDSA signature validation may apply a keccak256 hash to the message passed, so care must be taken to pass the correct arguments.</p> <p>For example, the Solana secp256k1 program will hash the message passed. In this case, the argument for the message should be a single hash of the body, not the twice-hashed body.</p>"},{"location":"protocol/infrastructure/vaas/#payload-types","title":"Payload Types","text":"<p>Different applications built on Wormhole may specify a format for the payloads attached to a VAA. This payload provides information on the target chain and contract so it can take action (e.g., minting tokens to a receiver address).</p>"},{"location":"protocol/infrastructure/vaas/#token-transfer","title":"Token Transfer","text":"<p>Many bridges use a lockup/mint and burn/unlock mechanism to transfer tokens between chains. Wormhole's generic message-passing protocol handles the routing of lock and burn events across chains to ensure Wormhole's Wrapped Token Transfer (WTT) is chain-agnostic and can be rapidly integrated into any network with a Wormhole contract.</p> <p>Transferring tokens from the sending chain to the destination chain requires the following steps:</p> <ol> <li>Lock the token on the sending chain.</li> <li>The sending chain emits a message as proof the token lockup is complete.</li> <li>The destination chain receives the message confirming the lockup event on the sending chain.</li> <li>The token is minted on the destination chain.</li> </ol> <p>The message the sending chain emits to verify the lockup is referred to as a transfer message and has the following structure:</p> <ul> <li><code>payload_id</code> u8: The ID of the payload. This should be set to <code>1</code> for a token transfer.</li> <li><code>amount</code> u256: Amount of tokens being transferred.</li> <li><code>token_address</code> u8[32]: Address on the source chain.</li> <li><code>token_chain</code> u16: Numeric ID for the source chain.</li> <li><code>to</code> u8[32]: Address on the destination chain.</li> <li><code>to_chain</code> u16: Numeric ID for the destination chain.</li> <li><code>fee</code> u256: Portion of amount paid to a relayer.</li> </ul> <p>This structure contains everything the destination chain needs to learn about a lockup event. Once the destination chain receives this payload, it can mint the corresponding asset.</p> <p>Note that the destination chain is agnostic regarding how the tokens on the sending side were locked. They could have been burned by a mint or locked in a custody account. The protocol relays the event once enough Guardians have attested to its existence.</p>"},{"location":"protocol/infrastructure/vaas/#attestation","title":"Attestation","text":"<p>While the destination chain can trust the message from the sending chain to inform it of token lockup events, it has no way of verifying the correct token is locked up. To solve this, WTT supports token attestation.</p> <p>To create a token attestation, the sending chain emits a message containing metadata about a token, which the destination chain may use to preserve the name, symbol, and decimal precision of a token address.</p> <p>The message format for token attestation is as follows:</p> <ul> <li><code>payload_id</code> u8: The ID of the payload. This should be set to <code>2</code> for an attestation.</li> <li><code>token_address</code> [32]byte: Address of the originating token contract.</li> <li><code>token_chain</code> u16: Chain ID of the originating token.</li> <li><code>decimals</code> u8: Number of decimals this token should have.</li> <li><code>symbol</code> [32]byte: Short name of asset.</li> <li><code>name</code> [32]byte: Full name of asset.</li> </ul>"},{"location":"protocol/infrastructure/vaas/#attestation-tips","title":"Attestation Tips","text":"<p>Be aware of the following considerations when working with attestations:</p> <ul> <li> <p>Attestations use a fixed-length byte array to encode UTF8 token name and symbol data. Because the byte array is fixed length, the data contained may truncate multibyte Unicode characters.</p> </li> <li> <p>When sending an attestation VAA, it is recommended to send the longest UTF8 prefix that doesn't truncate a character and then right-pad it with zero bytes.</p> </li> <li> <p>When parsing an attestation VAA, it is recommended to trim all trailing zero bytes and convert the remainder to UTF-8 via any lossy algorithm.</p> </li> <li> <p>Be mindful that different on-chain systems may have different VAA parsers, resulting in different names/symbols on different chains if the string is long or contains invalid UTF8.</p> </li> <li> <p>Without knowing a token's decimal precision, the destination chain cannot correctly mint the number of tokens when processing a transfer. For this reason, WTT requires an attestation for each token transfer.</p> </li> </ul>"},{"location":"protocol/infrastructure/vaas/#token-transfer-with-message","title":"Token Transfer with Message","text":"<p>The Token Transfer with Message data structure is identical to the token-only data structure, except for the following:</p> <ul> <li><code>fee</code> field: Replaced with the <code>from_address</code> field.</li> <li><code>payload</code> field: Is added containing arbitrary bytes. A dApp may include additional data in this arbitrary byte field to inform some application-specific behavior.</li> </ul> <p>This VAA type was previously known as Contract Controlled Transfer and is also sometimes referred to as a <code>payload3</code> message. The Token Transfer with Message data sructure is as follows:</p> <ul> <li><code>payload_id</code> u8: The ID of the payload. This should be set to <code>3</code> for a token transfer with message.</li> <li><code>amount</code> u256: Amount of tokens being transferred.</li> <li><code>token_address</code> u8[32]: Address on the source chain.</li> <li><code>token_chain</code> u16: Numeric ID for the source chain.</li> <li><code>to</code> u8[32]: Address on the destination chain.</li> <li><code>to_chain</code> u16: Numeric ID for the destination chain.</li> <li><code>from_address</code> u8[32]: Address that called WTT on the source chain.</li> <li><code>payload</code> []byte: Message, arbitrary bytes, app-specific.</li> </ul>"},{"location":"protocol/infrastructure/vaas/#governance","title":"Governance","text":"<p>Governance VAAs don't have a <code>payload_id</code> field like the preceding formats. Instead, they trigger an action in the deployed contracts (for example, an upgrade).</p>"},{"location":"protocol/infrastructure/vaas/#action-structure","title":"Action Structure","text":"<p>Governance messages contain pre-defined actions, which can target the various Wormhole modules currently deployed on-chain. The structure includes the following fields:</p> <ul> <li><code>module</code> u8[32]: Contains a right-aligned module identifier.</li> <li><code>action</code> u8: Predefined governance action to execute.</li> <li><code>chain</code> u16: Chain the action is targeting. This should be set to <code>0</code> for all chains.</li> <li><code>args</code> any: Arguments to the action.</li> </ul> <p>Below is an example message containing a governance action triggering a code upgrade to the Solana Core Contract. The module field here is a right-aligned encoding of the ASCII Core, represented as a 32-byte hex string.</p> <pre><code>module:       0x0000000000000000000000000000000000000000000000000000436f7265\naction:       1\nchain:        1\nnew_contract: 0x348567293758957162374959376192374884562522281937446234828323\n</code></pre>"},{"location":"protocol/infrastructure/vaas/#actions","title":"Actions","text":"<p>The meaning of each numeric action is pre-defined and documented in the Wormhole design documents. For each application, the relevant definitions can be found via these links:</p> <ul> <li>Core governance actions</li> <li>WTT governance actions</li> </ul>"},{"location":"protocol/infrastructure/vaas/#lifetime-of-a-message","title":"Lifetime of a Message","text":"<p>Anyone can submit a VAA to the target chain. Guardians typically don't perform this step to avoid transaction fees. Instead, applications built on top of Wormhole can acquire a VAA via the Guardian RPC and submit it in a separate flow.</p> <p>With the concepts now defined, it is possible to illustrate a full flow for message passing between two chains. The following stages demonstrate each step of processing that the Wormhole network performs to route a message.</p> <ol> <li>A message is emitted by a contract running on Chain A: Any contract can emit messages, and the Guardians are programmed to observe all chains for these events. Here, the Guardians are represented as a single entity to simplify the graphics, but the observation of the message must be performed individually by each of the 19 Guardians.</li> <li>Signatures are aggregated: Guardians independently observe and sign the message. Once enough Guardians have signed the message, the collection of signatures is combined with the message and metadata to produce a VAA.</li> <li>VAA submitted to target chain: The VAA acts as proof that the Guardians have collectively attested the existence of the message payload. The VAA is submitted (or relayed) to the target chain to be processed by a receiving contract and complete the final step.</li> </ol> <p></p>"},{"location":"protocol/infrastructure/vaas/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Guardians</p> <p>Explore Wormhole's Guardian Network, a decentralized system for secure, scalable cross-chain communication across various blockchain ecosystems.</p> <p>  Learn About Guardians</p> </li> <li> <p> Wormhole Relayer</p> <p>Explore this guide to using Wormhole-deployed relayers to send and receive messages using VAAs.</p> <p>  Build with Wormhole Relayer</p> </li> </ul>"},{"location":"protocol/infrastructure-guides/run-relayer/","title":"Run a Custom Relayer","text":"<p>Relayers play a crucial role in cross-chain communication, ensuring that messages are transferred seamlessly between different blockchains. While Wormhole relayers provide a reliable way to handle these transfers, they might not always meet every application's unique requirements.</p> <p>Custom relayers address these limitations by offering tailored solutions that cater to the distinct needs of your application. Developing a custom relayer gives you complete control over message processing, delivery mechanisms, and integration with existing systems. This customization allows for optimized performance and the ability to implement specific features that Wormhole-deployed relayers might not support.</p> <p>A custom relayer might be as simple as an in-browser process that polls the API for the availability of a VAA after submitting a transaction and delivers it to the target chain. It might also be implemented with a Spy coupled with some daemon listening for VAAs from a relevant chain ID and emitter, then taking action when one is observed.</p> <p>This guide teaches you how to set up and configure a custom relayer for efficient message handling. You'll start by understanding how to uniquely identify a VAA using its emitter address, sequence ID, and chain ID. Then, you'll explore the Relayer Engine, a package that provides a framework for building custom relayers, and learn how to fetch and handle VAAs using the Wormhole SDK.</p>"},{"location":"protocol/infrastructure-guides/run-relayer/#get-started-with-a-custom-relayer","title":"Get Started with a Custom Relayer","text":"<p>To start building a custom relayer, it's essential to grasp the components you'll be managing as part of your relaying service. Your relayer must be capable of retrieving and delivering VAAs.</p> The off-chain components outlined in blue must be implemented."},{"location":"protocol/infrastructure-guides/run-relayer/#how-to-uniquely-identify-a-vaa","title":"How to Uniquely Identify a VAA","text":"<p>Regardless of the environment, to get the VAA you intend to relay, you need:</p> <ul> <li>The <code>emitter</code> address.</li> <li>The <code>sequence</code> ID of the message you're interested in.</li> <li>The <code>chainId</code> for the chain that emitted the message.</li> </ul> <p>With these three components, you're able to uniquely identify a VAA and process it.</p>"},{"location":"protocol/infrastructure-guides/run-relayer/#use-the-relayer-engine","title":"Use the Relayer Engine","text":"<p>The <code>relayer-engine</code> is a package that provides the structure and a starting point for a custom relayer.</p> <p>With the Relayer Engine, a developer can write specific logic for filtering to receive only the messages they care about.</p> <p>Once a Wormhole message is received, the developer may apply additional logic to parse custom payloads or submit the Verifiable Action Approvals (VAA) to one or many destination chains.</p> <p>To use the Relayer Engine, a developer may specify how to relay Wormhole messages for their app using an idiomatic Express/Koa middleware-inspired API, then let the library handle all the details.</p>"},{"location":"protocol/infrastructure-guides/run-relayer/#install-the-relayer-engine","title":"Install the Relayer Engine","text":"<p>First, install the <code>relayer-engine</code> package with your favorite package manager:</p> <pre><code>npm i @wormhole-foundation/relayer-engine\n</code></pre>"},{"location":"protocol/infrastructure-guides/run-relayer/#get-started-with-the-relayer-engine","title":"Get Started with the Relayer Engine","text":"<p>In the following example, you'll:</p> <ol> <li>Set up a <code>StandardRelayerApp</code>, passing configuration options for our relayer.</li> <li>Add a filter to capture only those messages our app cares about, with a callback to do something with the VAA once received.</li> <li>Start the relayer app.</li> </ol> <pre><code>import {\n  Environment,\n  StandardRelayerApp,\n  StandardRelayerContext,\n} from '@wormhole-foundation/relayer-engine';\nimport { CHAIN_ID_SOLANA } from '@certusone/wormhole-sdk';\n\n(async function main() {\n  // Initialize relayer engine app and pass relevant config options\n  const app = new StandardRelayerApp&lt;StandardRelayerContext&gt;(\n    Environment.TESTNET,\n    // Other app specific config options can be set here for things\n    // like retries, logger, or redis connection settings\n    {\n      name: 'ExampleRelayer',\n    }\n  );\n\n  // Add a filter with a callback that will be invoked\n  // on finding a VAA that matches the filter\n  app.chain(CHAIN_ID_SOLANA).address(\n    // Emitter address on Solana\n    'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n    // Callback function to invoke on new message\n    async (ctx, next) =&gt; {\n      const vaa = ctx.vaa;\n      const hash = ctx.sourceTxHash;\n      console.log(\n        `Got a VAA with sequence: ${vaa.sequence} from with txhash: ${hash}`\n      );\n    }\n  );\n\n  // Add and configure any other middleware here\n\n  // Start app. Blocks until unrecoverable error or process is stopped\n  await app.listen();\n})();\n</code></pre> <p>The first meaningful line instantiates the <code>StandardRelayerApp</code>, a subclass of the <code>RelayerApp</code> with standard defaults.</p> <pre><code>export class StandardRelayerApp&lt;\n  ContextT extends StandardRelayerContext = StandardRelayerContext,\n&gt; extends RelayerApp&lt;ContextT&gt; {\n  // ...\n  constructor(env: Environment, opts: StandardRelayerAppOpts) {\n</code></pre> <p>The only field you pass in the <code>StandardRelayerAppOpts</code> is the name to help identify log messages and reserve a namespace in Redis.</p> <code>StandardRelayerAppOpts</code> <p>Other options can be passed to the <code>StandardRelayerApp</code> constructor to configure the app further.</p> <pre><code>wormholeRpcs?: string[];  // List of URLs from which to query missed VAAs\nconcurrency?: number;     // How many concurrent requests to make for workflows\nspyEndpoint?: string;     // The hostname and port of our Spy\nlogger?: Logger;          // A custom Logger\nprivateKeys?: Partial&lt;{ [k in ChainId]: any[]; }&gt;; // A set of keys that can be used to sign and send transactions\ntokensByChain?: TokensByChain;    // The token list we care about\nworkflows?: { retries: number; }; // How many times to retry a given workflow\nproviders?: ProvidersOpts;        // Configuration for the default providers\nfetchSourceTxhash?: boolean;      // whether or not to get the original transaction ID/hash\n// Redis config\nredisClusterEndpoints?: ClusterNode[];\nredisCluster?: ClusterOptions;\nredis?: RedisOptions;\n</code></pre> <p>The next meaningful line in the example adds a filter middleware component. This middleware will cause the relayer app to request a subscription from the Spy for any VAAs that match the criteria and invoke the callback with the VAA.</p> <p>If you'd like your program to subscribe to <code>multiple</code> chains and addresses, you can call the same method several times or use the <code>multiple</code> helper.</p> <pre><code>app.multiple(\n  {\n    [CHAIN_ID_SOLANA]: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n    [CHAIN_ID_ETH]: ['0xabc1230000000...', '0xdef456000...'],\n  },\n  myCallback\n);\n</code></pre> <p>The last line in the simple example runs <code>await app.listen()</code>, which starts the relayer engine. Once started, the Relayer Engine issues subscription requests to the Spy and begins any other workflows (e.g., tracking missed VAAs).</p> <p>This will run until the process is killed or encounters an unrecoverable error. To gracefully shut down the relayer, call <code>app.stop()</code>.</p> <p>The source code for this example is available in the <code>relayer-engine</code> repository.</p>"},{"location":"protocol/infrastructure-guides/run-relayer/#start-background-processes","title":"Start Background Processes","text":"<p>Note</p> <p>These processes must be running for the relayer app below to work.</p> <p>Next, you must start a Spy to listen for available VAAs published on the Guardian network. You also need a persistence layer. This example uses Redis.</p> <p>More details about the Spy are available in the Spy Documentation.</p>"},{"location":"protocol/infrastructure-guides/run-relayer/#wormhole-network-spy","title":"Wormhole Network Spy","text":"<p>For our relayer app to receive messages, a local Spy must be running that watches the Guardian network. Our relayer app will receive updates from this Spy.</p> Mainnet SpyTestnet Spy <pre><code>docker run --pull=always --platform=linux/amd64 \\\n-p 7073:7073 \\\n--entrypoint /guardiand ghcr.io/wormhole-foundation/guardiand:latest \\\nspy \\\n--nodeKey /node.key \\\n--spyRPC \"[::]:7073\" \\\n--env mainnet\n</code></pre> <pre><code>docker run --pull=always --platform=linux/amd64 \\\n-p 7073:7073 \\\n--entrypoint /guardiand ghcr.io/wormhole-foundation/guardiand:latest \\\nspy \\\n--nodeKey /node.key \\\n--spyRPC \"[::]:7073\" \\\n--env testnet   \n</code></pre>"},{"location":"protocol/infrastructure-guides/run-relayer/#redis-persistence","title":"Redis Persistence","text":"<p>Note</p> <p>While you're using Redis here, the persistence layer can be swapped out for some other database by implementing the appropriate interface.</p> <p>A Redis instance must also be available to persist job data for fetching VAAs from the Spy.</p> <pre><code>docker run --rm -p 6379:6379 --name redis-docker -d redis\n</code></pre>"},{"location":"protocol/infrastructure-guides/run-relayer/#use-the-wormhole-sdk","title":"Use the Wormhole SDK","text":"<p>Note</p> <p>The example below uses the legacy <code>@certusone/wormhole-sdk</code>, which is still supported and used in the Relayer Engine but is no longer actively maintained.</p> <p>For most use cases, it is recommend to use the latest <code>@wormhole-foundation/sdk</code>.</p> <p>You can also use the Wormhole SDK to poll the Guardian RPC until a signed VAA is ready using the SDK's <code>getSignedVAAWithRetry</code> function.</p> <pre><code>import {\n  getSignedVAAWithRetry,\n  parseVAA,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_ETH,\n} from '@certusone/wormhole-sdk';\n\nconst RPC_HOSTS = [\n  /* ...*/\n];\n\nasync function getVAA(\n  emitter: string,\n  sequence: string,\n  chainId: number\n): Promise&lt;Uint8Array&gt; {\n  // Wait for the VAA to be ready and fetch it from the guardian network\n  const { vaaBytes } = await getSignedVAAWithRetry(\n    RPC_HOSTS,\n    chainId,\n    emitter,\n    sequence\n  );\n  return vaaBytes;\n}\n\nconst vaaBytes = await getVAA('INSERT_EMITTER_ADDRESS', 1, CHAIN_ID_ETH);\n</code></pre> <p>Once you have the VAA, the delivery method is chain-dependent.</p> EVMSolana <p>On EVM chains, the bytes for the VAA can be passed directly as an argument to an ABI method.</p> <pre><code>// Set up eth wallet\nconst ethProvider = new ethers.providers.StaticJsonRpcProvider(\n  'INSERT_RPC_URL'\n);\nconst ethWallet = new ethers.Wallet('INSERT_PRIVATE_KEY', ethProvider);\n\n// Create client to interact with our target app\nconst ethHelloWorld = HelloWorld__factory.connect(\n  'INSERT_CONTRACT_ADDRESS',\n  ethWallet\n);\n\n// Invoke the receiveMessage on the ETH contract and wait for confirmation\nconst receipt = await ethHelloWorld\n  .receiveMessage(vaaBytes)\n  .then((tx: ethers.ContractTransaction) =&gt; tx.wait())\n  .catch((msg: any) =&gt; {\n    console.error(msg);\n    return null;\n  });\n</code></pre> <p>On Solana, the VAA is first posted to the core bridge, and then a custom transaction is prepared to process and validate the VAA. </p> <pre><code>import { CONTRACTS } from '@certusone/wormhole-sdk';\n\nexport const WORMHOLE_CONTRACTS = CONTRACTS[NETWORK];\nexport const CORE_BRIDGE_PID = new PublicKey(WORMHOLE_CONTRACTS.solana.core);\n\n// First, post the VAA to the core bridge\nawait postVaaSolana(\n  connection,\n  wallet.signTransaction,\n  CORE_BRIDGE_PID,\n  wallet.key(),\n  vaaBytes\n);\n\nconst program = createHelloWorldProgramInterface(connection, programId);\nconst parsed = isBytes(wormholeMessage)\n  ? parseVaa(wormholeMessage)\n  : wormholeMessage;\n\nconst ix = program.methods\n  .receiveMessage([...parsed.hash])\n  .accounts({\n    payer: new PublicKey(payer),\n    config: deriveConfigKey(programId),\n    wormholeProgram: new PublicKey(wormholeProgramId),\n    posted: derivePostedVaaKey(wormholeProgramId, parsed.hash),\n    foreignEmitter: deriveForeignEmitterKey(programId, parsed.emitterChain),\n    received: deriveReceivedKey(\n      programId,\n      parsed.emitterChain,\n      parsed.sequence\n    ),\n  })\n  .instruction();\n\nconst transaction = new Transaction().add(ix);\nconst { blockhash } = await connection.getLatestBlockhash(commitment);\ntransaction.recentBlockhash = blockhash;\ntransaction.feePayer = new PublicKey(payerAddress);\n\nconst signed = await wallet.signTxn(transaction);\nconst txid = await connection.sendRawTransaction(signed);\n\nawait connection.confirmTransaction(txid);\n</code></pre>"},{"location":"protocol/infrastructure-guides/run-spy/","title":"Run a Spy","text":"<p>The Spy is a lightweight component in the Wormhole infrastructure designed to listen for and forward messages (Verifiable Action Approvals (VAAs)) published on the Wormhole network. Running a Spy locally allows developers to subscribe to a filtered stream of these messages, facilitating the development of custom relayers or other integrations with Wormhole.</p> <p>For a more comprehensive understanding of the Spy and its role within the Wormhole ecosystem, refer to the Spy Documentation.</p>"},{"location":"protocol/infrastructure-guides/run-spy/#how-to-start-a-spy","title":"How to Start a Spy","text":"<p>To start a Spy locally, run the following Docker command:</p> MainnetTestnet <pre><code>docker run --pull=always --platform=linux/amd64 \\\n    -p 7073:7073 \\\n    --entrypoint /guardiand ghcr.io/wormhole-foundation/guardiand:latest \\\n    spy \\\n    --nodeKey /node.key \\\n    --spyRPC \"[::]:7073\" \\\n    --env mainnet\n</code></pre> <pre><code>docker run --pull=always --platform=linux/amd64 \\\n    -p 7073:7073 \\\n    --entrypoint /guardiand ghcr.io/wormhole-foundation/guardiand:latest \\\n    spy \\\n    --nodeKey /node.key \\\n    --spyRPC \"[::]:7073\" \\\n    --env testnet\n</code></pre> <p>If you want to run the Spy built from source, change <code>ghcr.io/wormhole-foundation/guardiand:latest</code> to <code>guardian</code> after building the <code>guardian</code> image.</p> <p>Optionally, add the following flags to skip any VAAs with invalid signatures:</p> MainnetTestnet <pre><code>--ethRPC https://eth.drpc.org\n--ethContract 0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\n</code></pre> <pre><code>--ethRPC https://sepolia.drpc.org/\n--ethContract 0x4a8bc80Ed5a4067f1CCf107057b8270E0cC11A78    \n</code></pre> <p>Optionally, add the following flags to prevent unbounded log growth:</p> <pre><code>--log-opt max-size=10m \\\n--log-opt max-file=3\n</code></pre>"},{"location":"protocol/infrastructure-guides/run-spy/#subscribe-to-filtered-vaas","title":"Subscribe to Filtered VAAs","text":"<p>Once running, a gRPC client (i.e., your program) can subscribe to a filtered stream of messages (VAAs).</p> <p>Use this proto-spec file to generate a client for the gRPC service.</p>"},{"location":"protocol/infrastructure-guides/run-spy/#data-persistence","title":"Data Persistence","text":"<p>The Spy does not have a built-in persistence layer, so it is typically paired with something like Redis or an SQL database to record relevant messages.</p> <p>The persistence layer needs to implement the appropriate interface. For example, you can check out the Redis interface used by the Relayer Engine, a package that implements a client and persistence layer for messages received from a Spy subscription.</p>"},{"location":"tools/dev-env/","title":"Development Environment","text":"<p>Developers building for smart contract integration will want to set up a development environment to allow testing the full integration, possibly including VAA generation and relaying.</p>"},{"location":"tools/dev-env/#tooling-installation","title":"Tooling Installation","text":"<p>The Wormhole CLI Tool should be installed regardless of the environments chosen. Each environment has its own set of recommended tools. To begin working with a specific environment, see the recommended tools on the respective environment page.</p>"},{"location":"tools/dev-env/#development-stages","title":"Development Stages","text":"<p>Different approaches to development and testing are recommended at various stages of application development.</p>"},{"location":"tools/dev-env/#initial-development","title":"Initial Development","text":"<p>During the initial development of an on-chain application, the best option is to use the native tools available in the environment. You can visit the following resources for more information:</p> <ul> <li>Environment: Select the folder for the desired network to learn about the recommended native toolset.</li> <li>Mock Guardian: It's recommended to set up a mock Guardian or Emitter to provide signed VAAs for any program methods that require some message be sent or received.</li> <li>Wormhole Scaffolding repository: Example mock Guardian test.</li> </ul> <p>Relying on native tools when possible allows for more rapid prototyping and iteration.  </p>"},{"location":"tools/dev-env/#integration","title":"Integration","text":"<p>For integration to Wormhole and with multiple chains, the simplest option is to use the chains' Testnets. In choosing which chains to use for integration testing, consider which chains in a given environment provide easy access to Testnet tokens and where block times are fast. Find links for Testnet faucets in the blockchain details section. A developer may prefer standing up a set of local validators instead of using the Testnet. For this option, Tilt is available to run local instances of all the chains Wormhole supports.</p> <p>Note</p> <p>Variation in host environments causes unique issues, and the computational intensity of multiple simultaneous local validators can make setting them up difficult or time-consuming. You may prefer Testnets for the simplest integration testing.</p>"},{"location":"tools/dev-env/#prepare-for-deployment","title":"Prepare for Deployment","text":"<p>Once you've finished the application's initial development and performed integration testing, you should set up a CI test environment. The best option for that is likely to be Tilt since it allows you to spin up any chains supported by Wormhole in a consistent environment.</p>"},{"location":"tools/dev-env/#validator-setup-with-tilt","title":"Validator Setup with Tilt","text":""},{"location":"tools/dev-env/#tilt","title":"Tilt","text":"<p>If you'd like to set up a local validator environment, follow the setup guide for Tilt. Tilt is a full-fledged Kubernetes deployment of every chain connected to Wormhole, along with a Guardian node. It usually takes 30 minutes to spin up fully, but it comes with all chains running out of the box. Refer to the Tilt page for a complete guide to setting up and configuring Tilt.</p>"},{"location":"tools/dev-env/#deploying-to-public-networks","title":"Deploying to Public Networks","text":""},{"location":"tools/dev-env/#testnet","title":"Testnet","text":"<p>When doing integration testing on Testnets, remember that a single Guardian node is watching for transactions on various test networks. Because Testnets only have a single Guardian, there's a slight chance that your VAAs won't be processed. This rate doesn't indicate performance on Mainnet, where 19 Guardians are watching for transactions. The Testnet contract addresses are available on the page for each environment. The Wormholescan API offers the following Guardian equivalent Testnet endpoint:</p> <pre><code>https://api.testnet.wormholescan.io\n</code></pre>"},{"location":"tools/dev-env/#mainnet","title":"Mainnet","text":"<p>The Mainnet contract addresses are available on the page for each environment. The Wormholescan API offers the following Guardian equivalent Mainnet endpoint:</p> <pre><code>https://api.wormholescan.io\n</code></pre>"},{"location":"tools/faqs/","title":"Toolkit FAQs","text":""},{"location":"tools/faqs/#why-does-the-tonative-function-in-the-typescript-sdk-return-an-error","title":"Why does the <code>toNative</code> function in the TypeScript SDK return an error?","text":"<p>The <code>toNative</code> function may return an error if the platform-specific module (such as Solana or EVM) is not correctly imported or passed into the Wormhole constructor.</p> <p>To fix this, ensure the relevant platform module is imported and included when initializing Wormhole. For example, if you're working with Solana, make sure to import the Solana module and pass it into the Wormhole constructor like this:</p> <pre><code>import solana from '@wormhole-foundation/sdk/solana';\nconst wh = await wormhole('Testnet', [solana]);\n</code></pre>"},{"location":"tools/faqs/#how-can-i-retrieve-the-history-of-previously-bridged-transactions","title":"How can I retrieve the history of previously bridged transactions?","text":"<p>To retrieve the history of previously bridged transactions, you can use the Wormholescan API. Use the following endpoint to query the transaction history for a specific address:</p> <pre><code>https://api.wormholescan.io/api/v1/operations?address=INSERT_ADDRESS\n</code></pre> <p>Simply replace <code>INSERT_ADDRESS_HERE</code> with the address you want to query. The API will return a list of operations, including details about previously bridged transactions.</p> Fetch transaction history for a specific address <pre><code>curl -X GET \"https://api.wormholescan.io/api/v1/operations?address=0x05c009C4C1F1983d4B915C145F4E782de23d3A38\" -H \"accept: application/json\"\n</code></pre>"},{"location":"tools/faqs/#how-can-i-manually-submit-a-vaa-to-a-destination-chain-in-the-correct-format","title":"How can I manually submit a VAA to a destination chain in the correct format?","text":"<p>To manually submit a VAA (Verifiable Action Approval) to a destination chain, follow these steps:</p> <ol> <li> <p>Obtain the VAA in Base64 format: Navigate to the Advanced tab in Wormholescan to find the VAA associated with the transaction you want to submit and copy the VAA in base64 format.</p> <pre><code>https://wormholescan.io/#/tx/INSERT_TX_HASH?view=advanced\n</code></pre> </li> <li> <p>Convert the VAA to hex: You must convert the base64 VAA into a hexadecimal (hex) format before submitting it to the destination chain. This can be done using various online tools or via command-line utilities like <code>xxd</code> or a script in a language like Python.</p> </li> <li> <p>Submit the VAA through Etherscan (for EVM chains): Once the VAA is in hex format, go to the Etherscan UI and submit it through the <code>TokenBridge</code> contract\u2019s method (such as the <code>CompleteTransfer</code> function or <code>CompleteTransferWithPayload</code>).</p> <ul> <li> <p>The <code>TokenBridge</code> contract addresses for each chain are available in the Wormhole contract addresses section.</p> </li> <li> <p>Interact with the smart contract through the Etherscan UI by pasting the hex-encoded VAA into the appropriate field.</p> </li> </ul> </li> </ol> <p>Following these steps, you can manually submit a VAA in the proper format to a destination chain.</p>"},{"location":"tools/cli/get-started/","title":"Wormhole CLI","text":"<p>This tool is a command-line interface to Wormhole, allowing you to perform various actions, such as querying a transaction's status or submitting token transfers.</p>"},{"location":"tools/cli/get-started/#installation","title":"Installation","text":"<p>Clone the repository and change directories to the appropriate directory:</p> <pre><code>git clone https://github.com/wormhole-foundation/wormhole &amp;&amp;\ncd wormhole/clients/js\n</code></pre> <p>Build and install the CLI tool:</p> <pre><code>make install\n</code></pre> <p>This installs two binaries, <code>worm-fetch-governance</code> and <code>worm</code> on your <code>$PATH</code>. To use <code>worm</code>, set up <code>$HOME/.wormhole/.env</code> with your private keys, based on <code>.env.sample</code> in this folder.</p>"},{"location":"tools/cli/get-started/#usage","title":"Usage","text":"<p>You can interact with the Wormhole CLI by typing <code>worm</code> and including the <code>command</code> and any necessary subcommands and parameters.  </p> Command Description <code>worm aptos INSERT_COMMAND</code> Aptos utilities. <code>worm edit-vaa INSERT_COMMAND</code> Edits or generates a VAA. <code>worm evm INSERT_COMMAND</code> EVM utilities. <code>worm generate INSERT_COMMAND</code> Generate VAAs (devnet and testnet only). <code>worm info INSERT_COMMAND</code> Contract, chain, RPC, and address information utilities. <code>worm near INSERT_NETWORK, INSERT_ACCOUNT</code> NEAR utilities. <code>worm parse INSERT_VAA</code> Parse a VAA (can be in either hex or base64 format). <code>worm recover INSERT_DIGEST INSERT_SIGNATURE</code> Recover an address from a signature. <code>worm status INSERT_NETWORK, INSERT_CHAIN, INSERT_TXN_HASH</code> Prints information about the automatic delivery initiated on the specified network, chain, and transaction hash. <code>worm submit INSERT_VAA</code> Execute a VAA. <code>worm sui INSERT_COMMAND</code> Sui utilities. <code>worm transfer INSERT_SOURCE_CHAIN, INSERT_DESTINATION_CHAIN, INSERT_DESTINATION_ADDRESS, INSERT_AMOUNT, INSERT_NETWORK</code> Transfers a token. <code>worm verify-vaa INSERT_VAA, INSERT_NETWORK</code> Verifies a VAA by querying the Core Contract on Ethereum. <p>You can also refer to the below options, available with all <code>worm</code> commands:</p> <pre><code>Options:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre>"},{"location":"tools/cli/get-started/#subcommands","title":"Subcommands","text":"Aptos <pre><code>worm aptos INSERT_COMMAND\n\nCommands:\n  worm aptos init-token-bridge              Init token bridge contract\n  worm aptos init-wormhole                  Init Wormhole core contract\n  worm aptos deploy &lt;package-dir&gt;           Deploy an Aptos package\n  worm aptos deploy-resource &lt;seed&gt;         Deploy an Aptos package using a\n  &lt;package-dir&gt;                             resource account\n  worm aptos send-example-message           Send example message\n  &lt;message&gt;\n  worm aptos derive-resource-account        Derive resource account address\n  &lt;account&gt; &lt;seed&gt;\n  worm aptos derive-wrapped-address         Derive wrapped coin type\n  &lt;chain&gt; &lt;origin-address&gt;\n  worm aptos hash-contracts &lt;package-dir&gt;   Hash contract bytecodes for upgrade\n  worm aptos upgrade &lt;package-dir&gt;          Perform upgrade after VAA has been\n                                            submitted\n  worm aptos migrate                        Perform migration after contract\n                                            upgrade\n  worm aptos faucet                         Request money from the faucet for a\n                                            given account\n  worm aptos start-validator                Start a local aptos validator\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> Edit VAA <pre><code>worm edit-vaa INSERT_COMMAND\n\nOptions:\n      --help                       Show help                           [boolean]\n      --version                    Show version number                 [boolean]\n  -v, --vaa                        vaa in hex format         [string] [required]\n  -n, --network                    Network\n                            [required] [choices: \"mainnet\", \"testnet\", \"devnet\"]\n      --guardian-set-index, --gsi  guardian set index                   [number]\n      --signatures, --sigs         comma separated list of signatures   [string]\n      --wormscanurl, --wsu         url to wormscan entry for the vaa that\n                                   includes signatures                  [string]\n      --wormscan, --ws             if specified, will query the wormscan entry\n                                   for the vaa to get the signatures   [boolean]\n      --emitter-chain-id, --ec     emitter chain id to be used in the vaa\n                                                                        [number]\n      --emitter-address, --ea      emitter address to be used in the vaa[string]\n      --nonce, --no                nonce to be used in the vaa          [number]\n      --sequence, --seq            sequence number to be used in the vaa[string]\n      --consistency-level, --cl    consistency level to be used in the vaa\n                                                                        [number]\n      --timestamp, --ts            timestamp to be used in the vaa in unix\n                                   seconds                              [number]\n  -p, --payload                    payload in hex format                [string]\n      --guardian-secret, --gs      Guardian's secret key                [string]\n</code></pre> EVM <pre><code>worm evm INSERT_COMMAND\n\nCommands:\n  worm evm address-from-secret &lt;secret&gt;  Compute a 20 byte eth address from a 32\n                                         byte private key\n  worm evm storage-update                Update a storage slot on an EVM fork\n                                         during testing (anvil or hardhat)\n  worm evm chains                        Return all EVM chains\n  worm evm info                          Query info about the on-chain state of\n                                         the contract\n  worm evm hijack                        Override the guardian set of the core\n                                         bridge contract during testing (anvil\n                                         or hardhat)\n  worm evm start-validator               Start a local EVM validator\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n  --rpc      RPC endpoint                                               [string]\n</code></pre> Generate <pre><code>worm generate INSERT_COMMAND\n\nCommands:\n  worm generate registration                Generate registration VAA\n  worm generate upgrade                     Generate contract upgrade VAA\n  worm generate attestation                 Generate a token attestation VAA\n  worm generate recover-chain-id            Generate a recover chain ID VAA\n  worm generate                             Sets the default delivery provider\n  set-default-delivery-provider             for the Wormhole Relayer contract\n\nOptions:\n      --help             Show help                                     [boolean]\n      --version          Show version number                           [boolean]\n  -g, --guardian-secret  Guardians' secret keys (CSV)        [string] [required]\n</code></pre> Info <pre><code>worm info INSERT_COMMAND\n\nCommands:\n  worm info chain-id &lt;chain&gt;                Print the wormhole chain ID integer\n                                            associated with the specified chain\n                                            name\n  worm info contract &lt;network&gt; &lt;chain&gt;      Print contract address\n  &lt;module&gt;\n  worm info emitter &lt;chain&gt; &lt;address&gt;       Print address in emitter address\n                                            format\n  worm info origin &lt;chain&gt; &lt;address&gt;        Print the origin chain and address\n                                            of the asset that corresponds to the\n                                            given chain and address.\n  worm info registrations &lt;network&gt;         Print chain registrations\n  &lt;chain&gt; &lt;module&gt;\n  worm info rpc &lt;network&gt; &lt;chain&gt;           Print RPC address\n  worm info wrapped &lt;origin-chain&gt;          Print the wrapped address on the\n  &lt;origin-address&gt; &lt;target-chain&gt;           target chain that corresponds with\n                                            the specified origin chain and\n                                            address.\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> NEAR <pre><code>worm near INSERT_COMMAND\n\nCommands:\n  worm near contract-update &lt;file&gt;  Submit a contract update using our specific\n                                    APIs\n  worm near deploy &lt;file&gt;           Submit a contract update using near APIs\n\nOptions:\n      --help      Show help                                            [boolean]\n      --version   Show version number                                  [boolean]\n  -m, --module    Module to query  [choices: \"Core\", \"TokenBridge\"]\n  -n, --network   Network   [required] [choices: \"mainnet\", \"testnet\", \"devnet\"]\n      --account   Near deployment account                    [string] [required]\n      --attach    Attach some near                                      [string]\n      --target    Near account to upgrade                               [string]\n      --mnemonic  Near private keys                                     [string]\n      --key       Near private key                                      [string]\n  -r, --rpc       Override default rpc endpoint url                     [string]\n</code></pre> Parse <pre><code>worm parse INSERT_VAA\n\nPositionals:\n  vaa  vaa                                                              [string]\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> Recover <pre><code>worm recover INSERT_DIGEST INSERT_SIGNATURE\n\nPositionals:\n  digest     digest                                                     [string]\n  signature  signature                                                  [string]\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> Status <pre><code>worm status INSERT_NETWORK, INSERT_CHAIN, INSERT_TXN_HASH\n\nPositionals:\n  network  Network                     [choices: \n  'mainnet', \n  'testnet', \n  'devnet']\n  chain    Source chain\n             [choices: \n  'unset',\n  'solana',\n  'ethereum',\n  'terra',\n  'bsc',\n  'polygon',\n  'avalanche',\n  'oasis',\n  'algorand',\n  'aurora',\n  'fantom',\n  'karura',\n  'acala',\n  'klaytn',\n  'celo',\n  'near',\n  'moonbeam',\n  'neon',\n  'terra2',\n  'injective',\n  'osmosis',\n  'sui',\n  'aptos',\n  'arbitrum',\n  'optimism',\n  'gnosis',\n  'pythnet',\n  'xpla',\n  'btc',\n  'base',\n  'sei',\n  'rootstock',\n  'scroll',\n  'mantle',\n  'blast',\n  'xlayer',\n  'linea',\n  'berachain',\n  'seievm',\n  'wormchain',\n  'cosmoshub',\n  'evmos',\n  'kujira',\n  'neutron',\n  'celestia',\n  'stargaze',\n  'seda',\n  'dymension',\n  'provenance',\n  'sepolia',\n  'arbitrum_sepolia',\n  'base_sepolia',\n  'optimism_sepolia',\n  'holesky',\n  'polygon_sepolia']\n  tx       Source transaction hash                                      [string]\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> Submit <pre><code>worm submit INSERT_VAA\n\nPositionals:\n  vaa  vaa                                                              [string]\n\nOptions:\n      --help              Show help                                    [boolean]\n      --version           Show version number                          [boolean]\n  -c, --chain             chain name\n[choices: 'unset',\n  'solana',\n  'ethereum',\n  'terra',\n  'bsc',\n  'polygon',\n  'avalanche',\n  'oasis',\n  'algorand',\n  'aurora',\n  'fantom',\n  'karura',\n  'acala',\n  'klaytn',\n  'celo',\n  'near',\n  'moonbeam',\n  'neon',\n  'terra2',\n  'injective',\n  'osmosis',\n  'sui',\n  'aptos',\n  'arbitrum',\n  'optimism',\n  'gnosis',\n  'pythnet',\n  'xpla',\n  'btc',\n  'base',\n  'sei',\n  'rootstock',\n  'scroll',\n  'mantle',\n  'blast',\n  'xlayer',\n  'linea',\n  'berachain',\n  'seievm',\n  'wormchain',\n  'cosmoshub',\n  'evmos',\n  'kujira',\n  'neutron',\n  'celestia',\n  'stargaze',\n  'seda',\n  'dymension',\n  'provenance',\n  'sepolia',\n  'arbitrum_sepolia',\n  'base_sepolia',\n  'optimism_sepolia',\n  'holesky',\n  'polygon_sepolia']\n  -n, --network           Network\n                            [required] \n  [choices: \n  'mainnet', \n  'testnet', \n  'devnet']\n  -a, --contract-address  Contract to submit VAA to (override config)   [string]\n      --rpc               RPC endpoint                                  [string]\n      --all-chains, --ac  Submit the VAA to all chains except for the origin\n                          chain specified in the payload\n                                                      [boolean] [default: false]\n</code></pre> Sui <pre><code>worm sui INSERT_COMMAND\n\nCommands:\n  worm sui build-coin                    Build wrapped coin and dump bytecode.\n\n                                         Example:\n                                         worm sui build-coin -d 8 -v V__0_1_1 -n\n                                         testnet -r\n                                         \"https://fullnode.testnet.sui.io:443\"\n  worm sui deploy &lt;package-dir&gt;          Deploy a Sui package\n  worm sui init-example-message-app      Initialize example core message app\n  worm sui init-token-bridge             Initialize token bridge contract\n  worm sui init-wormhole                 Initialize wormhole core contract\n  worm sui publish-example-message       Publish message from example app via\n                                         core bridge\n  worm sui setup-devnet                  Setup devnet by deploying and\n                                         initializing core and token bridges and\n                                         submitting chain registrations.\n  worm sui objects &lt;owner&gt;               Get owned objects by owner\n  worm sui package-id &lt;state-object-id&gt;  Get package ID from State object ID\n  worm sui tx &lt;transaction-digest&gt;       Get transaction details\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n</code></pre> Transfer <pre><code>worm transfer INSERT_SOURCE_CHAIN, INSERT_DESTINATION_CHAIN, INSERT_DESTINATION_ADDRESS, INSERT_AMOUNT, INSERT_NETWORK\n\nOptions:\n      --help        Show help                                          [boolean]\n      --version     Show version number                                [boolean]\n      --src-chain   source chain [required] [choices:\n  'solana',\n  'ethereum',\n  'terra',\n  'bsc',\n  'polygon',\n  'avalanche',\n  'oasis',\n  'algorand',\n  'aurora',\n  'fantom',\n  'karura',\n  'acala',\n  'klaytn',\n  'celo',\n  'near',\n  'moonbeam',\n  'neon',\n  'terra2',\n  'injective',\n  'osmosis',\n  'sui',\n  'aptos',\n  'arbitrum',\n  'optimism',\n  'gnosis',\n  'pythnet',\n  'xpla',\n  'btc',\n  'base',\n  'sei',\n  'rootstock',\n  'scroll',\n  'mantle',\n  'blast',\n  'xlayer',\n  'linea',\n  'berachain',\n  'seievm',\n  'wormchain',\n  'cosmoshub',\n  'evmos',\n  'kujira',\n  'neutron',\n  'celestia',\n  'stargaze',\n  'seda',\n  'dymension',\n  'provenance',\n  'sepolia',\n  'arbitrum_sepolia',\n  'base_sepolia',\n  'optimism_sepolia',\n  'holesky',\n  'polygon_sepolia']\n  --dst-chain   destination chain\n           [required] [choices: \n  'solana',\n  'ethereum',\n  'terra',\n  'bsc',\n  'polygon',\n  'avalanche',\n  'oasis',\n  'algorand',\n  'aurora',\n  'fantom',\n  'karura',\n  'acala',\n  'klaytn',\n  'celo',\n  'near',\n  'moonbeam',\n  'neon',\n  'terra2',\n  'injective',\n  'osmosis',\n  'sui',\n  'aptos',\n  'arbitrum',\n  'optimism',\n  'gnosis',\n  'pythnet',\n  'xpla',\n  'btc',\n  'base',\n  'sei',\n  'rootstock',\n  'scroll',\n  'mantle',\n  'blast',\n  'xlayer',\n  'linea',\n  'berachain',\n  'seievm',\n  'wormchain',\n  'cosmoshub',\n  'evmos',\n  'kujira',\n  'neutron',\n  'celestia',\n  'stargaze',\n  'seda',\n  'dymension',\n  'provenance',\n  'sepolia',\n  'arbitrum_sepolia',\n  'base_sepolia',\n  'optimism_sepolia',\n  'holesky',\n  'polygon_sepolia']\n      --dst-addr    destination address                      [string] [required]\n      --token-addr  token address               [string] [default: native token]\n      --amount      token amount                             [string] [required]\n  -n, --network     Network [required] [choices: \"mainnet\", \"testnet\", \"devnet\"]\n      --rpc         RPC endpoint                                        [string]\n</code></pre> Verify VAA <pre><code>worm verify-vaa INSERT_VAA, INSERT_NETWORK\n\nOptions:\n      --help     Show help                                             [boolean]\n      --version  Show version number                                   [boolean]\n  -v, --vaa      vaa in hex format                           [string] [required]\n  -n, --network  Network    [required] [choices: \"mainnet\", \"testnet\", \"devnet\"]\n</code></pre>"},{"location":"tools/typescript-sdk/get-started/","title":"Get Started with the TypeScript SDK","text":"<p> Repository on GitHub</p> <p>The Wormhole TypeScript SDK provides a unified, type-safe interface for building cross-chain applications. It is a foundational toolkit that supports interaction with core Wormhole protocols, including Native Token Transfers (NTT), Wrapped Token Transfers (WTT), CCTP, and Settlement, giving developers a consistent API across multiple chains.</p> <p>This guide helps you install the SDK, initialize a <code>Wormhole</code> instance to support your desired network and blockchain platforms, and return chain-specific information to verify successful initialization.</p> <p>If you want to build more advanced integrations, such as token transfers using WTT or CCTP Bridge, skip ahead to Next Steps.</p>"},{"location":"tools/typescript-sdk/get-started/#install-the-sdk","title":"Install the SDK","text":"<p>To install the Wormhole TypeScript SDK, use the following command:</p> <pre><code>npm install @wormhole-foundation/sdk\n</code></pre> <p>This package combines all the individual packages to make setup easier.</p> <p>You can choose to install a specific set of packages as needed. For example, to install EVM-specific utilities, you can run:</p> <pre><code>npm install @wormhole-foundation/sdk-evm\n</code></pre> Complete list of individually published packages <p>Platform-Specific Packages</p> <ul> <li><code>@wormhole-foundation/sdk-evm</code></li> <li><code>@wormhole-foundation/sdk-solana</code></li> <li><code>@wormhole-foundation/sdk-algorand</code></li> <li><code>@wormhole-foundation/sdk-aptos</code></li> <li><code>@wormhole-foundation/sdk-cosmwasm</code></li> <li><code>@wormhole-foundation/sdk-sui</code></li> </ul> <p>Protocol-Specific Packages</p> <ul> <li> <p>Core Protocol</p> <ul> <li><code>@wormhole-foundation/sdk-evm-core</code></li> <li><code>@wormhole-foundation/sdk-solana-core</code></li> <li><code>@wormhole-foundation/sdk-algorand-core</code></li> <li><code>@wormhole-foundation/sdk-aptos-core</code></li> <li><code>@wormhole-foundation/sdk-cosmwasm-core</code></li> <li><code>@wormhole-foundation/sdk-sui-core</code></li> </ul> </li> <li> <p>WTT</p> <ul> <li><code>@wormhole-foundation/sdk-evm-tokenbridge</code></li> <li><code>@wormhole-foundation/sdk-solana-tokenbridge</code></li> <li><code>@wormhole-foundation/sdk-algorand-tokenbridge</code></li> <li><code>@wormhole-foundation/sdk-aptos-tokenbridge</code></li> <li><code>@wormhole-foundation/sdk-cosmwasm-tokenbridge</code></li> <li><code>@wormhole-foundation/sdk-sui-tokenbridge</code></li> </ul> </li> <li> <p>CCTP</p> <ul> <li><code>@wormhole-foundation/sdk-evm-cctp</code></li> <li><code>@wormhole-foundation/sdk-solana-cctp</code></li> <li><code>@wormhole-foundation/sdk-aptos-cctp</code></li> <li><code>@wormhole-foundation/sdk-sui-cctp</code></li> </ul> </li> <li> <p>Other Protocols</p> <ul> <li><code>@wormhole-foundation/sdk-evm-portico</code></li> <li><code>@wormhole-foundation/sdk-evm-tbtc</code></li> <li><code>@wormhole-foundation/sdk-solana-tbtc</code></li> </ul> </li> </ul> <p>Utility Packages</p> <ul> <li><code>@wormhole-foundation/sdk-base</code></li> <li><code>@wormhole-foundation/sdk-definitions</code></li> <li><code>@wormhole-foundation/sdk-connect</code></li> </ul>"},{"location":"tools/typescript-sdk/get-started/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>Getting your integration started is simple. First, import Wormhole:</p> <pre><code>import { wormhole } from '@wormhole-foundation/sdk';\n</code></pre> <p>Then, import each of the ecosystem platforms that you wish to support:</p> <pre><code>import algorand from '@wormhole-foundation/sdk/algorand';\nimport aptos from '@wormhole-foundation/sdk/aptos';\nimport cosmwasm from '@wormhole-foundation/sdk/cosmwasm';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport sui from '@wormhole-foundation/sdk/sui';\n</code></pre> <p>To make the platform modules available for use, pass them to the Wormhole constructor and specify the network (<code>Mainnet</code>, <code>Testnet</code>, or <code>Devnet</code>) you want to interact with:</p> <pre><code>  const wh = await wormhole('Testnet', [\n    evm,\n    solana,\n    aptos,\n    algorand,\n    cosmwasm,\n    sui,\n  ]);\n</code></pre> <p>With a configured <code>Wormhole</code> object, you can begin to interact with these chains.</p>"},{"location":"tools/typescript-sdk/get-started/#example-usage","title":"Example Usage","text":"<p>Follow these steps to confirm that the SDK is initialized correctly and can fetch basic chain information for your target chains.</p>"},{"location":"tools/typescript-sdk/get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>Node.js and npm installed.</li> <li>TypeScript installed.</li> </ul> Project setup instructions <p>Use the following commands to create a TypeScript project:</p> <ol> <li> <p>Create a directory and initialize a Node.js project:</p> <pre><code>mkdir wh-ts-demo\ncd wh-ts-demo\nnpm init -y\n</code></pre> </li> <li> <p>Install TypeScript, <code>tsx</code> (for running TypeScript files), Node.js type definitions, the base Wormhole SDK, and the platform-specific packages for the chains you want to interact with:</p> <pre><code>npm install --save-dev tsx typescript @types/node @wormhole-foundation/sdk @wormhole-foundation/sdk-evm @wormhole-foundation/sdk-solana\n</code></pre> </li> <li> <p>Create a <code>tsconfig.json</code> if you don't have one. You can generate a basic one using the following command:</p> <pre><code>npx tsc --init\n</code></pre> <p>Make sure your <code>tsconfig.json</code> includes the following settings:</p> <pre><code>{\n    \"compilerOptions\": {\n        // es2020 or newer\n        \"target\": \"es2020\",\n        // Use esnext if you configured your package.json with type: \"module\"\n        \"module\": \"commonjs\",\n        \"esModuleInterop\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"strict\": true,\n        \"skipLibCheck\": true,\n        \"resolveJsonModule\": true\n    }\n}\n</code></pre> </li> <li> <p>Initialize the main <code>Wormhole</code> class to use the SDK. Create a new TypeScript file named <code>src/main.ts</code> in your project directory:</p> <pre><code>mkdir src\ntouch src/main.ts\n</code></pre> </li> <li> <p>Add the following code to initialize the SDK and use the <code>Wormhole</code> instance to return the chain ID and RPC for the chains this instance supports:</p> src/main.ts<pre><code>import { wormhole } from '@wormhole-foundation/sdk';\n// Import specific platform modules for the chains you intend to use\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\n\nasync function main() {\n  console.log('Initializing Wormhole SDK...');\n\n  // Determine the network: \"Mainnet\", \"Testnet\", or \"Devnet\"\n  const network = 'Testnet';\n\n  // Initialize the SDK with the chosen network and platform contexts\n  const wh = await wormhole(network, [evm, solana]);\n\n  console.log('Wormhole SDK Initialized!');\n}\n\nmain().catch((e) =&gt; {\n  console.error('Error initializing Wormhole SDK', e);\n  process.exit(1);\n});\n</code></pre> </li> </ol>"},{"location":"tools/typescript-sdk/get-started/#fetch-chain-information","title":"Fetch Chain Information","text":"<ol> <li> <p>Update the <code>main</code> function as follows to retrieve the chain ID and RPC for the chains your project supports:</p> src/main.ts<pre><code>import { wormhole } from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\n\nasync function main() {\n  console.log('Initializing Wormhole SDK...');\n\n  const network = 'Testnet';\n  const wh = await wormhole(network, [evm, solana]);\n\n  console.log('Wormhole SDK Initialized!');\n\n  // Example: Get a chain ID and RPC for Solana\n  const solanaDevnetChain = wh.getChain('Solana');\n  console.log(\n    `Chain ID for Solana Testnet: ${solanaDevnetChain.config.chainId}`\n  );\n  console.log(`RPC for Solana Testnet: ${solanaDevnetChain.config.rpc}`);\n\n  // Example: Get a chain ID for Sepolia (EVM Testnet)\n  const sepoliaChain = wh.getChain('Sepolia');\n  console.log(`Chain ID for Sepolia: ${sepoliaChain.config.chainId}`);\n  console.log(`RPC for Sepolia: ${sepoliaChain.config.rpc}`);\n}\n\nmain().catch((e) =&gt; {\n  console.error(\n    'Error initializing Wormhole SDK or fetching chain information:',\n    e\n  );\n  process.exit(1);\n});\n</code></pre> </li> <li> <p>Run the script with the following command, replacing <code>INSERT_FILE_NAME</code> with your file name:</p> <pre><code>npx tsx INSERT_FILE_NAME\n</code></pre> <p>You will see terminal output similar to the following:</p> <p> npx tsx src/main.ts Initializing Wormhole SDK... Wormhole SDK Initialized! Chain ID for Solana Testnet: 1 RPC for Solana Testnet: https://api.devnet.solana.com Chain ID for Sepolia: 10002 RPC for Sepolia: https://ethereum-sepolia.publicnode.com </p> </li> </ol> <p>Congratulations! You\u2019ve successfully installed the Wormhole TypeScript SDK and initialized a <code>Wormhole</code> instance. Consider the following options to build on what you've accomplished.</p>"},{"location":"tools/typescript-sdk/get-started/#next-steps","title":"Next Steps","text":"<ul> <li>Get familiar with the SDK</li> <li>Send a multichain message</li> <li>Transfer assets via WTT</li> <li>Transfer USDC via the CCTP Bridge</li> </ul>"},{"location":"tools/typescript-sdk/sdk-reference/","title":"TypeScript SDK Reference","text":"<p>This page covers all you need to know about the functionality offered through the Wormhole TypeScript SDK.</p> <ul> <li> <p> Installation</p> <p>Find installation instructions for both the meta package and installing specific, individual packages.</p> <p>  Install the SDK</p> </li> <li> <p> TSdoc for SDK</p> <p>Review the TSdoc for the Wormhole TypeScript SDK for a detailed look at available methods, classes, interfaces, and definitions.</p> <p>  View the TSdoc on GitHub</p> </li> <li> <p> Source Code</p> <p>Want to go straight to the source? Check out the TypeScript SDK GitHub repository.</p> <p>  View GitHub Repository</p> </li> </ul> <p>Warning</p> <p>This package is a work in progress. The interface may change, and there are likely bugs. Please report any issues you find.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#concepts","title":"Concepts","text":"<p>Understanding key Wormhole concepts\u2014and how the SDK abstracts them\u2014will help you use the tools more effectively. The following sections cover platforms, chain contexts, addresses, signers, and protocols, explaining their roles in Wormhole and how the SDK simplifies working with them.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#platforms","title":"Platforms","text":"<p>The SDK includes <code>Platform</code> modules, which create a standardized interface for interacting with the chains of a supported platform. The contents of a module vary by platform but can include:</p> <ul> <li>Protocols preconfigured to suit the selected platform.</li> <li>Definitions and configurations for types, signers, addresses, and chains.</li> <li>Helpers configured for dealing with unsigned transactions on the selected platform.</li> </ul> <p>These modules expose key functions and types from the native ecosystem, reducing the need for full packages and keeping dependencies lightweight.</p> Supported platform modules Platform Installation Command EVM <pre><code>@wormhole-foundation/sdk-evm</code></pre> Solana <pre><code>@wormhole-foundation/sdk-solana</code></pre> Algorand <pre><code>@wormhole-foundation/sdk-algorand</code></pre> Aptos <pre><code>@wormhole-foundation/sdk-aptos</code></pre> Cosmos <pre><code>@wormhole-foundation/sdk-cosmwasm</code></pre> Sui <pre><code>@wormhole-foundation/sdk-sui</code></pre> <p>See the Platforms folder of the TypeScript SDK for an up-to-date list of the platforms supported by the Wormhole TypeScript SDK.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#chain-context","title":"Chain Context","text":"<p><code>ChainContext</code> (from the <code>@wormhole-foundation/sdk-definitions</code> package) provides a unified interface for interacting with connected chains. It:</p> <ul> <li>Holds network, chain, and platform configurations.</li> <li>Caches RPC and protocol clients.</li> <li>Exposes both platform-inherited and chain-specific methods.</li> <li>Defines the core types used across the SDK such as the <code>Network</code>, <code>Chain</code>, and <code>Platform</code>.</li> </ul> <pre><code>// Get the chain context for the source and destination chains\n// This is useful to grab direct clients for the protocols\nconst srcChain = wh.getChain(senderAddress.chain);\nconst dstChain = wh.getChain(receiverAddress.chain);\n\nconst tb = await srcChain.getTokenBridge(); // =&gt; TokenBridge&lt;'Evm'&gt;\nsrcChain.getRpcClient(); // =&gt; RpcClient&lt;'Evm'&gt;\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#addresses","title":"Addresses","text":"<p>The SDK uses the <code>UniversalAddress</code> class to implement the <code>Address</code> interface, standardizing address handling across chains. All addresses are parsed into a 32-byte format. Each platform also defines a <code>NativeAddress</code> type that understands its native format. These abstractions ensure consistent cross-chain address handling.</p> <pre><code>// It's possible to convert a string address to its Native address\nconst ethAddr: NativeAddress&lt;'Evm'&gt; = toNative('Ethereum', '0xbeef...');\n\n// A common type in the SDK is the `ChainAddress` which provides\n// the additional context of the `Chain` this address is relevant for\nconst senderAddress: ChainAddress = Wormhole.chainAddress(\n  'Ethereum',\n  '0xbeef...'\n);\nconst receiverAddress: ChainAddress = Wormhole.chainAddress(\n  'Solana',\n  'Sol1111...'\n);\n\n// Convert the ChainAddress back to its canonical string address format\nconst strAddress = Wormhole.canonicalAddress(senderAddress); // =&gt; '0xbeef...'\n\n// Or if the ethAddr above is for an emitter and you need the UniversalAddress\nconst emitterAddr = ethAddr.toUniversalAddress().toString();\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#tokens","title":"Tokens","text":"<p>The <code>TokenId</code> type identifies any token by its chain and address. For standardized tokens, Wormhole uses the token's contract address. For native currencies (e.g., ETH on Ethereum), it uses the keyword <code>native</code>. This ensures consistent handling of all tokens.</p> <pre><code>// Get the TokenId for an ERC-20 token\nconst sourceToken: TokenId = Wormhole.tokenId('Ethereum', '0xbeef...');\n// Get the TokenId for native ETH\nconst gasToken: TokenId = Wormhole.tokenId('Ethereum', 'native');\n// Convert a TokenId back to a string\nconst strAddress = Wormhole.canonicalAddress(senderAddress); // =&gt; '0xbeef...'\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#signers","title":"Signers","text":"<p>The SDK's <code>Signer</code> interface can be implemented as either a <code>SignOnlySigner</code> or a <code>SignAndSendSigner</code>, created by wrapping an offline or web wallet:</p> <ul> <li><code>SignOnlySigner</code>: Signs and serializes unsigned transactions without broadcasting them. Transactions can be inspected or modified before signing. Serialization is chain-specific. See testing signers (e.g., EVM, Solana) for implementation examples.</li> <li><code>SignAndSendSigner</code>: Signs and broadcasts transactions, returning their transaction IDs in order.</li> </ul> <pre><code>export type Signer = SignOnlySigner | SignAndSendSigner;\n\nexport interface SignOnlySigner {\n  chain(): ChainName;\n  address(): string;\n  // Accept an array of unsigned transactions and return\n  // an array of signed and serialized transactions.\n  // The transactions may be inspected or altered before\n  // signing.\n  sign(tx: UnsignedTransaction[]): Promise&lt;SignedTx[]&gt;;\n}\n\nexport interface SignAndSendSigner {\n  chain(): ChainName;\n  address(): string;\n  // Accept an array of unsigned transactions and return\n  // an array of transaction ids in the same order as the\n  // unsignedTransactions array.\n  signAndSend(tx: UnsignedTransaction[]): Promise&lt;TxHash[]&gt;;\n}\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#set-up-a-signer-with-ethersjs","title":"Set Up a Signer with Ethers.js","text":"<p>To sign transactions programmatically with the Wormhole SDK, you can use Ethers.js to manage private keys and handle signing. Here's an example of setting up a signer using Ethers.js:</p> <pre><code>import { ethers } from 'ethers';\n\n// Update the following variables\nconst rpcUrl = 'INSERT_RPC_URL';\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst toAddress = 'INSERT_RECIPIENT_ADDRESS';\n\n// Set up a provider and signer\nconst provider = new ethers.JsonRpcProvider(rpcUrl);\nconst signer = new ethers.Wallet(privateKey, provider);\n\n// Example: Signing and sending a transaction\nasync function sendTransaction() {\n  const tx = {\n    to: toAddress,\n    value: ethers.parseUnits('0.1'), // Sending 0.1 ETH\n    gasPrice: await provider.getGasPrice(),\n    gasLimit: ethers.toBeHex(21000),\n  };\n\n  const transaction = await signer.sendTransaction(tx);\n  console.log('Transaction hash:', transaction.hash);\n}\nsendTransaction();\n</code></pre> <p>These components work together to create, sign, and submit a transaction to the blockchain:</p> <ul> <li><code>provider</code>: Connects to the Ethereum or EVM-compatible network, enabling data access and transaction submission.</li> <li><code>signer</code>: Represents the account that signs transactions using a private key.</li> <li><code>Wallet</code>: Combines provider and signer to create, sign, and send transactions programmatically.</li> </ul>"},{"location":"tools/typescript-sdk/sdk-reference/#protocols","title":"Protocols","text":"<p>Wormhole is a Generic Message Passing (GMP) protocol with several specialized protocols built on top. Each protocol has platform-specific implementations providing methods to generate transactions or read on-chain state.</p> Supported protocol modules Protocol Installation Command EVM Core <pre><code>@wormhole-foundation/sdk-evm-core</code></pre> EVM WTT <pre><code>@wormhole-foundation/sdk-evm-tokenbridge</code></pre> EVM CCTP <pre><code>@wormhole-foundation/sdk-evm-cctp</code></pre> EVM Portico <pre><code>@wormhole-foundation/sdk-evm-portico</code></pre> EVM TBTC <pre><code>@wormhole-foundation/sdk-evm-tbtc</code></pre> Solana Core <pre><code>@wormhole-foundation/sdk-solana-core</code></pre> Solana WTT <pre><code>@wormhole-foundation/sdk-solana-tokenbridge</code></pre> Solana CCTP <pre><code>@wormhole-foundation/sdk-solana-cctp</code></pre> Solana TBTC <pre><code>@wormhole-foundation/sdk-solana-tbtc</code></pre> Algorand Core <pre><code>@wormhole-foundation/sdk-algorand-core</code></pre> Algorand WTT <pre><code>@wormhole-foundation/sdk-algorand-tokenbridge</code></pre> Aptos Core <pre><code>@wormhole-foundation/sdk-aptos-core</code></pre> Aptos WTT <pre><code>@wormhole-foundation/sdk-aptos-tokenbridge</code></pre> Aptos CCTP <pre><code>@wormhole-foundation/sdk-aptos-cctp</code></pre> Cosmos Core <pre><code>@wormhole-foundation/sdk-cosmwasm-core</code></pre> Cosmos WTT <pre><code>@wormhole-foundation/sdk-cosmwasm-tokenbridge</code></pre> Sui Core <pre><code>@wormhole-foundation/sdk-sui-core</code></pre> Sui WTT <pre><code>@wormhole-foundation/sdk-sui-tokenbridge</code></pre> Sui CCTP <pre><code>@wormhole-foundation/sdk-sui-cctp</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#wormhole-core","title":"Wormhole Core","text":"<p>The core protocol powers all Wormhole activity by emitting messages containing the emitter address, sequence number, and payload needed for bridging.</p> <p>Example workflow on Solana Testnet:</p> <ol> <li>Initialize a Wormhole instance for Solana.</li> <li>Obtain a signer and its address.</li> <li>Access the core messaging bridge for cross-chain messaging.</li> <li> <p>Prepare a message with:</p> <ul> <li>Sender's address</li> <li>Encoded payload (e.g., \"lol\")</li> <li>Nonce (e.g., 0)</li> <li>Consistency level (e.g., 0)</li> </ul> </li> <li> <p>Generate, sign, and send the transaction to publish the message.</p> </li> <li>Extract the Wormhole message ID from transaction logs for tracking.</li> <li>Wait (up to 60s) to receive the Verified Action Approval (VAA) (in <code>Uint8Array</code> format) from the Wormhole network.</li> <li>Prepare and send a verification transaction on the receiving chain using the sender's address and the VAA.</li> </ol> Example workflow <pre><code>import { encoding, signSendWait, wormhole } from '@wormhole-foundation/sdk';\nimport { getSigner } from './helpers/index.js';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport evm from '@wormhole-foundation/sdk/evm';\n\n(async function () {\n  const wh = await wormhole('Testnet', [solana, evm]);\n\n  const chain = wh.getChain('Avalanche');\n  const { signer, address } = await getSigner(chain);\n\n  // Get a reference to the core messaging bridge\n  const coreBridge = await chain.getWormholeCore();\n\n  // Generate transactions, sign and send them\n  const publishTxs = coreBridge.publishMessage(\n    // Address of sender (emitter in VAA)\n    address.address,\n    // Message to send (payload in VAA)\n    encoding.bytes.encode('lol'),\n    // Nonce (user defined, no requirement for a specific value, useful to provide a unique identifier for the message)\n    0,\n    // ConsistencyLevel (ie finality of the message, see wormhole docs for more)\n    0\n  );\n  // Send the transaction(s) to publish the message\n  const txids = await signSendWait(chain, publishTxs, signer);\n\n  // Take the last txid in case multiple were sent\n  // The last one should be the one containing the relevant\n  // event or log info\n  const txid = txids[txids.length - 1];\n\n  // Grab the wormhole message id from the transaction logs or storage\n  const [whm] = await chain.parseTransaction(txid!.txid);\n\n  // Wait for the vaa to be signed and available with a timeout\n  const vaa = await wh.getVaa(whm!, 'Uint8Array', 60_000);\n  console.log(vaa);\n\n  // Note: calling verifyMessage manually is typically not a useful thing to do\n  // As the VAA is typically submitted to the counterpart contract for\n  // A given protocol and the counterpart contract will verify the VAA\n  // This is simply for demo purposes\n  const verifyTxs = coreBridge.verifyMessage(address.address, vaa!);\n  console.log(await signSendWait(chain, verifyTxs, signer));\n})();\n</code></pre> <p>The payload contains the information necessary to perform whatever action is required based on the protocol that uses it.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#wrapped-token-transfers-wtt","title":"Wrapped Token Transfers (WTT)","text":"<p>The most familiar protocol built on Wormhole is WTT. Each supported chain has a <code>TokenBridge</code> client that provides a consistent interface for transferring tokens and handling attestations. While <code>WormholeTransfer</code> abstractions are recommended, direct interaction with the protocol is also supported.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p> <pre><code>import { signSendWait } from '@wormhole-foundation/sdk';\n\nconst tb = await srcChain.getTokenBridge(); \n\nconst token = '0xdeadbeef...';\nconst txGenerator = tb.createAttestation(token); \nconst txids = await signSendWait(srcChain, txGenerator, src.signer);\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#transfers","title":"Transfers","text":"<p>While using the <code>ChainContext</code> and <code>Protocol</code> clients directly is possible, the SDK provides some helpful abstractions for transferring tokens.</p> <p>The <code>WormholeTransfer</code> interface provides a convenient abstraction to encapsulate the steps involved in a cross-chain transfer.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#token-transfers","title":"Token Transfers","text":"<p>Token transfers between chains are straightforward using Wormhole. Create a <code>Wormhole</code> instance and use it to initialize a <code>TokenTransfer</code> or <code>CircleTransfer</code> object.</p> <p>The example below shows how to initiate and complete a <code>TokenTransfer</code>. After creating the transfer object and retrieving a quote (to verify sufficient amount and fees), the process involves:</p> <ol> <li>Initiating the transfer on the source chain.</li> <li>Waiting for attestation (if required).</li> <li>Completing the transfer on the destination chain.</li> </ol> <p>For automatic transfers, the process ends after initiation. Manual transfers require attestation before completion.</p> <pre><code>  // Create a TokenTransfer object to track the state of the transfer over time\n  const xfer = await wh.tokenTransfer(\n    route.token,\n    route.amount,\n    route.source.address,\n    route.destination.address,\n    route.delivery?.automatic ?? false,\n    route.payload,\n    route.delivery?.nativeGas\n  );\n\n  const quote = await TokenTransfer.quoteTransfer(\n    wh,\n    route.source.chain,\n    route.destination.chain,\n    xfer.transfer\n  );\n  console.log(quote);\n\n  if (xfer.transfer.automatic &amp;&amp; quote.destinationToken.amount &lt; 0)\n    throw 'The amount requested is too low to cover the fee and any native gas requested.';\n\n  // 1) Submit the transactions to the source chain, passing a signer to sign any txns\n  console.log('Starting transfer');\n  const srcTxids = await xfer.initiateTransfer(route.source.signer);\n  console.log(`Started transfer: `, srcTxids);\n\n  // If automatic, we're done\n  if (route.delivery?.automatic) return xfer;\n\n  // 2) Wait for the VAA to be signed and ready (not required for auto transfer)\n  console.log('Getting Attestation');\n  const attestIds = await xfer.fetchAttestation(60_000);\n  console.log(`Got Attestation: `, attestIds);\n\n  // 3) Redeem the VAA on the dest chain\n  console.log('Completing Transfer');\n  const destTxids = await xfer.completeTransfer(route.destination.signer);\n  console.log(`Completed Transfer: `, destTxids);\n</code></pre> View the complete script <pre><code>import {\n  Chain,\n  Network,\n  TokenId,\n  TokenTransfer,\n  Wormhole,\n  amount,\n  isTokenId,\n  wormhole,\n} from '@wormhole-foundation/sdk';\n\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { SignerStuff, getSigner, waitLog } from './helpers/index.js';\n\n(async function () {\n  // Init Wormhole object, passing config for which network\n  // to use (e.g. Mainnet/Testnet) and what Platforms to support\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Grab chain Contexts -- these hold a reference to a cached rpc client\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Solana');\n\n  // Shortcut to allow transferring native gas token\n  const token = Wormhole.tokenId(sendChain.chain, 'native');\n\n  // A TokenId is just a `{chain, address}` pair and an alias for ChainAddress\n  // The `address` field must be a parsed address.\n  // You can get a TokenId (or ChainAddress) prepared for you\n  // by calling the static `chainAddress` method on the Wormhole class.\n  // e.g.\n  // wAvax on Solana\n  // const token = Wormhole.tokenId(\"Solana\", \"3Ftc5hTz9sG4huk79onufGiebJNDMZNL8HYgdMJ9E7JR\");\n  // wSol on Avax\n  // const token = Wormhole.tokenId(\"Avalanche\", \"0xb10563644a6AB8948ee6d7f5b0a1fb15AaEa1E03\");\n\n  // Normalized given token decimals later but can just pass bigints as base units\n  // Note: The WTT (Token Bridge) will dedust past 8 decimals\n  // This means any amount specified past that point will be returned\n  // To the caller\n  const amt = '0.05';\n\n  // With automatic set to true, perform an automatic transfer. This will invoke a relayer\n  // Contract intermediary that knows to pick up the transfers\n  // With automatic set to false, perform a manual transfer from source to destination\n  // Of the token\n  // On the destination side, a wrapped version of the token will be minted\n  // To the address specified in the transfer VAA\n  const automatic = false;\n\n  // The Wormhole relayer has the ability to deliver some native gas funds to the destination account\n  // The amount specified for native gas will be swapped for the native gas token according\n  // To the swap rate provided by the contract, denominated in native gas tokens\n  const nativeGas = automatic ? '0.01' : undefined;\n\n  // Get signer from local key but anything that implements\n  // Signer interface (e.g. wrapper around web wallet) should work\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // Used to normalize the amount to account for the tokens decimals\n  const decimals = isTokenId(token)\n    ? Number(await wh.getDecimals(token.chain, token.address))\n    : sendChain.config.nativeTokenDecimals;\n\n  // Set this to true if you want to perform a round trip transfer\n  const roundTrip: boolean = false;\n\n  // Set this to the transfer txid of the initiating transaction to recover a token transfer\n  // And attempt to fetch details about its progress.\n  let recoverTxid = undefined;\n\n  // Finally create and perform the transfer given the parameters set above\n  const xfer = !recoverTxid\n    ? // Perform the token transfer\n      await tokenTransfer(\n        wh,\n        {\n          token,\n          amount: amount.units(amount.parse(amt, decimals)),\n          source,\n          destination,\n          delivery: {\n            automatic,\n            nativeGas: nativeGas\n              ? amount.units(amount.parse(nativeGas, decimals))\n              : undefined,\n          },\n        },\n        roundTrip\n      )\n    : // Recover the transfer from the originating txid\n      await TokenTransfer.from(wh, {\n        chain: source.chain.chain,\n        txid: recoverTxid,\n      });\n\n  const receipt = await waitLog(wh, xfer);\n\n  // Log out the results\n  console.log(receipt);\n})();\n\nasync function tokenTransfer&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  route: {\n    token: TokenId;\n    amount: bigint;\n    source: SignerStuff&lt;N, Chain&gt;;\n    destination: SignerStuff&lt;N, Chain&gt;;\n    delivery?: {\n      automatic: boolean;\n      nativeGas?: bigint;\n    };\n    payload?: Uint8Array;\n  },\n  roundTrip?: boolean\n): Promise&lt;TokenTransfer&lt;N&gt;&gt; {\n  // Create a TokenTransfer object to track the state of the transfer over time\n  const xfer = await wh.tokenTransfer(\n    route.token,\n    route.amount,\n    route.source.address,\n    route.destination.address,\n    route.delivery?.automatic ?? false,\n    route.payload,\n    route.delivery?.nativeGas\n  );\n\n  const quote = await TokenTransfer.quoteTransfer(\n    wh,\n    route.source.chain,\n    route.destination.chain,\n    xfer.transfer\n  );\n  console.log(quote);\n\n  if (xfer.transfer.automatic &amp;&amp; quote.destinationToken.amount &lt; 0)\n    throw 'The amount requested is too low to cover the fee and any native gas requested.';\n\n  // 1) Submit the transactions to the source chain, passing a signer to sign any txns\n  console.log('Starting transfer');\n  const srcTxids = await xfer.initiateTransfer(route.source.signer);\n  console.log(`Started transfer: `, srcTxids);\n\n  // If automatic, we're done\n  if (route.delivery?.automatic) return xfer;\n\n  // 2) Wait for the VAA to be signed and ready (not required for auto transfer)\n  console.log('Getting Attestation');\n  const attestIds = await xfer.fetchAttestation(60_000);\n  console.log(`Got Attestation: `, attestIds);\n\n  // 3) Redeem the VAA on the dest chain\n  console.log('Completing Transfer');\n  const destTxids = await xfer.completeTransfer(route.destination.signer);\n  console.log(`Completed Transfer: `, destTxids);\n\n  // If no need to send back, dip\n  if (!roundTrip) return xfer;\n\n  const { destinationToken: token } = quote;\n  return await tokenTransfer(wh, {\n    ...route,\n    token: token.token,\n    amount: token.amount,\n    source: route.destination,\n    destination: route.source,\n  });\n}\n</code></pre> <p>Internally, this uses the <code>TokenBridge</code> protocol client to transfer tokens.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#native-usdc-transfers","title":"Native USDC Transfers","text":"<p>You can transfer native USDC using Circle's CCTP. If the transfer is set to <code>automatic</code>, the quote will include a relay fee, which is deducted from the total amount sent. For example, to receive 1.0 USDC on the destination chain, the sender must cover both the 1.0 and the relay fee. The same applies when including a native gas drop-off.</p> <p>In the example below, the <code>wh.circleTransfer</code> function is used to initiate the transfer. It accepts the amount (in base units), sender and receiver chains and addresses, and an optional automatic flag to enable hands-free completion. You can also include an optional payload (set to <code>undefined</code> here) and specify a native gas drop-off if desired.</p> <p>When waiting for the VAA, a timeout of <code>60,000</code> milliseconds is used. The actual wait time varies by network.</p> <pre><code>  const xfer = await wh.circleTransfer(\n    // Amount as bigint (base units)\n    req.amount,\n    // Sender chain/address\n    src.address,\n    // Receiver chain/address\n    dst.address,\n    // Automatic delivery boolean\n    req.automatic,\n    // Payload to be sent with the transfer\n    undefined,\n    // If automatic, native gas can be requested to be sent to the receiver\n    req.nativeGas\n  );\n\n  // Note, if the transfer is requested to be Automatic, a fee for performing the relay\n  // will be present in the quote. The fee comes out of the amount requested to be sent.\n  // If the user wants to receive 1.0 on the destination, the amount to send should be 1.0 + fee.\n  // The same applies for native gas dropoff\n  const quote = await CircleTransfer.quoteTransfer(\n    src.chain,\n    dst.chain,\n    xfer.transfer\n  );\n  console.log('Quote', quote);\n\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(src.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  if (req.automatic) {\n    const relayStatus = await waitForRelay(srcTxids[srcTxids.length - 1]!);\n    console.log(`Finished relay: `, relayStatus);\n    return;\n  }\n\n  console.log('Waiting for Attestation');\n  const attestIds = await xfer.fetchAttestation(60_000);\n  console.log(`Got Attestation: `, attestIds);\n\n  console.log('Completing Transfer');\n  const dstTxids = await xfer.completeTransfer(dst.signer);\n  console.log(`Completed Transfer: `, dstTxids);\n}\n</code></pre> View the complete script <pre><code>import {\n  Chain,\n  CircleTransfer,\n  Network,\n  Signer,\n  TransactionId,\n  TransferState,\n  Wormhole,\n  amount,\n  wormhole,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { SignerStuff, getSigner, waitForRelay } from './helpers/index.js';\n\n/*\nNotes:\nOnly a subset of chains are supported by Circle for CCTP, see core/base/src/constants/circle.ts for currently supported chains\n\nAutoRelayer takes a 0.1 USDC fee when transferring to any chain beside Goerli, which is 1 USDC\n*/\n//\n\n(async function () {\n  // Init the Wormhole object, passing in the config for which network\n  // to use (e.g. Mainnet/Testnet) and what Platforms to support\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Grab chain Contexts\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Solana');\n\n  // Get signer from local key but anything that implements\n  // Signer interface (e.g. wrapper around web wallet) should work\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // 6 decimals for USDC (except for BSC, so check decimals before using this)\n  const amt = amount.units(amount.parse('0.2', 6));\n\n  // Choose whether or not to have the attestation delivered for you\n  const automatic = false;\n\n  // If the transfer is requested to be automatic, you can also request that\n  // during redemption, the receiver gets some amount of native gas transferred to them\n  // so that they may pay for subsequent transactions\n  // The amount specified here is denominated in the token being transferred (USDC here)\n  const nativeGas = automatic ? amount.units(amount.parse('0.0', 6)) : 0n;\n\n  await cctpTransfer(wh, source, destination, {\n    amount: amt,\n    automatic,\n    nativeGas,\n  });\n\n})();\n\nasync function cctpTransfer&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  src: SignerStuff&lt;N, any&gt;,\n  dst: SignerStuff&lt;N, any&gt;,\n  req: {\n    amount: bigint;\n    automatic: boolean;\n    nativeGas?: bigint;\n  }\n) {\n\n  const xfer = await wh.circleTransfer(\n    // Amount as bigint (base units)\n    req.amount,\n    // Sender chain/address\n    src.address,\n    // Receiver chain/address\n    dst.address,\n    // Automatic delivery boolean\n    req.automatic,\n    // Payload to be sent with the transfer\n    undefined,\n    // If automatic, native gas can be requested to be sent to the receiver\n    req.nativeGas\n  );\n\n  // Note, if the transfer is requested to be Automatic, a fee for performing the relay\n  // will be present in the quote. The fee comes out of the amount requested to be sent.\n  // If the user wants to receive 1.0 on the destination, the amount to send should be 1.0 + fee.\n  // The same applies for native gas dropoff\n  const quote = await CircleTransfer.quoteTransfer(\n    src.chain,\n    dst.chain,\n    xfer.transfer\n  );\n  console.log('Quote', quote);\n\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(src.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  if (req.automatic) {\n    const relayStatus = await waitForRelay(srcTxids[srcTxids.length - 1]!);\n    console.log(`Finished relay: `, relayStatus);\n    return;\n  }\n\n  console.log('Waiting for Attestation');\n  const attestIds = await xfer.fetchAttestation(60_000);\n  console.log(`Got Attestation: `, attestIds);\n\n  console.log('Completing Transfer');\n  const dstTxids = await xfer.completeTransfer(dst.signer);\n  console.log(`Completed Transfer: `, dstTxids);\n}\n\nexport async function completeTransfer(\n  wh: Wormhole&lt;Network&gt;,\n  txid: TransactionId,\n  signer: Signer\n): Promise&lt;void&gt; {\n\n  const xfer = await CircleTransfer.from(wh, txid);\n\n  const attestIds = await xfer.fetchAttestation(60 * 60 * 1000);\n  console.log('Got attestation: ', attestIds);\n\n  const dstTxIds = await xfer.completeTransfer(signer);\n  console.log('Completed transfer: ', dstTxIds);\n}\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#recovering-transfers","title":"Recovering Transfers","text":"<p>It may be necessary to recover an abandoned transfer before it is completed. To do this, instantiate the <code>Transfer</code> class with the <code>from</code> static method and pass one of several types of identifiers. A <code>TransactionId</code> or <code>WormholeMessageId</code> may be used to recover the transfer.</p> <pre><code>  const xfer = await CircleTransfer.from(wh, txid);\n\n  const attestIds = await xfer.fetchAttestation(60 * 60 * 1000);\n  console.log('Got attestation: ', attestIds);\n\n  const dstTxIds = await xfer.completeTransfer(signer);\n  console.log('Completed transfer: ', dstTxIds);\n</code></pre> View the complete script <pre><code>import {\n  Chain,\n  CircleTransfer,\n  Network,\n  Signer,\n  TransactionId,\n  TransferState,\n  Wormhole,\n  amount,\n  wormhole,\n} from '@wormhole-foundation/sdk';\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { SignerStuff, getSigner, waitForRelay } from './helpers/index.js';\n\n/*\nNotes:\nOnly a subset of chains are supported by Circle for CCTP, see core/base/src/constants/circle.ts for currently supported chains\n\nAutoRelayer takes a 0.1 USDC fee when transferring to any chain beside Goerli, which is 1 USDC\n*/\n//\n\n(async function () {\n  // Init the Wormhole object, passing in the config for which network\n  // to use (e.g. Mainnet/Testnet) and what Platforms to support\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Grab chain Contexts\n  const sendChain = wh.getChain('Avalanche');\n  const rcvChain = wh.getChain('Solana');\n\n  // Get signer from local key but anything that implements\n  // Signer interface (e.g. wrapper around web wallet) should work\n  const source = await getSigner(sendChain);\n  const destination = await getSigner(rcvChain);\n\n  // 6 decimals for USDC (except for BSC, so check decimals before using this)\n  const amt = amount.units(amount.parse('0.2', 6));\n\n  // Choose whether or not to have the attestation delivered for you\n  const automatic = false;\n\n  // If the transfer is requested to be automatic, you can also request that\n  // during redemption, the receiver gets some amount of native gas transferred to them\n  // so that they may pay for subsequent transactions\n  // The amount specified here is denominated in the token being transferred (USDC here)\n  const nativeGas = automatic ? amount.units(amount.parse('0.0', 6)) : 0n;\n\n  await cctpTransfer(wh, source, destination, {\n    amount: amt,\n    automatic,\n    nativeGas,\n  });\n\n})();\n\nasync function cctpTransfer&lt;N extends Network&gt;(\n  wh: Wormhole&lt;N&gt;,\n  src: SignerStuff&lt;N, any&gt;,\n  dst: SignerStuff&lt;N, any&gt;,\n  req: {\n    amount: bigint;\n    automatic: boolean;\n    nativeGas?: bigint;\n  }\n) {\n\n  const xfer = await wh.circleTransfer(\n    // Amount as bigint (base units)\n    req.amount,\n    // Sender chain/address\n    src.address,\n    // Receiver chain/address\n    dst.address,\n    // Automatic delivery boolean\n    req.automatic,\n    // Payload to be sent with the transfer\n    undefined,\n    // If automatic, native gas can be requested to be sent to the receiver\n    req.nativeGas\n  );\n\n  // Note, if the transfer is requested to be Automatic, a fee for performing the relay\n  // will be present in the quote. The fee comes out of the amount requested to be sent.\n  // If the user wants to receive 1.0 on the destination, the amount to send should be 1.0 + fee.\n  // The same applies for native gas dropoff\n  const quote = await CircleTransfer.quoteTransfer(\n    src.chain,\n    dst.chain,\n    xfer.transfer\n  );\n  console.log('Quote', quote);\n\n  console.log('Starting Transfer');\n  const srcTxids = await xfer.initiateTransfer(src.signer);\n  console.log(`Started Transfer: `, srcTxids);\n\n  if (req.automatic) {\n    const relayStatus = await waitForRelay(srcTxids[srcTxids.length - 1]!);\n    console.log(`Finished relay: `, relayStatus);\n    return;\n  }\n\n  console.log('Waiting for Attestation');\n  const attestIds = await xfer.fetchAttestation(60_000);\n  console.log(`Got Attestation: `, attestIds);\n\n  console.log('Completing Transfer');\n  const dstTxids = await xfer.completeTransfer(dst.signer);\n  console.log(`Completed Transfer: `, dstTxids);\n}\n\nexport async function completeTransfer(\n  wh: Wormhole&lt;Network&gt;,\n  txid: TransactionId,\n  signer: Signer\n): Promise&lt;void&gt; {\n\n  const xfer = await CircleTransfer.from(wh, txid);\n\n  const attestIds = await xfer.fetchAttestation(60 * 60 * 1000);\n  console.log('Got attestation: ', attestIds);\n\n  const dstTxIds = await xfer.completeTransfer(signer);\n  console.log('Completed transfer: ', dstTxIds);\n}\n</code></pre>"},{"location":"tools/typescript-sdk/sdk-reference/#routes","title":"Routes","text":"<p>While a specific <code>WormholeTransfer</code>, such as <code>TokenTransfer</code> or <code>CCTPTransfer</code>, may be used, the developer must know exactly which transfer type to use for a given request.</p> <p>To provide a more flexible and generic interface, the <code>Wormhole</code> class provides a method to produce a <code>RouteResolver</code> that can be configured with a set of possible routes to be supported.</p> <p>The following section demonstrates setting up and validating a token transfer using Wormhole's routing system.</p> <pre><code>  // Create new resolver, passing the set of routes to consider\n  const resolver = wh.resolver([\n    routes.TokenBridgeRoute, // manual WTT (Token Bridge)\n    routes.AutomaticTokenBridgeRoute, // automatic WTT (Token Bridge)\n    routes.CCTPRoute, // manual CCTP\n    routes.AutomaticCCTPRoute, // automatic CCTP\n    routes.AutomaticPorticoRoute, // Native eth transfers\n  ]);\n</code></pre> <p>Once created, the resolver can be used to provide a list of input and possible output tokens.</p> <pre><code>  // What tokens are available on the source chain?\n  const srcTokens = await resolver.supportedSourceTokens(sendChain);\n  console.log(\n    'Allowed source tokens: ',\n    srcTokens.map((t) =&gt; canonicalAddress(t))\n  );\n\n  const sendToken = Wormhole.tokenId(sendChain.chain, 'native');\n\n  // Given the send token, what can we possibly get on the destination chain?\n  const destTokens = await resolver.supportedDestinationTokens(\n    sendToken,\n    sendChain,\n    destChain\n  );\n  console.log(\n    'For the given source token and routes configured, the following tokens may be receivable: ',\n    destTokens.map((t) =&gt; canonicalAddress(t))\n  );\n  // Grab the first one for the example\n  const destinationToken = destTokens[0]!;\n</code></pre> <p>Once the tokens are selected, a <code>RouteTransferRequest</code> may be created to provide a list of routes that can fulfill the request. Creating a transfer request fetches the token details since all routes will need to know about the tokens.</p> <pre><code>  // Creating a transfer request fetches token details\n  // Since all routes will need to know about the tokens\n  const tr = await routes.RouteTransferRequest.create(wh, {\n    source: sendToken,\n    destination: destinationToken,\n  });\n\n  // Resolve the transfer request to a set of routes that can perform it\n  const foundRoutes = await resolver.findRoutes(tr);\n  console.log(\n    'For the transfer parameters, we found these routes: ',\n    foundRoutes\n  );\n</code></pre> <p>Choosing the best route is up to the developer and may involve sorting by output amount or estimated completion time (though no estimate is currently provided).</p> <p>Once a route is selected, parameters like <code>amount</code>, <code>nativeGasDropoff</code>, and <code>slippage</code> can be set. After validation, a transfer quote is requested, including fees, estimated time, and final amount. If successful, the quote is shown to the user for review before proceeding, ensuring all details are verified prior to transfer.</p> <pre><code>  console.log(\n    'This route offers the following default options',\n    bestRoute.getDefaultOptions()\n  );\n\n  // Specify the amount as a decimal string\n  const amt = '0.001';\n  // Create the transfer params for this request\n  const transferParams = { amount: amt, options: { nativeGas: 0 } };\n\n  // Validate the transfer params passed, this returns a new type of ValidatedTransferParams\n  // which (believe it or not) is a validated version of the input params\n  // This new var must be passed to the next step, quote\n  const validated = await bestRoute.validate(tr, transferParams);\n  if (!validated.valid) throw validated.error;\n  console.log('Validated parameters: ', validated.params);\n\n  // Get a quote for the transfer, this too returns a new type that must\n  // be passed to the next step, execute (if you like the quote)\n  const quote = await bestRoute.quote(tr, validated.params);\n  if (!quote.success) throw quote.error;\n  console.log('Best route quote: ', quote);\n</code></pre> <p>Finally, assuming the quote looks good, the route can initiate the request with the quote and the <code>signer</code>.</p> <pre><code>    const receipt = await bestRoute.initiate(\n      tr,\n      sender.signer,\n      quote,\n      receiver.address\n    );\n    console.log('Initiated transfer with receipt: ', receipt);\n</code></pre> View the complete script <pre><code>import {\n  Wormhole,\n  canonicalAddress,\n  routes,\n  wormhole,\n} from '@wormhole-foundation/sdk';\n\nimport evm from '@wormhole-foundation/sdk/evm';\nimport solana from '@wormhole-foundation/sdk/solana';\nimport { getSigner } from './helpers/index.js';\n\n(async function () {\n  // Setup\n  const wh = await wormhole('Testnet', [evm, solana]);\n\n  // Get chain contexts\n  const sendChain = wh.getChain('Avalanche');\n  const destChain = wh.getChain('Solana');\n\n  // Get signers from local config\n  const sender = await getSigner(sendChain);\n  const receiver = await getSigner(destChain);\n\n  // Create new resolver, passing the set of routes to consider\n  const resolver = wh.resolver([\n    routes.TokenBridgeRoute, // manual WTT (Token Bridge)\n    routes.AutomaticTokenBridgeRoute, // automatic WTT (Token Bridge)\n    routes.CCTPRoute, // manual CCTP\n    routes.AutomaticCCTPRoute, // automatic CCTP\n    routes.AutomaticPorticoRoute, // Native eth transfers\n  ]);\n\n  // What tokens are available on the source chain?\n  const srcTokens = await resolver.supportedSourceTokens(sendChain);\n  console.log(\n    'Allowed source tokens: ',\n    srcTokens.map((t) =&gt; canonicalAddress(t))\n  );\n\n  const sendToken = Wormhole.tokenId(sendChain.chain, 'native');\n\n  // Given the send token, what can we possibly get on the destination chain?\n  const destTokens = await resolver.supportedDestinationTokens(\n    sendToken,\n    sendChain,\n    destChain\n  );\n  console.log(\n    'For the given source token and routes configured, the following tokens may be receivable: ',\n    destTokens.map((t) =&gt; canonicalAddress(t))\n  );\n  // Grab the first one for the example\n  const destinationToken = destTokens[0]!;\n\n  // Creating a transfer request fetches token details\n  // Since all routes will need to know about the tokens\n  const tr = await routes.RouteTransferRequest.create(wh, {\n    source: sendToken,\n    destination: destinationToken,\n  });\n\n  // Resolve the transfer request to a set of routes that can perform it\n  const foundRoutes = await resolver.findRoutes(tr);\n  console.log(\n    'For the transfer parameters, we found these routes: ',\n    foundRoutes\n  );\n\n  const bestRoute = foundRoutes[0]!;\n  console.log('Selected: ', bestRoute);\n\n  console.log(\n    'This route offers the following default options',\n    bestRoute.getDefaultOptions()\n  );\n\n  // Specify the amount as a decimal string\n  const amt = '0.001';\n  // Create the transfer params for this request\n  const transferParams = { amount: amt, options: { nativeGas: 0 } };\n\n  // Validate the transfer params passed, this returns a new type of ValidatedTransferParams\n  // which (believe it or not) is a validated version of the input params\n  // This new var must be passed to the next step, quote\n  const validated = await bestRoute.validate(tr, transferParams);\n  if (!validated.valid) throw validated.error;\n  console.log('Validated parameters: ', validated.params);\n\n  // Get a quote for the transfer, this too returns a new type that must\n  // be passed to the next step, execute (if you like the quote)\n  const quote = await bestRoute.quote(tr, validated.params);\n  if (!quote.success) throw quote.error;\n  console.log('Best route quote: ', quote);\n\n  // If you're sure you want to do this, set this to true\n  const imSure = false;\n  if (imSure) {\n    // Now the transfer may be initiated\n    // A receipt will be returned, guess what you gotta do with that?\n    const receipt = await bestRoute.initiate(\n      tr,\n      sender.signer,\n      quote,\n      receiver.address\n    );\n    console.log('Initiated transfer with receipt: ', receipt);\n\n    // Kick off a wait log, if there is an opportunity to complete, this function will do it\n    // See the implementation for how this works\n    await routes.checkAndCompleteTransfer(bestRoute, receipt, receiver.signer);\n  } else {\n    console.log('Not initiating transfer (set `imSure` to true to do so)');\n  }\n})();\n</code></pre> <p>See the <code>router.ts</code> example in the examples directory for a full working example.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#routes-as-plugins","title":"Routes as Plugins","text":"<p>Routes can be imported from any npm package that exports them and configured with the resolver. Custom routes must extend <code>Route</code> and implement <code>StaticRouteMethods</code>.</p> <pre><code>import { Network, routes } from '@wormhole-foundation/sdk-connect';\n\nexport class CustomRoute&lt;N extends Network&gt;\n  extends routes.Route&lt;N&gt;\n  implements routes.StaticRouteMethods&lt;typeof CustomRoute&gt;\n{\n  static meta = {\n    name: 'CustomRoute',\n  };\n  // implementation...\n}\n</code></pre> <p>A noteworthy example of a route exported from a separate npm package is Wormhole Native Token Transfers (NTT). See the <code>NttAutomaticRoute</code> route implementation.</p>"},{"location":"tools/typescript-sdk/sdk-reference/#see-also","title":"See Also","text":"<p>The TSdoc is available on GitHub.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/","title":"Building Protocols and Payloads","text":"<p>The Wormhole TypeScript SDK provides a flexible and powerful system for integrating cross-chain communication into your applications. A key feature of the SDK is its ability to define protocols\u2014modular units representing distinct functionalities\u2014and their associated payloads, which encapsulate the data required for specific operations within those protocols.</p> <p>This guide will help you understand how to build protocols and payloads in the SDK, covering:</p> <ul> <li>The role of protocols and payloads in cross-chain communication.</li> <li>The mechanics of registering protocols and payloads using the SDK.</li> <li>Best practices for creating strongly typed layouts to ensure compatibility and reliability.</li> <li>Real-world examples using the <code>TokenBridge</code> as a reference implementation.</li> </ul> <p>By the end of this guide, you\u2019ll have a solid understanding of how to define, register, and use protocols and payloads in your projects.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#what-is-a-protocol","title":"What is a Protocol?","text":"<p>In the Wormhole SDK, a protocol represents a significant feature or functionality that operates across multiple blockchains. Protocols provide the framework for handling specific types of messages, transactions, or operations consistently and standardized.</p> <p>Examples of Protocols:</p> <ul> <li><code>TokenBridge</code>: Enables cross-chain token transfers, including operations like transferring tokens and relaying payloads.</li> <li><code>NTT (Native Token Transfers)</code>: Manages native token movements across chains.</li> </ul> <p>Protocols are defined by:</p> <ul> <li>A <code>name</code>: A string identifier (e.g., <code>TokenBridge</code>, <code>Ntt</code>).</li> <li>A set of <code>payloads</code>: These represent the specific actions or messages supported by the protocol, such as <code>Transfer</code> or <code>TransferWithPayload</code>.</li> </ul> <p>Each protocol is registered in the Wormhole SDK, allowing developers to leverage its predefined features or extend it with custom payloads.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#what-is-a-payload","title":"What is a Payload?","text":"<p>A payload is a structured piece of data that encapsulates the details of a specific operation within a protocol. It defines the format, fields, and types of data used in a message or transaction. Payloads ensure consistency and type safety when handling complex cross-chain operations.</p> <p>Each payload is defined as:</p> <ul> <li>A <code>layout</code>: Describes the binary format of the payload fields.</li> <li>A <code>literal</code>: Combines the protocol name and payload name into a unique identifier (e.g., <code>TokenBridge:Transfer</code>).</li> </ul> <p>By registering payloads, developers can enforce type safety and enable serialization and deserialization for specific protocol operations.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#register-protocols-and-payloads","title":"Register Protocols and Payloads","text":"<p>Protocols and payloads work together to enable cross-chain communication with precise type safety. For instance, in the <code>TokenBridge</code> protocol:</p> <ul> <li>The protocol is registered under the <code>TokenBridge</code> namespace.</li> <li>Payloads like <code>Transfer</code> or <code>AttestMeta</code> are linked to the protocol to handle specific operations.</li> </ul> <p>Understanding the connection between these components is important for customizing or extending the SDK to suit your needs.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#register-protocols","title":"Register Protocols","text":"<p>Registering a protocol establishes its connection to Wormhole's infrastructure, ensuring it interacts seamlessly with payloads and platforms while maintaining type safety and consistency.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#how-protocol-registration-works","title":"How Protocol Registration Works","text":"<p>Protocol registration involves two key tasks:</p> <ul> <li>Mapping protocols to interfaces: Connect the protocol to its corresponding interface, defining its expected behavior across networks (<code>N</code>) and chains (<code>C</code>). This ensures type safety, similar to strong typing, by preventing runtime errors if protocol definitions are incorrect.</li> <li>Linking protocols to platforms: Specify platform-specific implementations if needed, or use default mappings for platform-agnostic protocols.</li> </ul> <p>For example, here's the <code>TokenBridge</code> protocol registration:</p> <pre><code>declare module '../../registry.js' {\n  export namespace WormholeRegistry {\n    interface ProtocolToInterfaceMapping&lt;N, C&gt; {\n      TokenBridge: TokenBridge&lt;N, C&gt;;\n    }\n    interface ProtocolToPlatformMapping {\n      TokenBridge: EmptyPlatformMap&lt;'TokenBridge'&gt;;\n    }\n  }\n}\n</code></pre> <p>This code snippet:</p> <ul> <li>Maps the <code>TokenBridge</code> protocol to its interface to define how it operates.</li> <li>Links the protocol to a default platform mapping via <code>EmptyPlatformMap</code>.</li> </ul> <p>You can view the full implementation in the <code>TokenBridge</code> protocol file.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#platform-specific-protocols","title":"Platform-Specific Protocols","text":"<p>Some protocols require platform-specific behavior. For instance, the EVM-compatible Wormhole Registry maps native addresses for Ethereum-based chains:</p> <pre><code>declare module '@wormhole-foundation/sdk-connect' {\n  export namespace WormholeRegistry {\n    interface PlatformToNativeAddressMapping {\n      Evm: EvmAddress;\n    }\n  }\n}\n\nregisterNative(_platform, EvmAddress);\n</code></pre> <p>This ensures that <code>EvmAddress</code> is registered as the native address type for EVM-compatible platforms. See the EVM platform address file for details.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#register-payloads","title":"Register Payloads","text":"<p>Payload registration enables developers to define, serialize, and handle custom message types within their protocols. It establishes the connection between a protocol and its payloads, ensuring seamless integration, type enforcement, and runtime efficiency.</p> <p>This process ties a protocol to its payloads using a combination of:</p> <ul> <li>Payload literals: Unique identifiers in the format <code>&lt;ProtocolName&gt;:&lt;PayloadName&gt;</code>. These literals map each payload to a layout.</li> <li>Payload layouts: Structures that define the binary representation of payload data.</li> <li>The payload factory: A centralized runtime registry that maps payload literals to layouts for dynamic resolution and serialization.</li> </ul> <p>These components work together to streamline the definition and management of protocol payloads.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#how-payload-registration-works","title":"How Payload Registration Works","text":"<p>Payload registration involves:</p> <ol> <li> <p>Define payload layouts: Create layouts to structure your payloads. For instance, a protocol might use a <code>TransferWithPayload</code> layout.</p> <pre><code>export const transferWithPayloadLayout = &lt;\n  const P extends CustomizableBytes = undefined\n&gt;(\n  customPayload?: P\n) =&gt;\n  [\n    payloadIdItem(3),\n    ...transferCommonLayout,\n    { name: 'from', ...universalAddressItem },\n    customizableBytes({ name: 'payload' }, customPayload),\n  ] as const;\n</code></pre> </li> <li> <p>Register payloads: Use <code>registerPayloadTypes</code> to map payload literals to their layouts.</p> <pre><code>registerPayloadTypes('ProtocolName', protocolNamedPayloads);\n</code></pre> </li> <li> <p>Access registered payloads: Use the <code>getPayloadLayout</code> function to fetch the layout for a specific payload literal. This method ensures that the correct layout is retrieved dynamically and safely.</p> <pre><code>const layout = getPayloadLayout('ProtocolName:PayloadName');\n</code></pre> </li> </ol> <p>These steps link payload literals and their layouts, enabling seamless runtime handling.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#the-payload-factory","title":"The Payload Factory","text":"<p>At the core of the payload registration process is the <code>payloadFactory</code>, a registry that manages the mapping between payload literals and layouts:</p> <pre><code>export const payloadFactory = new Map&lt;LayoutLiteral, Layout&gt;();\n\nexport function registerPayloadType(\n  protocol: ProtocolName,\n  name: string,\n  layout: Layout\n) {\n  const payloadLiteral = composeLiteral(protocol, name);\n  if (payloadFactory.has(payloadLiteral)) {\n    throw new Error(`Payload type ${payloadLiteral} already registered`);\n  }\n  payloadFactory.set(payloadLiteral, layout);\n}\n</code></pre> <ul> <li>The <code>payloadFactory</code> ensures each payload literal maps to its layout uniquely.</li> <li>The <code>registerPayloadType</code> function adds individual payloads, while <code>registerPayloadTypes</code> supports bulk registration.</li> </ul> <p>This implementation ensures dynamic, efficient handling of payloads at runtime.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#integrate-protocols-with-payloads","title":"Integrate Protocols with Payloads","text":"<p>Integrating payloads with protocols enables dynamic identification through payload literals, while serialization and deserialization ensure their binary representation is compatible across chains. For more details on these processes, refer to the Layouts page.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#payload-discriminators","title":"Payload Discriminators","text":"<p>Payload discriminators are mechanisms in the Wormhole SDK that dynamically identify and map incoming payloads to their respective layouts at runtime. They are relevant for protocols like <code>TokenBridge</code>, enabling efficient handling of diverse payload types while ensuring type safety and consistent integration.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#how-discriminators-work","title":"How Discriminators Work","text":"<p>Discriminators evaluate serialized binary data and determine the corresponding payload layout by inspecting fixed fields or patterns within the data. Each payload layout is associated with a payload literal (e.g., <code>TokenBridge:Transfer</code> or <code>TokenBridge:TransferWithPayload</code>).</p> <p>This system ensures:</p> <ul> <li>Dynamic runtime identification: Payloads are parsed based on their content, even if a single protocol handles multiple payload types.</li> <li>Strict type enforcement: Discriminators leverage layout mappings to prevent invalid payloads from being processed.</li> </ul> <p>Below is an example of how the Wormhole SDK builds a discriminator to distinguish between payload layouts:</p> <pre><code>export function layoutDiscriminator&lt;B extends boolean = false&gt;(\n  layouts: readonly Layout[],\n  allowAmbiguous?: B\n): Discriminator&lt;B&gt; {\n  // Internal logic to determine distinguishable layouts\n  const [distinguishable, discriminator] = internalBuildDiscriminator(layouts);\n  if (!distinguishable &amp;&amp; !allowAmbiguous) {\n    throw new Error('Cannot uniquely distinguish the given layouts');\n  }\n\n  return (\n    !allowAmbiguous\n      ? (encoded: BytesType) =&gt; {\n          const layout = discriminator(encoded);\n          return layout.length === 0 ? null : layout[0];\n        }\n      : discriminator\n  ) as Discriminator&lt;B&gt;;\n}\n</code></pre> <ul> <li><code>layoutDiscriminator</code> takes a list of layouts and generates a function that can identify the appropriate layout for a given serialized payload.</li> <li>The <code>allowAmbiguous</code> parameter determines whether layouts with overlapping characteristics are permitted.</li> </ul>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#real-world-example-wrapped-token-transfers-wtt-protocol","title":"Real-World Example: Wrapped Token Transfers (WTT) Protocol","text":"<p>Integrating protocols with their respective payloads exemplifies how the Wormhole SDK leverages layouts and type-safe registration mechanisms to ensure efficient cross-chain communication. This section focuses on how protocols like <code>TokenBridge</code> use payloads to facilitate specific operations.</p> <p>Terminology</p> <p>The SDK and smart contracts use the name Token Bridge. In documentation, this product is referred to as Wrapped Token Transfers (WTT). Both terms describe the same protocol.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#wtt-protocol-and-payloads","title":"WTT Protocol and Payloads","text":"<p>The <code>TokenBridge</code> protocol enables cross-chain token transfers through its payloads. Key payloads include:</p> <ul> <li><code>Transfer</code>: Handles basic token transfer operations.</li> <li><code>TransferWithPayload</code>: Extends the <code>Transfer</code> payload to include custom data, enhancing functionality.</li> </ul> <p>Payloads are registered to the <code>TokenBridge</code> protocol via the <code>PayloadLiteralToLayoutMapping</code> interface, which links payload literals (e.g., <code>TokenBridge:Transfer</code>) to their layouts.</p> <p>Additionally, the protocol uses reusable layouts like <code>transferCommonLayout</code> and extends them in more specialized layouts such as <code>transferWithPayloadLayout</code>:</p> <pre><code>export const transferWithPayloadLayout = &lt;\n  const P extends CustomizableBytes = undefined\n&gt;(\n  customPayload?: P\n) =&gt;\n  [\n    payloadIdItem(3),\n    ...transferCommonLayout,\n    { name: 'from', ...universalAddressItem },\n    customizableBytes({ name: 'payload' }, customPayload),\n  ] as const;\n</code></pre> <p>This layout includes:</p> <ul> <li>A <code>payloadIdItem</code> to identify the payload type.</li> <li>Common fields for token and recipient details.</li> <li>A customizable <code>payload</code> field for additional data.</li> </ul>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#use-the-discriminator","title":"Use the Discriminator","text":"<p>To manage multiple payloads, the <code>TokenBridge</code> protocol utilizes a discriminator to distinguish between payload types dynamically. For example:</p> <pre><code>const tokenBridgePayloads = ['Transfer', 'TransferWithPayload'] as const;\n\nexport const getTransferDiscriminator = lazyInstantiate(() =&gt;\n  payloadDiscriminator([_protocol, tokenBridgePayloads])\n);\n</code></pre> <ul> <li>The <code>getTransferDiscriminator</code> function dynamically evaluates payloads using predefined layouts.</li> <li>This ensures that each payload type is processed according to its unique structure and type-safe layout.</li> </ul>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#register-payloads-to-protocols","title":"Register Payloads to Protocols","text":"<p>Here\u2019s how the <code>TokenBridge</code> protocol connects its payloads to the Wormhole SDK:</p> <pre><code>declare module '../../registry.js' {\n  export namespace WormholeRegistry {\n    interface PayloadLiteralToLayoutMapping\n      extends RegisterPayloadTypes&lt;\n        'TokenBridge',\n        typeof tokenBridgeNamedPayloads\n      &gt; {}\n  }\n}\n\nregisterPayloadTypes('TokenBridge', tokenBridgeNamedPayloads);\n</code></pre> <p>This registration links the <code>TokenBridge</code> payload literals to their respective layouts, enabling serialization and deserialization at runtime.</p> <p>You can explore the complete <code>TokenBridge</code> protocol and payload definitions in the <code>TokenBridge</code> layout file.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#wtt-payloads","title":"WTT Payloads","text":"<p>The following payloads are registered for the <code>TokenBridge</code> protocol:</p> <ul> <li><code>AttestMeta</code>: Used for token metadata attestation.</li> <li><code>Transfer</code>: Facilitates token transfers.</li> <li><code>TransferWithPayload</code>: Adds a custom payload to token transfers.</li> </ul> <p>These payloads and their layouts are defined in the <code>TokenBridge</code> layout file.</p>"},{"location":"tools/typescript-sdk/guides/protocols-payloads/#other-protocols-native-token-transfers-ntt","title":"Other Protocols: Native Token Transfers (NTT)","text":"<p>While this guide focuses on the <code>TokenBridge</code> protocol, other protocols, like NTT, follow a similar structure.</p> <ul> <li>NTT manages the transfer of native tokens across chains.</li> <li>Payloads such as <code>WormholeTransfer</code> and <code>WormholeTransferStandardRelayer</code> are registered to the protocol using the same patterns for payload literals and layouts.</li> <li>The same mechanisms for type-safe registration and payload discriminators apply, ensuring reliability and extensibility.</li> </ul> <p>For more details, you can explore the NTT implementation in the SDK.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/","title":"Data Layouts","text":"<p>The Wormhole SDK uses the layout package to define, serialize, and deserialize data structures efficiently. This modular system ensures consistent data formatting and cross-environment compatibility, benefiting projects that require robust handling of structured data.</p> <p>By understanding the layout mechanism, you\u2019ll be able to:</p> <ul> <li>Define data structures (numbers, arrays, and custom types).</li> <li>Efficiently serialize and deserialize data using the SDK\u2019s utilities.</li> <li>Handle protocol-specific layouts with ease.</li> </ul> <p>This guide is beneficial for developers looking to integrate Wormhole into their applications or protocols, especially those dealing with complex payloads or cross-chain communication.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#key-concepts","title":"Key Concepts","text":""},{"location":"tools/typescript-sdk/guides/sdk-layout/#layout-items","title":"Layout Items","text":"<p>A layout defines how data structures should be serialized (converted into binary format) and deserialized (converted back into their original structure). This ensures consistent data formatting when transmitting information across different blockchain environments.</p> <p>Layouts are composed of layout items, which describe individual fields or sets of fields in your data. Each layout item specifies:</p> <ul> <li><code>name</code>: Name of the field.</li> <li><code>binary</code>: Type of data (e.g., <code>uint</code>, <code>bytes</code>).</li> <li><code>size</code>: Byte length for fixed-size fields within uint and bytes items only.</li> </ul> <p>Layout items can represent:</p> <ul> <li>Primitive types: Basic data types like unsigned integers (<code>uint</code>) or byte arrays (<code>bytes</code>).</li> <li>Composite types: More complex structures, such as arrays or nested objects.</li> </ul> <p>Below is an example of a layout that might be used to serialize a message across the Wormhole protocol:</p> <pre><code>const exampleLayout = [\n  { name: 'sourceChain', binary: 'uint', size: 2 },\n  { name: 'orderSender', binary: 'bytes', size: 32 },\n  { name: 'redeemer', binary: 'bytes', size: 32 },\n  { name: 'redeemerMessage', binary: 'bytes', lengthSize: 4 },\n] as const;\n</code></pre> <p>In this example:</p> <ul> <li><code>sourceChain</code> is a 2-byte unsigned integer (<code>uint</code>) identifying the source blockchain.</li> <li><code>orderSender</code> is a fixed-length 32-byte array representing the sender's address.</li> <li><code>redeemer</code> is another 32-byte array used for the redeemer\u2019s address.</li> <li><code>redeemerMessage</code> is a variable-length byte sequence, with its length specified by a 4-byte integer.</li> </ul> <p>This layout definition ensures that all necessary data fields are consistently encoded and can be correctly interpreted when they are deserialized.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#serialization-and-deserialization","title":"Serialization and Deserialization","text":"<p>Serialization converts structured data into binary format; deserialization reverses this, reconstructing the original objects.</p> <p>You can serialize data using the <code>serializeLayout</code> function:</p> <pre><code>const serialized = serializeLayout(fillLayout, exampleFill);\n</code></pre> <p>To deserialize the binary data back into a structured object, use the <code>deserializeLayout</code> function:</p> <pre><code>const deserialized = deserializeLayout(fillLayout, serialized);\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#custom-conversions","title":"Custom Conversions","text":"<p>Layouts also allow for custom conversions, which help map complex or custom types (like chain IDs or universal addresses) into a more usable format. This is useful when serializing or deserializing data that doesn\u2019t fit neatly into simple types like integers or byte arrays.</p> <p>For example, consider a custom conversion for a chain ID:</p> <pre><code>const chainCustomConversion = {\n  to: (chainId: number) =&gt; toChain(chainId),\n  from: (chain: Chain) =&gt; chainToChainId(chain),\n} satisfies CustomConversion&lt;number, Chain&gt;;\n</code></pre> <p>This setup allows Wormhole to convert between human-readable formats and binary-encoded data used in payloads.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#error-handling","title":"Error Handling","text":"<p>The layout system performs error checks during serialization and deserialization. An error is thrown if data is incorrectly sized or in the wrong format. Refer to the below example:</p> <pre><code>try {\n  deserializeLayout(fillLayout, corruptedData);\n} catch (error) {\n  console.error('Error during deserialization:', error.message);\n}\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#application-of-layouts","title":"Application of Layouts","text":"<p>This section will focus on applying the concepts explained earlier through examples. These will help developers better understand how to define layouts, serialize and deserialize data, and use custom conversions where needed.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#defining-layouts","title":"Defining Layouts","text":"<p>To get started with layouts in Wormhole, you need to define your structure. A layout is simply a list of fields (layout items) describing how each data piece will be serialized.</p> <p>Consider the following layout for a payload:</p> <pre><code>const exampleLayout = [\n  { name: 'sourceChain', binary: 'uint', size: 2 },\n  { name: 'orderSender', binary: 'bytes', size: 32 },\n  { name: 'redeemer', binary: 'bytes', size: 32 },\n  { name: 'redeemerMessage', binary: 'bytes', lengthSize: 4 },\n] as const;\n</code></pre> <p>In this example:</p> <ul> <li><code>sourceChain</code> is an unsigned integer (uint) of 2 bytes.</li> <li><code>orderSender</code> is a 32-byte fixed-length byte array.</li> <li><code>redeemer</code> is another 32-byte byte array.</li> <li><code>redeemerMessage</code> is a length-prefixed byte array, with the length specified by a 4-byte integer.</li> </ul>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#serialize-data","title":"Serialize Data","text":"<p>Once a layout is defined, the next step is to serialize data according to that structure. You can accomplish this using the <code>serializeLayout</code> function from the Wormhole SDK.</p> <pre><code>const examplePayload = {\n  sourceChain: 6,\n  orderSender: new Uint8Array(32),\n  redeemer: new Uint8Array(32),\n  redeemerMessage: new Uint8Array([0x01, 0x02, 0x03]),\n};\n\nconst serializedData = serializeLayout(exampleLayout, examplePayload);\n</code></pre> <p>This takes the data structure (<code>examplePayload</code>) and serializes it according to the rules defined in the layout (<code>exampleLayout</code>). The result is a <code>Uint8Array</code> representing the serialized binary data.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#deserialize-data","title":"Deserialize Data","text":"<p>Deserialization is the reverse of serialization. Given a serialized <code>Uint8Array</code>, we can convert it back into its original structure using the <code>deserializeLayout</code> function.</p> <pre><code>const deserializedPayload = deserializeLayout(exampleLayout, serializedData);\n</code></pre> <p>This will output the structured object, making it easy to work with data transmitted or received from another chain.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#handling-variable-length-fields","title":"Handling Variable-Length Fields","text":"<p>One relevant aspect of Wormhole SDK's layout system is the ability to handle variable-length fields, such as arrays and length-prefixed byte sequences.</p> <p>For instance, if you want to serialize or deserialize a message where the length of the content isn't known beforehand, you can define a layout item with a <code>lengthSize</code> field.</p> <pre><code>{ name: 'message', binary: 'bytes', lengthSize: 4 }\n</code></pre> <p>This tells the SDK to read or write the message's length (in 4 bytes) and then handle the content.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#nested-layouts-and-strong-typing","title":"Nested Layouts and Strong Typing","text":"<p>The Wormhole SDK simplifies handling complex structures with nested layouts and strong typing. Nested layouts clearly represent hierarchical data, while strong typing ensures data consistency and catches errors during development.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#nested-layout","title":"Nested Layout","text":"<p>In complex protocols, layouts can contain nested structures. Nested layouts become relevant here, allowing you to represent hierarchical data (such as transactions or multi-part messages) in a structured format.</p> <p>Refer to the following nested layout where a message contains nested fields:</p> <pre><code>const nestedLayout = [\n  {\n    name: 'source',\n    binary: 'bytes',\n    layout: [\n      { name: 'chainId', binary: 'uint', size: 2 },\n      { name: 'sender', binary: 'bytes', size: 32 },\n    ],\n  },\n  {\n    name: 'redeemer',\n    binary: 'bytes',\n    layout: [\n      { name: 'address', binary: 'bytes', size: 32 },\n      { name: 'message', binary: 'bytes', lengthSize: 4 },\n    ],\n  },\n] as const satisfies Layout;\n</code></pre> <p>In this layout:</p> <ul> <li><code>source</code> is an object with two fields: <code>chainId</code> and <code>sender</code>.</li> <li><code>redeemer</code> is another object with two fields: <code>address</code> and a length-prefixed <code>message</code>.</li> </ul>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#strong-typing","title":"Strong Typing","text":"<p>One of the benefits of using the Wormhole SDK in TypeScript is its support for strong typing. This ensures that serialized and deserialized data conform to expected structures, reducing errors during development by enforcing type checks at compile time.</p> <p>Using TypeScript, the <code>LayoutToType</code> utility provided by the SDK automatically generates a strongly typed structure based on the layout:</p> <pre><code>type NestedMessage = LayoutToType&lt;typeof nestedLayout&gt;;\n</code></pre> <p>This ensures that when you serialize or deserialize data, it matches the expected structure.</p> <pre><code>const message: NestedMessage = {\n  source: {\n    chainId: 6,\n    sender: new Uint8Array(32),\n  },\n  redeemer: {\n    address: new Uint8Array(32),\n    message: new Uint8Array([0x01, 0x02, 0x03]),\n  },\n};\n</code></pre> <p>Attempting to assign data of incorrect types will result in a compile-time error. The Wormhole SDK's layout system enforces strong types, reducing runtime errors and improving code reliability.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#serialization-and-deserialization-with-nested-layouts","title":"Serialization and Deserialization with Nested Layouts","text":"<p>You can serialize and deserialize nested structures in the same way as simpler layouts:</p> <pre><code>const serializedNested = serializeLayout(nestedLayout, message);\nconst deserializedNested = deserializeLayout(nestedLayout, serializedNested);\n</code></pre> <p>Strong typing in TypeScript ensures that the message object conforms to the nested layout structure. This reduces the risk of data inconsistency during cross-chain communication.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#commonly-used-layouts","title":"Commonly Used Layouts","text":"<p>The Wormhole SDK includes predefined layouts frequently used in cross-chain messaging. These layouts are optimized for standard fields such as chain IDs, addresses, and signatures. You can explore the complete set of predefined layouts in the <code>layout-items</code> directory of the Wormhole SDK.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#chain-id-layouts","title":"Chain ID Layouts","text":"<p>Chain ID layouts in the Wormhole SDK derive from a common foundation: <code>chainItemBase</code>. This structure defines the binary representation of a chain ID as a 2-byte unsigned integer, ensuring consistency across serialization and deserialization processes.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#base-structure","title":"Base Structure","text":"<p>This simple structure is the blueprint for more specific layouts by standardizing the binary format and size.</p> <pre><code>const chainItemBase = { binary: 'uint', size: 2 } as const;\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#dynamic-chain-id-layout","title":"Dynamic Chain ID Layout","text":"<p>The dynamic chain ID layout, <code>chainItem</code>, extends <code>chainItemBase</code> by adding flexible custom conversion logic. It enables runtime validation of chain IDs, supports optional null values, and restricts chain IDs to a predefined set when needed.</p> <pre><code>export const chainItem = &lt;\n  const C extends readonly Chain[] = typeof chains,\n  const N extends boolean = false,\n&gt;(opts?: {\n  allowedChains?: C;\n  allowNull?: N;\n}) =&gt;\n  ({\n    ...chainItemBase, // Builds on the base structure\n    custom: {\n      to: (val: number): AllowNull&lt;C[number], N&gt; =&gt; { ... },\n      from: (val: AllowNull&lt;C[number], N&gt;): number =&gt; { ... },\n    },\n  });\n</code></pre> <p>This layout is versatile. It allows the serialization of human-readable chain names (e.g., <code>Ethereum</code>) to numeric IDs (e.g., <code>1</code>) and vice versa. This is particularly useful when working with dynamic configurations or protocols supporting multiple chains.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#fixed-chain-id-layout","title":"Fixed Chain ID Layout","text":"<p>The fixed chain ID layout, <code>fixedChainItem</code>, is more rigid. It also extends <code>chainItemBase</code>, but the custom field is hardcoded for a single chain. This eliminates runtime validation and enforces strict adherence to a specific chain.</p> <pre><code>export const fixedChainItem = &lt;const C extends Chain&gt;(chain: C) =&gt; ({\n  ...chainItemBase, // Builds on the base structure\n  custom: {\n    to: chain,\n    from: chainToChainId(chain),\n  },\n});\n</code></pre> <p>This layout allows developers to efficiently serialize and deserialize messages involving a single, fixed chain ID.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#address-layout","title":"Address Layout","text":"<p>The Wormhole SDK uses a Universal Address Layout to serialize and deserialize blockchain addresses into a standardized format. This layout ensures that addresses are always represented as fixed 32-byte binary values, enabling seamless cross-chain communication.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#base-structure_1","title":"Base Structure","text":"<p>The <code>universalAddressItem</code> defines the layout for addresses. It uses the binary type bytes and enforces a fixed size of 32 bytes for consistency.</p> <pre><code>export const universalAddressItem = {\n  binary: 'bytes',\n  size: 32,\n  custom: {\n    to: (val: Uint8Array): UniversalAddress =&gt; new UniversalAddress(val),\n    from: (val: UniversalAddress): Uint8Array =&gt; val.toUint8Array(),\n  } satisfies CustomConversion&lt;Uint8Array, UniversalAddress&gt;,\n} as const satisfies LayoutItem;\n</code></pre> <p>This layout ensures consistent address handling by defining the following:</p> <ul> <li>Serialization: Converts a high-level <code>UniversalAddress</code> object into raw binary (32 bytes) for efficient storage or transmission.</li> <li>Deserialization: Converts raw binary back into a <code>UniversalAddress</code> object, enabling further interaction in a human-readable or programmatic format.</li> </ul>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#signature-layout","title":"Signature Layout","text":"<p>In the Wormhole SDK, the Signature Layout defines how to serialize and deserialize cryptographic signatures. These signatures verify message authenticity and ensure data integrity, particularly in Guardian-signed VAAs.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#base-structure_2","title":"Base Structure","text":"<p>The <code>signatureLayout</code> specifies the binary structure of a secp256k1 signature. It divides the signature into three components:</p> <pre><code>const signatureLayout = [\n  { name: 'r', binary: 'uint', size: 32 },\n  { name: 's', binary: 'uint', size: 32 },\n  { name: 'v', binary: 'uint', size: 1 },\n] as const satisfies Layout;\n</code></pre> <p>This layout provides a clear binary format for the secp256k1 signature, making it efficient to process within the Wormhole protocol.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#layout-with-custom-conversion","title":"Layout with Custom Conversion","text":"<p>The <code>signatureItem</code> builds upon the <code>signatureLayout</code> by adding custom conversion logic. This conversion transforms raw binary data into a high-level <code>Signature</code> object and vice versa.</p> <pre><code>export const signatureItem = {\n  binary: 'bytes',\n  layout: signatureLayout,\n  custom: {\n    to: (val: LayoutToType&lt;typeof signatureLayout&gt;) =&gt;\n      new Signature(val.r, val.s, val.v),\n    from: (val: Signature) =&gt; ({ r: val.r, s: val.s, v: val.v }),\n  } satisfies CustomConversion&lt;LayoutToType&lt;typeof signatureLayout&gt;, Signature&gt;,\n} as const satisfies BytesLayoutItem;\n</code></pre> <p>The <code>custom</code> field ensures seamless integration of raw binary data with the <code>Signature</code> class, encapsulating signature-specific logic.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#advanced-use-cases","title":"Advanced Use Cases","text":"<p>The Wormhole SDK\u2019s layout system is designed to handle various data structures and serialization needs. This section will explore more advanced use cases, such as handling conditional data structures, fixed conversions, and optimizing serialization performance.</p> Switch Statements for Conditional Layouts <p>In some cases, the structure of serialized data might change based on a specific field, such as a payload ID. The switch layout type conditionally defines layouts based on a value.</p> <p>For example, different message types can be identified using a payload ID, and the layout for each message can be determined at runtime:</p> <pre><code>const switchLayout = {\n  binary: 'switch',\n  idSize: 1, // size of the payload ID\n  idTag: 'messageType', // tag to identify the type of message\n  layouts: [\n    [[1, 'messageType1'], fillLayout], // layout for type 1\n    [[2, 'messageType2'], fastFillLayout], // layout for type 2\n  ],\n} as const satisfies Layout;\n</code></pre> <p>The switch statement helps developers parse multiple payload types using the same structure, depending on a control field like an ID.</p> Fixed Conversions and Omitted Fields <p>Fixed conversions and omitted fields allow developers to handle known, static data without including it in every serialization or deserialization operation. For instance, when specific fields in a layout always hold a constant value, they can be omitted from the deserialized object.</p> <p>Example: Fixed Conversion</p> <p>In some cases, a field may always contain a predefined value. The layout system supports fixed conversions, allowing developers to \u201chard-code\u201d these values:</p> <pre><code>const fixedConversionLayout = {\n  binary: 'uint',\n  size: 2,\n  custom: {\n    to: 'Ethereum',\n    from: chainToChainId('Ethereum'),\n  },\n} as const satisfies Layout;\n</code></pre> <p>Example: Omitted Fields</p> <p>Omitted fields are useful for handling padding or reserved fields that do not carry meaningful information and can safely be excluded from the deserialized output:</p> <pre><code>const omittedFieldLayout = [\n  { name: 'reserved', binary: 'uint', size: 2, omit: true },\n] as const satisfies Layout;\n</code></pre> <p>In this example, <code>reserved</code> is a padding field with a fixed, non-dynamic value that serves no functional purpose. It is omitted from the deserialized result but still considered during serialization to maintain the correct binary format.</p> <p>Only fields with a fixed, known value, such as padding or reserved fields, should be marked as <code>omit: true</code>. Fields with meaningful or dynamic information, such as <code>sourceChain</code> or <code>version</code>, must remain in the deserialized structure to ensure data integrity and allow seamless round-trip conversions between serialized and deserialized representations.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#integration-with-wormhole-protocol","title":"Integration with Wormhole Protocol","text":"<p>The layout system facilitates seamless interaction with the Wormhole protocol, mainly when dealing with VAAs. These cross-chain messages must be serialized and deserialized to ensure they can be transmitted and processed accurately across different chains.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#vaas-and-layouts","title":"VAAs and Layouts","text":"<p>VAAs are the backbone of Wormhole\u2019s cross-chain communication. Each VAA is a signed message encapsulating important information such as the originating chain, the emitter address, a sequence number, and Guardian signatures. The Wormhole SDK leverages its layout system to define, serialize, and deserialize VAAs, ensuring data integrity and chain compatibility.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#base-vaa-structure","title":"Base VAA Structure","text":"<p>The Wormhole SDK organizes the VAA structure into three key components:</p> <ul> <li>Header: Contains metadata such as the Guardian set index and an array of Guardian signatures.</li> <li>Envelope: Includes chain-specific details such as the emitter chain, address, sequence, and consistency (finality) level.</li> <li>Payload: Provides application-specific data, such as the actual message or operation being performed.</li> </ul> <p>Header layout:</p> <pre><code>const guardianSignatureLayout = [\n  { name: 'guardianIndex', binary: 'uint', size: 1 },\n  { name: 'signature', ...signatureItem },\n] as const satisfies Layout;\n\nexport const headerLayout = [\n  { name: 'version', binary: 'uint', size: 1, custom: 1, omit: true },\n  { name: 'guardianSet', ...guardianSetItem },\n  {\n    name: 'signatures',\n    binary: 'array',\n    lengthSize: 1,\n    layout: guardianSignatureLayout,\n  },\n] as const satisfies Layout;\n</code></pre> <p>The header defines metadata for validating and processing the VAA, such as the Guardian set index and signatures. Each signature is represented using the <code>signatureItem</code> layout, ensuring consistency and compatibility across different platforms.</p> <p>Signature Standard Compliance</p> <p>The signature field uses the <code>signatureItem</code> layout, which is explicitly defined as 65 bytes. This layout is aligned with widely used standards such as EIP-2612 and Uniswap's Permit2, ensuring compatibility with cryptographic protocols and applications.</p> <p>Envelope layout:</p> <pre><code>export const envelopeLayout = [\n  { name: 'timestamp', binary: 'uint', size: 4 },\n  { name: 'nonce', binary: 'uint', size: 4 },\n  { name: 'emitterChain', ...chainItem() },\n  { name: 'emitterAddress', ...universalAddressItem },\n  { name: 'sequence', ...sequenceItem },\n  { name: 'consistencyLevel', binary: 'uint', size: 1 },\n] as const satisfies Layout;\n</code></pre> <p>The envelope encapsulates the VAA's core message data, including chain-specific information like the emitter address and sequence number. This structured layout ensures that the VAA can be securely transmitted across chains.</p> <p>Payload Layout:</p> <p>The Payload contains the user-defined data specific to the application or protocol, such as a token transfer message, governance action, or other cross-chain operation. The layout of the payload is dynamic and depends on the payload type, identified by the <code>payloadLiteral</code> field.</p> <pre><code>const examplePayloadLayout = [\n  { name: 'type', binary: 'uint', size: 1 },\n  { name: 'data', binary: 'bytes', lengthSize: 2 },\n] as const satisfies Layout;\n</code></pre> <p>This example demonstrates a payload containing:</p> <ul> <li>A type field specifying the operation type (e.g., transfer or governance action).</li> <li>A data field that is length-prefixed and can store operation-specific information.</li> </ul> <p>Dynamic payload layouts are selected at runtime using the <code>payloadLiteral</code> field, which maps to a predefined layout in the Wormhole SDK.</p> <p>Combined Base Layout:</p> <p>The base VAA layout combines the header, envelope, and dynamically selected payload layout:</p> <pre><code>export const baseLayout = [...headerLayout, ...envelopeLayout] as const;\n</code></pre> <p>At runtime, the payload layout is appended to the <code>baseLayout</code> to form the complete structure.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#serializing-vaa-data","title":"Serializing VAA Data","text":"<p>The Wormhole SDK provides the <code>serialize</code> function to serialize a VAA message. This function combines the base layout (header and envelope) with the appropriate payload layout, ensuring the message\u2019s format is correct for transmission across chains.</p> <pre><code>import { serialize } from '@wormhole-foundation/sdk-core/vaa/functions';\n\nconst vaaData = {\n  guardianSet: 1,\n  signatures: [{ guardianIndex: 0, signature: new Uint8Array(65).fill(0) }],\n  timestamp: 1633000000,\n  nonce: 42,\n  emitterChain: 2, // Ethereum\n  emitterAddress: new Uint8Array(32).fill(0),\n  sequence: BigInt(1),\n  consistencyLevel: 1,\n  payloadLiteral: 'SomePayloadType',\n  payload: { key: 'value' },\n};\n\nconst serializedVAA = serialize(vaaData);\n</code></pre> How does it work? <p>Internally, the serialize function dynamically combines the <code>baseLayout</code> (header and envelope) with the payload layout defined by the <code>payloadLiteral</code>. The complete layout is then passed to the <code>serializeLayout</code> function, which converts the data into binary format.</p> <pre><code>const layout = [\n  ...baseLayout, // Header and envelope layout\n  payloadLiteralToPayloadItemLayout(vaa.payloadLiteral), // Payload layout\n] as const;\n\nreturn serializeLayout(layout, vaa as LayoutToType&lt;typeof layout&gt;);\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#deserializing-vaa-data","title":"Deserializing VAA Data","text":"<p>The Wormhole SDK provides the <code>deserialize</code> function to parse a VAA from its binary format back into a structured object. This function uses the <code>baseLayout</code> and payload discriminator logic to ensure the VAA is correctly interpreted.</p> <pre><code>import { deserialize } from '@wormhole-foundation/sdk-core/vaa/functions';\n\nconst serializedVAA = new Uint8Array([\n  /* Serialized VAA binary data */\n]);\n\nconst vaaPayloadType = 'SomePayloadType'; // The payload type expected for this VAA\nconst deserializedVAA = deserialize(vaaPayloadType, serializedVAA);\n</code></pre> How does it work? <p>Internally, the <code>deserialize</code> function uses the <code>baseLayout</code> (header and envelope) to parse the main VAA structure. It then identifies the appropriate payload layout using the provided payload type or discriminator.</p> <pre><code>const [header, envelopeOffset] = deserializeLayout(headerLayout, data, {\n  consumeAll: false,\n});\n\nconst [envelope, payloadOffset] = deserializeLayout(envelopeLayout, data, {\n  offset: envelopeOffset,\n  consumeAll: false,\n});\n\nconst [payloadLiteral, payload] =\n  typeof payloadDet === 'string'\n    ? [\n        payloadDet as PayloadLiteral,\n        deserializePayload(payloadDet as PayloadLiteral, data, payloadOffset),\n      ]\n    : deserializePayload(\n        payloadDet as PayloadDiscriminator,\n        data,\n        payloadOffset\n      );\n\nreturn {\n  ...header,\n  ...envelope,\n  payloadLiteral,\n  payload,\n} satisfies VAA;\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#registering-custom-payloads","title":"Registering Custom Payloads","text":"<p>In the Wormhole SDK, payloads rely on layouts to define their binary structure, ensuring consistency and type safety across protocols. Custom payloads extend this functionality, allowing developers to handle protocol-specific features or unique use cases.</p> <p>To learn how to define and register payloads using layouts, refer to the Building Protocols and Payloads page for a detailed guide.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#common-pitfalls-best-practices","title":"Common Pitfalls &amp; Best Practices","text":"<p>When working with the Wormhole SDK layout system, it's important to be aware of a few common issues that can arise. Below are some pitfalls to avoid and best practices to ensure smooth integration.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#pitfalls-to-avoid","title":"Pitfalls to Avoid","text":""},{"location":"tools/typescript-sdk/guides/sdk-layout/#defining-sizes-for-data-types","title":"Defining Sizes for Data Types","text":"<p>When defining sizes for each data type, make sure to match the actual data length to the specified size to prevent serialization and deserialization errors:</p> <ul> <li><code>uint</code> and <code>int</code>: The specified size must be large enough to accommodate the data value. For instance, storing a value greater than 255 in a single byte (<code>uint8</code>) will fail since it exceeds the byte\u2019s capacity. Similarly, an undersized integer (e.g., specifying 2 bytes for a 4-byte integer) can lead to data loss or deserialization failure.</li> <li><code>bytes</code>: The data must match the specified byte length in the layout. For example, defining a field as 32 bytes (<code>size: 32</code>) requires the provided data to be exactly 32 bytes long; otherwise, serialization will fail.</li> </ul> <pre><code>// Pitfall: Mismatch between the size of data and the defined size in the layout\n{ name: 'orderSender', binary: 'bytes', size: 32 }\n// If the provided data is not exactly 32 bytes, this will fail\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#incorrectly-defined-arrays","title":"Incorrectly Defined Arrays","text":"<p>Arrays can be fixed-length or length-prefixed, so it\u2019s important to define them correctly. Fixed-length arrays must match the specified length, while length-prefixed arrays need a <code>lengthSize</code> field.</p> <pre><code>// Pitfall: Array length does not match the expected size\n{ name: 'redeemerMessage', binary: 'bytes', lengthSize: 4 }\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#best-practices","title":"Best Practices","text":"<p>These best practices and common pitfalls can help prevent bugs and improve the reliability of your implementation when working with layouts in the Wormhole SDK.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#reuse-predefined-layout-items","title":"Reuse Predefined Layout Items","text":"<p>Rather than defining sizes or types manually, reuse the predefined layout items provided by the Wormhole SDK. These items ensure consistent formatting and enforce strong typing.</p> <p>For instance, use the <code>chainItem</code> layout for chain IDs or <code>universalAddressItem</code> for blockchain addresses:</p> <pre><code>import {\n  chainItem,\n  universalAddressItem,\n} from '@wormhole-foundation/sdk-core/layout-items';\n\nconst exampleLayout = [\n  { name: 'sourceChain', ...chainItem() }, // Use predefined chain ID layout\n  { name: 'senderAddress', ...universalAddressItem }, // Use universal address layout\n] as const;\n</code></pre> <p>By leveraging predefined layout items, you reduce redundancy, maintain consistency, and ensure compatibility with Wormhole\u2019s standards.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#use-class-instances","title":"Use Class Instances","text":"<p>Whenever possible, convert deserialized data into higher-level class instances. This makes it easier to validate, manipulate, and interact with structured data. For example, the <code>UniversalAddress</code> class ensures consistent address handling:</p> <pre><code>import { UniversalAddress } from '@wormhole-foundation/sdk-core';\n\nconst deserializedAddress = new UniversalAddress(someBinaryData);\n</code></pre> <p>Focusing on reusing predefined layout items and converting deserialized data into higher-level abstractions can ensure a more robust and maintainable implementation.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#consistent-error-handling","title":"Consistent Error Handling","text":"<p>Always handle errors during both serialization and deserialization. Catching exceptions allows you to log or resolve issues gracefully when working with potentially corrupted or invalid data.</p> <pre><code>try {\n  const deserialized = deserializeLayout(fillLayout, data);\n} catch (error) {\n  console.error('Deserialization failed:', error);\n}\n</code></pre>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#leverage-reusable-layouts","title":"Leverage Reusable Layouts","text":"<p>Creating reusable layouts for commonly repeated structures improves code maintainability and reduces duplication. These layouts can represent fields or combinations of fields frequently encountered in cross-chain communication, such as chain IDs, addresses, and signatures.</p> <p>For example, define a reusable layout for chain IDs and addresses:</p> <pre><code>const commonLayout = [\n  { name: 'chainId', binary: 'uint', size: 2 },\n  { name: 'address', binary: 'bytes', size: 32 },\n] as const satisfies Layout;\n\n// Reuse the common layout in different contexts\nconst exampleLayout = [\n  ...commonLayout,\n  { name: 'sequence', binary: 'uint', size: 8 },\n];\n</code></pre> <p>By abstracting common elements into a single layout, you ensure consistency across different parts of your application and simplify future updates.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#performance-considerations","title":"Performance Considerations","text":"<p>Efficient serialization and deserialization are crucial when handling large amounts of cross-chain data. Below are some strategies and best practices to ensure optimal performance when using Wormhole SDK layouts.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#lazy-instantiation","title":"Lazy Instantiation","text":"<p>Building a discriminator can be resource-intensive for complex or large datasets. The layout structures do not incur significant upfront costs, but deferring the creation of discriminators until needed can improve efficiency.</p> <pre><code>const lazyDiscriminator = lazyInstantiate(() =&gt; layoutDiscriminator(layouts));\n</code></pre> <p>This approach ensures that discriminators are only built when required, helping to optimize performance, especially for complex or conditional layouts.</p>"},{"location":"tools/typescript-sdk/guides/sdk-layout/#resources","title":"Resources","text":"<p>For further learning and practical experience, explore the following resources:</p> <ul> <li> <p>Wormhole TypeScript SDK: The Wormhole SDK repository contains the core implementation of layouts, including predefined layout items and utilities like <code>serializeLayout</code> and <code>deserializeLayout</code>.</p> </li> <li> <p>Layout tests repository: For hands-on experimentation, check out this layout package repository, which provides examples and unit tests to help you better understand serialization, deserialization, and the strong typing mechanism. Running these tests locally is a great way to deepen your understanding of how layouts function in real-world scenarios.</p> </li> </ul>"},{"location":"tools/typescript-sdk/guides/vaas-protocols/","title":"VAAs and Protocols","text":"<p>Wormhole's core functionality revolves around Verifiable Action Approvals (VAAs), which are signed messages enabling secure and decentralized communication across chains. This guide focuses on their practical usage within the Wormhole ecosystem, specifically when working with protocol-specific messages in the TypeScript and Solidity SDKs.</p> <p>For deeper insights into serialization, deserialization, and protocol design, refer to:</p> <ul> <li>Data Layouts for serialization concepts.</li> <li>Building Protocols and Payloads for designing custom protocol messages.</li> </ul> <p>This guide will help you understand how to handle VAAs and protocol messages in off-chain and on-chain scenarios.</p>"},{"location":"tools/typescript-sdk/guides/vaas-protocols/#vaa-structure","title":"VAA Structure","text":"<p>Understanding the structure of VAAs is fundamental to working with Wormhole's SDKs. Each section of the VAA\u2014Header, Envelope, and Payload\u2014serves a specific role:</p> Section Description Header Includes the version and guardian signature information required to verify the VAA. Envelope Contains metadata about the emitted message, such as the emitter chain, emitter address, and timestamp. Payload Represents the actual message, in raw bytes, without a length prefix. <p>The VAA's body combines the Envelope and Payload. The Wormhole Guardians signed the core data and hashed (using <code>keccak256</code>) to generate the VAA's unique identifier.</p> <p>When integrating protocols like Wrapped Token Transfers (WTT) or Wormhole Relayer:</p> <ul> <li>The TypeScript SDK handles VAAs off-chain, focusing on deserialization, validation, and payload extraction before submission.</li> <li>The Solidity SDK processes VAAs on-chain, using libraries like <code>VaaLib</code> to decode and execute protocol actions.</li> </ul>"},{"location":"tools/typescript-sdk/guides/vaas-protocols/#vaas-in-protocol-contexts","title":"VAAs in Protocol Contexts","text":""},{"location":"tools/typescript-sdk/guides/vaas-protocols/#how-vaas-enable-protocol-specific-messaging","title":"How VAAs Enable Protocol-Specific Messaging","text":"<p>VAAs are the backbone of Wormhole's cross-chain communication, encapsulating critical protocol payloads that drive actions on different blockchains. Each protocol\u2014such as WTT, Wormhole Relayer, or Circle CCTP\u2014uses VAAs to securely transmit its messages across chains.</p> <p>Examples of mapping protocols to VAAs:</p> Protocol Payload Purpose Example WTT Transfers token data and metadata. Token transfer or redemption. Wormhole Relayer Manages delivery instructions for messages across chains. Delivery fee or refund handling. Circle CCTP Facilitates stablecoin mint-and-burn operations. Circle-issued stablecoin transfer. <p>Each protocol integrates its payload format into the VAA structure, ensuring consistent message validation and execution across the ecosystem.</p>"},{"location":"tools/typescript-sdk/guides/vaas-protocols/#typescript-sdk-off-chain-handling-of-vaas","title":"TypeScript SDK: Off-Chain Handling of VAAs","text":"<p>The TypeScript SDK is designed for off-chain operations like reading, validating, and manipulating VAAs before submitting them to a chain. Developers can easily deserialize VAAs to extract protocol payloads and prepare actions such as initiating token transfers or constructing delivery instructions.</p> <p>In the example below, we use the real <code>envelopeLayout</code> from Wormhole's TS SDK to deserialize and extract essential information like the emitter chain, sequence, and consistency (finality) level:</p> <pre><code>import { deserializeLayout } from '@wormhole-foundation/sdk-base';\nimport {\n  universalAddressItem,\n  sequenceItem,\n} from '@wormhole-foundation/core/layout-items/index.js';\n\nexport const envelopeLayout = [\n  { name: 'timestamp', binary: 'uint', size: 4 },\n  { name: 'nonce', binary: 'uint', size: 4 },\n  { name: 'emitterChain', binary: 'uint', size: 2 },\n  { name: 'emitterAddress', ...universalAddressItem },\n  { name: 'sequence', ...sequenceItem },\n  { name: 'consistencyLevel', binary: 'uint', size: 1 },\n] as const satisfies Layout;\n\nconst encodedEnvelope = new Uint8Array([\n  /* binary envelope data */\n]);\nconst deserializedEnvelope = deserializeLayout(envelopeLayout, encodedEnvelope);\n</code></pre> <p>For more details, you can refer to the parseVAA example in the Wormhole SDK repository.</p>"},{"location":"tools/typescript-sdk/guides/vaas-protocols/#solidity-sdk-on-chain-handling-of-vaas","title":"Solidity SDK: On-Chain Handling of VAAs","text":"<p>The Solidity SDK enables on-chain processing of VAAs directly within smart contracts. This is essential for real-time validation, decoding, and execution of protocol-specific payloads. Developers can use libraries like <code>VaaLib</code> to parse the VAA header and payload, ensuring the message is authentic and consistent with Wormhole's validation.</p> <p>Below is an example of parsing an envelope on-chain using the Solidity SDK:</p> <pre><code>// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.19;\n\nimport {VaaLib} from \"wormhole-sdk/libraries/VaaLib.sol\";\n\ncontract EnvelopeParser {\n    using VaaLib for bytes;\n\n    function parseEnvelope(\n        bytes memory encodedVaa\n    )\n        public\n        pure\n        returns (\n            uint32 timestamp,\n            uint32 nonce,\n            uint16 emitterChainId,\n            bytes32 emitterAddress,\n            uint64 sequence,\n            uint8 consistencyLevel\n        )\n    {\n        // Skip the header and decode the envelope\n        uint offset = VaaLib.skipVaaHeaderMemUnchecked(encodedVaa, 0);\n        return VaaLib.decodeVaaEnvelopeMemUnchecked(encodedVaa, offset);\n    }\n}\n</code></pre>"}]}